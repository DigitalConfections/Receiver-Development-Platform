
RDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003cc  00800100  00004914  000049c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004914  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000271  008004cc  008004cc  00004d94  2**0
                  ALLOC
  3 .eeprom       0000003d  00810000  00810000  00004d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00004dd1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e30  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000555f  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001073  00000000  00000000  0000a547  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004881  00000000  00000000  0000b5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ec0  00000000  00000000  0000fe3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00013fc8  00000000  00000000  00010cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000049fa  00000000  00000000  00024cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000108  00000000  00000000  000296be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00005411  00000000  00000000  000297c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c0       	rjmp	.+148    	; 0xa2 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_4>
      14:	46 c0       	rjmp	.+140    	; 0xa2 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_6>
      1c:	42 c0       	rjmp	.+132    	; 0xa2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	00 c7       	rjmp	.+3584   	; 0xe22 <__vector_8>
      22:	00 00       	nop
      24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c0       	rjmp	.+120    	; 0xa2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c0       	rjmp	.+116    	; 0xa2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c0       	rjmp	.+112    	; 0xa2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c0       	rjmp	.+108    	; 0xa2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c0       	rjmp	.+104    	; 0xa2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c0       	rjmp	.+100    	; 0xa2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c0       	rjmp	.+96     	; 0xa2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c0       	rjmp	.+92     	; 0xa2 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_18>
      4c:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__vector_19>
      50:	28 c0       	rjmp	.+80     	; 0xa2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c0       	rjmp	.+72     	; 0xa2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c0       	rjmp	.+68     	; 0xa2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	20 c0       	rjmp	.+64     	; 0xa2 <__bad_interrupt>
      62:	00 00       	nop
      64:	1e c0       	rjmp	.+60     	; 0xa2 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e1       	ldi	r30, 0x14	; 20
      7c:	f9 e4       	ldi	r31, 0x49	; 73
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3c       	cpi	r26, 0xCC	; 204
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	ac ec       	ldi	r26, 0xCC	; 204
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 33       	cpi	r26, 0x3D	; 61
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <main>
      9e:	0c 94 88 24 	jmp	0x4910	; 0x4910 <_exit>

000000a2 <__bad_interrupt>:
      a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <nextFullTxBuffer>:
static volatile BOOL linkbus_tx_active = FALSE; // volatile is required to ensure optimizer handles this properly
static LinkbusTxBuffer tx_buffer[LINKBUS_NUMBER_OF_TX_MSG_BUFFERS];
static LinkbusRxBuffer rx_buffer[LINKBUS_NUMBER_OF_RX_MSG_BUFFERS];

LinkbusTxBuffer* nextFullTxBuffer(void)
{
      a4:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <bufferIndex.2527>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] == '\0')
      a8:	94 e0       	ldi	r25, 0x04	; 4
      aa:	5b e4       	ldi	r21, 0x4B	; 75
      ac:	06 c0       	rjmp	.+12     	; 0xba <nextFullTxBuffer+0x16>
      ae:	91 50       	subi	r25, 0x01	; 1
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
      b0:	89 f0       	breq	.+34     	; 0xd4 <nextFullTxBuffer+0x30>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
      b2:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
      b4:	84 30       	cpi	r24, 0x04	; 4
      b6:	08 f0       	brcs	.+2      	; 0xba <nextFullTxBuffer+0x16>
		{
			bufferIndex = 0;
      b8:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] == '\0')
      ba:	28 2f       	mov	r18, r24
      bc:	30 e0       	ldi	r19, 0x00	; 0
      be:	52 9f       	mul	r21, r18
      c0:	f0 01       	movw	r30, r0
      c2:	53 9f       	mul	r21, r19
      c4:	f0 0d       	add	r31, r0
      c6:	11 24       	eor	r1, r1
      c8:	ec 5a       	subi	r30, 0xAC	; 172
      ca:	fa 4f       	sbci	r31, 0xFA	; 250
      cc:	40 81       	ld	r20, Z
      ce:	44 23       	and	r20, r20
      d0:	71 f3       	breq	.-36     	; 0xae <nextFullTxBuffer+0xa>
      d2:	05 c0       	rjmp	.+10     	; 0xde <nextFullTxBuffer+0x3a>
      d4:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <bufferIndex.2527>
	if(found)
	{
		return( &tx_buffer[bufferIndex]);
	}

	return(NULL);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	08 95       	ret
      de:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <bufferIndex.2527>
		}
	}

	if(found)
	{
		return( &tx_buffer[bufferIndex]);
      e2:	4b e4       	ldi	r20, 0x4B	; 75
      e4:	42 9f       	mul	r20, r18
      e6:	c0 01       	movw	r24, r0
      e8:	43 9f       	mul	r20, r19
      ea:	90 0d       	add	r25, r0
      ec:	11 24       	eor	r1, r1
      ee:	8c 5a       	subi	r24, 0xAC	; 172
      f0:	9a 4f       	sbci	r25, 0xFA	; 250
	}

	return(NULL);
}
      f2:	08 95       	ret

000000f4 <nextEmptyTxBuffer>:

LinkbusTxBuffer* nextEmptyTxBuffer(void)
{
      f4:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <bufferIndex.2536>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] != '\0')
      f8:	94 e0       	ldi	r25, 0x04	; 4
      fa:	5b e4       	ldi	r21, 0x4B	; 75
      fc:	06 c0       	rjmp	.+12     	; 0x10a <nextEmptyTxBuffer+0x16>
      fe:	91 50       	subi	r25, 0x01	; 1
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     100:	89 f0       	breq	.+34     	; 0x124 <nextEmptyTxBuffer+0x30>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     102:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     104:	84 30       	cpi	r24, 0x04	; 4
     106:	08 f0       	brcs	.+2      	; 0x10a <nextEmptyTxBuffer+0x16>
		{
			bufferIndex = 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] != '\0')
     10a:	28 2f       	mov	r18, r24
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	52 9f       	mul	r21, r18
     110:	f0 01       	movw	r30, r0
     112:	53 9f       	mul	r21, r19
     114:	f0 0d       	add	r31, r0
     116:	11 24       	eor	r1, r1
     118:	ec 5a       	subi	r30, 0xAC	; 172
     11a:	fa 4f       	sbci	r31, 0xFA	; 250
     11c:	40 81       	ld	r20, Z
     11e:	41 11       	cpse	r20, r1
     120:	ee cf       	rjmp	.-36     	; 0xfe <nextEmptyTxBuffer+0xa>
     122:	05 c0       	rjmp	.+10     	; 0x12e <nextEmptyTxBuffer+0x3a>
     124:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <bufferIndex.2536>
	if(found)
	{
		return( &tx_buffer[bufferIndex]);
	}

	return(NULL);
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	08 95       	ret
     12e:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <bufferIndex.2536>
		}
	}

	if(found)
	{
		return( &tx_buffer[bufferIndex]);
     132:	4b e4       	ldi	r20, 0x4B	; 75
     134:	42 9f       	mul	r20, r18
     136:	c0 01       	movw	r24, r0
     138:	43 9f       	mul	r20, r19
     13a:	90 0d       	add	r25, r0
     13c:	11 24       	eor	r1, r1
     13e:	8c 5a       	subi	r24, 0xAC	; 172
     140:	9a 4f       	sbci	r25, 0xFA	; 250
	}

	return(NULL);
}
     142:	08 95       	ret

00000144 <nextEmptyRxBuffer>:

LinkbusRxBuffer* nextEmptyRxBuffer(void)
{
     144:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <bufferIndex.2545>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     148:	28 2f       	mov	r18, r24
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	92 e4       	ldi	r25, 0x42	; 66
     14e:	89 9f       	mul	r24, r25
     150:	f0 01       	movw	r30, r0
     152:	11 24       	eor	r1, r1
     154:	e0 53       	subi	r30, 0x30	; 48
     156:	fb 4f       	sbci	r31, 0xFB	; 251
     158:	41 81       	ldd	r20, Z+1	; 0x01
     15a:	52 81       	ldd	r21, Z+2	; 0x02
     15c:	45 2b       	or	r20, r21
     15e:	a9 f0       	breq	.+42     	; 0x18a <nextEmptyRxBuffer+0x46>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     160:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	08 f0       	brcs	.+2      	; 0x168 <nextEmptyRxBuffer+0x24>
		{
			bufferIndex = 0;
     166:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	92 e4       	ldi	r25, 0x42	; 66
     16e:	89 9f       	mul	r24, r25
     170:	f0 01       	movw	r30, r0
     172:	11 24       	eor	r1, r1
     174:	e0 53       	subi	r30, 0x30	; 48
     176:	fb 4f       	sbci	r31, 0xFB	; 251
     178:	41 81       	ldd	r20, Z+1	; 0x01
     17a:	52 81       	ldd	r21, Z+2	; 0x02
     17c:	45 2b       	or	r20, r21
     17e:	29 f0       	breq	.+10     	; 0x18a <nextEmptyRxBuffer+0x46>
     180:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <bufferIndex.2545>
	if(found)
	{
		return( &rx_buffer[bufferIndex]);
	}

	return(NULL);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	08 95       	ret
     18a:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <bufferIndex.2545>
		}
	}

	if(found)
	{
		return( &rx_buffer[bufferIndex]);
     18e:	42 e4       	ldi	r20, 0x42	; 66
     190:	42 9f       	mul	r20, r18
     192:	c0 01       	movw	r24, r0
     194:	43 9f       	mul	r20, r19
     196:	90 0d       	add	r25, r0
     198:	11 24       	eor	r1, r1
     19a:	80 53       	subi	r24, 0x30	; 48
     19c:	9b 4f       	sbci	r25, 0xFB	; 251
	}

	return(NULL);
}
     19e:	08 95       	ret

000001a0 <nextFullRxBuffer>:

LinkbusRxBuffer* nextFullRxBuffer(void)
{
     1a0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__data_end>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     1a4:	28 2f       	mov	r18, r24
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	92 e4       	ldi	r25, 0x42	; 66
     1aa:	89 9f       	mul	r24, r25
     1ac:	f0 01       	movw	r30, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	e0 53       	subi	r30, 0x30	; 48
     1b2:	fb 4f       	sbci	r31, 0xFB	; 251
     1b4:	41 81       	ldd	r20, Z+1	; 0x01
     1b6:	52 81       	ldd	r21, Z+2	; 0x02
     1b8:	45 2b       	or	r20, r21
     1ba:	a9 f4       	brne	.+42     	; 0x1e6 <nextFullRxBuffer+0x46>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     1bc:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	08 f0       	brcs	.+2      	; 0x1c4 <nextFullRxBuffer+0x24>
		{
			bufferIndex = 0;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     1c4:	28 2f       	mov	r18, r24
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	92 e4       	ldi	r25, 0x42	; 66
     1ca:	89 9f       	mul	r24, r25
     1cc:	f0 01       	movw	r30, r0
     1ce:	11 24       	eor	r1, r1
     1d0:	e0 53       	subi	r30, 0x30	; 48
     1d2:	fb 4f       	sbci	r31, 0xFB	; 251
     1d4:	41 81       	ldd	r20, Z+1	; 0x01
     1d6:	52 81       	ldd	r21, Z+2	; 0x02
     1d8:	45 2b       	or	r20, r21
     1da:	29 f4       	brne	.+10     	; 0x1e6 <nextFullRxBuffer+0x46>
     1dc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__data_end>
	if(found)
	{
		return( &rx_buffer[bufferIndex]);
	}

	return(NULL);
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	08 95       	ret
     1e6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__data_end>
		}
	}

	if(found)
	{
		return( &rx_buffer[bufferIndex]);
     1ea:	42 e4       	ldi	r20, 0x42	; 66
     1ec:	42 9f       	mul	r20, r18
     1ee:	c0 01       	movw	r24, r0
     1f0:	43 9f       	mul	r20, r19
     1f2:	90 0d       	add	r25, r0
     1f4:	11 24       	eor	r1, r1
     1f6:	80 53       	subi	r24, 0x30	; 48
     1f8:	9b 4f       	sbci	r25, 0xFB	; 251
	}

	return(NULL);
}
     1fa:	08 95       	ret

000001fc <linkbusTxInProgress>:
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     1fc:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <linkbus_tx_active>
}
     200:	08 95       	ret

00000202 <linkbus_start_tx>:

BOOL linkbus_start_tx(void)
{
	BOOL success = !linkbus_tx_active;
     202:	90 91 80 06 	lds	r25, 0x0680	; 0x800680 <linkbus_tx_active>
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	91 11       	cpse	r25, r1
     20a:	80 e0       	ldi	r24, 0x00	; 0

	if(success) /* message will be lost if transmit is busy */
     20c:	91 11       	cpse	r25, r1
     20e:	08 c0       	rjmp	.+16     	; 0x220 <linkbus_start_tx+0x1e>
	{
		linkbus_tx_active = TRUE;
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	90 93 80 06 	sts	0x0680, r25	; 0x800680 <linkbus_tx_active>
		UCSR0B |= (1 << UDRIE0);
     216:	e1 ec       	ldi	r30, 0xC1	; 193
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	90 81       	ld	r25, Z
     21c:	90 62       	ori	r25, 0x20	; 32
     21e:	90 83       	st	Z, r25
	}

	return(success);
}
     220:	08 95       	ret

00000222 <linkbus_end_tx>:

void linkbus_end_tx(void)
{
	if(linkbus_tx_active)
     222:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <linkbus_tx_active>
     226:	88 23       	and	r24, r24
     228:	39 f0       	breq	.+14     	; 0x238 <linkbus_end_tx+0x16>
	{
		UCSR0B &= ~(1 << UDRIE0);
     22a:	e1 ec       	ldi	r30, 0xC1	; 193
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	8f 7d       	andi	r24, 0xDF	; 223
     232:	80 83       	st	Z, r24
		linkbus_tx_active = FALSE;
     234:	10 92 80 06 	sts	0x0680, r1	; 0x800680 <linkbus_tx_active>
     238:	08 95       	ret

0000023a <linkbus_reset_rx>:
	}
}

void linkbus_reset_rx(void)
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
	if(UCSR0B & (1 << RXEN0))   /* perform only if rx is currently enabled */
     23e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     242:	84 ff       	sbrs	r24, 4
     244:	0f c0       	rjmp	.+30     	; 0x264 <linkbus_reset_rx+0x2a>
	{
		UCSR0B &= ~(1 << RXEN0);
     246:	e1 ec       	ldi	r30, 0xC1	; 193
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	8f 7e       	andi	r24, 0xEF	; 239
     24e:	80 83       	st	Z, r24
/*		uint16_t s = sizeof(rx_buffer); // test */
		memset(rx_buffer, 0, sizeof(rx_buffer));
     250:	84 e8       	ldi	r24, 0x84	; 132
     252:	a0 ed       	ldi	r26, 0xD0	; 208
     254:	b4 e0       	ldi	r27, 0x04	; 4
     256:	ed 01       	movw	r28, r26
     258:	19 92       	st	Y+, r1
     25a:	8a 95       	dec	r24
     25c:	e9 f7       	brne	.-6      	; 0x258 <linkbus_reset_rx+0x1e>
/*		if(s) s = 0; // test */
		UCSR0B |= (1 << RXEN0);
     25e:	80 81       	ld	r24, Z
     260:	80 61       	ori	r24, 0x10	; 16
     262:	80 83       	st	Z, r24
	}
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <linkbus_init>:

void linkbus_init(void)
{
	memset(rx_buffer, 0, sizeof(rx_buffer));
     26a:	84 e8       	ldi	r24, 0x84	; 132
     26c:	e0 ed       	ldi	r30, 0xD0	; 208
     26e:	f4 e0       	ldi	r31, 0x04	; 4
     270:	df 01       	movw	r26, r30
     272:	1d 92       	st	X+, r1
     274:	8a 95       	dec	r24
     276:	e9 f7       	brne	.-6      	; 0x272 <linkbus_init+0x8>
	/*Set baud rate */
	UBRR0H = ((unsigned char)(MYUBRR >> 8));
     278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)MYUBRR;
     27c:	83 e3       	ldi	r24, 0x33	; 51
     27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter and related interrupts */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     282:	88 e9       	ldi	r24, 0x98	; 152
     284:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/*	UCSR0B = (1<<RXEN0) | (1<<TXEN0); */
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     288:	8e e0       	ldi	r24, 0x0E	; 14
     28a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     28e:	08 95       	ret

00000290 <linkbus_send_text>:
		linkbus_send_text((char*)crlf);
	}
}

BOOL linkbus_send_text(char* text)
{
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
	BOOL err = TRUE;

	if(text)
     294:	00 97       	sbiw	r24, 0x00	; 0
     296:	61 f0       	breq	.+24     	; 0x2b0 <linkbus_send_text+0x20>
     298:	ec 01       	movw	r28, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     29a:	2c df       	rcall	.-424    	; 0xf4 <nextEmptyTxBuffer>

		while(!buff)
     29c:	00 97       	sbiw	r24, 0x00	; 0
     29e:	51 f4       	brne	.+20     	; 0x2b4 <linkbus_send_text+0x24>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     2a0:	90 91 80 06 	lds	r25, 0x0680	; 0x800680 <linkbus_tx_active>
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff)
		{
			while(linkbusTxInProgress())
     2a4:	91 11       	cpse	r25, r1
			{
				;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
     2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <linkbus_send_text+0x10>
     2a8:	25 df       	rcall	.-438    	; 0xf4 <nextEmptyTxBuffer>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff)
     2aa:	00 97       	sbiw	r24, 0x00	; 0
     2ac:	c9 f3       	breq	.-14     	; 0x2a0 <linkbus_send_text+0x10>
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <linkbus_send_text+0x24>
	}
}

BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0c c0       	rjmp	.+24     	; 0x2cc <linkbus_send_text+0x3c>
			buff = nextEmptyTxBuffer();
		}

		if(buff)
		{
			sprintf(*buff, text);
     2b4:	df 93       	push	r29
     2b6:	cf 93       	push	r28
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>

			linkbus_start_tx();
     2c0:	a0 df       	rcall	.-192    	; 0x202 <linkbus_start_tx>
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
			err = FALSE;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return(err);
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28

void lb_send_WDTError(void)
{
	linkbus_send_text((char*)textWDT);
     2d0:	08 95       	ret

000002d2 <lb_send_WDTError>:
     2d2:	8c e4       	ldi	r24, 0x4C	; 76
     2d4:	93 e0       	ldi	r25, 0x03	; 3
     2d6:	dc cf       	rjmp	.-72     	; 0x290 <linkbus_send_text>
 *  Support for creating and sending various Terminal Mode Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_NewPrompt(void)
{
	linkbus_send_text((char*)textPrompt);
     2d8:	08 95       	ret

000002da <lb_send_NewPrompt>:
     2da:	80 e6       	ldi	r24, 0x60	; 96
     2dc:	93 e0       	ldi	r25, 0x03	; 3
     2de:	d8 cf       	rjmp	.-80     	; 0x290 <linkbus_send_text>
}

void lb_send_NewLine(void)
{
	linkbus_send_text((char*)crlf);
     2e0:	08 95       	ret

000002e2 <lb_send_NewLine>:
     2e2:	86 e6       	ldi	r24, 0x66	; 102
     2e4:	93 e0       	ldi	r25, 0x03	; 3
     2e6:	d4 cf       	rjmp	.-88     	; 0x290 <linkbus_send_text>
     2e8:	08 95       	ret

000002ea <lb_send_Help>:

/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
#ifdef DEBUG_FUNCTIONS_ENABLE
	sprintf(g_tempMsgBuff, "\n*** %s Debug Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
#else
	sprintf(g_tempMsgBuff, "\n*** %s Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
     2f2:	87 e7       	ldi	r24, 0x77	; 119
     2f4:	93 e0       	ldi	r25, 0x03	; 3
     2f6:	9f 93       	push	r25
     2f8:	8f 93       	push	r24
     2fa:	8e e7       	ldi	r24, 0x7E	; 126
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	86 e9       	ldi	r24, 0x96	; 150
     304:	93 e0       	ldi	r25, 0x03	; 3
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	81 e8       	ldi	r24, 0x81	; 129
     30c:	96 e0       	ldi	r25, 0x06	; 6
     30e:	9f 93       	push	r25
     310:	8f 93       	push	r24
     312:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
#endif
	
	while(linkbus_send_text(g_tempMsgBuff)); 
     316:	8d b7       	in	r24, 0x3d	; 61
     318:	9e b7       	in	r25, 0x3e	; 62
     31a:	08 96       	adiw	r24, 0x08	; 8
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	9e bf       	out	0x3e, r25	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	8d bf       	out	0x3d, r24	; 61
     326:	81 e8       	ldi	r24, 0x81	; 129
     328:	96 e0       	ldi	r25, 0x06	; 6
     32a:	b2 df       	rcall	.-156    	; 0x290 <linkbus_send_text>
     32c:	81 11       	cpse	r24, r1
     32e:	fb cf       	rjmp	.-10     	; 0x326 <lb_send_Help+0x3c>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     330:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <linkbus_tx_active>
#else
	sprintf(g_tempMsgBuff, "\n*** %s Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
#endif
	
	while(linkbus_send_text(g_tempMsgBuff)); 
	while(linkbusTxInProgress());
     334:	81 11       	cpse	r24, r1
     336:	fc cf       	rjmp	.-8      	; 0x330 <lb_send_Help+0x46>
     338:	c4 e4       	ldi	r28, 0x44	; 68
     33a:	d1 e0       	ldi	r29, 0x01	; 1
     33c:	0c e4       	ldi	r16, 0x4C	; 76
	
	for(int i=0; i<13; i++)
	{
		while(linkbus_send_text((char*)textHelp[i])); 
     33e:	13 e0       	ldi	r17, 0x03	; 3
     340:	ce 01       	movw	r24, r28
     342:	a6 df       	rcall	.-180    	; 0x290 <linkbus_send_text>
     344:	81 11       	cpse	r24, r1
     346:	fc cf       	rjmp	.-8      	; 0x340 <lb_send_Help+0x56>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     348:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <linkbus_tx_active>
	while(linkbusTxInProgress());
	
	for(int i=0; i<13; i++)
	{
		while(linkbus_send_text((char*)textHelp[i])); 
		while(linkbusTxInProgress());
     34c:	81 11       	cpse	r24, r1
     34e:	fc cf       	rjmp	.-8      	; 0x348 <lb_send_Help+0x5e>
#endif
	
	while(linkbus_send_text(g_tempMsgBuff)); 
	while(linkbusTxInProgress());
	
	for(int i=0; i<13; i++)
     350:	a8 96       	adiw	r28, 0x28	; 40
     352:	0c 17       	cp	r16, r28
     354:	1d 07       	cpc	r17, r29
	{
		while(linkbus_send_text((char*)textHelp[i])); 
		while(linkbusTxInProgress());
	}
	
	lb_send_NewLine();
     356:	a1 f7       	brne	.-24     	; 0x340 <lb_send_Help+0x56>
     358:	c4 df       	rcall	.-120    	; 0x2e2 <lb_send_NewLine>
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	08 95       	ret

00000364 <linkbus_setLineTerm>:
	linkbus_send_text((char*)crlf);
}

void linkbus_setLineTerm(char* term)
{
	sprintf(lineTerm, term);
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
}
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
}

void linkbus_setTerminalMode(BOOL on)
{
	g_lb_terminal_mode = on;
     37c:	08 95       	ret

0000037e <linkbus_setTerminalMode>:
     37e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_lb_terminal_mode>

	if(g_lb_terminal_mode)
     382:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
	{
		linkbus_setLineTerm("\n");
     386:	88 23       	and	r24, r24
     388:	39 f0       	breq	.+14     	; 0x398 <linkbus_setTerminalMode+0x1a>
     38a:	82 eb       	ldi	r24, 0xB2	; 178
		linkbus_send_text(lineTerm);
     38c:	94 e0       	ldi	r25, 0x04	; 4
     38e:	ea df       	rcall	.-44     	; 0x364 <linkbus_setLineTerm>
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	91 e0       	ldi	r25, 0x01	; 1
	}
	else
	{
		linkbus_send_text((char*)crlf);
     394:	7d cf       	rjmp	.-262    	; 0x290 <linkbus_send_text>
     396:	08 95       	ret
     398:	86 e6       	ldi	r24, 0x66	; 102
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	79 cf       	rjmp	.-270    	; 0x290 <linkbus_send_text>
	sprintf(lineTerm, term);
}

void lb_echo_char(uint8_t c)
{
	g_tempMsgBuff[0] = c;
     39e:	08 95       	ret

000003a0 <lb_echo_char>:
     3a0:	e1 e8       	ldi	r30, 0x81	; 129
     3a2:	f6 e0       	ldi	r31, 0x06	; 6
	g_tempMsgBuff[1] = '\0';
     3a4:	80 83       	st	Z, r24
	linkbus_send_text(g_tempMsgBuff);
     3a6:	11 82       	std	Z+1, r1	; 0x01
     3a8:	cf 01       	movw	r24, r30
     3aa:	72 cf       	rjmp	.-284    	; 0x290 <linkbus_send_text>
     3ac:	08 95       	ret

000003ae <lb_poweroff_msg>:
}

void lb_poweroff_msg(uint8_t sec)
{
	sprintf(g_tempMsgBuff, "Power off in %d sec\n", sec);
     3ae:	1f 92       	push	r1
     3b0:	8f 93       	push	r24
     3b2:	8a ea       	ldi	r24, 0xAA	; 170
     3b4:	93 e0       	ldi	r25, 0x03	; 3
     3b6:	9f 93       	push	r25
     3b8:	8f 93       	push	r24
     3ba:	81 e8       	ldi	r24, 0x81	; 129
     3bc:	96 e0       	ldi	r25, 0x06	; 6
     3be:	9f 93       	push	r25
     3c0:	8f 93       	push	r24
     3c2:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     3c6:	81 e8       	ldi	r24, 0x81	; 129
     3c8:	96 e0       	ldi	r25, 0x06	; 6
     3ca:	62 df       	rcall	.-316    	; 0x290 <linkbus_send_text>
}
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	08 95       	ret

000003da <lb_send_value>:

void lb_send_value(uint16_t value, char* label)
{
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	31 e0       	ldi	r19, 0x01	; 1
     3de:	3f 93       	push	r19
     3e0:	2f 93       	push	r18
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	7f 93       	push	r23
     3e8:	6f 93       	push	r22
     3ea:	8f eb       	ldi	r24, 0xBF	; 191
     3ec:	93 e0       	ldi	r25, 0x03	; 3
     3ee:	9f 93       	push	r25
     3f0:	8f 93       	push	r24
     3f2:	81 e8       	ldi	r24, 0x81	; 129
     3f4:	96 e0       	ldi	r25, 0x06	; 6
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     3fe:	81 e8       	ldi	r24, 0x81	; 129
     400:	96 e0       	ldi	r25, 0x06	; 6
     402:	46 df       	rcall	.-372    	; 0x290 <linkbus_send_text>
}
     404:	8d b7       	in	r24, 0x3d	; 61
     406:	9e b7       	in	r25, 0x3e	; 62
     408:	0a 96       	adiw	r24, 0x0a	; 10
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	9e bf       	out	0x3e, r25	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	8d bf       	out	0x3d, r24	; 61
     414:	08 95       	ret

00000416 <lb_send_FRE>:
/***********************************************************************************
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	2a 97       	sbiw	r28, 0x0a	; 10
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	18 2f       	mov	r17, r24
     430:	02 2f       	mov	r16, r18
	BOOL valid = TRUE;
	char f[10] = "\0";
     432:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <xtal_freq+0x4>
     436:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <xtal_freq+0x5>
     43a:	9a 83       	std	Y+2, r25	; 0x02
     43c:	89 83       	std	Y+1, r24	; 0x01
     43e:	fe 01       	movw	r30, r28
     440:	33 96       	adiw	r30, 0x03	; 3
     442:	88 e0       	ldi	r24, 0x08	; 8
     444:	df 01       	movw	r26, r30
     446:	1d 92       	st	X+, r1
     448:	8a 95       	dec	r24
     44a:	e9 f7       	brne	.-6      	; 0x446 <lb_send_FRE+0x30>
	char prefix = '$';
	char terminus = ';';

	if(freq != FREQUENCY_NOT_SPECIFIED)
     44c:	41 15       	cp	r20, r1
     44e:	51 05       	cpc	r21, r1
     450:	61 05       	cpc	r22, r1
     452:	71 05       	cpc	r23, r1
     454:	59 f1       	breq	.+86     	; 0x4ac <lb_send_FRE+0x96>
	{
		if(freq < ILLEGAL_MEMORY)   /* Memory locations are MEM1, MEM2, MEM3, ... ILLEGAL_MEMORY-1 */
     456:	46 30       	cpi	r20, 0x06	; 6
     458:	51 05       	cpc	r21, r1
     45a:	61 05       	cpc	r22, r1
     45c:	71 05       	cpc	r23, r1
     45e:	98 f4       	brcc	.+38     	; 0x486 <lb_send_FRE+0x70>
		{
			sprintf(f, "M%d", (int)freq);
     460:	5f 93       	push	r21
     462:	4f 93       	push	r20
     464:	8b ec       	ldi	r24, 0xCB	; 203
     466:	93 e0       	ldi	r25, 0x03	; 3
     468:	9f 93       	push	r25
     46a:	8f 93       	push	r24
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	9f 93       	push	r25
     472:	8f 93       	push	r24
     474:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	13 c0       	rjmp	.+38     	; 0x4ac <lb_send_FRE+0x96>
		}
		else
		{
			sprintf(f, "%ld", freq);
     486:	7f 93       	push	r23
     488:	6f 93       	push	r22
     48a:	5f 93       	push	r21
     48c:	4f 93       	push	r20
     48e:	8f ec       	ldi	r24, 0xCF	; 207
     490:	93 e0       	ldi	r25, 0x03	; 3
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	ce 01       	movw	r24, r28
     498:	01 96       	adiw	r24, 0x01	; 1
     49a:	9f 93       	push	r25
     49c:	8f 93       	push	r24
     49e:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
     4ac:	13 30       	cpi	r17, 0x03	; 3
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <lb_send_FRE+0x9c>
     4b0:	63 c0       	rjmp	.+198    	; 0x578 <lb_send_FRE+0x162>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     4b2:	12 30       	cpi	r17, 0x02	; 2
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <lb_send_FRE+0xa2>
     4b6:	63 c0       	rjmp	.+198    	; 0x57e <lb_send_FRE+0x168>
	else if(msgType != LINKBUS_MSG_COMMAND)
	{
		valid = FALSE;
	}

	if(valid)
     4b8:	11 30       	cpi	r17, 0x01	; 1
     4ba:	09 f0       	breq	.+2      	; 0x4be <lb_send_FRE+0xa8>
     4bc:	63 c0       	rjmp	.+198    	; 0x584 <lb_send_FRE+0x16e>
void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     4be:	8b e3       	ldi	r24, 0x3B	; 59

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
     4c0:	24 e2       	ldi	r18, 0x24	; 36
		valid = FALSE;
	}

	if(valid)
	{
		if(g_lb_terminal_mode)
     4c2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_lb_terminal_mode>
     4c6:	99 23       	and	r25, r25
     4c8:	91 f1       	breq	.+100    	; 0x52e <lb_send_FRE+0x118>
		{
			if(isMemoryValue)
     4ca:	00 23       	and	r16, r16
     4cc:	c1 f0       	breq	.+48     	; 0x4fe <lb_send_FRE+0xe8>
			{
				sprintf(g_tempMsgBuff, "> %s (MEM)%s", f, lineTerm);
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	9f 93       	push	r25
     4d4:	8f 93       	push	r24
     4d6:	ce 01       	movw	r24, r28
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	83 ed       	ldi	r24, 0xD3	; 211
     4e0:	93 e0       	ldi	r25, 0x03	; 3
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	81 e8       	ldi	r24, 0x81	; 129
     4e8:	96 e0       	ldi	r25, 0x06	; 6
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	39 c0       	rjmp	.+114    	; 0x570 <lb_send_FRE+0x15a>
			}
			else
			{
				sprintf(g_tempMsgBuff, "> %s%s", f, lineTerm);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	80 ee       	ldi	r24, 0xE0	; 224
     510:	93 e0       	ldi	r25, 0x03	; 3
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	81 e8       	ldi	r24, 0x81	; 129
     518:	96 e0       	ldi	r25, 0x06	; 6
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	21 c0       	rjmp	.+66     	; 0x570 <lb_send_FRE+0x15a>
			}
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cFRE,%s,%s%c", prefix, f, isMemoryValue ? "M" : NULL, terminus);
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	01 11       	cpse	r16, r1
     532:	03 c0       	rjmp	.+6      	; 0x53a <lb_send_FRE+0x124>
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	02 c0       	rjmp	.+4      	; 0x53e <lb_send_FRE+0x128>
     53a:	49 ec       	ldi	r20, 0xC9	; 201
     53c:	53 e0       	ldi	r21, 0x03	; 3
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	5f 93       	push	r21
     544:	4f 93       	push	r20
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	9f 93       	push	r25
     54c:	8f 93       	push	r24
     54e:	1f 92       	push	r1
     550:	2f 93       	push	r18
     552:	87 ee       	ldi	r24, 0xE7	; 231
     554:	93 e0       	ldi	r25, 0x03	; 3
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	81 e8       	ldi	r24, 0x81	; 129
     55c:	96 e0       	ldi	r25, 0x06	; 6
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
		}

		linkbus_send_text(g_tempMsgBuff);
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	81 e8       	ldi	r24, 0x81	; 129
     572:	96 e0       	ldi	r25, 0x06	; 6
     574:	8d de       	rcall	.-742    	; 0x290 <linkbus_send_text>
	}
}
     576:	06 c0       	rjmp	.+12     	; 0x584 <lb_send_FRE+0x16e>
void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     578:	8b e3       	ldi	r24, 0x3B	; 59
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     57a:	21 e2       	ldi	r18, 0x21	; 33
     57c:	a2 cf       	rjmp	.-188    	; 0x4c2 <lb_send_FRE+0xac>
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     57e:	8f e3       	ldi	r24, 0x3F	; 63

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
     580:	24 e2       	ldi	r18, 0x24	; 36
     582:	9f cf       	rjmp	.-194    	; 0x4c2 <lb_send_FRE+0xac>
			sprintf(g_tempMsgBuff, "%cFRE,%s,%s%c", prefix, f, isMemoryValue ? "M" : NULL, terminus);
		}

		linkbus_send_text(g_tempMsgBuff);
	}
}
     584:	2a 96       	adiw	r28, 0x0a	; 10
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	08 95       	ret

0000059a <lb_send_TIM>:


void lb_send_TIM(LBMessageType msgType, int32_t time)
{
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	2a 97       	sbiw	r28, 0x0a	; 10
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	18 2f       	mov	r17, r24
	BOOL valid = TRUE;
	char t[10] = "\0";
     5b2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <xtal_freq+0x4>
     5b6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <xtal_freq+0x5>
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	fe 01       	movw	r30, r28
     5c0:	33 96       	adiw	r30, 0x03	; 3
     5c2:	88 e0       	ldi	r24, 0x08	; 8
     5c4:	df 01       	movw	r26, r30
     5c6:	1d 92       	st	X+, r1
     5c8:	8a 95       	dec	r24
     5ca:	e9 f7       	brne	.-6      	; 0x5c6 <lb_send_TIM+0x2c>
	char prefix = '$';
	char terminus = ';';

	if(time != NO_TIME_SPECIFIED)
     5cc:	4f 3f       	cpi	r20, 0xFF	; 255
     5ce:	bf ef       	ldi	r27, 0xFF	; 255
     5d0:	5b 07       	cpc	r21, r27
     5d2:	6b 07       	cpc	r22, r27
     5d4:	7b 07       	cpc	r23, r27
     5d6:	e9 f0       	breq	.+58     	; 0x612 <lb_send_TIM+0x78>
	{
		if(g_lb_terminal_mode)
     5d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     5dc:	88 23       	and	r24, r24
     5de:	31 f0       	breq	.+12     	; 0x5ec <lb_send_TIM+0x52>
		{
			timeValToString(t, time, HourMinuteSecondFormat);
     5e0:	21 e0       	ldi	r18, 0x01	; 1
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 ed 15 	call	0x2bda	; 0x2bda <timeValToString>
     5ea:	13 c0       	rjmp	.+38     	; 0x612 <lb_send_TIM+0x78>
		}
		else
		{
			sprintf(t, "%ld", time);
     5ec:	7f 93       	push	r23
     5ee:	6f 93       	push	r22
     5f0:	5f 93       	push	r21
     5f2:	4f 93       	push	r20
     5f4:	8f ec       	ldi	r24, 0xCF	; 207
     5f6:	93 e0       	ldi	r25, 0x03	; 3
     5f8:	9f 93       	push	r25
     5fa:	8f 93       	push	r24
     5fc:	ce 01       	movw	r24, r28
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	9f 93       	push	r25
     602:	8f 93       	push	r24
     604:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
     612:	13 30       	cpi	r17, 0x03	; 3
     614:	09 f4       	brne	.+2      	; 0x618 <lb_send_TIM+0x7e>
     616:	40 c0       	rjmp	.+128    	; 0x698 <lb_send_TIM+0xfe>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     618:	12 30       	cpi	r17, 0x02	; 2
     61a:	09 f4       	brne	.+2      	; 0x61e <lb_send_TIM+0x84>
     61c:	40 c0       	rjmp	.+128    	; 0x69e <lb_send_TIM+0x104>
	else if(msgType != LINKBUS_MSG_COMMAND)
	{
		valid = FALSE;
	}

	if(valid)
     61e:	11 30       	cpi	r17, 0x01	; 1
     620:	09 f0       	breq	.+2      	; 0x624 <lb_send_TIM+0x8a>
     622:	40 c0       	rjmp	.+128    	; 0x6a4 <lb_send_TIM+0x10a>
void lb_send_TIM(LBMessageType msgType, int32_t time)
{
	BOOL valid = TRUE;
	char t[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     624:	2b e3       	ldi	r18, 0x3B	; 59

void lb_send_TIM(LBMessageType msgType, int32_t time)
{
	BOOL valid = TRUE;
	char t[10] = "\0";
	char prefix = '$';
     626:	94 e2       	ldi	r25, 0x24	; 36
		valid = FALSE;
	}

	if(valid)
	{
		if(g_lb_terminal_mode)
     628:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     62c:	88 23       	and	r24, r24
     62e:	c1 f0       	breq	.+48     	; 0x660 <lb_send_TIM+0xc6>
		{
			sprintf(g_tempMsgBuff, "> TIME=%s%s", t, lineTerm);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	85 ef       	ldi	r24, 0xF5	; 245
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	9f 93       	push	r25
     646:	8f 93       	push	r24
     648:	81 e8       	ldi	r24, 0x81	; 129
     64a:	96 e0       	ldi	r25, 0x06	; 6
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	f8 94       	cli
     658:	de bf       	out	0x3e, r29	; 62
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	18 c0       	rjmp	.+48     	; 0x690 <lb_send_TIM+0xf6>
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cTIM,%s%c", prefix, t, terminus);
     660:	1f 92       	push	r1
     662:	2f 93       	push	r18
     664:	9e 01       	movw	r18, r28
     666:	2f 5f       	subi	r18, 0xFF	; 255
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	3f 93       	push	r19
     66c:	2f 93       	push	r18
     66e:	1f 92       	push	r1
     670:	9f 93       	push	r25
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	94 e0       	ldi	r25, 0x04	; 4
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	81 e8       	ldi	r24, 0x81	; 129
     67c:	96 e0       	ldi	r25, 0x06	; 6
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
		}

		linkbus_send_text(g_tempMsgBuff);
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	81 e8       	ldi	r24, 0x81	; 129
     692:	96 e0       	ldi	r25, 0x06	; 6
     694:	fd dd       	rcall	.-1030   	; 0x290 <linkbus_send_text>
	}
}
     696:	06 c0       	rjmp	.+12     	; 0x6a4 <lb_send_TIM+0x10a>
void lb_send_TIM(LBMessageType msgType, int32_t time)
{
	BOOL valid = TRUE;
	char t[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     698:	2b e3       	ldi	r18, 0x3B	; 59
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     69a:	91 e2       	ldi	r25, 0x21	; 33
     69c:	c5 cf       	rjmp	.-118    	; 0x628 <lb_send_TIM+0x8e>
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     69e:	2f e3       	ldi	r18, 0x3F	; 63

void lb_send_TIM(LBMessageType msgType, int32_t time)
{
	BOOL valid = TRUE;
	char t[10] = "\0";
	char prefix = '$';
     6a0:	94 e2       	ldi	r25, 0x24	; 36
     6a2:	c2 cf       	rjmp	.-124    	; 0x628 <lb_send_TIM+0x8e>
			sprintf(g_tempMsgBuff, "%cTIM,%s%c", prefix, t, terminus);
		}

		linkbus_send_text(g_tempMsgBuff);
	}
}
     6a4:	2a 96       	adiw	r28, 0x0a	; 10
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	08 95       	ret

000006b8 <lb_send_VOL>:


void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <lb_send_VOL+0xa>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <lb_send_VOL+0xc>
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <lb_send_VOL+0xe>
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
	BOOL valid = TRUE;
	char t[2] = "\0";
     6ca:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <xtal_freq+0xe>
     6ce:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <xtal_freq+0xf>
     6d2:	3a 83       	std	Y+2, r19	; 0x02
     6d4:	29 83       	std	Y+1, r18	; 0x01
	char v[4] = "\0";
     6d6:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <xtal_freq+0x10>
     6da:	10 91 41 01 	lds	r17, 0x0141	; 0x800141 <xtal_freq+0x11>
     6de:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <xtal_freq+0x12>
     6e2:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <xtal_freq+0x13>
     6e6:	0b 83       	std	Y+3, r16	; 0x03
     6e8:	1c 83       	std	Y+4, r17	; 0x04
     6ea:	2d 83       	std	Y+5, r18	; 0x05
     6ec:	3e 83       	std	Y+6, r19	; 0x06
	char prefix = '$';
	char terminus = ';';

	if(type == TONE_VOLUME)
     6ee:	61 11       	cpse	r22, r1
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <lb_send_VOL+0x40>
	{
		t[0] = 'T';
     6f2:	94 e5       	ldi	r25, 0x54	; 84
     6f4:	99 83       	std	Y+1, r25	; 0x01
     6f6:	36 c0       	rjmp	.+108    	; 0x764 <lb_send_VOL+0xac>
	}
	else if(type == MAIN_VOLUME)
     6f8:	61 30       	cpi	r22, 0x01	; 1
     6fa:	09 f0       	breq	.+2      	; 0x6fe <lb_send_VOL+0x46>
     6fc:	5c c0       	rjmp	.+184    	; 0x7b6 <lb_send_VOL+0xfe>
	{
		t[0] = 'M';
     6fe:	9d e4       	ldi	r25, 0x4D	; 77
     700:	99 83       	std	Y+1, r25	; 0x01
     702:	30 c0       	rjmp	.+96     	; 0x764 <lb_send_VOL+0xac>

	if(valid)
	{
		if(volume < DECREMENT_VOL)
		{
			sprintf(v, "%d", volume * 10);
     704:	24 2f       	mov	r18, r20
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	a9 01       	movw	r20, r18
     70a:	44 0f       	add	r20, r20
     70c:	55 1f       	adc	r21, r21
     70e:	22 0f       	add	r18, r18
     710:	33 1f       	adc	r19, r19
     712:	22 0f       	add	r18, r18
     714:	33 1f       	adc	r19, r19
     716:	22 0f       	add	r18, r18
     718:	33 1f       	adc	r19, r19
     71a:	42 0f       	add	r20, r18
     71c:	53 1f       	adc	r21, r19
     71e:	5f 93       	push	r21
     720:	4f 93       	push	r20
     722:	8c ec       	ldi	r24, 0xCC	; 204
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	ce 01       	movw	r24, r28
     72c:	03 96       	adiw	r24, 0x03	; 3
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	09 c0       	rjmp	.+18     	; 0x756 <lb_send_VOL+0x9e>
		}
		else if(volume < VOL_NOT_SPECIFIED)
     744:	4d 30       	cpi	r20, 0x0D	; 13
     746:	38 f4       	brcc	.+14     	; 0x756 <lb_send_VOL+0x9e>
		{
			if(volume == INCREMENT_VOL)
     748:	4c 30       	cpi	r20, 0x0C	; 12
     74a:	19 f4       	brne	.+6      	; 0x752 <lb_send_VOL+0x9a>
			{
				v[0] = '+';
     74c:	8b e2       	ldi	r24, 0x2B	; 43
     74e:	8b 83       	std	Y+3, r24	; 0x03
     750:	02 c0       	rjmp	.+4      	; 0x756 <lb_send_VOL+0x9e>
			}
			else
			{
				v[0] = '-';
     752:	8d e2       	ldi	r24, 0x2D	; 45
     754:	8b 83       	std	Y+3, r24	; 0x03
			}
		}

		if(msgType == LINKBUS_MSG_REPLY)
     756:	13 30       	cpi	r17, 0x03	; 3
     758:	49 f0       	breq	.+18     	; 0x76c <lb_send_VOL+0xb4>
		{
			prefix = '!';
		}
		else if(msgType == LINKBUS_MSG_QUERY)
     75a:	12 30       	cpi	r17, 0x02	; 2
     75c:	51 f0       	breq	.+20     	; 0x772 <lb_send_VOL+0xba>
		{
			terminus = '?';
		}
		else if(msgType != LINKBUS_MSG_COMMAND)
     75e:	11 30       	cpi	r17, 0x01	; 1
     760:	51 f5       	brne	.+84     	; 0x7b6 <lb_send_VOL+0xfe>
     762:	0a c0       	rjmp	.+20     	; 0x778 <lb_send_VOL+0xc0>
     764:	18 2f       	mov	r17, r24
		valid = FALSE;
	}

	if(valid)
	{
		if(volume < DECREMENT_VOL)
     766:	4b 30       	cpi	r20, 0x0B	; 11
     768:	68 f7       	brcc	.-38     	; 0x744 <lb_send_VOL+0x8c>
     76a:	cc cf       	rjmp	.-104    	; 0x704 <lb_send_VOL+0x4c>
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
	char terminus = ';';
     76c:	8b e3       	ldi	r24, 0x3B	; 59
			}
		}

		if(msgType == LINKBUS_MSG_REPLY)
		{
			prefix = '!';
     76e:	21 e2       	ldi	r18, 0x21	; 33
     770:	05 c0       	rjmp	.+10     	; 0x77c <lb_send_VOL+0xc4>
		}
		else if(msgType == LINKBUS_MSG_QUERY)
		{
			terminus = '?';
     772:	8f e3       	ldi	r24, 0x3F	; 63
void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
     774:	24 e2       	ldi	r18, 0x24	; 36
     776:	02 c0       	rjmp	.+4      	; 0x77c <lb_send_VOL+0xc4>
	char terminus = ';';
     778:	8b e3       	ldi	r24, 0x3B	; 59
void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
     77a:	24 e2       	ldi	r18, 0x24	; 36
			valid = FALSE;
		}

		if(valid)
		{
			sprintf(g_tempMsgBuff, "%cVOL,%s,%s%c", prefix, t, v, terminus);
     77c:	1f 92       	push	r1
     77e:	8f 93       	push	r24
     780:	ce 01       	movw	r24, r28
     782:	03 96       	adiw	r24, 0x03	; 3
     784:	9f 93       	push	r25
     786:	8f 93       	push	r24
     788:	02 97       	sbiw	r24, 0x02	; 2
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	1f 92       	push	r1
     790:	2f 93       	push	r18
     792:	8c e0       	ldi	r24, 0x0C	; 12
     794:	94 e0       	ldi	r25, 0x04	; 4
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	81 e8       	ldi	r24, 0x81	; 129
     79c:	96 e0       	ldi	r25, 0x06	; 6
     79e:	9f 93       	push	r25
     7a0:	8f 93       	push	r24
     7a2:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
			linkbus_send_text(g_tempMsgBuff);
     7a6:	81 e8       	ldi	r24, 0x81	; 129
     7a8:	96 e0       	ldi	r25, 0x06	; 6
     7aa:	72 dd       	rcall	.-1308   	; 0x290 <linkbus_send_text>
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
		}
	}
}
     7b6:	26 96       	adiw	r28, 0x06	; 6
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	08 95       	ret

000007cc <lb_send_BND>:

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <lb_send_BND+0xc>
     7d8:	00 d0       	rcall	.+0      	; 0x7da <lb_send_BND+0xe>
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
	char terminus = ';';

	if(msgType == LINKBUS_MSG_REPLY)
     7de:	83 30       	cpi	r24, 0x03	; 3
     7e0:	61 f0       	breq	.+24     	; 0x7fa <lb_send_BND+0x2e>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	89 f0       	breq	.+34     	; 0x808 <lb_send_BND+0x3c>
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     7e6:	11 e0       	ldi	r17, 0x01	; 1
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	09 f0       	breq	.+2      	; 0x7ee <lb_send_BND+0x22>
     7ec:	10 e0       	ldi	r17, 0x00	; 0
	char prefix = '$';
	char terminus = ';';
     7ee:	0f 2e       	mov	r0, r31
     7f0:	fb e3       	ldi	r31, 0x3B	; 59
     7f2:	ff 2e       	mov	r15, r31
     7f4:	f0 2d       	mov	r31, r0

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
     7f6:	04 e2       	ldi	r16, 0x24	; 36
     7f8:	0d c0       	rjmp	.+26     	; 0x814 <lb_send_BND+0x48>
	char terminus = ';';
     7fa:	0f 2e       	mov	r0, r31
     7fc:	fb e3       	ldi	r31, 0x3B	; 59
     7fe:	ff 2e       	mov	r15, r31
     800:	f0 2d       	mov	r31, r0

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     802:	01 e2       	ldi	r16, 0x21	; 33
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     804:	11 e0       	ldi	r17, 0x01	; 1
     806:	06 c0       	rjmp	.+12     	; 0x814 <lb_send_BND+0x48>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     808:	0f 2e       	mov	r0, r31
     80a:	ff e3       	ldi	r31, 0x3F	; 63
     80c:	ff 2e       	mov	r15, r31
     80e:	f0 2d       	mov	r31, r0

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
     810:	04 e2       	ldi	r16, 0x24	; 36
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     812:	11 e0       	ldi	r17, 0x01	; 1
	else if(msgType != LINKBUS_MSG_COMMAND)
	{
		valid = FALSE;
	}

	if(g_lb_terminal_mode)
     814:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     818:	88 23       	and	r24, r24
     81a:	61 f0       	breq	.+24     	; 0x834 <lb_send_BND+0x68>
	{
		sprintf(b, "%s", band == BAND_2M ? "2m" : "80m");
     81c:	66 23       	and	r22, r22
     81e:	19 f0       	breq	.+6      	; 0x826 <lb_send_BND+0x5a>
     820:	6d e1       	ldi	r22, 0x1D	; 29
     822:	74 e0       	ldi	r23, 0x04	; 4
     824:	02 c0       	rjmp	.+4      	; 0x82a <lb_send_BND+0x5e>
     826:	6a e1       	ldi	r22, 0x1A	; 26
     828:	74 e0       	ldi	r23, 0x04	; 4
     82a:	ce 01       	movw	r24, r28
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	0e 94 59 21 	call	0x42b2	; 0x42b2 <strcpy>
     832:	12 c0       	rjmp	.+36     	; 0x858 <lb_send_BND+0x8c>
	}
	else
	{
		sprintf(b, "%d", band);
     834:	1f 92       	push	r1
     836:	6f 93       	push	r22
     838:	8c ec       	ldi	r24, 0xCC	; 204
     83a:	93 e0       	ldi	r25, 0x03	; 3
     83c:	9f 93       	push	r25
     83e:	8f 93       	push	r24
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
	}

	if(valid)
     858:	11 23       	and	r17, r17
     85a:	b1 f1       	breq	.+108    	; 0x8c8 <lb_send_BND+0xfc>
	{
		if(g_lb_terminal_mode)
     85c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     860:	88 23       	and	r24, r24
     862:	c1 f0       	breq	.+48     	; 0x894 <lb_send_BND+0xc8>
		{
			sprintf(g_tempMsgBuff, "> BND=%s%s", b, lineTerm);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	ce 01       	movw	r24, r28
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	81 e2       	ldi	r24, 0x21	; 33
     876:	94 e0       	ldi	r25, 0x04	; 4
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	81 e8       	ldi	r24, 0x81	; 129
     87e:	96 e0       	ldi	r25, 0x06	; 6
     880:	9f 93       	push	r25
     882:	8f 93       	push	r24
     884:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	17 c0       	rjmp	.+46     	; 0x8c2 <lb_send_BND+0xf6>
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cBND,%s%c", prefix, b, terminus);
     894:	1f 92       	push	r1
     896:	ff 92       	push	r15
     898:	ce 01       	movw	r24, r28
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	1f 92       	push	r1
     8a2:	0f 93       	push	r16
     8a4:	8c e2       	ldi	r24, 0x2C	; 44
     8a6:	94 e0       	ldi	r25, 0x04	; 4
     8a8:	9f 93       	push	r25
     8aa:	8f 93       	push	r24
     8ac:	81 e8       	ldi	r24, 0x81	; 129
     8ae:	96 e0       	ldi	r25, 0x06	; 6
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
		}

		linkbus_send_text(g_tempMsgBuff);
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	81 e8       	ldi	r24, 0x81	; 129
     8c4:	96 e0       	ldi	r25, 0x06	; 6
     8c6:	e4 dc       	rcall	.-1592   	; 0x290 <linkbus_send_text>
	}
}
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	08 95       	ret

000008dc <lb_send_BCR>:

void lb_send_BCR(LBbroadcastType bcType, BOOL start)
{
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	00 d0       	rcall	.+0      	; 0x8e4 <lb_send_BCR+0x8>
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <lb_send_BCR+0xa>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	16 2f       	mov	r17, r22
	char t[4] = "\0";
     8ec:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <xtal_freq+0x10>
     8f0:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <xtal_freq+0x11>
     8f4:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <xtal_freq+0x12>
     8f8:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <xtal_freq+0x13>
     8fc:	49 83       	std	Y+1, r20	; 0x01
     8fe:	5a 83       	std	Y+2, r21	; 0x02
     900:	6b 83       	std	Y+3, r22	; 0x03
     902:	7c 83       	std	Y+4, r23	; 0x04
	char prefix = '$';
	char terminus = ';';

	sprintf(t, "%d", bcType);
     904:	1f 92       	push	r1
     906:	8f 93       	push	r24
     908:	8c ec       	ldi	r24, 0xCC	; 204
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	ce 01       	movw	r24, r28
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>

	if(start)
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	11 23       	and	r17, r17
     92a:	11 f0       	breq	.+4      	; 0x930 <__stack+0x31>
	{
		terminus = '?';
     92c:	8f e3       	ldi	r24, 0x3F	; 63
     92e:	01 c0       	rjmp	.+2      	; 0x932 <__stack+0x33>

void lb_send_BCR(LBbroadcastType bcType, BOOL start)
{
	char t[4] = "\0";
	char prefix = '$';
	char terminus = ';';
     930:	8b e3       	ldi	r24, 0x3B	; 59
	if(start)
	{
		terminus = '?';
	}

	sprintf(g_tempMsgBuff, "%cBCR,%s%c", prefix, t, terminus);
     932:	1f 92       	push	r1
     934:	8f 93       	push	r24
     936:	ce 01       	movw	r24, r28
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	1f 92       	push	r1
     940:	84 e2       	ldi	r24, 0x24	; 36
     942:	8f 93       	push	r24
     944:	87 e3       	ldi	r24, 0x37	; 55
     946:	94 e0       	ldi	r25, 0x04	; 4
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	81 e8       	ldi	r24, 0x81	; 129
     94e:	96 e0       	ldi	r25, 0x06	; 6
     950:	9f 93       	push	r25
     952:	8f 93       	push	r24
     954:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     958:	81 e8       	ldi	r24, 0x81	; 129
     95a:	96 e0       	ldi	r25, 0x06	; 6
     95c:	99 dc       	rcall	.-1742   	; 0x290 <linkbus_send_text>
}
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	08 95       	ret

00000978 <lb_send_ID>:

void lb_send_ID(LBMessageType msgType, DeviceID myID, DeviceID otherID)
{
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	28 97       	sbiw	r28, 0x08	; 8
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	96 2f       	mov	r25, r22
     992:	14 2f       	mov	r17, r20
	char prefix = '$';
	char m[4] = "\0";
     994:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <xtal_freq+0x10>
     998:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <xtal_freq+0x11>
     99c:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <xtal_freq+0x12>
     9a0:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <xtal_freq+0x13>
     9a4:	49 83       	std	Y+1, r20	; 0x01
     9a6:	5a 83       	std	Y+2, r21	; 0x02
     9a8:	6b 83       	std	Y+3, r22	; 0x03
     9aa:	7c 83       	std	Y+4, r23	; 0x04
	char o[4] = "\0";
     9ac:	4d 83       	std	Y+5, r20	; 0x05
     9ae:	5e 83       	std	Y+6, r21	; 0x06
     9b0:	6f 83       	std	Y+7, r22	; 0x07
     9b2:	78 87       	std	Y+8, r23	; 0x08

	if(msgType == LINKBUS_MSG_REPLY)
     9b4:	83 30       	cpi	r24, 0x03	; 3
     9b6:	11 f4       	brne	.+4      	; 0x9bc <lb_send_ID+0x44>
	{
		prefix = '!';
     9b8:	01 e2       	ldi	r16, 0x21	; 33
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <lb_send_ID+0x46>
	linkbus_send_text(g_tempMsgBuff);
}

void lb_send_ID(LBMessageType msgType, DeviceID myID, DeviceID otherID)
{
	char prefix = '$';
     9bc:	04 e2       	ldi	r16, 0x24	; 36
	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
	}

	if(myID != NO_ID)
     9be:	99 23       	and	r25, r25
     9c0:	91 f0       	breq	.+36     	; 0x9e6 <lb_send_ID+0x6e>
	{
		sprintf(m, "%d", myID);
     9c2:	1f 92       	push	r1
     9c4:	9f 93       	push	r25
     9c6:	8c ec       	ldi	r24, 0xCC	; 204
     9c8:	93 e0       	ldi	r25, 0x03	; 3
     9ca:	9f 93       	push	r25
     9cc:	8f 93       	push	r24
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	9f 93       	push	r25
     9d4:	8f 93       	push	r24
     9d6:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
	}
	if(otherID != NO_ID)
     9e6:	11 23       	and	r17, r17
     9e8:	91 f0       	breq	.+36     	; 0xa0e <lb_send_ID+0x96>
	{
		sprintf(o, "%d", otherID);
     9ea:	1f 92       	push	r1
     9ec:	1f 93       	push	r17
     9ee:	8c ec       	ldi	r24, 0xCC	; 204
     9f0:	93 e0       	ldi	r25, 0x03	; 3
     9f2:	9f 93       	push	r25
     9f4:	8f 93       	push	r24
     9f6:	ce 01       	movw	r24, r28
     9f8:	05 96       	adiw	r24, 0x05	; 5
     9fa:	9f 93       	push	r25
     9fc:	8f 93       	push	r24
     9fe:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
	}

	sprintf(g_tempMsgBuff, "%cID,%s,%s;", prefix, m, o);
     a0e:	ce 01       	movw	r24, r28
     a10:	05 96       	adiw	r24, 0x05	; 5
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	04 97       	sbiw	r24, 0x04	; 4
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	1f 92       	push	r1
     a1e:	0f 93       	push	r16
     a20:	82 e4       	ldi	r24, 0x42	; 66
     a22:	94 e0       	ldi	r25, 0x04	; 4
     a24:	9f 93       	push	r25
     a26:	8f 93       	push	r24
     a28:	81 e8       	ldi	r24, 0x81	; 129
     a2a:	96 e0       	ldi	r25, 0x06	; 6
     a2c:	9f 93       	push	r25
     a2e:	8f 93       	push	r24
     a30:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     a34:	81 e8       	ldi	r24, 0x81	; 129
     a36:	96 e0       	ldi	r25, 0x06	; 6
     a38:	2b dc       	rcall	.-1962   	; 0x290 <linkbus_send_text>
}
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	28 96       	adiw	r28, 0x08	; 8
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16

void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
     a58:	08 95       	ret

00000a5a <lb_send_sync>:
     a5a:	86 e0       	ldi	r24, 0x06	; 6
     a5c:	ee e4       	ldi	r30, 0x4E	; 78
     a5e:	f4 e0       	ldi	r31, 0x04	; 4
     a60:	a1 e8       	ldi	r26, 0x81	; 129
     a62:	b6 e0       	ldi	r27, 0x06	; 6
     a64:	01 90       	ld	r0, Z+
     a66:	0d 92       	st	X+, r0
     a68:	8a 95       	dec	r24
	linkbus_send_text(g_tempMsgBuff);
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <lb_send_sync+0xa>
     a6c:	81 e8       	ldi	r24, 0x81	; 129
     a6e:	96 e0       	ldi	r25, 0x06	; 6
     a70:	0f cc       	rjmp	.-2018   	; 0x290 <linkbus_send_text>
     a72:	08 95       	ret

00000a74 <lb_broadcast_bat>:
}

void lb_broadcast_bat(uint16_t data)
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	00 d0       	rcall	.+0      	; 0xa7a <lb_broadcast_bat+0x6>
     a7a:	00 d0       	rcall	.+0      	; 0xa7c <lb_broadcast_bat+0x8>
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <lb_broadcast_bat+0xa>
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
	char t[6] = "\0";
     a82:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <xtal_freq+0x4>
     a86:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <xtal_freq+0x5>
     a8a:	3a 83       	std	Y+2, r19	; 0x02
     a8c:	29 83       	std	Y+1, r18	; 0x01
     a8e:	fe 01       	movw	r30, r28
     a90:	33 96       	adiw	r30, 0x03	; 3
     a92:	24 e0       	ldi	r18, 0x04	; 4
     a94:	df 01       	movw	r26, r30
     a96:	1d 92       	st	X+, r1
     a98:	2a 95       	dec	r18
     a9a:	e9 f7       	brne	.-6      	; 0xa96 <lb_broadcast_bat+0x22>

	sprintf(t, "%d", data);
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	8c ec       	ldi	r24, 0xCC	; 204
     aa2:	93 e0       	ldi	r25, 0x03	; 3
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>

	if(g_lb_terminal_mode)
     ab4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	88 23       	and	r24, r24
     ac6:	c1 f0       	breq	.+48     	; 0xaf8 <lb_broadcast_bat+0x84>
	{
		sprintf(g_tempMsgBuff, "> BAT=%s%s", t, lineTerm);
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	84 e5       	ldi	r24, 0x54	; 84
     ada:	94 e0       	ldi	r25, 0x04	; 4
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	81 e8       	ldi	r24, 0x81	; 129
     ae2:	96 e0       	ldi	r25, 0x06	; 6
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	14 c0       	rjmp	.+40     	; 0xb20 <lb_broadcast_bat+0xac>
	}
	else
	{
		sprintf(g_tempMsgBuff, "!B,%s;", t);
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	8f e5       	ldi	r24, 0x5F	; 95
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	81 e8       	ldi	r24, 0x81	; 129
     b0a:	96 e0       	ldi	r25, 0x06	; 6
     b0c:	9f 93       	push	r25
     b0e:	8f 93       	push	r24
     b10:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
	}

	linkbus_send_text(g_tempMsgBuff);
     b1e:	0f 90       	pop	r0
     b20:	81 e8       	ldi	r24, 0x81	; 129
     b22:	96 e0       	ldi	r25, 0x06	; 6
     b24:	b5 db       	rcall	.-2198   	; 0x290 <linkbus_send_text>
}
     b26:	26 96       	adiw	r28, 0x06	; 6
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <lb_broadcast_rssi>:

void lb_broadcast_rssi(uint16_t data)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <lb_broadcast_rssi+0x6>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <lb_broadcast_rssi+0x8>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <lb_broadcast_rssi+0xa>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
	char t[6] = "\0";
     b46:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <xtal_freq+0x4>
     b4a:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <xtal_freq+0x5>
     b4e:	3a 83       	std	Y+2, r19	; 0x02
     b50:	29 83       	std	Y+1, r18	; 0x01
     b52:	fe 01       	movw	r30, r28
     b54:	33 96       	adiw	r30, 0x03	; 3
     b56:	24 e0       	ldi	r18, 0x04	; 4
     b58:	df 01       	movw	r26, r30
     b5a:	1d 92       	st	X+, r1
     b5c:	2a 95       	dec	r18
     b5e:	e9 f7       	brne	.-6      	; 0xb5a <lb_broadcast_rssi+0x22>

	sprintf(t, "%d", data);
     b60:	9f 93       	push	r25
     b62:	8f 93       	push	r24
     b64:	8c ec       	ldi	r24, 0xCC	; 204
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>

	if(g_lb_terminal_mode)
     b78:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	88 23       	and	r24, r24
     b8a:	c1 f0       	breq	.+48     	; 0xbbc <lb_broadcast_rssi+0x84>
	{
		sprintf(g_tempMsgBuff, "> RSSI=%s%s", t, lineTerm);
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	86 e6       	ldi	r24, 0x66	; 102
     b9e:	94 e0       	ldi	r25, 0x04	; 4
     ba0:	9f 93       	push	r25
     ba2:	8f 93       	push	r24
     ba4:	81 e8       	ldi	r24, 0x81	; 129
     ba6:	96 e0       	ldi	r25, 0x06	; 6
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
	}
	else
	{
		sprintf(g_tempMsgBuff, "!S,%s;", t);
     bba:	14 c0       	rjmp	.+40     	; 0xbe4 <lb_broadcast_rssi+0xac>
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	82 e7       	ldi	r24, 0x72	; 114
     bc6:	94 e0       	ldi	r25, 0x04	; 4
     bc8:	9f 93       	push	r25
     bca:	8f 93       	push	r24
     bcc:	81 e8       	ldi	r24, 0x81	; 129
     bce:	96 e0       	ldi	r25, 0x06	; 6
     bd0:	9f 93       	push	r25
     bd2:	8f 93       	push	r24
     bd4:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
	}

	linkbus_send_text(g_tempMsgBuff);
     be2:	0f 90       	pop	r0
     be4:	81 e8       	ldi	r24, 0x81	; 129
     be6:	96 e0       	ldi	r25, 0x06	; 6
     be8:	53 db       	rcall	.-2394   	; 0x290 <linkbus_send_text>
}
     bea:	26 96       	adiw	r28, 0x06	; 6
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <lb_broadcast_rf>:

void lb_broadcast_rf(uint16_t data)
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	00 d0       	rcall	.+0      	; 0xc02 <lb_broadcast_rf+0x6>
     c02:	00 d0       	rcall	.+0      	; 0xc04 <lb_broadcast_rf+0x8>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <lb_broadcast_rf+0xa>
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
	char t[6] = "\0";
     c0a:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <xtal_freq+0x4>
     c0e:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <xtal_freq+0x5>
     c12:	3a 83       	std	Y+2, r19	; 0x02
     c14:	29 83       	std	Y+1, r18	; 0x01
     c16:	fe 01       	movw	r30, r28
     c18:	33 96       	adiw	r30, 0x03	; 3
     c1a:	24 e0       	ldi	r18, 0x04	; 4
     c1c:	df 01       	movw	r26, r30
     c1e:	1d 92       	st	X+, r1
     c20:	2a 95       	dec	r18
     c22:	e9 f7       	brne	.-6      	; 0xc1e <lb_broadcast_rf+0x22>

	sprintf(t, "%d", data);
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	8c ec       	ldi	r24, 0xCC	; 204
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	9f 93       	push	r25
     c2e:	8f 93       	push	r24
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>

	if(g_lb_terminal_mode)
     c3c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	88 23       	and	r24, r24
     c4e:	c1 f0       	breq	.+48     	; 0xc80 <lb_broadcast_rf+0x84>
	{
		sprintf(g_tempMsgBuff, "> RF=%s%s", t, lineTerm);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	9f 93       	push	r25
     c56:	8f 93       	push	r24
     c58:	ce 01       	movw	r24, r28
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	9f 93       	push	r25
     c5e:	8f 93       	push	r24
     c60:	89 e7       	ldi	r24, 0x79	; 121
     c62:	94 e0       	ldi	r25, 0x04	; 4
     c64:	9f 93       	push	r25
     c66:	8f 93       	push	r24
     c68:	81 e8       	ldi	r24, 0x81	; 129
     c6a:	96 e0       	ldi	r25, 0x06	; 6
     c6c:	9f 93       	push	r25
     c6e:	8f 93       	push	r24
     c70:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
	}
	else
	{
		sprintf(g_tempMsgBuff, "!R,%s;", t);
     c7e:	14 c0       	rjmp	.+40     	; 0xca8 <lb_broadcast_rf+0xac>
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	83 e8       	ldi	r24, 0x83	; 131
     c8a:	94 e0       	ldi	r25, 0x04	; 4
     c8c:	9f 93       	push	r25
     c8e:	8f 93       	push	r24
     c90:	81 e8       	ldi	r24, 0x81	; 129
     c92:	96 e0       	ldi	r25, 0x06	; 6
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
	}
	linkbus_send_text(g_tempMsgBuff);
     ca6:	0f 90       	pop	r0
     ca8:	81 e8       	ldi	r24, 0x81	; 129
     caa:	96 e0       	ldi	r25, 0x06	; 6
     cac:	f1 da       	rcall	.-2590   	; 0x290 <linkbus_send_text>
}
     cae:	26 96       	adiw	r28, 0x06	; 6
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <lb_broadcast_num>:

void lb_broadcast_num(uint16_t data, char* str)
{
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	00 d0       	rcall	.+0      	; 0xcca <lb_broadcast_num+0xa>
     cca:	00 d0       	rcall	.+0      	; 0xccc <lb_broadcast_num+0xc>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <lb_broadcast_num+0xe>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	8b 01       	movw	r16, r22
	char t[6] = "\0";
     cd4:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <xtal_freq+0x4>
     cd8:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <xtal_freq+0x5>
     cdc:	3a 83       	std	Y+2, r19	; 0x02
     cde:	29 83       	std	Y+1, r18	; 0x01
     ce0:	fe 01       	movw	r30, r28
     ce2:	33 96       	adiw	r30, 0x03	; 3
     ce4:	24 e0       	ldi	r18, 0x04	; 4
     ce6:	df 01       	movw	r26, r30
     ce8:	1d 92       	st	X+, r1
     cea:	2a 95       	dec	r18
     cec:	e9 f7       	brne	.-6      	; 0xce8 <lb_broadcast_num+0x28>

	sprintf(t, "%u", data);
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	8a e8       	ldi	r24, 0x8A	; 138
     cf4:	94 e0       	ldi	r25, 0x04	; 4
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>

	if(g_lb_terminal_mode)
     d06:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	88 23       	and	r24, r24
     d18:	a9 f1       	breq	.+106    	; 0xd84 <lb_broadcast_num+0xc4>
	{
		if(str)
     d1a:	01 15       	cp	r16, r1
     d1c:	11 05       	cpc	r17, r1
     d1e:	d1 f0       	breq	.+52     	; 0xd54 <lb_broadcast_num+0x94>
		{
			sprintf(g_tempMsgBuff, "> %s=%s%s", str, t, lineTerm);
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	9f 93       	push	r25
     d26:	8f 93       	push	r24
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	9f 93       	push	r25
     d2e:	8f 93       	push	r24
     d30:	1f 93       	push	r17
     d32:	0f 93       	push	r16
     d34:	8d e8       	ldi	r24, 0x8D	; 141
     d36:	94 e0       	ldi	r25, 0x04	; 4
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	81 e8       	ldi	r24, 0x81	; 129
     d3e:	96 e0       	ldi	r25, 0x06	; 6
     d40:	9f 93       	push	r25
     d42:	8f 93       	push	r24
     d44:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	30 c0       	rjmp	.+96     	; 0xdb4 <lb_broadcast_num+0xf4>
		}
		else
		{
			sprintf(g_tempMsgBuff, "> %s%s", t, lineTerm);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	80 ee       	ldi	r24, 0xE0	; 224
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	9f 93       	push	r25
     d6a:	8f 93       	push	r24
     d6c:	81 e8       	ldi	r24, 0x81	; 129
     d6e:	96 e0       	ldi	r25, 0x06	; 6
     d70:	9f 93       	push	r25
     d72:	8f 93       	push	r24
     d74:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	18 c0       	rjmp	.+48     	; 0xdb4 <lb_broadcast_num+0xf4>
		}
	}
	else
	{
		if(str)
     d84:	01 15       	cp	r16, r1
     d86:	11 05       	cpc	r17, r1
		{
			sprintf(g_tempMsgBuff, "!%s,%s;", str, t);
     d88:	a9 f0       	breq	.+42     	; 0xdb4 <lb_broadcast_num+0xf4>
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	9f 93       	push	r25
     d90:	8f 93       	push	r24
     d92:	1f 93       	push	r17
     d94:	0f 93       	push	r16
     d96:	87 e9       	ldi	r24, 0x97	; 151
     d98:	94 e0       	ldi	r25, 0x04	; 4
     d9a:	9f 93       	push	r25
     d9c:	8f 93       	push	r24
     d9e:	81 e8       	ldi	r24, 0x81	; 129
     da0:	96 e0       	ldi	r25, 0x06	; 6
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
		}
	}

	linkbus_send_text(g_tempMsgBuff);
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	81 e8       	ldi	r24, 0x81	; 129
     db6:	96 e0       	ldi	r25, 0x06	; 6
     db8:	6b da       	rcall	.-2858   	; 0x290 <linkbus_send_text>
}
     dba:	26 96       	adiw	r28, 0x06	; 6
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <wdt_init>:
 * Notice: Optimization must be enabled before watchdog can be set
 * in C (WDCE). Use __attribute__ to enforce optimization level.
 ************************************************************************/
void __attribute__((optimize("O1"))) wdt_init(WDReset resetType)
{
	wdt_reset();
     dd0:	a8 95       	wdr

	if(MCUSR & (1 << WDRF))     /* If a reset was caused by the Watchdog Timer perform any special operations */
     dd2:	04 b6       	in	r0, 0x34	; 52
     dd4:	03 fe       	sbrs	r0, 3
     dd6:	03 c0       	rjmp	.+6      	; 0xdde <wdt_init+0xe>
	{
		MCUSR &= (1 << WDRF);   /* Clear the WDT reset flag */
     dd8:	94 b7       	in	r25, 0x34	; 52
     dda:	98 70       	andi	r25, 0x08	; 8
     ddc:	94 bf       	out	0x34, r25	; 52
	}

	if(resetType == WD_HW_RESETS)
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	41 f4       	brne	.+16     	; 0xdf2 <wdt_init+0x22>
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     de2:	e0 e6       	ldi	r30, 0x60	; 96
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	90 81       	ld	r25, Z
     de8:	98 61       	ori	r25, 0x18	; 24
     dea:	90 83       	st	Z, r25
		WDTCSR = (1 << WDP3) | (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt every 4 seconds, and hardware resets */
     dec:	98 e6       	ldi	r25, 0x68	; 104
     dee:	90 83       	st	Z, r25
     df0:	11 c0       	rjmp	.+34     	; 0xe14 <wdt_init+0x44>
		/*	WDTCSR = (1 << WDP3) | (1 << WDP0) | (1 << WDIE) | (1 << WDE); // Enable WD interrupt every 8 seconds, and hardware resets */
	}
	else if(resetType == WD_SW_RESETS)
     df2:	81 11       	cpse	r24, r1
     df4:	08 c0       	rjmp	.+16     	; 0xe06 <wdt_init+0x36>
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     df6:	e0 e6       	ldi	r30, 0x60	; 96
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	90 81       	ld	r25, Z
     dfc:	98 61       	ori	r25, 0x18	; 24
     dfe:	90 83       	st	Z, r25
		/*	WDTCSR = (1 << WDP3) | (1 << WDIE); // Enable WD interrupt every 4 seconds (no HW reset)
		 *	WDTCSR = (1 << WDP3) | (1 << WDP0)  | (1 << WDIE); // Enable WD interrupt every 8 seconds (no HW reset) */
		WDTCSR = (1 << WDP1) | (1 << WDP2)  | (1 << WDIE);  /* Enable WD interrupt every 1 seconds (no HW reset) */
     e00:	96 e4       	ldi	r25, 0x46	; 70
     e02:	90 83       	st	Z, r25
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <wdt_init+0x44>
	}
	else
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     e06:	e0 e6       	ldi	r30, 0x60	; 96
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	90 81       	ld	r25, Z
     e0c:	98 61       	ori	r25, 0x18	; 24
     e0e:	90 83       	st	Z, r25
		WDTCSR = (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt in 16ms, and hardware reset */
     e10:	98 e4       	ldi	r25, 0x48	; 72
     e12:	90 83       	st	Z, r25
	}
	
	g_enableHardwareWDResets = (resetType != WD_SW_RESETS);
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	81 11       	cpse	r24, r1
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <wdt_init+0x4c>
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <g_enableHardwareWDResets>
     e20:	08 95       	ret

00000e22 <__vector_8>:
 * Timer/Counter2 Compare Match A ISR
 *
 * Handles periodic tasks not requiring precise timing.
 ************************************************************************/
ISR( TIMER2_COMPB_vect )
{
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	1f 92       	push	r1
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
	static BOOL conversionInProcess = FALSE;
	static int8_t indexConversionInProcess;

	g_tick_count++;
     e68:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <g_tick_count>
     e6c:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <g_tick_count+0x1>
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <g_tick_count+0x1>
     e76:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <g_tick_count>

	if(g_power_off_countdown)
     e7a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
     e7e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
     e82:	89 2b       	or	r24, r25
     e84:	49 f0       	breq	.+18     	; 0xe98 <__vector_8+0x76>
	{
		g_power_off_countdown--;
     e86:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
     e8a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
     e94:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>
	}
	if(g_low_voltage_shutdown_delay)
     e98:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_low_voltage_shutdown_delay>
     e9c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
     ea0:	89 2b       	or	r24, r25
     ea2:	49 f0       	breq	.+18     	; 0xeb6 <__vector_8+0x94>
	{
		g_low_voltage_shutdown_delay--;
     ea4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_low_voltage_shutdown_delay>
     ea8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
     eb2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_low_voltage_shutdown_delay>
	}
	if(g_send_ID_countdown)
     eb6:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <g_send_ID_countdown>
     eba:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <g_send_ID_countdown+0x1>
     ebe:	89 2b       	or	r24, r25
     ec0:	49 f0       	breq	.+18     	; 0xed4 <__vector_8+0xb2>
	{
		g_send_ID_countdown--;
     ec2:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <g_send_ID_countdown>
     ec6:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <g_send_ID_countdown+0x1>
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <g_send_ID_countdown+0x1>
     ed0:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <g_send_ID_countdown>
	}
	if(g_headphone_removed_delay)
     ed4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_headphone_removed_delay>
     ed8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_headphone_removed_delay+0x1>
     edc:	89 2b       	or	r24, r25
     ede:	49 f0       	breq	.+18     	; 0xef2 <__vector_8+0xd0>
	{
		g_headphone_removed_delay--;
     ee0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_headphone_removed_delay>
     ee4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_headphone_removed_delay+0x1>
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_headphone_removed_delay+0x1>
     eee:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_headphone_removed_delay>
	}
	if(g_lb_repeat_rssi)
     ef2:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <g_lb_repeat_rssi>
     ef6:	88 23       	and	r24, r24
     ef8:	59 f0       	breq	.+22     	; 0xf10 <__vector_8+0xee>
	{
		if(g_rssi_countdown)
     efa:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <g_rssi_countdown>
     efe:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <g_rssi_countdown+0x1>
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	29 f0       	breq	.+10     	; 0xf10 <__vector_8+0xee>
		{
			g_rssi_countdown--;
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <g_rssi_countdown+0x1>
     f0c:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <g_rssi_countdown>
		}
	}

	if(g_LB_broadcast_interval)
     f10:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_LB_broadcast_interval>
     f14:	88 23       	and	r24, r24
     f16:	19 f0       	breq	.+6      	; 0xf1e <__vector_8+0xfc>
	{
		g_LB_broadcast_interval--;
     f18:	81 50       	subi	r24, 0x01	; 1
     f1a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_LB_broadcast_interval>
	static BOOL volumeSetInProcess = FALSE;
	static BOOL beepInProcess = FALSE;

	/**
	 * Handle earphone beeps */
	if(g_beep_length)
     f1e:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <g_beep_length>
     f22:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <g_beep_length+0x1>
     f26:	89 2b       	or	r24, r25
     f28:	f9 f0       	breq	.+62     	; 0xf68 <__vector_8+0x146>
	{
		if(!beepInProcess)
     f2a:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <beepInProcess.3005>
     f2e:	81 11       	cpse	r24, r1
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <__vector_8+0x11e>
		{
			TCCR0A |= (1 << COM0B0);    /* Toggle OC0B (PD5) on Compare Match */
     f32:	84 b5       	in	r24, 0x24	; 36
     f34:	80 61       	ori	r24, 0x10	; 16
     f36:	84 bd       	out	0x24, r24	; 36
			beepInProcess = TRUE;
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <beepInProcess.3005>
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <__vector_8+0x146>
		}
		else
		{
			g_beep_length--;
     f40:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <g_beep_length>
     f44:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <g_beep_length+0x1>
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <g_beep_length+0x1>
     f4e:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <g_beep_length>

			if(!g_beep_length)
     f52:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <g_beep_length>
     f56:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <g_beep_length+0x1>
     f5a:	89 2b       	or	r24, r25
     f5c:	29 f4       	brne	.+10     	; 0xf68 <__vector_8+0x146>
			{
				TCCR0A &= ~(1 << COM0B0);   /* Turn off toggling of OC0B (PD5) */
     f5e:	84 b5       	in	r24, 0x24	; 36
     f60:	8f 7e       	andi	r24, 0xEF	; 239
     f62:	84 bd       	out	0x24, r24	; 36
				beepInProcess = FALSE;
     f64:	10 92 f7 06 	sts	0x06F7, r1	; 0x8006f7 <beepInProcess.3005>
			}
		}
	}

	if(volumeSetInProcess)
     f68:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <volumeSetInProcess.3004>
     f6c:	88 23       	and	r24, r24
     f6e:	41 f0       	breq	.+16     	; 0xf80 <__vector_8+0x15e>
	{
		if(PORTC & (1 << PORTC0))
     f70:	40 9b       	sbis	0x08, 0	; 8
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <__vector_8+0x156>
		{
			PORTC &= ~(1 << PORTC0);    /* set clock low */
     f74:	40 98       	cbi	0x08, 0	; 8
     f76:	26 c0       	rjmp	.+76     	; 0xfc4 <__vector_8+0x1a2>
		}
		else
		{
			PORTC |= (1 << PORTC0);     /* set clock high */
     f78:	40 9a       	sbi	0x08, 0	; 8
			volumeSetInProcess = FALSE;
     f7a:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <volumeSetInProcess.3004>
     f7e:	22 c0       	rjmp	.+68     	; 0xfc4 <__vector_8+0x1a2>
		}
	}
	else if(g_hw_main_volume != g_main_volume)
     f80:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_hw_main_volume>
     f84:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_main_volume>
     f88:	98 17       	cp	r25, r24
     f8a:	e1 f0       	breq	.+56     	; 0xfc4 <__vector_8+0x1a2>
	{
		if(g_sufficient_power_detected) // wait until audio amp is powered up
     f8c:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <g_sufficient_power_detected>
     f90:	88 23       	and	r24, r24
     f92:	c1 f0       	breq	.+48     	; 0xfc4 <__vector_8+0x1a2>
		{
			if(!(PORTC & (1 << PORTC0)))
     f94:	40 9b       	sbis	0x08, 0	; 8
			{
				PORTC |= (1 << PORTC0); /* set clock high */
     f96:	40 9a       	sbi	0x08, 0	; 8
			}
			if(g_hw_main_volume > g_main_volume)
     f98:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_hw_main_volume>
     f9c:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_main_volume>
     fa0:	89 17       	cp	r24, r25
     fa2:	38 f4       	brcc	.+14     	; 0xfb2 <__vector_8+0x190>
			{
				PORTC &= ~(1 << PORTC1);    /* set direction down */
     fa4:	41 98       	cbi	0x08, 1	; 8
				g_hw_main_volume--;
     fa6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_hw_main_volume>
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_hw_main_volume>
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <__vector_8+0x19c>
			}
			else                            /* if(g_hw_main_volume < g_main_volume) */
			{
				PORTC |= (1 << PORTC1);     /* set direction up */
     fb2:	41 9a       	sbi	0x08, 1	; 8
				g_hw_main_volume++;
     fb4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_hw_main_volume>
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_hw_main_volume>
			}

			volumeSetInProcess = TRUE;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <volumeSetInProcess.3004>
	}

	/**
	 * Handle Periodic ADC Readings
	 * The following algorithm allows multipe ADC channel readings to be performed at different polling intervals. */
	if(!conversionInProcess)
     fc4:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <conversionInProcess.3002>
     fc8:	81 11       	cpse	r24, r1
     fca:	5f c0       	rjmp	.+190    	; 0x108a <__vector_8+0x268>
	{
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <indexConversionInProcess.3003>

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	83 30       	cpi	r24, 0x03	; 3
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <__vector_8+0x1ba>
     fda:	44 c1       	rjmp	.+648    	; 0x1264 <__vector_8+0x442>
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	9f ef       	ldi	r25, 0xFF	; 255
				g_tickCountdownADCFlag[i]--;
			}

			if(g_tickCountdownADCFlag[i] == 0)
			{
				indexConversionInProcess = (int8_t)i;
     fe0:	31 e0       	ldi	r19, 0x01	; 1
		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
		{
			if(g_tickCountdownADCFlag[i])
     fe2:	e9 81       	ldd	r30, Y+1	; 0x01
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	ec 5e       	subi	r30, 0xEC	; 236
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	40 81       	ld	r20, Z
     ff0:	51 81       	ldd	r21, Z+1	; 0x01
     ff2:	45 2b       	or	r20, r21
     ff4:	61 f0       	breq	.+24     	; 0x100e <__vector_8+0x1ec>
			{
				g_tickCountdownADCFlag[i]--;
     ff6:	e9 81       	ldd	r30, Y+1	; 0x01
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	ec 5e       	subi	r30, 0xEC	; 236
    1000:	fe 4f       	sbci	r31, 0xFE	; 254
    1002:	40 81       	ld	r20, Z
    1004:	51 81       	ldd	r21, Z+1	; 0x01
    1006:	41 50       	subi	r20, 0x01	; 1
    1008:	51 09       	sbc	r21, r1
    100a:	51 83       	std	Z+1, r21	; 0x01
    100c:	40 83       	st	Z, r20
			}

			if(g_tickCountdownADCFlag[i] == 0)
    100e:	e9 81       	ldd	r30, Y+1	; 0x01
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	ec 5e       	subi	r30, 0xEC	; 236
    1018:	fe 4f       	sbci	r31, 0xFE	; 254
    101a:	40 81       	ld	r20, Z
    101c:	51 81       	ldd	r21, Z+1	; 0x01
    101e:	45 2b       	or	r20, r21
    1020:	11 f4       	brne	.+4      	; 0x1026 <__vector_8+0x204>
			{
				indexConversionInProcess = (int8_t)i;
    1022:	99 81       	ldd	r25, Y+1	; 0x01
    1024:	23 2f       	mov	r18, r19
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	c0 f2       	brcs	.-80     	; 0xfe2 <__vector_8+0x1c0>
    1032:	22 23       	and	r18, r18
    1034:	09 f4       	brne	.+2      	; 0x1038 <__vector_8+0x216>
    1036:	16 c1       	rjmp	.+556    	; 0x1264 <__vector_8+0x442>
    1038:	90 93 f4 06 	sts	0x06F4, r25	; 0x8006f4 <indexConversionInProcess.3003>
			{
				indexConversionInProcess = (int8_t)i;
			}
		}

		if(indexConversionInProcess >= 0)
    103c:	99 23       	and	r25, r25
    103e:	0c f4       	brge	.+2      	; 0x1042 <__vector_8+0x220>
    1040:	11 c1       	rjmp	.+546    	; 0x1264 <__vector_8+0x442>
		{
			g_tickCountdownADCFlag[indexConversionInProcess] = g_adcChannelConversionPeriod_ticks[indexConversionInProcess];    /* reset the tick countdown */
    1042:	89 2f       	mov	r24, r25
    1044:	99 0f       	add	r25, r25
    1046:	99 0b       	sbc	r25, r25
    1048:	9c 01       	movw	r18, r24
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	f9 01       	movw	r30, r18
    1050:	e2 59       	subi	r30, 0x92	; 146
    1052:	fc 4f       	sbci	r31, 0xFC	; 252
    1054:	40 81       	ld	r20, Z
    1056:	51 81       	ldd	r21, Z+1	; 0x01
    1058:	f9 01       	movw	r30, r18
    105a:	ec 5e       	subi	r30, 0xEC	; 236
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	51 83       	std	Z+1, r21	; 0x01
    1060:	40 83       	st	Z, r20
			ADMUX = (ADMUX & 0xF0) | activeADC[indexConversionInProcess];                                                       /* index through all active channels */
    1062:	ec e7       	ldi	r30, 0x7C	; 124
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	20 81       	ld	r18, Z
    1068:	20 7f       	andi	r18, 0xF0	; 240
    106a:	dc 01       	movw	r26, r24
    106c:	ac 58       	subi	r26, 0x8C	; 140
    106e:	bc 4f       	sbci	r27, 0xFC	; 252
    1070:	9c 91       	ld	r25, X
    1072:	82 2f       	mov	r24, r18
    1074:	89 2b       	or	r24, r25
    1076:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);                                                                                              /*single conversion mode */
    1078:	ea e7       	ldi	r30, 0x7A	; 122
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	80 83       	st	Z, r24
			conversionInProcess = TRUE;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <conversionInProcess.3002>
    1088:	ed c0       	rjmp	.+474    	; 0x1264 <__vector_8+0x442>
		}
	}
	else if(!( ADCSRA & (1 << ADSC) ))                                                                                          /* wait for conversion to complete */
    108a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    108e:	86 fd       	sbrc	r24, 6
    1090:	e9 c0       	rjmp	.+466    	; 0x1264 <__vector_8+0x442>
	{
		uint16_t hold = ADC;
    1092:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1096:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		uint16_t holdConversionResult = (uint16_t)(((uint32_t)hold * ADC_REF_VOLTAGE_mV) >> 10);                                /* millivolts at ADC pin */
    109a:	a4 ee       	ldi	r26, 0xE4	; 228
    109c:	bc e0       	ldi	r27, 0x0C	; 12
    109e:	0e 94 a8 20 	call	0x4150	; 0x4150 <__umulhisi3>
    10a2:	4b 01       	movw	r8, r22
    10a4:	5c 01       	movw	r10, r24
    10a6:	07 2e       	mov	r0, r23
    10a8:	7a e0       	ldi	r23, 0x0A	; 10
    10aa:	b6 94       	lsr	r11
    10ac:	a7 94       	ror	r10
    10ae:	97 94       	ror	r9
    10b0:	87 94       	ror	r8
    10b2:	7a 95       	dec	r23
    10b4:	d1 f7       	brne	.-12     	; 0x10aa <__vector_8+0x288>
    10b6:	70 2d       	mov	r23, r0
    10b8:	64 01       	movw	r12, r8
		uint16_t lastResult = g_lastConversionResult[indexConversionInProcess];
    10ba:	40 91 f4 06 	lds	r20, 0x06F4	; 0x8006f4 <indexConversionInProcess.3003>
    10be:	e4 2e       	mov	r14, r20
    10c0:	04 2e       	mov	r0, r20
    10c2:	00 0c       	add	r0, r0
    10c4:	ff 08       	sbc	r15, r15
    10c6:	f7 01       	movw	r30, r14
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	e2 50       	subi	r30, 0x02	; 2
    10ce:	f9 4f       	sbci	r31, 0xF9	; 249
    10d0:	20 81       	ld	r18, Z
    10d2:	31 81       	ldd	r19, Z+1	; 0x01
		BOOL directionUP = holdConversionResult > lastResult;
		uint16_t delta = directionUP ? holdConversionResult - lastResult : lastResult - holdConversionResult;
    10d4:	28 15       	cp	r18, r8
    10d6:	39 05       	cpc	r19, r9
    10d8:	20 f4       	brcc	.+8      	; 0x10e2 <__vector_8+0x2c0>
    10da:	d4 01       	movw	r26, r8
    10dc:	a2 1b       	sub	r26, r18
    10de:	b3 0b       	sbc	r27, r19
    10e0:	03 c0       	rjmp	.+6      	; 0x10e8 <__vector_8+0x2c6>
    10e2:	d9 01       	movw	r26, r18
    10e4:	a8 19       	sub	r26, r8
    10e6:	b9 09       	sbc	r27, r9

		g_adcUpdated[indexConversionInProcess] = TRUE;
    10e8:	51 e0       	ldi	r21, 0x01	; 1
    10ea:	f7 01       	movw	r30, r14
    10ec:	ec 5f       	subi	r30, 0xFC	; 252
    10ee:	f8 4f       	sbci	r31, 0xF8	; 248
    10f0:	50 83       	st	Z, r21

		if(indexConversionInProcess == BATTERY_READING)
    10f2:	41 30       	cpi	r20, 0x01	; 1
    10f4:	91 f5       	brne	.+100    	; 0x115a <__vector_8+0x338>
		{
			if(delta > g_filterADCValue[indexConversionInProcess])
    10f6:	f7 01       	movw	r30, r14
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	e8 59       	subi	r30, 0x98	; 152
    10fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1100:	40 81       	ld	r20, Z
    1102:	51 81       	ldd	r21, Z+1	; 0x01
    1104:	4a 17       	cp	r20, r26
    1106:	5b 07       	cpc	r21, r27
    1108:	58 f4       	brcc	.+22     	; 0x1120 <__vector_8+0x2fe>
			{
				lastResult = holdConversionResult;
				g_tickCountdownADCFlag[indexConversionInProcess] = 100; /* speed up next conversion */
    110a:	f7 01       	movw	r30, r14
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	ec 5e       	subi	r30, 0xEC	; 236
    1112:	fe 4f       	sbci	r31, 0xFE	; 254
    1114:	24 e6       	ldi	r18, 0x64	; 100
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	31 83       	std	Z+1, r19	; 0x01
    111a:	20 83       	st	Z, r18

		if(indexConversionInProcess == BATTERY_READING)
		{
			if(delta > g_filterADCValue[indexConversionInProcess])
			{
				lastResult = holdConversionResult;
    111c:	94 01       	movw	r18, r8
    111e:	99 c0       	rjmp	.+306    	; 0x1252 <__vector_8+0x430>
				g_tickCountdownADCFlag[indexConversionInProcess] = 100; /* speed up next conversion */
			}
			else
			{
				if(directionUP)
    1120:	2c 15       	cp	r18, r12
    1122:	3d 05       	cpc	r19, r13
    1124:	18 f4       	brcc	.+6      	; 0x112c <__vector_8+0x30a>
				{
					lastResult++;
    1126:	2f 5f       	subi	r18, 0xFF	; 255
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <__vector_8+0x312>
				}
				else if(delta)
    112c:	ab 2b       	or	r26, r27
    112e:	11 f0       	breq	.+4      	; 0x1134 <__vector_8+0x312>
				{
					lastResult--;
    1130:	21 50       	subi	r18, 0x01	; 1
    1132:	31 09       	sbc	r19, r1
				}

				g_battery_measurements_active = TRUE;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <g_battery_measurements_active>
	
				if(lastResult > VOLTS_5)
    113a:	22 38       	cpi	r18, 0x82	; 130
    113c:	83 e0       	ldi	r24, 0x03	; 3
    113e:	38 07       	cpc	r19, r24
    1140:	18 f0       	brcs	.+6      	; 0x1148 <__vector_8+0x326>
				{
					g_battery_type = BATTERY_9V;
    1142:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <g_battery_type>
    1146:	85 c0       	rjmp	.+266    	; 0x1252 <__vector_8+0x430>
				}
				else if(lastResult > VOLTS_3_0)
    1148:	24 3c       	cpi	r18, 0xC4	; 196
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	38 07       	cpc	r19, r24
    114e:	08 f4       	brcc	.+2      	; 0x1152 <__vector_8+0x330>
    1150:	80 c0       	rjmp	.+256    	; 0x1252 <__vector_8+0x430>
				{
					g_battery_type = BATTERY_4r2V;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_battery_type>
    1158:	7c c0       	rjmp	.+248    	; 0x1252 <__vector_8+0x430>
				}
			}
		}
		else if(indexConversionInProcess == RSSI_READING)
    115a:	42 30       	cpi	r20, 0x02	; 2
    115c:	09 f0       	breq	.+2      	; 0x1160 <__vector_8+0x33e>
    115e:	79 c0       	rjmp	.+242    	; 0x1252 <__vector_8+0x430>
		{
			if(delta > 50)
    1160:	a3 33       	cpi	r26, 0x33	; 51
    1162:	b1 05       	cpc	r27, r1
    1164:	b8 f0       	brcs	.+46     	; 0x1194 <__vector_8+0x372>
			{
				if(directionUP)
    1166:	2c 15       	cp	r18, r12
    1168:	3d 05       	cpc	r19, r13
    116a:	38 f0       	brcs	.+14     	; 0x117a <__vector_8+0x358>
				{
					lastResult = holdConversionResult;
				}
				else
				{
					if(delta > 100)
    116c:	a5 36       	cpi	r26, 0x65	; 101
    116e:	b1 05       	cpc	r27, r1
    1170:	20 f4       	brcc	.+8      	; 0x117a <__vector_8+0x358>
					{
						lastResult = holdConversionResult;
					}
					else
					{
						lastResult -= 10;
    1172:	69 01       	movw	r12, r18
    1174:	8a e0       	ldi	r24, 0x0A	; 10
    1176:	c8 1a       	sub	r12, r24
    1178:	d1 08       	sbc	r13, r1
					}
				}

				g_filteredRSSI = lastResult;
    117a:	c6 01       	movw	r24, r12
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <g_filteredRSSI>
    1184:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <g_filteredRSSI+0x1>
    1188:	a0 93 fc 06 	sts	0x06FC, r26	; 0x8006fc <g_filteredRSSI+0x2>
    118c:	b0 93 fd 06 	sts	0x06FD, r27	; 0x8006fd <g_filteredRSSI+0x3>
    1190:	96 01       	movw	r18, r12
    1192:	5f c0       	rjmp	.+190    	; 0x1252 <__vector_8+0x430>
			}
			else
			{
				if(directionUP)
    1194:	2c 15       	cp	r18, r12
    1196:	3d 05       	cpc	r19, r13
    1198:	40 f0       	brcs	.+16     	; 0x11aa <__vector_8+0x388>
				{
					lastResult = holdConversionResult;
				}
				else if(delta)
    119a:	ab 2b       	or	r26, r27
    119c:	29 f0       	breq	.+10     	; 0x11a8 <__vector_8+0x386>
				{
					lastResult--;
    119e:	69 01       	movw	r12, r18
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	c8 1a       	sub	r12, r24
    11a4:	d1 08       	sbc	r13, r1
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <__vector_8+0x388>
	}
	else if(!( ADCSRA & (1 << ADSC) ))                                                                                          /* wait for conversion to complete */
	{
		uint16_t hold = ADC;
		uint16_t holdConversionResult = (uint16_t)(((uint32_t)hold * ADC_REF_VOLTAGE_mV) >> 10);                                /* millivolts at ADC pin */
		uint16_t lastResult = g_lastConversionResult[indexConversionInProcess];
    11a8:	69 01       	movw	r12, r18
				{
					lastResult--;
				}

//				lastResult = holdConversionResult;
				g_filteredRSSI = g_filteredRSSI << 3;
    11aa:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <g_filteredRSSI>
    11ae:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <g_filteredRSSI+0x1>
    11b2:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <g_filteredRSSI+0x2>
    11b6:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <g_filteredRSSI+0x3>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	aa 1f       	adc	r26, r26
    11c0:	bb 1f       	adc	r27, r27
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	aa 1f       	adc	r26, r26
    11c8:	bb 1f       	adc	r27, r27
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	aa 1f       	adc	r26, r26
    11d0:	bb 1f       	adc	r27, r27
    11d2:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <g_filteredRSSI>
    11d6:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <g_filteredRSSI+0x1>
    11da:	a0 93 fc 06 	sts	0x06FC, r26	; 0x8006fc <g_filteredRSSI+0x2>
    11de:	b0 93 fd 06 	sts	0x06FD, r27	; 0x8006fd <g_filteredRSSI+0x3>
				g_filteredRSSI += lastResult;
    11e2:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <g_filteredRSSI>
    11e6:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <g_filteredRSSI+0x1>
    11ea:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <g_filteredRSSI+0x2>
    11ee:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <g_filteredRSSI+0x3>
    11f2:	8c 0d       	add	r24, r12
    11f4:	9d 1d       	adc	r25, r13
    11f6:	a1 1d       	adc	r26, r1
    11f8:	b1 1d       	adc	r27, r1
    11fa:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <g_filteredRSSI>
    11fe:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <g_filteredRSSI+0x1>
    1202:	a0 93 fc 06 	sts	0x06FC, r26	; 0x8006fc <g_filteredRSSI+0x2>
    1206:	b0 93 fd 06 	sts	0x06FD, r27	; 0x8006fd <g_filteredRSSI+0x3>
				g_filteredRSSI /= 9;
    120a:	60 91 fa 06 	lds	r22, 0x06FA	; 0x8006fa <g_filteredRSSI>
    120e:	70 91 fb 06 	lds	r23, 0x06FB	; 0x8006fb <g_filteredRSSI+0x1>
    1212:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <g_filteredRSSI+0x2>
    1216:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <g_filteredRSSI+0x3>
    121a:	29 e3       	ldi	r18, 0x39	; 57
    121c:	3e e8       	ldi	r19, 0x8E	; 142
    121e:	43 ee       	ldi	r20, 0xE3	; 227
    1220:	58 e3       	ldi	r21, 0x38	; 56
    1222:	0e 94 c1 20 	call	0x4182	; 0x4182 <__umulsidi3>
    1226:	00 e2       	ldi	r16, 0x20	; 32
    1228:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <__lshrdi3>
    122c:	42 2e       	mov	r4, r18
    122e:	53 2e       	mov	r5, r19
    1230:	64 2e       	mov	r6, r20
    1232:	75 2e       	mov	r7, r21
    1234:	d3 01       	movw	r26, r6
    1236:	c2 01       	movw	r24, r4
    1238:	b6 95       	lsr	r27
    123a:	a7 95       	ror	r26
    123c:	97 95       	ror	r25
    123e:	87 95       	ror	r24
    1240:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <g_filteredRSSI>
    1244:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <g_filteredRSSI+0x1>
    1248:	a0 93 fc 06 	sts	0x06FC, r26	; 0x8006fc <g_filteredRSSI+0x2>
    124c:	b0 93 fd 06 	sts	0x06FD, r27	; 0x8006fd <g_filteredRSSI+0x3>
    1250:	96 01       	movw	r18, r12
			}
		}

		g_lastConversionResult[indexConversionInProcess] = lastResult;
    1252:	f7 01       	movw	r30, r14
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	e2 50       	subi	r30, 0x02	; 2
    125a:	f9 4f       	sbci	r31, 0xF9	; 249
    125c:	31 83       	std	Z+1, r19	; 0x01
    125e:	20 83       	st	Z, r18

		conversionInProcess = FALSE;
    1260:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <conversionInProcess.3002>
	}
}/* ISR */
    1264:	0f 90       	pop	r0
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	bf 91       	pop	r27
    1270:	af 91       	pop	r26
    1272:	9f 91       	pop	r25
    1274:	8f 91       	pop	r24
    1276:	7f 91       	pop	r23
    1278:	6f 91       	pop	r22
    127a:	5f 91       	pop	r21
    127c:	4f 91       	pop	r20
    127e:	3f 91       	pop	r19
    1280:	2f 91       	pop	r18
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	9f 90       	pop	r9
    1292:	8f 90       	pop	r8
    1294:	7f 90       	pop	r7
    1296:	6f 90       	pop	r6
    1298:	5f 90       	pop	r5
    129a:	4f 90       	pop	r4
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <__vector_4>:
 * interrupts. Pin change interrupts on PCINT23...0 are detected
 * asynchronously. This implies that these interrupts can be used for
 * waking the part from sleep modes other than Idle mode.
 ************************************************************************/
	ISR( PCINT1_vect )
	{
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	8f 93       	push	r24
    12b2:	9f 93       	push	r25
		static uint8_t portChistory = 0xFF; /* default is high because the pull-up */

		uint8_t changedbits;

		if(!g_initialization_complete)
    12b4:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <g_initialization_complete>
    12b8:	88 23       	and	r24, r24
    12ba:	81 f0       	breq	.+32     	; 0x12dc <__vector_4+0x36>
		{
			return; /* ignore keypresses before initialization completes */

		}
		changedbits = PINC ^ portChistory;
    12bc:	96 b1       	in	r25, 0x06	; 6
    12be:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <portChistory.3020>
    12c2:	89 27       	eor	r24, r25
		portChistory = PINC;
    12c4:	96 b1       	in	r25, 0x06	; 6
    12c6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <portChistory.3020>

		if(!changedbits)    /* noise? */
    12ca:	88 23       	and	r24, r24
    12cc:	39 f0       	breq	.+14     	; 0x12dc <__vector_4+0x36>
		{
			return;
		}

		if(changedbits & (1 << PORTC2)) /* Receiver port changed */
    12ce:	82 ff       	sbrs	r24, 2
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <__vector_4+0x36>
		{
			if(PINC & (1 << PORTC2))    /* rising edge */
    12d2:	32 99       	sbic	0x06, 2	; 6
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <__vector_4+0x36>
			{
			}
			else
			{
				g_radio_port_changed = TRUE;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <g_radio_port_changed>
			}
		}
	}
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0
    12e6:	1f 90       	pop	r1
    12e8:	18 95       	reti

000012ea <__vector_18>:
 *                      id = Linkbus MessageID
 *                      fn = variable length fields
 *                      ; = end of message flag
 ************************************************************************/
ISR(USART_RX_vect)
{
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	11 24       	eor	r1, r1
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	1f 93       	push	r17
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	ef 93       	push	r30
    1318:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = UDR0;
    131a:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	if(!buff)
    131e:	c0 91 f2 06 	lds	r28, 0x06F2	; 0x8006f2 <buff.3034>
    1322:	d0 91 f3 06 	lds	r29, 0x06F3	; 0x8006f3 <buff.3034+0x1>
    1326:	20 97       	sbiw	r28, 0x00	; 0
    1328:	51 f4       	brne	.+20     	; 0x133e <__vector_18+0x54>
	{
		buff = nextEmptyRxBuffer();
    132a:	0e 94 a2 00 	call	0x144	; 0x144 <nextEmptyRxBuffer>
    132e:	ec 01       	movw	r28, r24
    1330:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <buff.3034+0x1>
    1334:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <buff.3034>
	}

	if(buff)
    1338:	89 2b       	or	r24, r25
    133a:	09 f4       	brne	.+2      	; 0x133e <__vector_18+0x54>
    133c:	3b c2       	rjmp	.+1142   	; 0x17b4 <__vector_18+0x4ca>
	{
		if(g_terminal_mode)
    133e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    1342:	88 23       	and	r24, r24
    1344:	09 f4       	brne	.+2      	; 0x1348 <__vector_18+0x5e>
    1346:	37 c1       	rjmp	.+622    	; 0x15b6 <__vector_18+0x2cc>
		{
			static uint8_t ignoreCount = 0;

			rx_char = toupper(rx_char);
    1348:	81 2f       	mov	r24, r17
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 51 21 	call	0x42a2	; 0x42a2 <toupper>

			if(ignoreCount)
    1350:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <ignoreCount.3041>
    1354:	99 23       	and	r25, r25
    1356:	21 f0       	breq	.+8      	; 0x1360 <__vector_18+0x76>
			{
				rx_char = '\0';
				ignoreCount--;
    1358:	91 50       	subi	r25, 0x01	; 1
    135a:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <ignoreCount.3041>
    135e:	2a c2       	rjmp	.+1108   	; 0x17b4 <__vector_18+0x4ca>
	{
		if(g_terminal_mode)
		{
			static uint8_t ignoreCount = 0;

			rx_char = toupper(rx_char);
    1360:	18 2f       	mov	r17, r24
			if(ignoreCount)
			{
				rx_char = '\0';
				ignoreCount--;
			}
			else if(rx_char == 0x1B)    /* ESC sequence start */
    1362:	8b 31       	cpi	r24, 0x1B	; 27
    1364:	69 f4       	brne	.+26     	; 0x1380 <__vector_18+0x96>
			{
				rx_char = '\0';

				if(charIndex < LINKBUS_MAX_MSG_FIELD_LENGTH)
    1366:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <charIndex.3035>
    136a:	e5 31       	cpi	r30, 0x15	; 21
    136c:	28 f4       	brcc	.+10     	; 0x1378 <__vector_18+0x8e>
				{
					rx_char = textBuff[charIndex];
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	e5 52       	subi	r30, 0x25	; 37
    1372:	f9 4f       	sbci	r31, 0xF9	; 249
    1374:	10 81       	ld	r17, Z
    1376:	01 c0       	rjmp	.+2      	; 0x137a <__vector_18+0x90>
				rx_char = '\0';
				ignoreCount--;
			}
			else if(rx_char == 0x1B)    /* ESC sequence start */
			{
				rx_char = '\0';
    1378:	10 e0       	ldi	r17, 0x00	; 0
				if(charIndex < LINKBUS_MAX_MSG_FIELD_LENGTH)
				{
					rx_char = textBuff[charIndex];
				}

				ignoreCount = 2;                            /* throw out the next two characters */
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <ignoreCount.3041>
			}

			if(rx_char == 0x0D)                             /* Handle carriage return */
    1380:	1d 30       	cpi	r17, 0x0D	; 13
    1382:	09 f0       	breq	.+2      	; 0x1386 <__vector_18+0x9c>
    1384:	49 c0       	rjmp	.+146    	; 0x1418 <__vector_18+0x12e>
			{
				g_power_off_countdown = POWER_OFF_DELAY;    /* restart countdown */
    1386:	88 e8       	ldi	r24, 0x88	; 136
    1388:	93 e1       	ldi	r25, 0x13	; 19
    138a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    138e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>

				if(receiving_msg)
    1392:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <receiving_msg.3039>
    1396:	88 23       	and	r24, r24
    1398:	31 f1       	breq	.+76     	; 0x13e6 <__vector_18+0xfc>
				{
					if(charIndex > 0)
    139a:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <charIndex.3035>
    139e:	ee 23       	and	r30, r30
    13a0:	f9 f0       	breq	.+62     	; 0x13e0 <__vector_18+0xf6>
					{
						buff->type = LINKBUS_MSG_QUERY;
    13a2:	82 e0       	ldi	r24, 0x02	; 2
    13a4:	88 83       	st	Y, r24
						buff->id = msg_ID;
    13a6:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <msg_ID.3038>
    13aa:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <msg_ID.3038+0x1>
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01

						if(field_index > 0) /* terminate the last field */
    13b2:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <field_index.3036>
    13b6:	88 23       	and	r24, r24
    13b8:	79 f0       	breq	.+30     	; 0x13d8 <__vector_18+0xee>
						{
							buff->fields[field_index - 1][field_len] = 0;
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	40 91 d4 06 	lds	r20, 0x06D4	; 0x8006d4 <field_len.3037>
    13c2:	55 e1       	ldi	r21, 0x15	; 21
    13c4:	58 9f       	mul	r21, r24
    13c6:	90 01       	movw	r18, r0
    13c8:	59 9f       	mul	r21, r25
    13ca:	30 0d       	add	r19, r0
    13cc:	11 24       	eor	r1, r1
    13ce:	c2 0f       	add	r28, r18
    13d0:	d3 1f       	adc	r29, r19
    13d2:	c4 0f       	add	r28, r20
    13d4:	d1 1d       	adc	r29, r1
    13d6:	1b 82       	std	Y+3, r1	; 0x03
						}

						textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	e5 52       	subi	r30, 0x25	; 37
    13dc:	f9 4f       	sbci	r31, 0xF9	; 249
    13de:	10 82       	st	Z, r1
					}

					lb_send_NewLine();
    13e0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lb_send_NewLine>
    13e4:	04 c0       	rjmp	.+8      	; 0x13ee <__vector_18+0x104>
				}
				else
				{
					buff->id = INVALID_MESSAGE; /* print help message */
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	9f ef       	ldi	r25, 0xFF	; 255
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
				}

				charIndex = 0;
    13ee:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <charIndex.3035>
				field_len = 0;
    13f2:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <field_len.3037>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    13f6:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <msg_ID.3038>
    13fa:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <msg_ID.3038+0x1>
    13fe:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <msg_ID.3038+0x2>
    1402:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <msg_ID.3038+0x3>

				field_index = 0;
    1406:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <field_index.3036>
				buff = NULL;
    140a:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <buff.3034+0x1>
    140e:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <buff.3034>

				receiving_msg = FALSE;
    1412:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <receiving_msg.3039>
    1416:	ce c1       	rjmp	.+924    	; 0x17b4 <__vector_18+0x4ca>
			}
			else if(rx_char)
    1418:	11 23       	and	r17, r17
    141a:	09 f4       	brne	.+2      	; 0x141e <__vector_18+0x134>
    141c:	cb c1       	rjmp	.+918    	; 0x17b4 <__vector_18+0x4ca>
			{
				textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    141e:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <charIndex.3035>
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	f9 01       	movw	r30, r18
    1428:	e5 52       	subi	r30, 0x25	; 37
    142a:	f9 4f       	sbci	r31, 0xF9	; 249
    142c:	10 83       	st	Z, r17

				if(charIndex)
    142e:	88 23       	and	r24, r24
    1430:	09 f4       	brne	.+2      	; 0x1434 <__vector_18+0x14a>
    1432:	a1 c0       	rjmp	.+322    	; 0x1576 <__vector_18+0x28c>
				{
					if(rx_char == 0x7F)         /* Handle backspace */
    1434:	1f 37       	cpi	r17, 0x7F	; 127
    1436:	d9 f5       	brne	.+118    	; 0x14ae <__vector_18+0x1c4>
					{
						charIndex--;
    1438:	81 50       	subi	r24, 0x01	; 1
    143a:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <charIndex.3035>
						if(field_index == 0)
    143e:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <field_index.3036>
    1442:	91 11       	cpse	r25, r1
    1444:	22 c0       	rjmp	.+68     	; 0x148a <__vector_18+0x1a0>
						{
							msg_ID -= textBuff[charIndex];
    1446:	e8 2f       	mov	r30, r24
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	e5 52       	subi	r30, 0x25	; 37
    144c:	f9 4f       	sbci	r31, 0xF9	; 249
							msg_ID /= 10;
    144e:	20 81       	ld	r18, Z
    1450:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <msg_ID.3038>
    1454:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <msg_ID.3038+0x1>
    1458:	a0 91 d8 06 	lds	r26, 0x06D8	; 0x8006d8 <msg_ID.3038+0x2>
    145c:	b0 91 d9 06 	lds	r27, 0x06D9	; 0x8006d9 <msg_ID.3038+0x3>
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	62 1b       	sub	r22, r18
    1466:	71 09       	sbc	r23, r1
    1468:	81 09       	sbc	r24, r1
    146a:	91 09       	sbc	r25, r1
    146c:	2a e0       	ldi	r18, 0x0A	; 10
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__udivmodsi4>
    1478:	20 93 d6 06 	sts	0x06D6, r18	; 0x8006d6 <msg_ID.3038>
    147c:	30 93 d7 06 	sts	0x06D7, r19	; 0x8006d7 <msg_ID.3038+0x1>
    1480:	40 93 d8 06 	sts	0x06D8, r20	; 0x8006d8 <msg_ID.3038+0x2>
    1484:	50 93 d9 06 	sts	0x06D9, r21	; 0x8006d9 <msg_ID.3038+0x3>
    1488:	92 c0       	rjmp	.+292    	; 0x15ae <__vector_18+0x2c4>
						}
						else if(field_len)
    148a:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <field_len.3037>
    148e:	88 23       	and	r24, r24
    1490:	21 f0       	breq	.+8      	; 0x149a <__vector_18+0x1b0>
						{
							field_len--;
    1492:	81 50       	subi	r24, 0x01	; 1
    1494:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <field_len.3037>
    1498:	8a c0       	rjmp	.+276    	; 0x15ae <__vector_18+0x2c4>
						}
						else
						{
							buff->fields[field_index][0] = '\0';
    149a:	85 e1       	ldi	r24, 0x15	; 21
    149c:	98 9f       	mul	r25, r24
    149e:	c0 0d       	add	r28, r0
    14a0:	d1 1d       	adc	r29, r1
    14a2:	11 24       	eor	r1, r1
    14a4:	1b 82       	std	Y+3, r1	; 0x03
							field_index--;
    14a6:	91 50       	subi	r25, 0x01	; 1
    14a8:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <field_index.3036>
    14ac:	80 c0       	rjmp	.+256    	; 0x15ae <__vector_18+0x2c4>
						}
					}
					else
					{
						if(rx_char == ' ')
    14ae:	10 32       	cpi	r17, 0x20	; 32
    14b0:	11 f5       	brne	.+68     	; 0x14f6 <__vector_18+0x20c>
						{
							if(textBuff[charIndex - 1] == ' ')
    14b2:	f9 01       	movw	r30, r18
    14b4:	e6 52       	subi	r30, 0x26	; 38
    14b6:	f9 4f       	sbci	r31, 0xF9	; 249
    14b8:	90 81       	ld	r25, Z
    14ba:	90 32       	cpi	r25, 0x20	; 32
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <__vector_18+0x1d6>
    14be:	6c c1       	rjmp	.+728    	; 0x1798 <__vector_18+0x4ae>
								rx_char = '\0';
							}
							else
							{
								/* if(field_index == 0) // message ID received */
								if(field_index > 0)
    14c0:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <field_index.3036>
    14c4:	99 23       	and	r25, r25
    14c6:	89 f0       	breq	.+34     	; 0x14ea <__vector_18+0x200>
								{
									buff->fields[field_index - 1][field_len] = 0;
    14c8:	49 2f       	mov	r20, r25
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	41 50       	subi	r20, 0x01	; 1
    14ce:	51 09       	sbc	r21, r1
    14d0:	60 91 d4 06 	lds	r22, 0x06D4	; 0x8006d4 <field_len.3037>
    14d4:	75 e1       	ldi	r23, 0x15	; 21
    14d6:	74 9f       	mul	r23, r20
    14d8:	90 01       	movw	r18, r0
    14da:	75 9f       	mul	r23, r21
    14dc:	30 0d       	add	r19, r0
    14de:	11 24       	eor	r1, r1
    14e0:	c2 0f       	add	r28, r18
    14e2:	d3 1f       	adc	r29, r19
    14e4:	c6 0f       	add	r28, r22
    14e6:	d1 1d       	adc	r29, r1
    14e8:	1b 82       	std	Y+3, r1	; 0x03
								}

								field_index++;
    14ea:	9f 5f       	subi	r25, 0xFF	; 255
    14ec:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <field_index.3036>
								field_len = 0;
    14f0:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <field_len.3037>
    14f4:	55 c1       	rjmp	.+682    	; 0x17a0 <__vector_18+0x4b6>
							}
						}
						else
						{
							if(field_index == 0)    /* message ID received */
    14f6:	20 91 d5 06 	lds	r18, 0x06D5	; 0x8006d5 <field_index.3036>
    14fa:	21 11       	cpse	r18, r1
    14fc:	27 c0       	rjmp	.+78     	; 0x154c <__vector_18+0x262>
							{
								msg_ID = msg_ID * 10 + rx_char;
    14fe:	40 91 d6 06 	lds	r20, 0x06D6	; 0x8006d6 <msg_ID.3038>
    1502:	50 91 d7 06 	lds	r21, 0x06D7	; 0x8006d7 <msg_ID.3038+0x1>
    1506:	60 91 d8 06 	lds	r22, 0x06D8	; 0x8006d8 <msg_ID.3038+0x2>
    150a:	70 91 d9 06 	lds	r23, 0x06D9	; 0x8006d9 <msg_ID.3038+0x3>
    150e:	44 0f       	add	r20, r20
    1510:	55 1f       	adc	r21, r21
    1512:	66 1f       	adc	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	6a 01       	movw	r12, r20
    1518:	7b 01       	movw	r14, r22
    151a:	cc 0c       	add	r12, r12
    151c:	dd 1c       	adc	r13, r13
    151e:	ee 1c       	adc	r14, r14
    1520:	ff 1c       	adc	r15, r15
    1522:	cc 0c       	add	r12, r12
    1524:	dd 1c       	adc	r13, r13
    1526:	ee 1c       	adc	r14, r14
    1528:	ff 1c       	adc	r15, r15
    152a:	4c 0d       	add	r20, r12
    152c:	5d 1d       	adc	r21, r13
    152e:	6e 1d       	adc	r22, r14
    1530:	7f 1d       	adc	r23, r15
    1532:	41 0f       	add	r20, r17
    1534:	51 1d       	adc	r21, r1
    1536:	61 1d       	adc	r22, r1
    1538:	71 1d       	adc	r23, r1
    153a:	40 93 d6 06 	sts	0x06D6, r20	; 0x8006d6 <msg_ID.3038>
    153e:	50 93 d7 06 	sts	0x06D7, r21	; 0x8006d7 <msg_ID.3038+0x1>
    1542:	60 93 d8 06 	sts	0x06D8, r22	; 0x8006d8 <msg_ID.3038+0x2>
    1546:	70 93 d9 06 	sts	0x06D9, r23	; 0x8006d9 <msg_ID.3038+0x3>
    154a:	2a c1       	rjmp	.+596    	; 0x17a0 <__vector_18+0x4b6>
							}
							else
							{
								buff->fields[field_index - 1][field_len++] = rx_char;
    154c:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <field_len.3037>
    1550:	31 e0       	ldi	r19, 0x01	; 1
    1552:	39 0f       	add	r19, r25
    1554:	30 93 d4 06 	sts	0x06D4, r19	; 0x8006d4 <field_len.3037>
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	21 50       	subi	r18, 0x01	; 1
    155c:	31 09       	sbc	r19, r1
    155e:	65 e1       	ldi	r22, 0x15	; 21
    1560:	62 9f       	mul	r22, r18
    1562:	a0 01       	movw	r20, r0
    1564:	63 9f       	mul	r22, r19
    1566:	50 0d       	add	r21, r0
    1568:	11 24       	eor	r1, r1
    156a:	c4 0f       	add	r28, r20
    156c:	d5 1f       	adc	r29, r21
    156e:	c9 0f       	add	r28, r25
    1570:	d1 1d       	adc	r29, r1
    1572:	1b 83       	std	Y+3, r17	; 0x03
    1574:	15 c1       	rjmp	.+554    	; 0x17a0 <__vector_18+0x4b6>
						charIndex++;
					}
				}
				else
				{
					if((rx_char == 0x7F) || (rx_char == ' '))   /* Handle backspace and Space */
    1576:	1f 37       	cpi	r17, 0x7F	; 127
    1578:	09 f4       	brne	.+2      	; 0x157c <__vector_18+0x292>
    157a:	1c c1       	rjmp	.+568    	; 0x17b4 <__vector_18+0x4ca>
    157c:	10 32       	cpi	r17, 0x20	; 32
    157e:	09 f4       	brne	.+2      	; 0x1582 <__vector_18+0x298>
    1580:	19 c1       	rjmp	.+562    	; 0x17b4 <__vector_18+0x4ca>
						rx_char = '\0';
					}
					else                                        /* start of new message */
					{
						uint8_t i;
						field_index = 0;
    1582:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <field_index.3036>
						msg_ID = 0;

						msg_ID = msg_ID * 10 + rx_char;
    1586:	81 2f       	mov	r24, r17
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <msg_ID.3038>
    1592:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <msg_ID.3038+0x1>
    1596:	a0 93 d8 06 	sts	0x06D8, r26	; 0x8006d8 <msg_ID.3038+0x2>
    159a:	b0 93 d9 06 	sts	0x06D9, r27	; 0x8006d9 <msg_ID.3038+0x3>

						/* Empty the field buffers */
						for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
						{
							buff->fields[i][0] = '\0';
    159e:	1b 82       	std	Y+3, r1	; 0x03
    15a0:	18 8e       	std	Y+24, r1	; 0x18
    15a2:	1d a6       	std	Y+45, r1	; 0x2d
						}

						receiving_msg = TRUE;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <receiving_msg.3039>
						charIndex++;
    15aa:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <charIndex.3035>
					}
				}

				if(rx_char)
				{
					lb_echo_char(rx_char);
    15ae:	81 2f       	mov	r24, r17
    15b0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lb_echo_char>
    15b4:	ff c0       	rjmp	.+510    	; 0x17b4 <__vector_18+0x4ca>
				}
			}
		}
		else
		{
			if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    15b6:	14 32       	cpi	r17, 0x24	; 36
    15b8:	09 f4       	brne	.+2      	; 0x15bc <__vector_18+0x2d2>
    15ba:	cb c0       	rjmp	.+406    	; 0x1752 <__vector_18+0x468>
    15bc:	11 32       	cpi	r17, 0x21	; 33
    15be:	d1 f4       	brne	.+52     	; 0x15f4 <__vector_18+0x30a>
    15c0:	cc c0       	rjmp	.+408    	; 0x175a <__vector_18+0x470>
			{
				charIndex = 0;
				buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    15c2:	88 83       	st	Y, r24
				field_len = 0;
    15c4:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <field_len.3037>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    15c8:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <msg_ID.3038>
    15cc:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <msg_ID.3038+0x1>
    15d0:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <msg_ID.3038+0x2>
    15d4:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <msg_ID.3038+0x3>
				receiving_msg = TRUE;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <receiving_msg.3039>

				/* Empty the field buffers */
				for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
				{
					buff->fields[field_index][0] = '\0';
    15de:	1b 82       	std	Y+3, r1	; 0x03
    15e0:	18 8e       	std	Y+24, r1	; 0x18
    15e2:	1d a6       	std	Y+45, r1	; 0x2d
				}

				field_index = 0;
    15e4:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <field_index.3036>
					field_index = 0;
					buff = NULL;
				}
			}

			if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    15e8:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <charIndex.3035>
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <charIndex.3035>
    15f2:	e0 c0       	rjmp	.+448    	; 0x17b4 <__vector_18+0x4ca>
					buff->fields[field_index][0] = '\0';
				}

				field_index = 0;
			}
			else if(receiving_msg)
    15f4:	80 91 da 06 	lds	r24, 0x06DA	; 0x8006da <receiving_msg.3039>
    15f8:	88 23       	and	r24, r24
    15fa:	09 f4       	brne	.+2      	; 0x15fe <__vector_18+0x314>
    15fc:	83 c0       	rjmp	.+262    	; 0x1704 <__vector_18+0x41a>
			{
				if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    15fe:	1c 32       	cpi	r17, 0x2C	; 44
    1600:	31 f0       	breq	.+12     	; 0x160e <__vector_18+0x324>
    1602:	1b 33       	cpi	r17, 0x3B	; 59
    1604:	09 f4       	brne	.+2      	; 0x1608 <__vector_18+0x31e>
    1606:	be c0       	rjmp	.+380    	; 0x1784 <__vector_18+0x49a>
    1608:	1f 33       	cpi	r17, 0x3F	; 63
    160a:	e9 f5       	brne	.+122    	; 0x1686 <__vector_18+0x39c>
    160c:	b0 c0       	rjmp	.+352    	; 0x176e <__vector_18+0x484>
				{
					/* if(field_index == 0) // message ID received */
					if(field_index > 0)
    160e:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <field_index.3036>
    1612:	88 23       	and	r24, r24
    1614:	09 f4       	brne	.+2      	; 0x1618 <__vector_18+0x32e>
    1616:	c8 c0       	rjmp	.+400    	; 0x17a8 <__vector_18+0x4be>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	21 50       	subi	r18, 0x01	; 1
    161e:	31 09       	sbc	r19, r1
    1620:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <field_len.3037>
    1624:	45 e1       	ldi	r20, 0x15	; 21
    1626:	42 9f       	mul	r20, r18
    1628:	f0 01       	movw	r30, r0
    162a:	43 9f       	mul	r20, r19
    162c:	f0 0d       	add	r31, r0
    162e:	11 24       	eor	r1, r1
    1630:	ec 0f       	add	r30, r28
    1632:	fd 1f       	adc	r31, r29
    1634:	e9 0f       	add	r30, r25
    1636:	f1 1d       	adc	r31, r1
    1638:	13 82       	std	Z+3, r1	; 0x03
					}

					field_index++;
    163a:	8f 5f       	subi	r24, 0xFF	; 255
    163c:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <field_index.3036>
					field_len = 0;
    1640:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <field_len.3037>

					if(rx_char == ';')
    1644:	1b 33       	cpi	r17, 0x3B	; 59
    1646:	69 f4       	brne	.+26     	; 0x1662 <__vector_18+0x378>
					{
						if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    1648:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <charIndex.3035>
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	30 f0       	brcs	.+12     	; 0x165c <__vector_18+0x372>
						{
							buff->id = msg_ID;
    1650:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <msg_ID.3038>
    1654:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <msg_ID.3038+0x1>
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	89 83       	std	Y+1, r24	; 0x01
						}
						receiving_msg = FALSE;
    165c:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <receiving_msg.3039>
    1660:	96 c0       	rjmp	.+300    	; 0x178e <__vector_18+0x4a4>
					}
					else if(rx_char == '?')
    1662:	1f 33       	cpi	r17, 0x3F	; 63
    1664:	09 f0       	breq	.+2      	; 0x1668 <__vector_18+0x37e>
    1666:	69 c0       	rjmp	.+210    	; 0x173a <__vector_18+0x450>
					{
						buff->type = LINKBUS_MSG_QUERY;
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	88 83       	st	Y, r24
						if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    166c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <charIndex.3035>
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	30 f0       	brcs	.+12     	; 0x1680 <__vector_18+0x396>
						{
							buff->id = msg_ID;
    1674:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <msg_ID.3038>
    1678:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <msg_ID.3038+0x1>
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
						}
						receiving_msg = FALSE;
    1680:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <receiving_msg.3039>
    1684:	84 c0       	rjmp	.+264    	; 0x178e <__vector_18+0x4a4>
						buff = 0;
					}
				}
				else
				{
					if(field_index == 0)    /* message ID received */
    1686:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <field_index.3036>
    168a:	81 11       	cpse	r24, r1
    168c:	27 c0       	rjmp	.+78     	; 0x16dc <__vector_18+0x3f2>
					{
						msg_ID = msg_ID * 10 + rx_char;
    168e:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <msg_ID.3038>
    1692:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <msg_ID.3038+0x1>
    1696:	a0 91 d8 06 	lds	r26, 0x06D8	; 0x8006d8 <msg_ID.3038+0x2>
    169a:	b0 91 d9 06 	lds	r27, 0x06D9	; 0x8006d9 <msg_ID.3038+0x3>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	aa 1f       	adc	r26, r26
    16a4:	bb 1f       	adc	r27, r27
    16a6:	ac 01       	movw	r20, r24
    16a8:	bd 01       	movw	r22, r26
    16aa:	44 0f       	add	r20, r20
    16ac:	55 1f       	adc	r21, r21
    16ae:	66 1f       	adc	r22, r22
    16b0:	77 1f       	adc	r23, r23
    16b2:	44 0f       	add	r20, r20
    16b4:	55 1f       	adc	r21, r21
    16b6:	66 1f       	adc	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	84 0f       	add	r24, r20
    16bc:	95 1f       	adc	r25, r21
    16be:	a6 1f       	adc	r26, r22
    16c0:	b7 1f       	adc	r27, r23
    16c2:	81 0f       	add	r24, r17
    16c4:	91 1d       	adc	r25, r1
    16c6:	a1 1d       	adc	r26, r1
    16c8:	b1 1d       	adc	r27, r1
    16ca:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <msg_ID.3038>
    16ce:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <msg_ID.3038+0x1>
    16d2:	a0 93 d8 06 	sts	0x06D8, r26	; 0x8006d8 <msg_ID.3038+0x2>
    16d6:	b0 93 d9 06 	sts	0x06D9, r27	; 0x8006d9 <msg_ID.3038+0x3>
    16da:	2f c0       	rjmp	.+94     	; 0x173a <__vector_18+0x450>
					}
					else
					{
						buff->fields[field_index - 1][field_len++] = rx_char;
    16dc:	40 91 d4 06 	lds	r20, 0x06D4	; 0x8006d4 <field_len.3037>
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	94 0f       	add	r25, r20
    16e4:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <field_len.3037>
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	55 e1       	ldi	r21, 0x15	; 21
    16ee:	58 9f       	mul	r21, r24
    16f0:	90 01       	movw	r18, r0
    16f2:	59 9f       	mul	r21, r25
    16f4:	30 0d       	add	r19, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	c2 0f       	add	r28, r18
    16fa:	d3 1f       	adc	r29, r19
    16fc:	c4 0f       	add	r28, r20
    16fe:	d1 1d       	adc	r29, r1
    1700:	1b 83       	std	Y+3, r17	; 0x03
    1702:	1b c0       	rjmp	.+54     	; 0x173a <__vector_18+0x450>
					}
				}
			}
			else if(rx_char == 0x0D)    /* Handle carriage return */
    1704:	1d 30       	cpi	r17, 0x0D	; 13
    1706:	c9 f4       	brne	.+50     	; 0x173a <__vector_18+0x450>
			{
				if(g_LB_attached_device == NO_ID)
    1708:	80 91 18 07 	lds	r24, 0x0718	; 0x800718 <g_LB_attached_device>
    170c:	81 11       	cpse	r24, r1
    170e:	15 c0       	rjmp	.+42     	; 0x173a <__vector_18+0x450>
				{
					buff->id = MESSAGE_TTY;
    1710:	81 e7       	ldi	r24, 0x71	; 113
    1712:	94 e2       	ldi	r25, 0x24	; 36
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
					charIndex = LINKBUS_MAX_MSG_LENGTH;
					field_len = 0;
    1718:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <field_len.3037>
					msg_ID = LINKBUS_MSG_UNKNOWN;
    171c:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <msg_ID.3038>
    1720:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <msg_ID.3038+0x1>
    1724:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <msg_ID.3038+0x2>
    1728:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <msg_ID.3038+0x3>
					field_index = 0;
    172c:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <field_index.3036>
					buff = NULL;
    1730:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <buff.3034+0x1>
    1734:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <buff.3034>
    1738:	07 c0       	rjmp	.+14     	; 0x1748 <__vector_18+0x45e>
				}
			}

			if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    173a:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <charIndex.3035>
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <charIndex.3035>
    1744:	8b 34       	cpi	r24, 0x4B	; 75
    1746:	b0 f1       	brcs	.+108    	; 0x17b4 <__vector_18+0x4ca>
			{
				receiving_msg = FALSE;
    1748:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <receiving_msg.3039>
				charIndex = 0;
    174c:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <charIndex.3035>
			}
		}
	}
}
    1750:	31 c0       	rjmp	.+98     	; 0x17b4 <__vector_18+0x4ca>
		}
		else
		{
			if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
			{
				charIndex = 0;
    1752:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <charIndex.3035>
				buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	34 cf       	rjmp	.-408    	; 0x15c2 <__vector_18+0x2d8>
		}
		else
		{
			if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
			{
				charIndex = 0;
    175a:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <charIndex.3035>
				buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	30 cf       	rjmp	.-416    	; 0x15c2 <__vector_18+0x2d8>
					if(field_index > 0)
					{
						buff->fields[field_index - 1][field_len] = 0;
					}

					field_index++;
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <field_index.3036>
					field_len = 0;
    1768:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <field_len.3037>
    176c:	7d cf       	rjmp	.-262    	; 0x1668 <__vector_18+0x37e>
			else if(receiving_msg)
			{
				if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
				{
					/* if(field_index == 0) // message ID received */
					if(field_index > 0)
    176e:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <field_index.3036>
    1772:	88 23       	and	r24, r24
    1774:	b1 f3       	breq	.-20     	; 0x1762 <__vector_18+0x478>
    1776:	50 cf       	rjmp	.-352    	; 0x1618 <__vector_18+0x32e>
					{
						buff->fields[field_index - 1][field_len] = 0;
					}

					field_index++;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <field_index.3036>
					field_len = 0;
    177e:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <field_len.3037>
    1782:	62 cf       	rjmp	.-316    	; 0x1648 <__vector_18+0x35e>
			else if(receiving_msg)
			{
				if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
				{
					/* if(field_index == 0) // message ID received */
					if(field_index > 0)
    1784:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <field_index.3036>
    1788:	81 11       	cpse	r24, r1
    178a:	46 cf       	rjmp	.-372    	; 0x1618 <__vector_18+0x32e>
    178c:	f5 cf       	rjmp	.-22     	; 0x1778 <__vector_18+0x48e>
						receiving_msg = FALSE;
					}

					if(!receiving_msg)
					{
						buff = 0;
    178e:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <buff.3034+0x1>
    1792:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <buff.3034>
    1796:	d1 cf       	rjmp	.-94     	; 0x173a <__vector_18+0x450>
							{
								buff->fields[field_index - 1][field_len++] = rx_char;
							}
						}

						charIndex++;
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <charIndex.3035>
    179e:	0a c0       	rjmp	.+20     	; 0x17b4 <__vector_18+0x4ca>
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <charIndex.3035>
    17a6:	03 cf       	rjmp	.-506    	; 0x15ae <__vector_18+0x2c4>
					if(field_index > 0)
					{
						buff->fields[field_index - 1][field_len] = 0;
					}

					field_index++;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <field_index.3036>
					field_len = 0;
    17ae:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <field_len.3037>
    17b2:	c3 cf       	rjmp	.-122    	; 0x173a <__vector_18+0x450>
				receiving_msg = FALSE;
				charIndex = 0;
			}
		}
	}
}
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	bf 91       	pop	r27
    17be:	af 91       	pop	r26
    17c0:	9f 91       	pop	r25
    17c2:	8f 91       	pop	r24
    17c4:	7f 91       	pop	r23
    17c6:	6f 91       	pop	r22
    17c8:	5f 91       	pop	r21
    17ca:	4f 91       	pop	r20
    17cc:	3f 91       	pop	r19
    17ce:	2f 91       	pop	r18
    17d0:	1f 91       	pop	r17
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	0f 90       	pop	r0
    17e0:	1f 90       	pop	r1
    17e2:	18 95       	reti

000017e4 <__vector_19>:
 *
 * This ISR is responsible for filling the USART transmit buffer. It
 * implements the transmit function of the Linkbus.
 ************************************************************************/
ISR(USART_UDRE_vect)
{
    17e4:	1f 92       	push	r1
    17e6:	0f 92       	push	r0
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	0f 92       	push	r0
    17ec:	11 24       	eor	r1, r1
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
    1806:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <buff.3054>
    180a:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <buff.3054+0x1>
    180e:	89 2b       	or	r24, r25
    1810:	31 f4       	brne	.+12     	; 0x181e <__vector_19+0x3a>
	{
		buff = nextFullTxBuffer();
    1812:	0e 94 52 00 	call	0xa4	; 0xa4 <nextFullTxBuffer>
    1816:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <buff.3054+0x1>
    181a:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <buff.3054>
	}

	if((*buff)[charIndex])
    181e:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <buff.3054>
    1822:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <buff.3054+0x1>
    1826:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <charIndex.3055>
    182a:	df 01       	movw	r26, r30
    182c:	a8 0f       	add	r26, r24
    182e:	b1 1d       	adc	r27, r1
    1830:	9c 91       	ld	r25, X
    1832:	99 23       	and	r25, r25
    1834:	31 f0       	breq	.+12     	; 0x1842 <__vector_19+0x5e>
	{
		/* Put data into buffer, sends the data */
		UDR0 = (*buff)[charIndex++];
    1836:	8f 5f       	subi	r24, 0xFF	; 255
    1838:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <charIndex.3055>
    183c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1840:	0d c0       	rjmp	.+26     	; 0x185c <__vector_19+0x78>
	}
	else
	{
		charIndex = 0;
    1842:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <charIndex.3055>
		(*buff)[0] = '\0';
    1846:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
    1848:	0e 94 52 00 	call	0xa4	; 0xa4 <nextFullTxBuffer>
    184c:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <buff.3054+0x1>
    1850:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <buff.3054>
		if(!buff)
    1854:	89 2b       	or	r24, r25
    1856:	11 f4       	brne	.+4      	; 0x185c <__vector_19+0x78>
		{
			linkbus_end_tx();
    1858:	0e 94 11 01 	call	0x222	; 0x222 <linkbus_end_tx>
		}
	}
}
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	bf 91       	pop	r27
    1862:	af 91       	pop	r26
    1864:	9f 91       	pop	r25
    1866:	8f 91       	pop	r24
    1868:	7f 91       	pop	r23
    186a:	6f 91       	pop	r22
    186c:	5f 91       	pop	r21
    186e:	4f 91       	pop	r20
    1870:	3f 91       	pop	r19
    1872:	2f 91       	pop	r18
    1874:	0f 90       	pop	r0
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	0f 90       	pop	r0
    187a:	1f 90       	pop	r1
    187c:	18 95       	reti

0000187e <saveAllEEPROM>:
		}
	}

	void saveAllEEPROM()
	{
		storeEEbyteIfChanged(&ee_tone_volume_setting, g_tone_volume);
    187e:	60 91 0b 07 	lds	r22, 0x070B	; 0x80070b <g_tone_volume>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <storeEEbyteIfChanged>
		storeEEbyteIfChanged(&ee_main_volume_setting, g_main_volume);
    188a:	60 91 0c 07 	lds	r22, 0x070C	; 0x80070c <g_main_volume>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <storeEEbyteIfChanged>
    1896:	08 95       	ret

00001898 <__vector_6>:
 * The Watchdog timer helps prevent lockups due to hardware problems.
 * It is especially helpful in this application for preventing I2C bus
 * errors from locking up the foreground process.
 ************************************************************************/
ISR(WDT_vect)
{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	2f 93       	push	r18
    18a4:	3f 93       	push	r19
    18a6:	4f 93       	push	r20
    18a8:	5f 93       	push	r21
    18aa:	6f 93       	push	r22
    18ac:	7f 93       	push	r23
    18ae:	8f 93       	push	r24
    18b0:	9f 93       	push	r25
    18b2:	af 93       	push	r26
    18b4:	bf 93       	push	r27
    18b6:	ef 93       	push	r30
    18b8:	ff 93       	push	r31
	static uint8_t limit = 10;

	g_i2c_not_timed_out = FALSE;    /* unstick I2C */
    18ba:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <g_i2c_not_timed_out>
	saveAllEEPROM();                /* Make sure changed values get saved */
    18be:	df df       	rcall	.-66     	; 0x187e <saveAllEEPROM>

	/* Don't allow an unlimited number of WD interrupts to occur without enabling
	 * hardware resets. But a limited number might be required during hardware
	 * initialization. */
	if(!g_enableHardwareWDResets && limit)
    18c0:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <g_enableHardwareWDResets>
    18c4:	81 11       	cpse	r24, r1
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <__vector_6+0x42>
    18c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <limit.3027>
    18cc:	88 23       	and	r24, r24
    18ce:	89 f0       	breq	.+34     	; 0x18f2 <__vector_6+0x5a>
	{
		WDTCSR |= (1 << WDIE);  /* this prevents hardware resets from occurring */
    18d0:	e0 e6       	ldi	r30, 0x60	; 96
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	80 64       	ori	r24, 0x40	; 64
    18d8:	80 83       	st	Z, r24
	}

	if(limit)
    18da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <limit.3027>
    18de:	88 23       	and	r24, r24
    18e0:	41 f0       	breq	.+16     	; 0x18f2 <__vector_6+0x5a>
	{
		limit--;
    18e2:	81 50       	subi	r24, 0x01	; 1
    18e4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <limit.3027>

		if(g_terminal_mode)
    18e8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    18ec:	81 11       	cpse	r24, r1
		{
			lb_send_WDTError();
    18ee:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lb_send_WDTError>
		}
	}
}
    18f2:	ff 91       	pop	r31
    18f4:	ef 91       	pop	r30
    18f6:	bf 91       	pop	r27
    18f8:	af 91       	pop	r26
    18fa:	9f 91       	pop	r25
    18fc:	8f 91       	pop	r24
    18fe:	7f 91       	pop	r23
    1900:	6f 91       	pop	r22
    1902:	5f 91       	pop	r21
    1904:	4f 91       	pop	r20
    1906:	3f 91       	pop	r19
    1908:	2f 91       	pop	r18
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	0f 90       	pop	r0
    1910:	1f 90       	pop	r1
    1912:	18 95       	reti

00001914 <initializeEEPROMVars>:
/**********************
**********************/

	void initializeEEPROMVars(void)
	{
		if(eeprom_read_byte(&ee_interface_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 1e 24 	call	0x483c	; 0x483c <eeprom_read_byte>
    191c:	85 3a       	cpi	r24, 0xA5	; 165
    191e:	69 f4       	brne	.+26     	; 0x193a <initializeEEPROMVars+0x26>
		{
			g_tone_volume = eeprom_read_byte(&ee_tone_volume_setting);
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 1e 24 	call	0x483c	; 0x483c <eeprom_read_byte>
    1928:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <g_tone_volume>
			g_main_volume = eeprom_read_byte(&ee_main_volume_setting);
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 1e 24 	call	0x483c	; 0x483c <eeprom_read_byte>
    1934:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <g_main_volume>
    1938:	08 95       	ret
		}
		else
		{
			g_tone_volume = EEPROM_TONE_VOLUME_DEFAULT;
    193a:	85 e0       	ldi	r24, 0x05	; 5
    193c:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <g_tone_volume>
			g_main_volume = EEPROM_MAIN_VOLUME_DEFAULT;
    1940:	8b e0       	ldi	r24, 0x0B	; 11
    1942:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <g_main_volume>

			saveAllEEPROM();
    1946:	9b df       	rcall	.-202    	; 0x187e <saveAllEEPROM>
			eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    1948:	65 ea       	ldi	r22, 0xA5	; 165
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <eeprom_write_byte>
    1952:	08 95       	ret

00001954 <potValFromAtten>:
	uint16_t potValFromAtten(uint16_t atten)
	{
		uint16_t valLow = 0x00FF;
		uint16_t valHigh = 0;
		
		if(atten)
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	09 f4       	brne	.+2      	; 0x195a <potValFromAtten+0x6>
    1958:	41 c0       	rjmp	.+130    	; 0x19dc <potValFromAtten+0x88>
		{							
			if(atten < 23) // 0xFFF -> 0x23FF
    195a:	87 31       	cpi	r24, 0x17	; 23
    195c:	91 05       	cpc	r25, r1
    195e:	90 f4       	brcc	.+36     	; 0x1984 <potValFromAtten+0x30>
			{
				valHigh = 0xFF00 - (atten * 0x0A00);
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	5a e0       	ldi	r21, 0x0A	; 10
    1964:	84 9f       	mul	r24, r20
    1966:	90 01       	movw	r18, r0
    1968:	85 9f       	mul	r24, r21
    196a:	30 0d       	add	r19, r0
    196c:	94 9f       	mul	r25, r20
    196e:	30 0d       	add	r19, r0
    1970:	11 24       	eor	r1, r1
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	9f ef       	ldi	r25, 0xFF	; 255
    1976:	ac 01       	movw	r20, r24
    1978:	42 1b       	sub	r20, r18
    197a:	53 0b       	sbc	r21, r19
    197c:	9a 01       	movw	r18, r20
		storeEEbyteIfChanged(&ee_main_volume_setting, g_main_volume);
	}
	
	uint16_t potValFromAtten(uint16_t atten)
	{
		uint16_t valLow = 0x00FF;
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	29 c0       	rjmp	.+82     	; 0x19d6 <potValFromAtten+0x82>
		{							
			if(atten < 23) // 0xFFF -> 0x23FF
			{
				valHigh = 0xFF00 - (atten * 0x0A00);
			}
			else if(atten < 41) // 0x23FF -> 0x00FF
    1984:	89 32       	cpi	r24, 0x29	; 41
    1986:	91 05       	cpc	r25, r1
    1988:	78 f4       	brcc	.+30     	; 0x19a8 <potValFromAtten+0x54>
			{
				valHigh = 0x2300 - (0x0200 * (atten - 23));
    198a:	87 59       	subi	r24, 0x97	; 151
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	9c 01       	movw	r18, r24
    1990:	32 2f       	mov	r19, r18
    1992:	22 27       	eor	r18, r18
    1994:	33 0f       	add	r19, r19
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	93 e2       	ldi	r25, 0x23	; 35
    199a:	ac 01       	movw	r20, r24
    199c:	42 1b       	sub	r20, r18
    199e:	53 0b       	sbc	r21, r19
    19a0:	9a 01       	movw	r18, r20
		storeEEbyteIfChanged(&ee_main_volume_setting, g_main_volume);
	}
	
	uint16_t potValFromAtten(uint16_t atten)
	{
		uint16_t valLow = 0x00FF;
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	17 c0       	rjmp	.+46     	; 0x19d6 <potValFromAtten+0x82>
			{
				valHigh = 0x2300 - (0x0200 * (atten - 23));
			}
			else // 0x00FF -> 0x0000
			{
				valLow = (255 * (100 - atten)) / 59;
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	48 9f       	mul	r20, r24
    19ac:	90 01       	movw	r18, r0
    19ae:	49 9f       	mul	r20, r25
    19b0:	30 0d       	add	r19, r0
    19b2:	38 1b       	sub	r19, r24
    19b4:	11 24       	eor	r1, r1
    19b6:	24 56       	subi	r18, 0x64	; 100
    19b8:	3c 49       	sbci	r19, 0x9C	; 156
    19ba:	a9 ed       	ldi	r26, 0xD9	; 217
    19bc:	ba e8       	ldi	r27, 0x8A	; 138
    19be:	0e 94 a8 20 	call	0x4150	; 0x4150 <__umulhisi3>
    19c2:	96 95       	lsr	r25
    19c4:	87 95       	ror	r24
    19c6:	92 95       	swap	r25
    19c8:	82 95       	swap	r24
    19ca:	8f 70       	andi	r24, 0x0F	; 15
    19cc:	89 27       	eor	r24, r25
    19ce:	9f 70       	andi	r25, 0x0F	; 15
    19d0:	89 27       	eor	r24, r25
	}
	
	uint16_t potValFromAtten(uint16_t atten)
	{
		uint16_t valLow = 0x00FF;
		uint16_t valHigh = 0;
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
			else // 0x00FF -> 0x0000
			{
				valLow = (255 * (100 - atten)) / 59;
			}
			
			valHigh += valLow;
    19d6:	82 0f       	add	r24, r18
    19d8:	93 1f       	adc	r25, r19
    19da:	08 95       	ret
	}
	
	uint16_t potValFromAtten(uint16_t atten)
	{
		uint16_t valLow = 0x00FF;
		uint16_t valHigh = 0;
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
			
			valHigh += valLow;
		}
		
		return valHigh;
	}
    19e0:	08 95       	ret

000019e2 <main>:
 * need to be handled in the foreground, not in ISRs. This includes
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	60 97       	sbiw	r28, 0x10	; 16
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63

	LinkbusRxBuffer* lb_buff = 0;

	/**
	 * Initialize internal EEPROM if needed */
	initializeEEPROMVars();
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	8e df       	rcall	.-228    	; 0x1914 <initializeEEPROMVars>

		DDRB |= (1 << PORTB0);                                                                  /* PB0 is Radio Enable output; */
    19f8:	20 9a       	sbi	0x04, 0	; 4
		PORTB |= (1 << PORTB0) | (1 << PORTB2);                                                 /* Enable Radio hardware, and pull up RTC interrupt pin */
    19fa:	85 b1       	in	r24, 0x05	; 5
    19fc:	85 60       	ori	r24, 0x05	; 5
    19fe:	85 b9       	out	0x05, r24	; 5

	/**
	 * Set up PortD for reading switches and PWM tone generation */

		DDRD  = 0b11100010;     /* All pins in PORTD are inputs, except PD5 (tone out), PD6 (audio pwr) and PD7 (LCD reset) */
    1a00:	82 ee       	ldi	r24, 0xE2	; 226
    1a02:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0b00011100;     /* Pull-ups enabled on all input pins, all outputs set to high except PD6 (audio power) */
    1a04:	8c e1       	ldi	r24, 0x1C	; 28
    1a06:	8b b9       	out	0x0b, r24	; 11

	/**
	 * Set up PortC */

		DDRC = 0b00000011;                                          /* PC4 and PC5 are inputs (should be true by default); PC2 and PC3 are used for their ADC function; PC1 and PC0 outputs control main volume */
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	87 b9       	out	0x07, r24	; 7
		PORTC = (I2C_PINS | (1 << PORTC2));                         /* Set all Port C pins low, except I2C lines and PC2; includes output port PORTC0 and PORTC1 (main volume controls) */
    1a0c:	84 e3       	ldi	r24, 0x34	; 52
    1a0e:	88 b9       	out	0x08, r24	; 8
		linkbus_init();
    1a10:	0e 94 35 01 	call	0x26a	; 0x26a <linkbus_init>

	/**
	 * PD5 (OC0B) is PWM output for audio tone generation
	 * Write 8-bit registers for TIMER0 */
	OCR0A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    1a14:	9c e0       	ldi	r25, 0x0C	; 12
    1a16:	97 bd       	out	0x27, r25	; 39
	TCCR0A |= (1 << WGM01);                             /* set CTC with OCRA */
    1a18:	84 b5       	in	r24, 0x24	; 36
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);                /* 1024 Prescaler */
    1a1e:	85 b5       	in	r24, 0x25	; 37
    1a20:	85 60       	ori	r24, 0x05	; 5
    1a22:	85 bd       	out	0x25, r24	; 37
/*	TIMSK0 &= ~(1 << OCIE0B); // disable compare interrupt - disabled by default */

	/**
	 * TIMER2 is for periodic interrupts */
	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    1a24:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2A |= (1 << WGM01);                             /* set CTC with OCRA */
    1a28:	e0 eb       	ldi	r30, 0xB0	; 176
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	82 60       	ori	r24, 0x02	; 2
    1a30:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    1a32:	e1 eb       	ldi	r30, 0xB1	; 177
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	87 60       	ori	r24, 0x07	; 7
    1a3a:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE0B);                            /* enable compare interrupt */
    1a3c:	e0 e7       	ldi	r30, 0x70	; 112
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	84 60       	ori	r24, 0x04	; 4
    1a44:	80 83       	st	Z, r24

	/**
	 * Set up ADC */
	ADMUX |= (1 << REFS0);
    1a46:	ec e7       	ldi	r30, 0x7C	; 124
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 64       	ori	r24, 0x40	; 64
    1a4e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
    1a50:	ea e7       	ldi	r30, 0x7A	; 122
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	87 68       	ori	r24, 0x87	; 135
    1a58:	80 83       	st	Z, r24

	/**
	 * Set up pin interrupts */
		PCICR |= (1 << PCIE2) | (1 << PCIE1) | (1 << PCIE0);    /* Enable pin change interrupts PCI2, PCI1 and PCI0 */
    1a5a:	e8 e6       	ldi	r30, 0x68	; 104
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	87 60       	ori	r24, 0x07	; 7
    1a62:	80 83       	st	Z, r24
		PCMSK2 |= 0b00011100;                                   /* Enable port D pin change interrupts PD2, PD3, and PD4 */
    1a64:	ed e6       	ldi	r30, 0x6D	; 109
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	8c 61       	ori	r24, 0x1C	; 28
    1a6c:	80 83       	st	Z, r24
		PCMSK1 |= (1 << PCINT10);                               /* Enable port C pin change interrupts on pin PC2 */
    1a6e:	ec e6       	ldi	r30, 0x6C	; 108
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	84 60       	ori	r24, 0x04	; 4
    1a76:	80 83       	st	Z, r24
		PCMSK0 |= (1 << PORTB2);                                /* | (1 << QUAD_A) | (1 << QUAD_B); // Enable port B pin 2 and quadrature changes on rotary encoder. */
    1a78:	eb e6       	ldi	r30, 0x6B	; 107
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	84 60       	ori	r24, 0x04	; 4
    1a80:	80 83       	st	Z, r24

	cpu_irq_enable();                                           /* same as sei(); */
    1a82:	78 94       	sei

	g_low_voltage_shutdown_delay = POWERUP_LOW_VOLTAGE_DELAY;
    1a84:	84 e8       	ldi	r24, 0x84	; 132
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    1a8c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_low_voltage_shutdown_delay>

	/**
	 * Enable watchdog interrupts before performing I2C calls that might cause a lockup */
	wdt_init(WD_SW_RESETS);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	9e d9       	rcall	.-3268   	; 0xdd0 <wdt_init>

	/**
	 * Initialize the receiver */

	init_receiver();
    1a94:	24 d7       	rcall	.+3656   	; 0x28de <init_receiver>
    1a96:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
	
	/**
	 * Initialize port expander on receiver board */
	pcf8574_writePort(g_receiver_port_shadow); /* initialize receiver port expander */
    1a9a:	0e 94 81 19 	call	0x3302	; 0x3302 <pcf8574_writePort>
    1a9e:	a8 95       	wdr

	/**
	 * The watchdog must be petted periodically to keep it from barking */
	wdt_reset();                /* HW watchdog */
    1aa0:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <g_tone_volume>

	/**
	 * Initialize tone volume setting */

		ad5245_set_potentiometer(TONE_POT_VAL(g_tone_volume));    /* move to receiver initialization */
    1aa4:	9f ee       	ldi	r25, 0xEF	; 239
    1aa6:	89 9f       	mul	r24, r25
    1aa8:	80 2d       	mov	r24, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	81 50       	subi	r24, 0x01	; 1
    1aae:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <ad5245_set_potentiometer>
    1ab2:	a8 95       	wdr
//		pcf8574_writePort(0b00000000); /* initialize receiver port expander */

	wdt_reset();                                    /* HW watchdog */
    1ab4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>

	if(g_terminal_mode)
    1ab8:	88 23       	and	r24, r24
    1aba:	39 f0       	breq	.+14     	; 0x1aca <main+0xe8>
    1abc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lb_send_NewLine>
	{
		lb_send_NewLine();
    1ac0:	0e 94 75 01 	call	0x2ea	; 0x2ea <lb_send_Help>
		lb_send_Help();
    1ac4:	0e 94 6d 01 	call	0x2da	; 0x2da <lb_send_NewPrompt>
		lb_send_NewPrompt();		
    1ac8:	0c c0       	rjmp	.+24     	; 0x1ae2 <main+0x100>
    1aca:	0e 94 2d 05 	call	0xa5a	; 0xa5a <lb_send_sync>
	}
	else 
	{
		lb_send_sync();                                 /* send test pattern to help synchronize baud rate with any attached device */
    1ace:	0e 94 fe 00 	call	0x1fc	; 0x1fc <linkbusTxInProgress>
		while(linkbusTxInProgress())
    1ad2:	81 11       	cpse	r24, r1
    1ad4:	fc cf       	rjmp	.-8      	; 0x1ace <main+0xec>
    1ad6:	a8 95       	wdr
		{
			;                                           /* wait until transmit finishes */
		}
		wdt_reset();
    1ad8:	40 e0       	ldi	r20, 0x00	; 0

		lb_send_ID(LINKBUS_MSG_COMMAND, RECEIVER_ID, NO_ID);
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	0e 94 bc 04 	call	0x978	; 0x978 <lb_send_ID>
    1ae2:	a8 95       	wdr
	}
	
	wdt_reset();
    1ae4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <linkbusTxInProgress>
			g_seconds_count = 0;    /* sync seconds count to clock */
			ds3231_1s_sqw(ON);
	   #endif    /* #ifdef ENABLE_1_SEC_INTERRUPTS */
	#endif

	while(linkbusTxInProgress())
    1ae8:	81 11       	cpse	r24, r1
    1aea:	fc cf       	rjmp	.-8      	; 0x1ae4 <main+0x102>
    1aec:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <g_send_ID_countdown+0x1>
	{
	}               /* wait until transmit finishes */

	g_send_ID_countdown = 0; /* Do not send ID broadcasts initially */
    1af0:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <g_send_ID_countdown>
	wdt_init(WD_HW_RESETS); /* enable hardware interrupts */
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	6c d9       	rcall	.-3368   	; 0xdd0 <wdt_init>
    1af8:	81 e0       	ldi	r24, 0x01	; 1
	
	g_initialization_complete = TRUE;
    1afa:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <g_initialization_complete>
    1afe:	21 2c       	mov	r2, r1
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
	BOOL attach_success = TRUE; // Start out in TTY terminal communication mode
	uint16_t hold_tick_count = 0;
    1b00:	31 2c       	mov	r3, r1
    1b02:	cc 24       	eor	r12, r12
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
	BOOL attach_success = TRUE; // Start out in TTY terminal communication mode
    1b04:	c3 94       	inc	r12
    1b06:	0f 2e       	mov	r0, r31
		/***************************************
		* Check for Power Off
		***************************************/
		if(g_battery_measurements_active)                                                                           /* if ADC battery measurements have stabilized */
		{
			if((g_lastConversionResult[BATTERY_READING] < POWER_OFF_VOLT_THRESH_MV) && g_sufficient_power_detected) /* Battery measurement indicates headphones removed */
    1b08:	fe ef       	ldi	r31, 0xFE	; 254
    1b0a:	af 2e       	mov	r10, r31
    1b0c:	f6 e0       	ldi	r31, 0x06	; 6
    1b0e:	bf 2e       	mov	r11, r31
    1b10:	f0 2d       	mov	r31, r0
    1b12:	68 94       	set

							if(reportedID != RECEIVER_ID)
							{
								lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
								attach_success = FALSE;
								g_send_ID_countdown = SEND_ID_DELAY;
    1b14:	88 24       	eor	r8, r8
    1b16:	82 f8       	bld	r8, 2
    1b18:	99 24       	eor	r9, r9
    1b1a:	94 f8       	bld	r9, 4
    1b1c:	44 24       	eor	r4, r4
				
				case MESSAGE_TIME:
				{
						if(lb_buff->fields[FIELD1][0])
						{
							volatile int32_t time = -1; // prevent optimizer from breaking this
    1b1e:	4a 94       	dec	r4
    1b20:	54 2c       	mov	r5, r4
    1b22:	32 01       	movw	r6, r4
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <main+0x146>
    1b26:	18 01       	movw	r2, r16
 * need to be handled in the foreground, not in ISRs. This includes
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
    1b28:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <g_volume_set_beep_delay>
	while(1)
	{
		/**************************************
		 * Beep once at new volume level if the volume was set
		 ***************************************/
		if(g_volume_set_beep_delay)
    1b2c:	88 23       	and	r24, r24
    1b2e:	79 f0       	breq	.+30     	; 0x1b4e <main+0x16c>
    1b30:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <g_volume_set_beep_delay>
		{
			g_volume_set_beep_delay--;
    1b34:	81 50       	subi	r24, 0x01	; 1
    1b36:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <g_volume_set_beep_delay>
    1b3a:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <g_volume_set_beep_delay>

			if(!g_volume_set_beep_delay)
    1b3e:	81 11       	cpse	r24, r1
    1b40:	06 c0       	rjmp	.+12     	; 0x1b4e <main+0x16c>
    1b42:	84 e6       	ldi	r24, 0x64	; 100
			{
				g_beep_length = BEEP_SHORT;
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <g_beep_length+0x1>
    1b4a:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <g_beep_length>
    1b4e:	f8 94       	cli
		}

		/**************************************
		* The watchdog must be petted periodically to keep it from barking
		**************************************/
		cli(); wdt_reset(); /* HW watchdog */ sei();
    1b50:	a8 95       	wdr
    1b52:	78 94       	sei
    1b54:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <g_battery_measurements_active>

		/***************************************
		* Check for Power Off
		***************************************/
		if(g_battery_measurements_active)                                                                           /* if ADC battery measurements have stabilized */
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <main+0x17c>
    1b5c:	a7 c4       	rjmp	.+2382   	; 0x24ac <main+0xaca>
    1b5e:	f5 01       	movw	r30, r10
		{
			if((g_lastConversionResult[BATTERY_READING] < POWER_OFF_VOLT_THRESH_MV) && g_sufficient_power_detected) /* Battery measurement indicates headphones removed */
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	8d 33       	cpi	r24, 0x3D	; 61
    1b66:	91 40       	sbci	r25, 0x01	; 1
    1b68:	08 f0       	brcs	.+2      	; 0x1b6c <main+0x18a>
    1b6a:	71 c0       	rjmp	.+226    	; 0x1c4e <main+0x26c>
    1b6c:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <g_sufficient_power_detected>
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <main+0x194>
    1b74:	6c c0       	rjmp	.+216    	; 0x1c4e <main+0x26c>
    1b76:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_headphone_removed_delay>
			{
				if(!g_headphone_removed_delay)
    1b7a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_headphone_removed_delay+0x1>
    1b7e:	89 2b       	or	r24, r25
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <main+0x1a2>
    1b82:	94 c4       	rjmp	.+2344   	; 0x24ac <main+0xaca>
    1b84:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <g_powering_off>
				{
					if(!g_powering_off)                                                              /* Handle the case of power off immediately after power on */
    1b88:	81 11       	cpse	r24, r1
    1b8a:	0a c0       	rjmp	.+20     	; 0x1ba0 <main+0x1be>
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
					{
						g_powering_off = TRUE;
    1b8e:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <g_powering_off>
    1b92:	5e 98       	cbi	0x0b, 6	; 11
						PORTD &= ~(1 << PORTD6);    /* Disable audio power */
    1b94:	88 e8       	ldi	r24, 0x88	; 136
						g_power_off_countdown = POWER_OFF_DELAY;
    1b96:	93 e1       	ldi	r25, 0x13	; 19
    1b98:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    1b9c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
					}

					g_backlight_off_countdown = g_backlight_delay_value;    /* turn on backlight */
    1ba2:	9f ef       	ldi	r25, 0xFF	; 255
    1ba4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_backlight_off_countdown+0x1>
    1ba8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_backlight_off_countdown>
    1bac:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>


					if(g_terminal_mode)
    1bb0:	88 23       	and	r24, r24
    1bb2:	71 f1       	breq	.+92     	; 0x1c10 <main+0x22e>
    1bb4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
					{
						static uint8_t lastCountdown = 0;
						uint8_t countdown = (uint8_t)((10 * g_power_off_countdown) / POWER_OFF_DELAY);
    1bb8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	22 0f       	add	r18, r18
    1bc0:	33 1f       	adc	r19, r19
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	28 0f       	add	r18, r24
    1bd0:	39 1f       	adc	r19, r25
    1bd2:	36 95       	lsr	r19
    1bd4:	27 95       	ror	r18
    1bd6:	36 95       	lsr	r19
    1bd8:	27 95       	ror	r18
    1bda:	36 95       	lsr	r19
    1bdc:	27 95       	ror	r18
    1bde:	a7 e3       	ldi	r26, 0x37	; 55
    1be0:	ba e1       	ldi	r27, 0x1A	; 26
    1be2:	0e 94 a8 20 	call	0x4150	; 0x4150 <__umulhisi3>
    1be6:	8c 01       	movw	r16, r24
    1be8:	00 24       	eor	r0, r0
    1bea:	00 0f       	add	r16, r16
    1bec:	11 1f       	adc	r17, r17
    1bee:	00 1c       	adc	r0, r0
    1bf0:	00 0f       	add	r16, r16
    1bf2:	11 1f       	adc	r17, r17
    1bf4:	00 1c       	adc	r0, r0
    1bf6:	01 2f       	mov	r16, r17
    1bf8:	10 2d       	mov	r17, r0
    1bfa:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <lastCountdown.3068>

						if(countdown != lastCountdown)
    1bfe:	80 17       	cp	r24, r16
    1c00:	39 f0       	breq	.+14     	; 0x1c10 <main+0x22e>
    1c02:	80 2f       	mov	r24, r16
						{
							lb_poweroff_msg(countdown);
    1c04:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lb_poweroff_msg>
    1c08:	0e 94 6d 01 	call	0x2da	; 0x2da <lb_send_NewPrompt>
							lb_send_NewPrompt();
    1c0c:	00 93 d0 06 	sts	0x06D0, r16	; 0x8006d0 <lastCountdown.3068>
							lastCountdown = countdown;
    1c10:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
						}
					}

					if(!g_power_off_countdown)
    1c14:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    1c18:	89 2b       	or	r24, r25
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <main+0x23c>
    1c1c:	47 c4       	rjmp	.+2190   	; 0x24ac <main+0xaca>
					{
						saveAllEEPROM();
    1c1e:	2f de       	rcall	.-930    	; 0x187e <saveAllEEPROM>
    1c20:	29 98       	cbi	0x05, 1	; 5
						PORTB &= ~(1 << PORTB1);    /* latch power off */
    1c22:	88 e8       	ldi	r24, 0x88	; 136
						g_power_off_countdown = POWER_OFF_DELAY;
    1c24:	93 e1       	ldi	r25, 0x13	; 19
    1c26:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    1c2a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>
    1c2e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>

						while(1)    /* wait for power-off */
						{
							/* The following things can prevent shutdown
							 * HW watchdog will expire and reset the device eventually if none of the following happens first: */
							if(!g_power_off_countdown)
    1c32:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    1c36:	89 2b       	or	r24, r25
    1c38:	31 f0       	breq	.+12     	; 0x1c46 <main+0x264>
    1c3a:	f5 01       	movw	r30, r10
							{
								break;  /* Timeout waiting for power to be removed */
							}

							if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	84 3c       	cpi	r24, 0xC4	; 196
    1c42:	91 40       	sbci	r25, 0x01	; 1
    1c44:	a0 f3       	brcs	.-24     	; 0x1c2e <main+0x24c>
    1c46:	a8 95       	wdr
						}

						/**
						 * Execution reaches here if power was restored before the processor shut down, or if shutdown timed out.
						 * Attempt to restart things as if nothing has happened. */
						wdt_reset();    /* HW watchdog */
    1c48:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <g_powering_off>
						g_powering_off = FALSE;
    1c4c:	2f c4       	rjmp	.+2142   	; 0x24ac <main+0xaca>
    1c4e:	f5 01       	movw	r30, r10
					}
				}
			}
			else if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)  /* Battery measurement indicates sufficient voltage */
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	93 81       	ldd	r25, Z+3	; 0x03
    1c54:	84 3c       	cpi	r24, 0xC4	; 196
    1c56:	91 40       	sbci	r25, 0x01	; 1
    1c58:	e8 f0       	brcs	.+58     	; 0x1c94 <main+0x2b2>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
			{
				g_sufficient_power_detected = TRUE;
    1c5c:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <g_sufficient_power_detected>
    1c60:	84 e6       	ldi	r24, 0x64	; 100
				g_headphone_removed_delay = HEADPHONE_REMOVED_DELAY;
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_headphone_removed_delay+0x1>
    1c68:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_headphone_removed_delay>
    1c6c:	88 e2       	ldi	r24, 0x28	; 40
				g_low_voltage_shutdown_delay = LOW_VOLTAGE_DELAY;
    1c6e:	93 e2       	ldi	r25, 0x23	; 35
    1c70:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    1c74:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_low_voltage_shutdown_delay>
    1c78:	88 e8       	ldi	r24, 0x88	; 136
				g_power_off_countdown = POWER_OFF_DELAY;    /* restart countdown */
    1c7a:	93 e1       	ldi	r25, 0x13	; 19
    1c7c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    1c80:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>
    1c84:	29 9a       	sbi	0x05, 1	; 5

				PORTB |= (1 << PORTB1); /* latch power on */
    1c86:	5e 99       	sbic	0x0b, 6	; 11

				if(!(PORTD & (1 << PORTD6))) // If audio amp is powered down, power it up
    1c88:	11 c4       	rjmp	.+2082   	; 0x24ac <main+0xaca>
    1c8a:	5e 9a       	sbi	0x0b, 6	; 11
				{
					PORTD |= (1 << PORTD6); /* Enable audio power */
    1c8c:	8b e0       	ldi	r24, 0x0B	; 11
					g_hw_main_volume = EEPROM_MAIN_VOLUME_DEFAULT;
    1c8e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_hw_main_volume>
    1c92:	0c c4       	rjmp	.+2072   	; 0x24ac <main+0xaca>
    1c94:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_low_voltage_shutdown_delay>
				}
			}
			else
			{
				if(!g_low_voltage_shutdown_delay)
    1c98:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    1c9c:	89 2b       	or	r24, r25
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <main+0x2c0>
    1ca0:	05 c4       	rjmp	.+2058   	; 0x24ac <main+0xaca>
    1ca2:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <g_powering_off>
				{
					if(!g_powering_off)
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	09 c0       	rjmp	.+18     	; 0x1cbc <main+0x2da>
    1caa:	81 e0       	ldi	r24, 0x01	; 1
					{
						g_powering_off = TRUE;
    1cac:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <g_powering_off>
    1cb0:	88 e8       	ldi	r24, 0x88	; 136
						g_power_off_countdown = POWER_OFF_DELAY;
    1cb2:	93 e1       	ldi	r25, 0x13	; 19
    1cb4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    1cb8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>
    1cbc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
					}

					if(!g_power_off_countdown)
    1cc0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    1cc4:	89 2b       	or	r24, r25
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <main+0x2e8>
    1cc8:	f1 c3       	rjmp	.+2018   	; 0x24ac <main+0xaca>
    1cca:	29 98       	cbi	0x05, 1	; 5
					{
						PORTB &= ~(1 << PORTB1);    /* latch power off */
    1ccc:	5e 98       	cbi	0x0b, 6	; 11
						PORTD &= ~(1 << PORTD6);    /* Disable audio power */
    1cce:	f5 01       	movw	r30, r10

						while(1)                        /* wait for power-off */
						{
							/* These things can prevent shutdown
							 * HW watchdog will expire and reset the device eventually if none of the following happens first: */
							if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	84 3c       	cpi	r24, 0xC4	; 196
    1cd6:	91 40       	sbci	r25, 0x01	; 1
    1cd8:	d0 f3       	brcs	.-12     	; 0x1cce <main+0x2ec>
    1cda:	a8 95       	wdr
							{
								break;                  /* Voltage rises sufficiently */
							}
						}

						wdt_reset();                    /* HW watchdog */
    1cdc:	e7 c3       	rjmp	.+1998   	; 0x24ac <main+0xaca>
    1cde:	f8 01       	movw	r30, r16
		 ************************************************************************/
		while((lb_buff = nextFullRxBuffer()))
		{
			LBMessageID msg_id = lb_buff->id;

			switch(msg_id)
    1ce0:	81 81       	ldd	r24, Z+1	; 0x01
    1ce2:	92 81       	ldd	r25, Z+2	; 0x02
    1ce4:	8e 31       	cpi	r24, 0x1E	; 30
    1ce6:	f3 e0       	ldi	r31, 0x03	; 3
    1ce8:	9f 07       	cpc	r25, r31
    1cea:	09 f4       	brne	.+2      	; 0x1cee <main+0x30c>
    1cec:	50 c2       	rjmp	.+1184   	; 0x218e <main+0x7ac>
    1cee:	20 f5       	brcc	.+72     	; 0x1d38 <main+0x356>
    1cf0:	8f 34       	cpi	r24, 0x4F	; 79
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <main+0x316>
    1cf6:	ca c0       	rjmp	.+404    	; 0x1e8c <main+0x4aa>
    1cf8:	60 f4       	brcc	.+24     	; 0x1d12 <main+0x330>
    1cfa:	81 34       	cpi	r24, 0x41	; 65
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <main+0x320>
    1d00:	82 c0       	rjmp	.+260    	; 0x1e06 <main+0x424>
    1d02:	82 34       	cpi	r24, 0x42	; 66
    1d04:	91 05       	cpc	r25, r1
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <main+0x328>
    1d08:	65 c3       	rjmp	.+1738   	; 0x23d4 <main+0x9f2>
    1d0a:	cf 97       	sbiw	r24, 0x3f	; 63
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <main+0x32e>
    1d0e:	bd c3       	rjmp	.+1914   	; 0x248a <main+0xaa8>
    1d10:	6d c3       	rjmp	.+1754   	; 0x23ec <main+0xa0a>
    1d12:	82 35       	cpi	r24, 0x52	; 82
    1d14:	91 05       	cpc	r25, r1
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <main+0x338>
    1d18:	c1 c3       	rjmp	.+1922   	; 0x249c <main+0xaba>
    1d1a:	28 f4       	brcc	.+10     	; 0x1d26 <main+0x344>
    1d1c:	80 35       	cpi	r24, 0x50	; 80
    1d1e:	91 05       	cpc	r25, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <main+0x342>
    1d22:	c5 c0       	rjmp	.+394    	; 0x1eae <main+0x4cc>
    1d24:	b2 c3       	rjmp	.+1892   	; 0x248a <main+0xaa8>
    1d26:	83 35       	cpi	r24, 0x53	; 83
    1d28:	91 05       	cpc	r25, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <main+0x34c>
    1d2c:	59 c3       	rjmp	.+1714   	; 0x23e0 <main+0x9fe>
    1d2e:	84 35       	cpi	r24, 0x54	; 84
    1d30:	91 05       	cpc	r25, r1
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <main+0x354>
    1d34:	b3 c3       	rjmp	.+1894   	; 0x249c <main+0xaba>
    1d36:	a9 c3       	rjmp	.+1874   	; 0x248a <main+0xaa8>
    1d38:	89 3b       	cpi	r24, 0xB9	; 185
    1d3a:	42 e2       	ldi	r20, 0x22	; 34
    1d3c:	94 07       	cpc	r25, r20
    1d3e:	59 f1       	breq	.+86     	; 0x1d96 <main+0x3b4>
    1d40:	a8 f4       	brcc	.+42     	; 0x1d6c <main+0x38a>
    1d42:	88 3b       	cpi	r24, 0xB8	; 184
    1d44:	ec e1       	ldi	r30, 0x1C	; 28
    1d46:	9e 07       	cpc	r25, r30
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <main+0x36a>
    1d4a:	22 c3       	rjmp	.+1604   	; 0x2390 <main+0x9ae>
    1d4c:	28 f4       	brcc	.+10     	; 0x1d58 <main+0x376>
    1d4e:	81 39       	cpi	r24, 0x91	; 145
    1d50:	93 40       	sbci	r25, 0x03	; 3
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <main+0x374>
    1d54:	93 c0       	rjmp	.+294    	; 0x1e7c <main+0x49a>
    1d56:	99 c3       	rjmp	.+1842   	; 0x248a <main+0xaa8>
    1d58:	88 31       	cpi	r24, 0x18	; 24
    1d5a:	4d e1       	ldi	r20, 0x1D	; 29
    1d5c:	94 07       	cpc	r25, r20
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <main+0x380>
    1d60:	45 c2       	rjmp	.+1162   	; 0x21ec <main+0x80a>
    1d62:	81 3d       	cpi	r24, 0xD1	; 209
    1d64:	9e 41       	sbci	r25, 0x1E	; 30
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <main+0x388>
    1d68:	d4 c0       	rjmp	.+424    	; 0x1f12 <main+0x530>
    1d6a:	8f c3       	rjmp	.+1822   	; 0x248a <main+0xaa8>
    1d6c:	87 3f       	cpi	r24, 0xF7	; 247
    1d6e:	e3 e2       	ldi	r30, 0x23	; 35
    1d70:	9e 07       	cpc	r25, r30
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <main+0x394>
    1d74:	9f c0       	rjmp	.+318    	; 0x1eb4 <main+0x4d2>
    1d76:	28 f4       	brcc	.+10     	; 0x1d82 <main+0x3a0>
    1d78:	8a 39       	cpi	r24, 0x9A	; 154
    1d7a:	93 42       	sbci	r25, 0x23	; 35
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <main+0x39e>
    1d7e:	7a c0       	rjmp	.+244    	; 0x1e74 <main+0x492>
    1d80:	84 c3       	rjmp	.+1800   	; 0x248a <main+0xaa8>
    1d82:	81 37       	cpi	r24, 0x71	; 113
    1d84:	44 e2       	ldi	r20, 0x24	; 36
    1d86:	94 07       	cpc	r25, r20
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <main+0x3aa>
    1d8a:	e5 c2       	rjmp	.+1482   	; 0x2356 <main+0x974>
    1d8c:	8a 3f       	cpi	r24, 0xFA	; 250
    1d8e:	94 42       	sbci	r25, 0x24	; 36
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <main+0x3b2>
    1d92:	49 c2       	rjmp	.+1170   	; 0x2226 <main+0x844>
    1d94:	7a c3       	rjmp	.+1780   	; 0x248a <main+0xaa8>
#endif //DEBUG_FUNCTIONS_ENABLE		

				case MESSAGE_PREAMP:
				{
					BOOL result = 0;
					RadioBand band = rxGetBand();
    1d96:	a0 d5       	rcall	.+2880   	; 0x28d8 <rxGetBand>
    1d98:	f8 2e       	mov	r15, r24
    1d9a:	f8 01       	movw	r30, r16
					
					if(lb_buff->fields[FIELD1][0])
    1d9c:	83 81       	ldd	r24, Z+3	; 0x03
    1d9e:	88 23       	and	r24, r24
    1da0:	11 f1       	breq	.+68     	; 0x1de6 <main+0x404>
    1da2:	c8 01       	movw	r24, r16
					{
						uint8_t setting = atol(lb_buff->fields[FIELD1]);
    1da4:	03 96       	adiw	r24, 0x03	; 3
    1da6:	0e 94 2b 21 	call	0x4256	; 0x4256 <atol>
    1daa:	86 2f       	mov	r24, r22
    1dac:	f1 10       	cpse	r15, r1
						
						if(band == BAND_2M)
    1dae:	18 c0       	rjmp	.+48     	; 0x1de0 <main+0x3fe>
    1db0:	61 11       	cpse	r22, r1
						{
							if(setting == 0)
    1db2:	0a c0       	rjmp	.+20     	; 0x1dc8 <main+0x3e6>
    1db4:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
							{
								g_receiver_port_shadow &= 0b11011111;
    1db8:	8f 7d       	andi	r24, 0xDF	; 223
    1dba:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <g_receiver_port_shadow>
    1dbe:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
								pcf8574_writePort(g_receiver_port_shadow); /* initialize receiver port expander */
    1dc2:	0e 94 81 19 	call	0x3302	; 0x3302 <pcf8574_writePort>
    1dc6:	11 c0       	rjmp	.+34     	; 0x1dea <main+0x408>
    1dc8:	61 30       	cpi	r22, 0x01	; 1
							}
							else if(setting == 1)
    1dca:	79 f4       	brne	.+30     	; 0x1dea <main+0x408>
    1dcc:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
							{
								g_receiver_port_shadow |= 0b00100000;
    1dd0:	80 62       	ori	r24, 0x20	; 32
    1dd2:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <g_receiver_port_shadow>
    1dd6:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
								pcf8574_writePort(g_receiver_port_shadow); /* initialize receiver port expander */
    1dda:	0e 94 81 19 	call	0x3302	; 0x3302 <pcf8574_writePort>
    1dde:	05 c0       	rjmp	.+10     	; 0x1dea <main+0x408>
    1de0:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <dac081c_set_dac>
							}
						}
						else // if band == BAND_80M
						{
							dac081c_set_dac(setting);
    1de4:	08 c0       	rjmp	.+16     	; 0x1df6 <main+0x414>
    1de6:	f1 10       	cpse	r15, r1
						}
					}
					
					if(band == BAND_2M)
    1de8:	06 c0       	rjmp	.+12     	; 0x1df6 <main+0x414>
    1dea:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
					{
						result = (g_receiver_port_shadow & 0b00100000) >> 5;
    1dee:	85 fb       	bst	r24, 5
    1df0:	88 27       	eor	r24, r24
    1df2:	80 f9       	bld	r24, 0
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <main+0x418>
    1df6:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <dac081c_read_dac>
					}
					else
					{
						result = dac081c_read_dac();
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
					}
					
					lb_broadcast_num((uint16_t)result, NULL);
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 60 06 	call	0xcc0	; 0xcc0 <lb_broadcast_num>
    1e04:	4b c3       	rjmp	.+1686   	; 0x249c <main+0xaba>

				}
				break;
    1e06:	f8 01       	movw	r30, r16

				case MESSAGE_ATTENUATION:
				{
					uint16_t attenuation;
					
					if(lb_buff->fields[FIELD1][0])
    1e08:	83 81       	ldd	r24, Z+3	; 0x03
    1e0a:	88 23       	and	r24, r24
    1e0c:	51 f1       	breq	.+84     	; 0x1e62 <main+0x480>
    1e0e:	c8 01       	movw	r24, r16
					{
						attenuation = CLAMP(0, (uint16_t)atoi(lb_buff->fields[FIELD1]), 100); 
    1e10:	03 96       	adiw	r24, 0x03	; 3
    1e12:	0e 94 0e 21 	call	0x421c	; 0x421c <atoi>
    1e16:	7c 01       	movw	r14, r24
    1e18:	85 36       	cpi	r24, 0x65	; 101
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	28 f0       	brcs	.+10     	; 0x1e28 <main+0x446>
    1e1e:	0f 2e       	mov	r0, r31
    1e20:	f4 e6       	ldi	r31, 0x64	; 100
    1e22:	ef 2e       	mov	r14, r31
    1e24:	f1 2c       	mov	r15, r1
    1e26:	f0 2d       	mov	r31, r0
						max5478_set_dualpotentiometer_wipers(potValFromAtten(attenuation));
    1e28:	c7 01       	movw	r24, r14
    1e2a:	94 dd       	rcall	.-1240   	; 0x1954 <potValFromAtten>
    1e2c:	0e 94 65 19 	call	0x32ca	; 0x32ca <max5478_set_dualpotentiometer_wipers>
    1e30:	f0 92 0e 07 	sts	0x070E, r15	; 0x80070e <g_rx_attenuation+0x1>
						g_rx_attenuation = attenuation;
    1e34:	e0 92 0d 07 	sts	0x070D, r14	; 0x80070d <g_rx_attenuation>
    1e38:	ef 28       	or	r14, r15
						
						if(attenuation)
    1e3a:	51 f0       	breq	.+20     	; 0x1e50 <main+0x46e>
    1e3c:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
						{
							g_receiver_port_shadow |= 0b00000100;
    1e40:	84 60       	ori	r24, 0x04	; 4
    1e42:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <g_receiver_port_shadow>
    1e46:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
							pcf8574_writePort(g_receiver_port_shadow); /* initialize receiver port expander */
    1e4a:	0e 94 81 19 	call	0x3302	; 0x3302 <pcf8574_writePort>
    1e4e:	09 c0       	rjmp	.+18     	; 0x1e62 <main+0x480>
    1e50:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
						}
						else
						{
							g_receiver_port_shadow &= 0b11111011;
    1e54:	8b 7f       	andi	r24, 0xFB	; 251
    1e56:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <g_receiver_port_shadow>
    1e5a:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
							pcf8574_writePort(g_receiver_port_shadow); /* initialize receiver port expander */
    1e5e:	0e 94 81 19 	call	0x3302	; 0x3302 <pcf8574_writePort>
    1e62:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <g_rx_attenuation>
						}
					}
					
					lb_broadcast_num((uint16_t)g_rx_attenuation, NULL);
    1e66:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <g_rx_attenuation+0x1>
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <lb_broadcast_num>
    1e72:	14 c3       	rjmp	.+1576   	; 0x249c <main+0xaba>
				}
				break;
    1e74:	82 e0       	ldi	r24, 0x02	; 2
				
				case MESSAGE_RESET:
				{
					wdt_init(WD_FORCE_RESET);
    1e76:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <wdt_init>
    1e7a:	ff cf       	rjmp	.-2      	; 0x1e7a <main+0x498>
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
				}
				break;
				
				case MESSAGE_RSSI_REPEAT_BC:
				{
					g_lb_repeat_rssi = !g_lb_repeat_rssi;
    1e7e:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <g_lb_repeat_rssi>
    1e82:	91 11       	cpse	r25, r1
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	80 93 15 07 	sts	0x0715, r24	; 0x800715 <g_lb_repeat_rssi>
    1e8a:	08 c3       	rjmp	.+1552   	; 0x249c <main+0xaba>

				case MESSAGE_CW_OFFSET:
				{
					Frequency_Hz offset;
					
					if(lb_buff->fields[FIELD1][0])
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	83 81       	ldd	r24, Z+3	; 0x03
    1e90:	88 23       	and	r24, r24
					{
						offset = atol(lb_buff->fields[FIELD1]); // Prevent optimizer from breaking this
    1e92:	29 f0       	breq	.+10     	; 0x1e9e <main+0x4bc>
    1e94:	c8 01       	movw	r24, r16
    1e96:	03 96       	adiw	r24, 0x03	; 3
    1e98:	0e 94 2b 21 	call	0x4256	; 0x4256 <atol>
						rxSetCWOffset(offset);
					}
					
					offset = rxGetCWOffset();
    1e9c:	32 d6       	rcall	.+3172   	; 0x2b02 <rxSetCWOffset>
    1e9e:	48 d6       	rcall	.+3216   	; 0x2b30 <rxGetCWOffset>
    1ea0:	ab 01       	movw	r20, r22
    1ea2:	bc 01       	movw	r22, r24
					lb_send_FRE(LINKBUS_MSG_REPLY, offset, FALSE);
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	83 e0       	ldi	r24, 0x03	; 3
    1ea8:	0e 94 0b 02 	call	0x416	; 0x416 <lb_send_FRE>
				}
				break;
    1eac:	f7 c2       	rjmp	.+1518   	; 0x249c <main+0xaba>
				
				case MESSAGE_PERM:
				{
					store_receiver_values();
    1eae:	4c d5       	rcall	.+2712   	; 0x2948 <store_receiver_values>
    1eb0:	e6 dc       	rcall	.-1588   	; 0x187e <saveAllEEPROM>
					saveAllEEPROM();
    1eb2:	f4 c2       	rjmp	.+1512   	; 0x249c <main+0xaba>
    1eb4:	f8 01       	movw	r30, r16
				}
				break;
    1eb6:	83 81       	ldd	r24, Z+3	; 0x03
				
				case MESSAGE_TIME:
				{
						if(lb_buff->fields[FIELD1][0])
    1eb8:	88 23       	and	r24, r24
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <main+0x4dc>
    1ebc:	ef c2       	rjmp	.+1502   	; 0x249c <main+0xaba>
    1ebe:	4d 86       	std	Y+13, r4	; 0x0d
    1ec0:	5e 86       	std	Y+14, r5	; 0x0e
						{
							volatile int32_t time = -1; // prevent optimizer from breaking this
    1ec2:	6f 86       	std	Y+15, r6	; 0x0f
    1ec4:	78 8a       	std	Y+16, r7	; 0x10
    1ec6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>

							if(g_terminal_mode)
    1eca:	88 23       	and	r24, r24
    1ecc:	a9 f0       	breq	.+42     	; 0x1ef8 <main+0x516>
    1ece:	85 81       	ldd	r24, Z+5	; 0x05
    1ed0:	8a 33       	cpi	r24, 0x3A	; 58
							{
								if(((lb_buff->fields[FIELD1][2] == ':') && (lb_buff->fields[FIELD1][5] == ':')) || ((lb_buff->fields[FIELD1][1] == ':') && (lb_buff->fields[FIELD1][4] == ':')))
    1ed2:	19 f4       	brne	.+6      	; 0x1eda <main+0x4f8>
    1ed4:	80 85       	ldd	r24, Z+8	; 0x08
    1ed6:	8a 33       	cpi	r24, 0x3A	; 58
    1ed8:	39 f0       	breq	.+14     	; 0x1ee8 <main+0x506>
    1eda:	f8 01       	movw	r30, r16
    1edc:	84 81       	ldd	r24, Z+4	; 0x04
    1ede:	8a 33       	cpi	r24, 0x3A	; 58
    1ee0:	99 f4       	brne	.+38     	; 0x1f08 <main+0x526>
    1ee2:	87 81       	ldd	r24, Z+7	; 0x07
    1ee4:	8a 33       	cpi	r24, 0x3A	; 58
    1ee6:	81 f4       	brne	.+32     	; 0x1f08 <main+0x526>
    1ee8:	c8 01       	movw	r24, r16
								{
									time = stringToTimeVal(lb_buff->fields[FIELD1]);
    1eea:	03 96       	adiw	r24, 0x03	; 3
    1eec:	d2 d7       	rcall	.+4004   	; 0x2e92 <stringToTimeVal>
    1eee:	6d 87       	std	Y+13, r22	; 0x0d
    1ef0:	7e 87       	std	Y+14, r23	; 0x0e
    1ef2:	8f 87       	std	Y+15, r24	; 0x0f
    1ef4:	98 8b       	std	Y+16, r25	; 0x10
    1ef6:	08 c0       	rjmp	.+16     	; 0x1f08 <main+0x526>
    1ef8:	c8 01       	movw	r24, r16
    1efa:	03 96       	adiw	r24, 0x03	; 3
								}
							}
							else
							{
								time = atol(lb_buff->fields[FIELD1]);
    1efc:	0e 94 2b 21 	call	0x4256	; 0x4256 <atol>
    1f00:	6d 87       	std	Y+13, r22	; 0x0d
    1f02:	7e 87       	std	Y+14, r23	; 0x0e
    1f04:	8f 87       	std	Y+15, r24	; 0x0f
    1f06:	98 8b       	std	Y+16, r25	; 0x10
    1f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
							}

							if(time >= 0)
    1f0c:	af 85       	ldd	r26, Y+15	; 0x0f
    1f0e:	b8 89       	ldd	r27, Y+16	; 0x10
    1f10:	c5 c2       	rjmp	.+1418   	; 0x249c <main+0xaba>
    1f12:	f8 01       	movw	r30, r16
    1f14:	83 81       	ldd	r24, Z+3	; 0x03

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;

						if(lb_buff->fields[FIELD1][0])
    1f16:	88 23       	and	r24, r24
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <main+0x53a>
    1f1a:	16 c1       	rjmp	.+556    	; 0x2148 <main+0x766>
    1f1c:	8d 34       	cpi	r24, 0x4D	; 77
						{
							if(lb_buff->fields[FIELD1][0] == 'M')
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <main+0x540>
    1f20:	f8 c0       	rjmp	.+496    	; 0x2112 <main+0x730>
    1f22:	c8 01       	movw	r24, r16
							{
								uint8_t mem = atoi(&lb_buff->fields[FIELD1][1]);
    1f24:	04 96       	adiw	r24, 0x04	; 4
    1f26:	0e 94 0e 21 	call	0x421c	; 0x421c <atoi>
    1f2a:	7c 01       	movw	r14, r24
    1f2c:	19 86       	std	Y+9, r1	; 0x09

								Frequency_Hz f = FREQUENCY_NOT_SPECIFIED;
    1f2e:	1a 86       	std	Y+10, r1	; 0x0a
    1f30:	1b 86       	std	Y+11, r1	; 0x0b
    1f32:	1c 86       	std	Y+12, r1	; 0x0c
    1f34:	d1 d4       	rcall	.+2466   	; 0x28d8 <rxGetBand>
								RadioBand b = rxGetBand();
    1f36:	ff 24       	eor	r15, r15
    1f38:	f3 e0       	ldi	r31, 0x03	; 3
								Frequency_Hz *eemem_location = NULL;

								switch(mem)
    1f3a:	ef 16       	cp	r14, r31
    1f3c:	f1 04       	cpc	r15, r1
    1f3e:	29 f1       	breq	.+74     	; 0x1f8a <main+0x5a8>
    1f40:	4c f4       	brge	.+18     	; 0x1f54 <main+0x572>
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	e4 16       	cp	r14, r20
    1f46:	f1 04       	cpc	r15, r1
    1f48:	71 f0       	breq	.+28     	; 0x1f66 <main+0x584>
    1f4a:	52 e0       	ldi	r21, 0x02	; 2
    1f4c:	e5 16       	cp	r14, r21
    1f4e:	f1 04       	cpc	r15, r1
    1f50:	99 f0       	breq	.+38     	; 0x1f78 <main+0x596>
    1f52:	36 c0       	rjmp	.+108    	; 0x1fc0 <main+0x5de>
    1f54:	94 e0       	ldi	r25, 0x04	; 4
    1f56:	e9 16       	cp	r14, r25
    1f58:	f1 04       	cpc	r15, r1
    1f5a:	01 f1       	breq	.+64     	; 0x1f9c <main+0x5ba>
    1f5c:	e5 e0       	ldi	r30, 0x05	; 5
    1f5e:	ee 16       	cp	r14, r30
    1f60:	f1 04       	cpc	r15, r1
    1f62:	29 f1       	breq	.+74     	; 0x1fae <main+0x5cc>
    1f64:	2d c0       	rjmp	.+90     	; 0x1fc0 <main+0x5de>
    1f66:	88 23       	and	r24, r24
    1f68:	71 f1       	breq	.+92     	; 0x1fc6 <main+0x5e4>
								{
									case 1:
									{
										if(b == BAND_2M)
    1f6a:	0f 2e       	mov	r0, r31
    1f6c:	f9 e2       	ldi	r31, 0x29	; 41
										{
											eemem_location = &ee_receiver_2m_mem1_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem1_freq;
    1f6e:	ef 2e       	mov	r14, r31
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	ff 2e       	mov	r15, r31
    1f74:	f0 2d       	mov	r31, r0
    1f76:	49 c0       	rjmp	.+146    	; 0x200a <main+0x628>
    1f78:	88 23       	and	r24, r24
    1f7a:	61 f1       	breq	.+88     	; 0x1fd4 <main+0x5f2>
									}
									break;

									case 2:
									{
										if(b == BAND_2M)
    1f7c:	0f 2e       	mov	r0, r31
    1f7e:	fd e2       	ldi	r31, 0x2D	; 45
										{
											eemem_location = &ee_receiver_2m_mem2_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem2_freq;
    1f80:	ef 2e       	mov	r14, r31
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	ff 2e       	mov	r15, r31
    1f86:	f0 2d       	mov	r31, r0
    1f88:	40 c0       	rjmp	.+128    	; 0x200a <main+0x628>
    1f8a:	88 23       	and	r24, r24
    1f8c:	51 f1       	breq	.+84     	; 0x1fe2 <main+0x600>
									}
									break;

									case 3:
									{
										if(b == BAND_2M)
    1f8e:	0f 2e       	mov	r0, r31
    1f90:	f1 e3       	ldi	r31, 0x31	; 49
										{
											eemem_location = &ee_receiver_2m_mem3_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem3_freq;
    1f92:	ef 2e       	mov	r14, r31
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	ff 2e       	mov	r15, r31
    1f98:	f0 2d       	mov	r31, r0
    1f9a:	37 c0       	rjmp	.+110    	; 0x200a <main+0x628>
    1f9c:	88 23       	and	r24, r24
    1f9e:	41 f1       	breq	.+80     	; 0x1ff0 <main+0x60e>
									}
									break;

									case 4:
									{
										if(b == BAND_2M)
    1fa0:	0f 2e       	mov	r0, r31
    1fa2:	f5 e3       	ldi	r31, 0x35	; 53
										{
											eemem_location = &ee_receiver_2m_mem4_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem4_freq;
    1fa4:	ef 2e       	mov	r14, r31
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	ff 2e       	mov	r15, r31
    1faa:	f0 2d       	mov	r31, r0
    1fac:	2e c0       	rjmp	.+92     	; 0x200a <main+0x628>
    1fae:	88 23       	and	r24, r24
    1fb0:	31 f1       	breq	.+76     	; 0x1ffe <main+0x61c>
									}
									break;

									case 5:
									{
										if(b == BAND_2M)
    1fb2:	0f 2e       	mov	r0, r31
    1fb4:	f9 e3       	ldi	r31, 0x39	; 57
										{
											eemem_location = &ee_receiver_2m_mem5_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem5_freq;
    1fb6:	ef 2e       	mov	r14, r31
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	ff 2e       	mov	r15, r31
    1fbc:	f0 2d       	mov	r31, r0
    1fbe:	25 c0       	rjmp	.+74     	; 0x200a <main+0x628>
    1fc0:	e1 2c       	mov	r14, r1
    1fc2:	f1 2c       	mov	r15, r1
							{
								uint8_t mem = atoi(&lb_buff->fields[FIELD1][1]);

								Frequency_Hz f = FREQUENCY_NOT_SPECIFIED;
								RadioBand b = rxGetBand();
								Frequency_Hz *eemem_location = NULL;
    1fc4:	22 c0       	rjmp	.+68     	; 0x200a <main+0x628>
    1fc6:	0f 2e       	mov	r0, r31
    1fc8:	f5 e1       	ldi	r31, 0x15	; 21
								{
									case 1:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem1_freq;
    1fca:	ef 2e       	mov	r14, r31
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	ff 2e       	mov	r15, r31
    1fd0:	f0 2d       	mov	r31, r0
    1fd2:	1b c0       	rjmp	.+54     	; 0x200a <main+0x628>
    1fd4:	0f 2e       	mov	r0, r31
    1fd6:	f9 e1       	ldi	r31, 0x19	; 25

									case 2:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem2_freq;
    1fd8:	ef 2e       	mov	r14, r31
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	ff 2e       	mov	r15, r31
    1fde:	f0 2d       	mov	r31, r0
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <main+0x628>
    1fe2:	0f 2e       	mov	r0, r31
    1fe4:	fd e1       	ldi	r31, 0x1D	; 29

									case 3:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem3_freq;
    1fe6:	ef 2e       	mov	r14, r31
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	ff 2e       	mov	r15, r31
    1fec:	f0 2d       	mov	r31, r0
    1fee:	0d c0       	rjmp	.+26     	; 0x200a <main+0x628>
    1ff0:	0f 2e       	mov	r0, r31
    1ff2:	f1 e2       	ldi	r31, 0x21	; 33

									case 4:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem4_freq;
    1ff4:	ef 2e       	mov	r14, r31
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	ff 2e       	mov	r15, r31
    1ffa:	f0 2d       	mov	r31, r0
    1ffc:	06 c0       	rjmp	.+12     	; 0x200a <main+0x628>
    1ffe:	0f 2e       	mov	r0, r31
    2000:	f5 e2       	ldi	r31, 0x25	; 37

									case 5:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem5_freq;
    2002:	ef 2e       	mov	r14, r31
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	ff 2e       	mov	r15, r31
    2008:	f0 2d       	mov	r31, r0
    200a:	e1 14       	cp	r14, r1
    200c:	f1 04       	cpc	r15, r1
									{
									}
									break;
								}

								if(eemem_location)
    200e:	09 f4       	brne	.+2      	; 0x2012 <main+0x630>
    2010:	76 c0       	rjmp	.+236    	; 0x20fe <main+0x71c>
    2012:	1d 82       	std	Y+5, r1	; 0x05
    2014:	1e 82       	std	Y+6, r1	; 0x06
								{
									volatile Frequency_Hz memFreq = 0; // Prevent optimizer from breaking this
    2016:	1f 82       	std	Y+7, r1	; 0x07
    2018:	18 86       	std	Y+8, r1	; 0x08
    201a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
									isMem = TRUE;

									if(g_terminal_mode)              /* Handle terminal mode message */
    201e:	88 23       	and	r24, r24
    2020:	81 f0       	breq	.+32     	; 0x2042 <main+0x660>
    2022:	f8 01       	movw	r30, r16
    2024:	90 8d       	ldd	r25, Z+24	; 0x18
									{
										if(lb_buff->fields[FIELD2][0])  /* second field holds frequency to be written to memory */
    2026:	99 23       	and	r25, r25
    2028:	61 f0       	breq	.+24     	; 0x2042 <main+0x660>
    202a:	c8 01       	movw	r24, r16
    202c:	48 96       	adiw	r24, 0x18	; 24
										{
											memFreq = atol(lb_buff->fields[FIELD2]);
    202e:	0e 94 2b 21 	call	0x4256	; 0x4256 <atol>
    2032:	6d 83       	std	Y+5, r22	; 0x05
    2034:	7e 83       	std	Y+6, r23	; 0x06
    2036:	8f 83       	std	Y+7, r24	; 0x07
    2038:	98 87       	std	Y+8, r25	; 0x08
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	f8 01       	movw	r30, r16
											lb_buff->type = LINKBUS_MSG_COMMAND;
    203e:	80 83       	st	Z, r24
    2040:	29 c0       	rjmp	.+82     	; 0x2094 <main+0x6b2>
    2042:	f8 01       	movw	r30, r16
    2044:	90 81       	ld	r25, Z
										}
									}

									if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query: apply and return the memory setting */
    2046:	92 30       	cpi	r25, 0x02	; 2
    2048:	01 f5       	brne	.+64     	; 0x208a <main+0x6a8>
    204a:	c7 01       	movw	r24, r14
									{
										f = eeprom_read_dword(eemem_location);
    204c:	0e 94 26 24 	call	0x484c	; 0x484c <eeprom_read_dword>
    2050:	69 87       	std	Y+9, r22	; 0x09
    2052:	7a 87       	std	Y+10, r23	; 0x0a
    2054:	8b 87       	std	Y+11, r24	; 0x0b
    2056:	9c 87       	std	Y+12, r25	; 0x0c
    2058:	67 2b       	or	r22, r23

										if(f != FREQUENCY_NOT_SPECIFIED)
    205a:	68 2b       	or	r22, r24
    205c:	69 2b       	or	r22, r25
    205e:	09 f4       	brne	.+2      	; 0x2062 <main+0x680>
    2060:	50 c0       	rjmp	.+160    	; 0x2102 <main+0x720>
    2062:	ce 01       	movw	r24, r28
										{
											if(rxSetFrequency(&f))
    2064:	09 96       	adiw	r24, 0x09	; 9
    2066:	21 d3       	rcall	.+1602   	; 0x26aa <rxSetFrequency>
    2068:	88 23       	and	r24, r24
    206a:	09 f4       	brne	.+2      	; 0x206e <main+0x68c>
    206c:	4c c0       	rjmp	.+152    	; 0x2106 <main+0x724>
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
											{
												g_receiver_freq = f;
    2072:	ab 85       	ldd	r26, Y+11	; 0x0b
    2074:	bc 85       	ldd	r27, Y+12	; 0x0c
    2076:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <g_receiver_freq>
    207a:	90 93 10 07 	sts	0x0710, r25	; 0x800710 <g_receiver_freq+0x1>
    207e:	a0 93 11 07 	sts	0x0711, r26	; 0x800711 <g_receiver_freq+0x2>
    2082:	b0 93 12 07 	sts	0x0712, r27	; 0x800712 <g_receiver_freq+0x3>
    2086:	21 e0       	ldi	r18, 0x01	; 1
    2088:	69 c0       	rjmp	.+210    	; 0x215c <main+0x77a>
								}

								if(eemem_location)
								{
									volatile Frequency_Hz memFreq = 0; // Prevent optimizer from breaking this
									isMem = TRUE;
    208a:	91 30       	cpi	r25, 0x01	; 1
											{
												g_receiver_freq = f;
											}
										}
									}
									else if(lb_buff->type == LINKBUS_MSG_COMMAND)   /* Command: save the current frequency setting to the memory location */
    208c:	09 f0       	breq	.+2      	; 0x2090 <main+0x6ae>
    208e:	3d c0       	rjmp	.+122    	; 0x210a <main+0x728>
    2090:	88 23       	and	r24, r24
									{
										if(g_terminal_mode)
    2092:	19 f1       	breq	.+70     	; 0x20da <main+0x6f8>
    2094:	8d 81       	ldd	r24, Y+5	; 0x05
										{
											Frequency_Hz m = memFreq;
    2096:	9e 81       	ldd	r25, Y+6	; 0x06
    2098:	af 81       	ldd	r26, Y+7	; 0x07
    209a:	b8 85       	ldd	r27, Y+8	; 0x08
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	ab 83       	std	Y+3, r26	; 0x03
    20a2:	bc 83       	std	Y+4, r27	; 0x04
    20a4:	ce 01       	movw	r24, r28
											if(rxSetFrequency(&m))
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	00 d3       	rcall	.+1536   	; 0x26aa <rxSetFrequency>
    20aa:	88 23       	and	r24, r24
    20ac:	89 f0       	breq	.+34     	; 0x20d0 <main+0x6ee>
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	9a 81       	ldd	r25, Y+2	; 0x02
											{
												g_receiver_freq = m;
    20b2:	ab 81       	ldd	r26, Y+3	; 0x03
    20b4:	bc 81       	ldd	r27, Y+4	; 0x04
    20b6:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <g_receiver_freq>
    20ba:	90 93 10 07 	sts	0x0710, r25	; 0x800710 <g_receiver_freq+0x1>
    20be:	a0 93 11 07 	sts	0x0711, r26	; 0x800711 <g_receiver_freq+0x2>
    20c2:	b0 93 12 07 	sts	0x0712, r27	; 0x800712 <g_receiver_freq+0x3>
    20c6:	89 87       	std	Y+9, r24	; 0x09
												f = m;
    20c8:	9a 87       	std	Y+10, r25	; 0x0a
    20ca:	ab 87       	std	Y+11, r26	; 0x0b
    20cc:	bc 87       	std	Y+12, r27	; 0x0c
    20ce:	0a c0       	rjmp	.+20     	; 0x20e4 <main+0x702>
    20d0:	19 86       	std	Y+9, r1	; 0x09
											}
											else
											{
												f = FREQUENCY_NOT_SPECIFIED;
    20d2:	1a 86       	std	Y+10, r1	; 0x0a
    20d4:	1b 86       	std	Y+11, r1	; 0x0b
    20d6:	1c 86       	std	Y+12, r1	; 0x0c
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <main+0x702>
											}
										}
										else
										{
											f = rxGetFrequency();
    20da:	83 d3       	rcall	.+1798   	; 0x27e2 <rxGetFrequency>
    20dc:	69 87       	std	Y+9, r22	; 0x09
    20de:	7a 87       	std	Y+10, r23	; 0x0a
    20e0:	8b 87       	std	Y+11, r24	; 0x0b
    20e2:	9c 87       	std	Y+12, r25	; 0x0c
    20e4:	49 85       	ldd	r20, Y+9	; 0x09
										}

										if(f != FREQUENCY_NOT_SPECIFIED)
    20e6:	5a 85       	ldd	r21, Y+10	; 0x0a
    20e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ec:	41 15       	cp	r20, r1
    20ee:	51 05       	cpc	r21, r1
    20f0:	61 05       	cpc	r22, r1
    20f2:	71 05       	cpc	r23, r1
    20f4:	61 f0       	breq	.+24     	; 0x210e <main+0x72c>
    20f6:	c7 01       	movw	r24, r14
										{
											storeEEdwordIfChanged(eemem_location, f);
    20f8:	54 d5       	rcall	.+2728   	; 0x2ba2 <storeEEdwordIfChanged>
    20fa:	21 e0       	ldi	r18, 0x01	; 1
    20fc:	2f c0       	rjmp	.+94     	; 0x215c <main+0x77a>
								}

								if(eemem_location)
								{
									volatile Frequency_Hz memFreq = 0; // Prevent optimizer from breaking this
									isMem = TRUE;
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	2d c0       	rjmp	.+90     	; 0x215c <main+0x77a>
				}
				break;

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;
    2102:	21 e0       	ldi	r18, 0x01	; 1
								}

								if(eemem_location)
								{
									volatile Frequency_Hz memFreq = 0; // Prevent optimizer from breaking this
									isMem = TRUE;
    2104:	2b c0       	rjmp	.+86     	; 0x215c <main+0x77a>
    2106:	21 e0       	ldi	r18, 0x01	; 1
    2108:	29 c0       	rjmp	.+82     	; 0x215c <main+0x77a>
    210a:	21 e0       	ldi	r18, 0x01	; 1
    210c:	27 c0       	rjmp	.+78     	; 0x215c <main+0x77a>
    210e:	21 e0       	ldi	r18, 0x01	; 1
    2110:	25 c0       	rjmp	.+74     	; 0x215c <main+0x77a>
    2112:	c8 01       	movw	r24, r16
									}
								}
							}
							else
							{
								Frequency_Hz f = atol(lb_buff->fields[FIELD1]); // Prevent optimizer from breaking this							
    2114:	03 96       	adiw	r24, 0x03	; 3
    2116:	0e 94 2b 21 	call	0x4256	; 0x4256 <atol>
    211a:	69 83       	std	Y+1, r22	; 0x01
								
								Frequency_Hz ff = f;
    211c:	7a 83       	std	Y+2, r23	; 0x02
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	ce 01       	movw	r24, r28
								if(rxSetFrequency(&ff))
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	c1 d2       	rcall	.+1410   	; 0x26aa <rxSetFrequency>
    2128:	88 23       	and	r24, r24
    212a:	61 f0       	breq	.+24     	; 0x2144 <main+0x762>
    212c:	89 81       	ldd	r24, Y+1	; 0x01
								{
									g_receiver_freq = ff;
    212e:	9a 81       	ldd	r25, Y+2	; 0x02
    2130:	ab 81       	ldd	r26, Y+3	; 0x03
    2132:	bc 81       	ldd	r27, Y+4	; 0x04
    2134:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <g_receiver_freq>
    2138:	90 93 10 07 	sts	0x0710, r25	; 0x800710 <g_receiver_freq+0x1>
    213c:	a0 93 11 07 	sts	0x0711, r26	; 0x800711 <g_receiver_freq+0x2>
    2140:	b0 93 12 07 	sts	0x0712, r27	; 0x800712 <g_receiver_freq+0x3>
    2144:	20 e0       	ldi	r18, 0x00	; 0
				}
				break;

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;
    2146:	0a c0       	rjmp	.+20     	; 0x215c <main+0x77a>
    2148:	4c d3       	rcall	.+1688   	; 0x27e2 <rxGetFrequency>
								}
							}
						}
						else
						{
							g_receiver_freq = rxGetFrequency();
    214a:	60 93 0f 07 	sts	0x070F, r22	; 0x80070f <g_receiver_freq>
    214e:	70 93 10 07 	sts	0x0710, r23	; 0x800710 <g_receiver_freq+0x1>
    2152:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <g_receiver_freq+0x2>
    2156:	90 93 12 07 	sts	0x0712, r25	; 0x800712 <g_receiver_freq+0x3>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <g_receiver_freq>
						}

						if(g_receiver_freq)
    2160:	90 91 10 07 	lds	r25, 0x0710	; 0x800710 <g_receiver_freq+0x1>
    2164:	a0 91 11 07 	lds	r26, 0x0711	; 0x800711 <g_receiver_freq+0x2>
    2168:	b0 91 12 07 	lds	r27, 0x0712	; 0x800712 <g_receiver_freq+0x3>
    216c:	89 2b       	or	r24, r25
    216e:	8a 2b       	or	r24, r26
    2170:	8b 2b       	or	r24, r27
    2172:	09 f4       	brne	.+2      	; 0x2176 <main+0x794>
    2174:	93 c1       	rjmp	.+806    	; 0x249c <main+0xaba>
    2176:	40 91 0f 07 	lds	r20, 0x070F	; 0x80070f <g_receiver_freq>
						{
							lb_send_FRE(LINKBUS_MSG_REPLY, g_receiver_freq, isMem);
    217a:	50 91 10 07 	lds	r21, 0x0710	; 0x800710 <g_receiver_freq+0x1>
    217e:	60 91 11 07 	lds	r22, 0x0711	; 0x800711 <g_receiver_freq+0x2>
    2182:	70 91 12 07 	lds	r23, 0x0712	; 0x800712 <g_receiver_freq+0x3>
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	0e 94 0b 02 	call	0x416	; 0x416 <lb_send_FRE>
    218c:	87 c1       	rjmp	.+782    	; 0x249c <main+0xaba>
    218e:	f8 01       	movw	r30, r16
    2190:	83 81       	ldd	r24, Z+3	; 0x03
				}
				break;

				case MESSAGE_ID:
				{
					if(lb_buff->fields[FIELD1][0])
    2192:	88 23       	and	r24, r24
    2194:	09 f4       	brne	.+2      	; 0x2198 <main+0x7b6>
    2196:	82 c1       	rjmp	.+772    	; 0x249c <main+0xaba>
    2198:	c8 01       	movw	r24, r16
    219a:	03 96       	adiw	r24, 0x03	; 3
					{
						g_LB_attached_device = atoi(lb_buff->fields[FIELD1]);
    219c:	0e 94 0e 21 	call	0x421c	; 0x421c <atoi>
    21a0:	f8 2e       	mov	r15, r24
    21a2:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <g_LB_attached_device>
    21a6:	f8 01       	movw	r30, r16
    21a8:	80 8d       	ldd	r24, Z+24	; 0x18
						DeviceID reportedID = NO_ID;

						if(lb_buff->fields[FIELD2][0])
    21aa:	88 23       	and	r24, r24
    21ac:	31 f0       	breq	.+12     	; 0x21ba <main+0x7d8>
    21ae:	c8 01       	movw	r24, r16
    21b0:	48 96       	adiw	r24, 0x18	; 24
						{
							reportedID = atoi(lb_buff->fields[FIELD2]);
    21b2:	0e 94 0e 21 	call	0x421c	; 0x421c <atoi>
    21b6:	82 30       	cpi	r24, 0x02	; 2
    21b8:	59 f0       	breq	.+22     	; 0x21d0 <main+0x7ee>
						}


							if(reportedID != RECEIVER_ID)
    21ba:	4f 2d       	mov	r20, r15
    21bc:	62 e0       	ldi	r22, 0x02	; 2
							{
								lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	0e 94 bc 04 	call	0x978	; 0x978 <lb_send_ID>
    21c4:	90 92 1b 07 	sts	0x071B, r9	; 0x80071b <g_send_ID_countdown+0x1>
								attach_success = FALSE;
								g_send_ID_countdown = SEND_ID_DELAY;
    21c8:	80 92 1a 07 	sts	0x071A, r8	; 0x80071a <g_send_ID_countdown>
    21cc:	c1 2c       	mov	r12, r1
    21ce:	66 c1       	rjmp	.+716    	; 0x249c <main+0xaba>


							if(reportedID != RECEIVER_ID)
							{
								lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
								attach_success = FALSE;
    21d0:	c1 10       	cpse	r12, r1
    21d2:	05 c0       	rjmp	.+10     	; 0x21de <main+0x7fc>
								g_send_ID_countdown = SEND_ID_DELAY;
							}
							else
							{
								if(!attach_success)
    21d4:	4f 2d       	mov	r20, r15
    21d6:	62 e0       	ldi	r22, 0x02	; 2
								{
									lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	0e 94 bc 04 	call	0x978	; 0x978 <lb_send_ID>
    21de:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <g_send_ID_countdown+0x1>
								}
								attach_success = TRUE;  /* stop any ongoing ID messages */
								g_send_ID_countdown = 0;
    21e2:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <g_send_ID_countdown>
							{
								if(!attach_success)
								{
									lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
								}
								attach_success = TRUE;  /* stop any ongoing ID messages */
    21e6:	cc 24       	eor	r12, r12
    21e8:	c3 94       	inc	r12

				case MESSAGE_BAND:
				{
					RadioBand band;

						if(lb_buff->fields[FIELD1][0])  /* band field */
    21ea:	58 c1       	rjmp	.+688    	; 0x249c <main+0xaba>
    21ec:	f8 01       	movw	r30, r16
    21ee:	83 81       	ldd	r24, Z+3	; 0x03
    21f0:	88 23       	and	r24, r24
						{
							int b = atoi(lb_buff->fields[FIELD1]);
    21f2:	71 f0       	breq	.+28     	; 0x2210 <main+0x82e>
    21f4:	c8 01       	movw	r24, r16
    21f6:	03 96       	adiw	r24, 0x03	; 3
    21f8:	0e 94 0e 21 	call	0x421c	; 0x421c <atoi>
							
							if(b == 80)
    21fc:	80 35       	cpi	r24, 0x50	; 80
    21fe:	91 05       	cpc	r25, r1
							{
								rxSetBand(BAND_80M);
    2200:	19 f4       	brne	.+6      	; 0x2208 <main+0x826>
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	17 d3       	rcall	.+1582   	; 0x2834 <rxSetBand>
    2206:	04 c0       	rjmp	.+8      	; 0x2210 <main+0x82e>
							}
							else if(b == 2)
    2208:	02 97       	sbiw	r24, 0x02	; 2
    220a:	11 f4       	brne	.+4      	; 0x2210 <main+0x82e>
							{
								rxSetBand(BAND_2M);
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	12 d3       	rcall	.+1572   	; 0x2834 <rxSetBand>
    2210:	63 d3       	rcall	.+1734   	; 0x28d8 <rxGetBand>
							}
						}

						band = rxGetBand();
    2212:	f8 01       	movw	r30, r16
    2214:	90 81       	ld	r25, Z

						if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    2216:	92 30       	cpi	r25, 0x02	; 2
    2218:	09 f0       	breq	.+2      	; 0x221c <main+0x83a>
    221a:	40 c1       	rjmp	.+640    	; 0x249c <main+0xaba>
    221c:	68 2f       	mov	r22, r24
    221e:	83 e0       	ldi	r24, 0x03	; 3
						{
							/* Send a reply */
							lb_send_BND(LINKBUS_MSG_REPLY, band);
    2220:	0e 94 e6 03 	call	0x7cc	; 0x7cc <lb_send_BND>
    2224:	3b c1       	rjmp	.+630    	; 0x249c <main+0xaba>
    2226:	f8 01       	movw	r30, r16
    2228:	83 81       	ldd	r24, Z+3	; 0x03
				case MESSAGE_VOLUME:
				{
					VolumeType volType;
					BOOL valid = FALSE;

					if(lb_buff->fields[FIELD1][0] == 'T')   /* volume type field */
    222a:	84 35       	cpi	r24, 0x54	; 84
    222c:	09 f4       	brne	.+2      	; 0x2230 <main+0x84e>
    222e:	28 c2       	rjmp	.+1104   	; 0x2680 <main+0xc9e>
    2230:	8d 34       	cpi	r24, 0x4D	; 77
    2232:	09 f0       	breq	.+2      	; 0x2236 <main+0x854>
					{
						valid = TRUE;
						volType = TONE_VOLUME;
					}
					else if(lb_buff->fields[FIELD1][0] == 'M')
    2234:	33 c1       	rjmp	.+614    	; 0x249c <main+0xaba>
    2236:	26 c2       	rjmp	.+1100   	; 0x2684 <main+0xca2>
    2238:	8b 32       	cpi	r24, 0x2B	; 43
    223a:	09 f4       	brne	.+2      	; 0x223e <main+0x85c>
						IncrType direction = NOCHANGE;
						int16_t holdVol = -1;

						if(lb_buff->fields[FIELD2][0])
						{
							if(lb_buff->fields[FIELD2][0] == '+')
    223c:	2a c2       	rjmp	.+1108   	; 0x2692 <main+0xcb0>
    223e:	8d 32       	cpi	r24, 0x2D	; 45
    2240:	09 f4       	brne	.+2      	; 0x2244 <main+0x862>
							{
								direction = UP;
							}
							else if(lb_buff->fields[FIELD2][0] == '-')
    2242:	2b c2       	rjmp	.+1110   	; 0x269a <main+0xcb8>
    2244:	c8 01       	movw	r24, r16
    2246:	48 96       	adiw	r24, 0x18	; 24
							{
								direction = DOWN;
							}
							else
							{
								holdVol = atoi(lb_buff->fields[FIELD2]);
    2248:	0e 94 0e 21 	call	0x421c	; 0x421c <atoi>
    224c:	d1 10       	cpse	r13, r1
    224e:	4f c0       	rjmp	.+158    	; 0x22ee <main+0x90c>
								direction = SETTOVALUE;
							}
						}

						if(volType == TONE_VOLUME)
    2250:	99 23       	and	r25, r25
    2252:	b4 f4       	brge	.+44     	; 0x2280 <main+0x89e>
						{
							if(holdVol < 0)
    2254:	22 e0       	ldi	r18, 0x02	; 2
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <main+0x880>
								direction = DOWN;
							}
							else
							{
								holdVol = atoi(lb_buff->fields[FIELD2]);
								direction = SETTOVALUE;
    2258:	21 e0       	ldi	r18, 0x01	; 1
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <main+0x880>

						if(lb_buff->fields[FIELD2][0])
						{
							if(lb_buff->fields[FIELD2][0] == '+')
							{
								direction = UP;
    225c:	2f ef       	ldi	r18, 0xFF	; 255
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <main+0x880>
							}
							else if(lb_buff->fields[FIELD2][0] == '-')
							{
								direction = DOWN;
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <g_tone_volume>

						if(volType == TONE_VOLUME)
						{
							if(holdVol < 0)
							{
								holdVol = g_tone_volume;
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	21 30       	cpi	r18, 0x01	; 1
    226a:	29 f4       	brne	.+10     	; 0x2276 <main+0x894>
							}

							if(direction == UP)
    226c:	8f 30       	cpi	r24, 0x0F	; 15
    226e:	91 05       	cpc	r25, r1
							{
								if(holdVol < MAX_TONE_VOLUME_SETTING)
    2270:	3c f4       	brge	.+14     	; 0x2280 <main+0x89e>
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	05 c0       	rjmp	.+10     	; 0x2280 <main+0x89e>
								{
									holdVol++;
    2276:	2f 3f       	cpi	r18, 0xFF	; 255
    2278:	19 f4       	brne	.+6      	; 0x2280 <main+0x89e>
								}
							}
							else if(direction == DOWN)
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	09 f0       	breq	.+2      	; 0x2280 <main+0x89e>
							{
								if(holdVol)
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	99 23       	and	r25, r25
								{
									holdVol--;
    2282:	14 f4       	brge	.+4      	; 0x2288 <main+0x8a6>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	7c 01       	movw	r14, r24
    228a:	40 97       	sbiw	r24, 0x10	; 16
    228c:	2c f0       	brlt	.+10     	; 0x2298 <main+0x8b6>
    228e:	0f 2e       	mov	r0, r31
    2290:	ff e0       	ldi	r31, 0x0F	; 15
    2292:	ef 2e       	mov	r14, r31
    2294:	f0 2d       	mov	r31, r0
    2296:	f1 2c       	mov	r15, r1
							else if(holdVol < 0)
							{
								holdVol = 0;
							}

							if(holdVol != g_tone_volume)
    2298:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <g_tone_volume>
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	8e 15       	cp	r24, r14
    22a0:	9f 05       	cpc	r25, r15
    22a2:	41 f0       	breq	.+16     	; 0x22b4 <main+0x8d2>
							{
								ad5245_set_potentiometer(TONE_POT_VAL(holdVol));
    22a4:	8f ee       	ldi	r24, 0xEF	; 239
    22a6:	8e 9d       	mul	r24, r14
    22a8:	80 2d       	mov	r24, r0
    22aa:	11 24       	eor	r1, r1
    22ac:	81 50       	subi	r24, 0x01	; 1
    22ae:	5f d6       	rcall	.+3262   	; 0x2f6e <ad5245_set_potentiometer>
    22b0:	e0 92 0b 07 	sts	0x070B, r14	; 0x80070b <g_tone_volume>
								g_tone_volume = (uint8_t)holdVol;
    22b4:	84 e1       	ldi	r24, 0x14	; 20
							}

							g_volume_set_beep_delay = 20;
    22b6:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <g_volume_set_beep_delay>
    22ba:	e1 da       	rcall	.-2622   	; 0x187e <saveAllEEPROM>
							}

							g_volume_set_beep_delay = 20;
						}

						saveAllEEPROM();
    22bc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>

						if(g_terminal_mode)
    22c0:	81 11       	cpse	r24, r1
    22c2:	36 c0       	rjmp	.+108    	; 0x2330 <main+0x94e>
    22c4:	3d c0       	rjmp	.+122    	; 0x2340 <main+0x95e>
    22c6:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_main_volume>
						}
						else    /* volType == MAIN_VOLUME */
						{
							if(direction == UP)
							{
								if(g_main_volume < MAX_MAIN_VOLUME_SETTING)
    22ca:	8f 30       	cpi	r24, 0x0F	; 15
    22cc:	f0 f4       	brcc	.+60     	; 0x230a <main+0x928>
    22ce:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_main_volume>
								{
									g_main_volume++;
    22d2:	8f 5f       	subi	r24, 0xFF	; 255
    22d4:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <g_main_volume>
    22d8:	18 c0       	rjmp	.+48     	; 0x230a <main+0x928>
    22da:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_main_volume>
								}
							}
							else if(direction == DOWN)
							{
								if(g_main_volume)
    22de:	88 23       	and	r24, r24
    22e0:	a1 f0       	breq	.+40     	; 0x230a <main+0x928>
    22e2:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_main_volume>
								{
									g_main_volume--;
    22e6:	81 50       	subi	r24, 0x01	; 1
    22e8:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <g_main_volume>
    22ec:	0e c0       	rjmp	.+28     	; 0x230a <main+0x928>
    22ee:	80 31       	cpi	r24, 0x10	; 16
								}
							}
							else if(direction == SETTOVALUE)
							{
								if(holdVol > MAX_MAIN_VOLUME_SETTING)
    22f0:	91 05       	cpc	r25, r1
    22f2:	24 f0       	brlt	.+8      	; 0x22fc <main+0x91a>
    22f4:	8f e0       	ldi	r24, 0x0F	; 15
								{
									g_main_volume = MAX_MAIN_VOLUME_SETTING;
    22f6:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <g_main_volume>
    22fa:	07 c0       	rjmp	.+14     	; 0x230a <main+0x928>
    22fc:	99 23       	and	r25, r25
								}
								else if(holdVol < 0)
    22fe:	1c f4       	brge	.+6      	; 0x2306 <main+0x924>
    2300:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <g_main_volume>
								{
									g_main_volume = 0;
    2304:	02 c0       	rjmp	.+4      	; 0x230a <main+0x928>
    2306:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <g_main_volume>
								}
								else
								{
									g_main_volume = holdVol;
    230a:	84 e1       	ldi	r24, 0x14	; 20
								}
							}

							g_volume_set_beep_delay = 20;
    230c:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <g_volume_set_beep_delay>
    2310:	b6 da       	rcall	.-2708   	; 0x187e <saveAllEEPROM>
						}

						saveAllEEPROM();
    2312:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>

						if(g_terminal_mode)
    2316:	88 23       	and	r24, r24
    2318:	99 f0       	breq	.+38     	; 0x2340 <main+0x95e>
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	d2 12       	cpse	r13, r18
						{
							if(volType == MAIN_VOLUME)
    231e:	08 c0       	rjmp	.+16     	; 0x2330 <main+0x94e>
    2320:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_main_volume>
							{
								lb_send_value(g_main_volume, "MAIN VOL");
    2324:	6f e9       	ldi	r22, 0x9F	; 159
    2326:	74 e0       	ldi	r23, 0x04	; 4
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	0e 94 ed 01 	call	0x3da	; 0x3da <lb_send_value>
    232e:	b6 c0       	rjmp	.+364    	; 0x249c <main+0xaba>
    2330:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <g_tone_volume>
							}
							else
							{
								lb_send_value(g_tone_volume, "TONE VOL");
    2334:	68 ea       	ldi	r22, 0xA8	; 168
    2336:	74 e0       	ldi	r23, 0x04	; 4
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 ed 01 	call	0x3da	; 0x3da <lb_send_value>
    233e:	ae c0       	rjmp	.+348    	; 0x249c <main+0xaba>
    2340:	f8 01       	movw	r30, r16
    2342:	80 81       	ld	r24, Z
							}
						}
						else
						{
							if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    2344:	82 30       	cpi	r24, 0x02	; 2
    2346:	09 f0       	breq	.+2      	; 0x234a <main+0x968>
    2348:	ae c0       	rjmp	.+348    	; 0x24a6 <main+0xac4>
    234a:	4d e0       	ldi	r20, 0x0D	; 13
    234c:	6d 2d       	mov	r22, r13
							{
								/* Send a reply */
								lb_send_VOL(LINKBUS_MSG_REPLY, volType, VOL_NOT_SPECIFIED);
    234e:	83 e0       	ldi	r24, 0x03	; 3
    2350:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <lb_send_VOL>
    2354:	a3 c0       	rjmp	.+326    	; 0x249c <main+0xaba>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_terminal_mode>
				}
				break;

				case MESSAGE_TTY:
				{
					g_terminal_mode = !g_terminal_mode;
    235c:	91 11       	cpse	r25, r1
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_terminal_mode>
    2364:	0e 94 bf 01 	call	0x37e	; 0x37e <linkbus_setTerminalMode>
					linkbus_setTerminalMode(g_terminal_mode);
    2368:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>

					if(g_terminal_mode)
    236c:	88 23       	and	r24, r24
    236e:	09 f4       	brne	.+2      	; 0x2372 <main+0x990>
    2370:	9a c0       	rjmp	.+308    	; 0x24a6 <main+0xac4>
    2372:	10 92 17 07 	sts	0x0717, r1	; 0x800717 <g_LB_broadcasts_enabled+0x1>
					{
						g_LB_broadcasts_enabled = 0;    /* disable all broadcasts */
    2376:	10 92 16 07 	sts	0x0716, r1	; 0x800716 <g_LB_broadcasts_enabled>
    237a:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <g_send_ID_countdown+0x1>
						attach_success = TRUE;          /* stop any ongoing ID messages */
						g_send_ID_countdown = 0;
    237e:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <g_send_ID_countdown>
    2382:	81 eb       	ldi	r24, 0xB1	; 177
    2384:	94 e0       	ldi	r25, 0x04	; 4
						linkbus_setLineTerm("\n\n");
    2386:	0e 94 b2 01 	call	0x364	; 0x364 <linkbus_setLineTerm>
    238a:	cc 24       	eor	r12, r12
    238c:	c3 94       	inc	r12
					linkbus_setTerminalMode(g_terminal_mode);

					if(g_terminal_mode)
					{
						g_LB_broadcasts_enabled = 0;    /* disable all broadcasts */
						attach_success = TRUE;          /* stop any ongoing ID messages */
    238e:	86 c0       	rjmp	.+268    	; 0x249c <main+0xaba>
    2390:	c8 01       	movw	r24, r16
    2392:	03 96       	adiw	r24, 0x03	; 3
				}
				break;

				case MESSAGE_BCR:
				{
					LBbroadcastType bcType = atoi(lb_buff->fields[FIELD1]);
    2394:	0e 94 0e 21 	call	0x421c	; 0x421c <atoi>
    2398:	f8 01       	movw	r30, r16
    239a:	20 81       	ld	r18, Z

					if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    239c:	22 30       	cpi	r18, 0x02	; 2
    239e:	61 f4       	brne	.+24     	; 0x23b8 <main+0x9d6>
    23a0:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <g_LB_broadcasts_enabled>
					{
						g_LB_broadcasts_enabled |= bcType;
    23a4:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <g_LB_broadcasts_enabled+0x1>
    23a8:	a9 01       	movw	r20, r18
    23aa:	48 2b       	or	r20, r24
    23ac:	ca 01       	movw	r24, r20
    23ae:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <g_LB_broadcasts_enabled+0x1>
    23b2:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <g_LB_broadcasts_enabled>
    23b6:	72 c0       	rjmp	.+228    	; 0x249c <main+0xaba>
    23b8:	99 27       	eor	r25, r25
    23ba:	80 95       	com	r24
					}
					else
					{
						g_LB_broadcasts_enabled &= ~bcType;
    23bc:	90 95       	com	r25
    23be:	20 91 16 07 	lds	r18, 0x0716	; 0x800716 <g_LB_broadcasts_enabled>
    23c2:	30 91 17 07 	lds	r19, 0x0717	; 0x800717 <g_LB_broadcasts_enabled+0x1>
    23c6:	82 23       	and	r24, r18
    23c8:	93 23       	and	r25, r19
    23ca:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <g_LB_broadcasts_enabled+0x1>
    23ce:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <g_LB_broadcasts_enabled>
    23d2:	64 c0       	rjmp	.+200    	; 0x249c <main+0xaba>
				}
				break;

				case MESSAGE_BAT_BC:
				{
					lb_broadcast_bat(g_lastConversionResult[BATTERY_READING]);
    23d4:	f5 01       	movw	r30, r10
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	0e 94 3a 05 	call	0xa74	; 0xa74 <lb_broadcast_bat>
				}
				break;
				
				case MESSAGE_RSSI_BC:
				{
					lb_broadcast_rssi(g_lastConversionResult[RSSI_READING]);
    23de:	5e c0       	rjmp	.+188    	; 0x249c <main+0xaba>
    23e0:	f5 01       	movw	r30, r10
    23e2:	84 81       	ldd	r24, Z+4	; 0x04
    23e4:	95 81       	ldd	r25, Z+5	; 0x05
    23e6:	0e 94 9c 05 	call	0xb38	; 0xb38 <lb_broadcast_rssi>
				{
					#ifdef INCLUDE_DS3231_SUPPORT
						int32_t time;
					#endif
					
					cli(); wdt_reset(); /* HW watchdog */ sei();
    23ea:	58 c0       	rjmp	.+176    	; 0x249c <main+0xaba>
    23ec:	f8 94       	cli
    23ee:	a8 95       	wdr
					linkbus_setLineTerm("\n");
    23f0:	78 94       	sei
    23f2:	82 eb       	ldi	r24, 0xB2	; 178
    23f4:	94 e0       	ldi	r25, 0x04	; 4
    23f6:	0e 94 b2 01 	call	0x364	; 0x364 <linkbus_setLineTerm>
					lb_send_BND(LINKBUS_MSG_REPLY, rxGetBand());
    23fa:	6e d2       	rcall	.+1244   	; 0x28d8 <rxGetBand>
    23fc:	68 2f       	mov	r22, r24
    23fe:	83 e0       	ldi	r24, 0x03	; 3
    2400:	0e 94 e6 03 	call	0x7cc	; 0x7cc <lb_send_BND>
					lb_send_FRE(LINKBUS_MSG_REPLY, rxGetFrequency(), FALSE);
    2404:	ee d1       	rcall	.+988    	; 0x27e2 <rxGetFrequency>
    2406:	ab 01       	movw	r20, r22
    2408:	bc 01       	movw	r22, r24
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	0e 94 0b 02 	call	0x416	; 0x416 <lb_send_FRE>
    2412:	8e d3       	rcall	.+1820   	; 0x2b30 <rxGetCWOffset>
					lb_send_FRE(LINKBUS_MSG_REPLY, rxGetCWOffset(), FALSE);
    2414:	ab 01       	movw	r20, r22
    2416:	bc 01       	movw	r22, r24
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	83 e0       	ldi	r24, 0x03	; 3
    241c:	0e 94 0b 02 	call	0x416	; 0x416 <lb_send_FRE>
    2420:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <g_rx_attenuation>
					lb_send_value(g_rx_attenuation, "ATT");
    2424:	90 91 0e 07 	lds	r25, 0x070E	; 0x80070e <g_rx_attenuation+0x1>
    2428:	64 eb       	ldi	r22, 0xB4	; 180
    242a:	74 e0       	ldi	r23, 0x04	; 4
    242c:	0e 94 ed 01 	call	0x3da	; 0x3da <lb_send_value>
    2430:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <g_receiver_port_shadow>
					lb_send_value((g_receiver_port_shadow & 0b00100000) ? 1:0, "PRE");
    2434:	68 eb       	ldi	r22, 0xB8	; 184
    2436:	74 e0       	ldi	r23, 0x04	; 4
    2438:	85 fb       	bst	r24, 5
    243a:	88 27       	eor	r24, r24
    243c:	80 f9       	bld	r24, 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 ed 01 	call	0x3da	; 0x3da <lb_send_value>
    2444:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <g_main_volume>
					lb_send_value(g_main_volume, "MAIN VOL");
    2448:	6f e9       	ldi	r22, 0x9F	; 159
    244a:	74 e0       	ldi	r23, 0x04	; 4
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 ed 01 	call	0x3da	; 0x3da <lb_send_value>
    2452:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <g_tone_volume>
					lb_send_value(g_tone_volume, "TONE VOL");
    2456:	68 ea       	ldi	r22, 0xA8	; 168
    2458:	74 e0       	ldi	r23, 0x04	; 4
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 ed 01 	call	0x3da	; 0x3da <lb_send_value>
    2460:	f8 94       	cli
    2462:	a8 95       	wdr
					cli(); wdt_reset(); /* HW watchdog */ sei();
    2464:	78 94       	sei
    2466:	f5 01       	movw	r30, r10
    2468:	82 81       	ldd	r24, Z+2	; 0x02
					lb_broadcast_bat(g_lastConversionResult[BATTERY_READING]);
    246a:	93 81       	ldd	r25, Z+3	; 0x03
    246c:	0e 94 3a 05 	call	0xa74	; 0xa74 <lb_broadcast_bat>
    2470:	f5 01       	movw	r30, r10
    2472:	84 81       	ldd	r24, Z+4	; 0x04
					lb_broadcast_rssi(g_lastConversionResult[RSSI_READING]);
    2474:	95 81       	ldd	r25, Z+5	; 0x05
    2476:	0e 94 9c 05 	call	0xb38	; 0xb38 <lb_broadcast_rssi>
    247a:	81 eb       	ldi	r24, 0xB1	; 177
    247c:	94 e0       	ldi	r25, 0x04	; 4
					linkbus_setLineTerm("\n\n");
    247e:	0e 94 b2 01 	call	0x364	; 0x364 <linkbus_setLineTerm>
    2482:	f8 94       	cli
    2484:	a8 95       	wdr
					cli(); wdt_reset(); /* HW watchdog */ sei();
    2486:	78 94       	sei
    2488:	09 c0       	rjmp	.+18     	; 0x249c <main+0xaba>
    248a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
				}
				break;

				default:
				{
					if(g_terminal_mode)
    248e:	88 23       	and	r24, r24
    2490:	19 f0       	breq	.+6      	; 0x2498 <main+0xab6>
    2492:	0e 94 75 01 	call	0x2ea	; 0x2ea <lb_send_Help>
					{
						lb_send_Help();
    2496:	02 c0       	rjmp	.+4      	; 0x249c <main+0xaba>
    2498:	0e 94 1d 01 	call	0x23a	; 0x23a <linkbus_reset_rx>
					}
					else
					{
						linkbus_reset_rx(); /* flush buffer */
    249c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
					}
				}
				break;
			}

			if(g_terminal_mode)
    24a0:	81 11       	cpse	r24, r1
    24a2:	0e 94 6d 01 	call	0x2da	; 0x2da <lb_send_NewPrompt>
			{
				lb_send_NewPrompt();
    24a6:	f8 01       	movw	r30, r16
			}

			lb_buff->id = MESSAGE_EMPTY;
    24a8:	12 82       	std	Z+2, r1	; 0x02
    24aa:	11 82       	std	Z+1, r1	; 0x01
    24ac:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nextFullRxBuffer>
		}

		/***********************************************************************
		 *  Handle arriving Linkbus messages
		 ************************************************************************/
		while((lb_buff = nextFullRxBuffer()))
    24b0:	8c 01       	movw	r16, r24
    24b2:	89 2b       	or	r24, r25
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <main+0xad6>
    24b6:	13 cc       	rjmp	.-2010   	; 0x1cde <main+0x2fc>
    24b8:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <g_radio_port_changed>
		}


			/* ////////////////////////////////////
			 * Handle Receiver interrupts (e.g., trigger button presses) */
			if(g_radio_port_changed)
    24bc:	88 23       	and	r24, r24
    24be:	29 f0       	breq	.+10     	; 0x24ca <main+0xae8>
    24c0:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <g_radio_port_changed>
			{
				g_radio_port_changed = FALSE;
    24c4:	ce 01       	movw	r24, r28

				uint8_t portPins;
				pcf8574_readPort(&portPins);
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	20 d7       	rcall	.+3648   	; 0x330a <pcf8574_readPort>
    24ca:	00 91 1f 07 	lds	r16, 0x071F	; 0x80071f <g_tick_count>
				 *			} */
			}

			/* ////////////////////////////////////
			 * Handle periodic tasks triggered by the tick count */
			if(hold_tick_count != g_tick_count)
    24ce:	10 91 20 07 	lds	r17, 0x0720	; 0x800720 <g_tick_count+0x1>
    24d2:	20 16       	cp	r2, r16
    24d4:	31 06       	cpc	r3, r17
    24d6:	09 f4       	brne	.+2      	; 0x24da <main+0xaf8>
    24d8:	26 cb       	rjmp	.-2484   	; 0x1b26 <main+0x144>
    24da:	00 91 1f 07 	lds	r16, 0x071F	; 0x80071f <g_tick_count>
			{
				hold_tick_count = g_tick_count;
    24de:	10 91 20 07 	lds	r17, 0x0720	; 0x800720 <g_tick_count+0x1>
    24e2:	80 91 15 07 	lds	r24, 0x0715	; 0x800715 <g_lb_repeat_rssi>

				if(g_lb_repeat_rssi)
    24e6:	88 23       	and	r24, r24
    24e8:	09 f4       	brne	.+2      	; 0x24ec <main+0xb0a>
    24ea:	52 c0       	rjmp	.+164    	; 0x2590 <main+0xbae>
    24ec:	80 91 13 07 	lds	r24, 0x0713	; 0x800713 <g_rssi_countdown>
				{
					static uint16_t lastRSSI = 0;
					static uint16_t lastRoundedRSSI = 0;
					
					if(!g_rssi_countdown)
    24f0:	90 91 14 07 	lds	r25, 0x0714	; 0x800714 <g_rssi_countdown+0x1>
    24f4:	89 2b       	or	r24, r25
    24f6:	09 f0       	breq	.+2      	; 0x24fa <main+0xb18>
    24f8:	4b c0       	rjmp	.+150    	; 0x2590 <main+0xbae>
    24fa:	40 91 fa 06 	lds	r20, 0x06FA	; 0x8006fa <g_filteredRSSI>
					{
						if(lastRSSI != g_filteredRSSI)
    24fe:	50 91 fb 06 	lds	r21, 0x06FB	; 0x8006fb <g_filteredRSSI+0x1>
    2502:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <g_filteredRSSI+0x2>
    2506:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <g_filteredRSSI+0x3>
    250a:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <lastRSSI.3134>
    250e:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <lastRSSI.3134+0x1>
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	84 17       	cp	r24, r20
    2518:	95 07       	cpc	r25, r21
    251a:	a6 07       	cpc	r26, r22
    251c:	b7 07       	cpc	r27, r23
    251e:	c1 f1       	breq	.+112    	; 0x2590 <main+0xbae>
    2520:	60 91 fa 06 	lds	r22, 0x06FA	; 0x8006fa <g_filteredRSSI>
						{
							uint16_t roundedRSSI = g_filteredRSSI / 10;
    2524:	70 91 fb 06 	lds	r23, 0x06FB	; 0x8006fb <g_filteredRSSI+0x1>
    2528:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <g_filteredRSSI+0x2>
    252c:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <g_filteredRSSI+0x3>
    2530:	2a e0       	ldi	r18, 0x0A	; 10
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__udivmodsi4>
    253c:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <lastRoundedRSSI.3135>
							
							if(lastRoundedRSSI != roundedRSSI)
    2540:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <lastRoundedRSSI.3135+0x1>
    2544:	82 17       	cp	r24, r18
    2546:	93 07       	cpc	r25, r19
    2548:	b9 f0       	breq	.+46     	; 0x2578 <main+0xb96>
    254a:	30 93 cd 06 	sts	0x06CD, r19	; 0x8006cd <lastRoundedRSSI.3135+0x1>
							{
								lastRoundedRSSI = roundedRSSI;
    254e:	20 93 cc 06 	sts	0x06CC, r18	; 0x8006cc <lastRoundedRSSI.3135>
    2552:	84 e6       	ldi	r24, 0x64	; 100
    2554:	90 e0       	ldi	r25, 0x00	; 0
#ifndef DEBUG_FUNCTIONS_ENABLE
								g_rssi_countdown = 100;
    2556:	90 93 14 07 	sts	0x0714, r25	; 0x800714 <g_rssi_countdown+0x1>
    255a:	80 93 13 07 	sts	0x0713, r24	; 0x800713 <g_rssi_countdown>
    255e:	c9 01       	movw	r24, r18
    2560:	88 0f       	add	r24, r24
#endif
								lb_broadcast_rssi(10*roundedRSSI);
    2562:	99 1f       	adc	r25, r25
    2564:	22 0f       	add	r18, r18
    2566:	33 1f       	adc	r19, r19
    2568:	22 0f       	add	r18, r18
    256a:	33 1f       	adc	r19, r19
    256c:	22 0f       	add	r18, r18
    256e:	33 1f       	adc	r19, r19
    2570:	82 0f       	add	r24, r18
    2572:	93 1f       	adc	r25, r19
    2574:	0e 94 9c 05 	call	0xb38	; 0xb38 <lb_broadcast_rssi>
    2578:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <g_filteredRSSI>
							}

							lastRSSI = g_filteredRSSI;
    257c:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <g_filteredRSSI+0x1>
    2580:	a0 91 fc 06 	lds	r26, 0x06FC	; 0x8006fc <g_filteredRSSI+0x2>
    2584:	b0 91 fd 06 	lds	r27, 0x06FD	; 0x8006fd <g_filteredRSSI+0x3>
    2588:	90 93 cf 06 	sts	0x06CF, r25	; 0x8006cf <lastRSSI.3134+0x1>
    258c:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <lastRSSI.3134>
    2590:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_LB_broadcast_interval>
#endif // DEBUG_FUNCTIONS_ENABLE

					}				
				}

				if(!g_LB_broadcast_interval && g_LB_broadcasts_enabled)
    2594:	81 11       	cpse	r24, r1
    2596:	58 c0       	rjmp	.+176    	; 0x2648 <main+0xc66>
    2598:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <g_LB_broadcasts_enabled>
    259c:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <g_LB_broadcasts_enabled+0x1>
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	09 f4       	brne	.+2      	; 0x25a6 <main+0xbc4>
    25a4:	51 c0       	rjmp	.+162    	; 0x2648 <main+0xc66>
    25a6:	80 ff       	sbrs	r24, 0
    25a8:	1b c0       	rjmp	.+54     	; 0x25e0 <main+0xbfe>
					if(g_LB_broadcasts_enabled & UPC_TEMP_BROADCAST)
					{
						/* not yet supported - gets read from processor chip */
					}

					if(g_LB_broadcasts_enabled & BATTERY_BROADCAST)
    25aa:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <g_adcUpdated+0x1>
					{
						if(g_adcUpdated[BATTERY_READING])
    25ae:	88 23       	and	r24, r24
    25b0:	b9 f0       	breq	.+46     	; 0x25e0 <main+0xbfe>
    25b2:	f5 01       	movw	r30, r10
    25b4:	22 81       	ldd	r18, Z+2	; 0x02
						{
							uint16_t v = (uint16_t)( ( 1000 * ( (uint32_t)(g_lastConversionResult[BATTERY_READING] + POWER_SUPPLY_VOLTAGE_DROP_MV) ) ) / BATTERY_VOLTAGE_COEFFICIENT ); /* round up and adjust for voltage divider and drops */
    25b6:	33 81       	ldd	r19, Z+3	; 0x03
    25b8:	26 52       	subi	r18, 0x26	; 38
    25ba:	3f 4f       	sbci	r19, 0xFF	; 255
							lb_broadcast_bat(v);
    25bc:	a8 ee       	ldi	r26, 0xE8	; 232
    25be:	b3 e0       	ldi	r27, 0x03	; 3
    25c0:	0e 94 a8 20 	call	0x4150	; 0x4150 <__umulhisi3>
    25c4:	2f ed       	ldi	r18, 0xDF	; 223
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__udivmodsi4>
    25d0:	c9 01       	movw	r24, r18
    25d2:	0e 94 3a 05 	call	0xa74	; 0xa74 <lb_broadcast_bat>
    25d6:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <g_adcUpdated+0x1>
							g_adcUpdated[BATTERY_READING] = FALSE;
    25da:	84 e6       	ldi	r24, 0x64	; 100
    25dc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_LB_broadcast_interval>
							g_LB_broadcast_interval = 100;                                                                                                                              /* minimum delay before next broadcast */
    25e0:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <g_LB_broadcasts_enabled>
						}
					}

					if(g_LB_broadcasts_enabled & RSSI_BROADCAST)
    25e4:	81 ff       	sbrs	r24, 1
    25e6:	0e c0       	rjmp	.+28     	; 0x2604 <main+0xc22>
    25e8:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <g_adcUpdated+0x2>
					{
						if(g_adcUpdated[RSSI_READING])
    25ec:	88 23       	and	r24, r24
    25ee:	51 f0       	breq	.+20     	; 0x2604 <main+0xc22>
    25f0:	f5 01       	movw	r30, r10
    25f2:	84 81       	ldd	r24, Z+4	; 0x04
						{
							uint16_t v = g_lastConversionResult[RSSI_READING];  /* round up and adjust for voltage divider */
    25f4:	95 81       	ldd	r25, Z+5	; 0x05
    25f6:	0e 94 9c 05 	call	0xb38	; 0xb38 <lb_broadcast_rssi>
							lb_broadcast_rssi(v);
    25fa:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <g_adcUpdated+0x2>
							g_adcUpdated[RSSI_READING] = FALSE;
    25fe:	84 e6       	ldi	r24, 0x64	; 100
    2600:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_LB_broadcast_interval>
							g_LB_broadcast_interval = 100;                      /* minimum delay before next broadcast */
    2604:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <g_LB_broadcasts_enabled>
						}
					}

					if(g_LB_broadcasts_enabled & RF_BROADCAST)
    2608:	82 ff       	sbrs	r24, 2
    260a:	1e c0       	rjmp	.+60     	; 0x2648 <main+0xc66>
    260c:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <g_adcUpdated>
					{
						if(g_adcUpdated[RF_READING])
    2610:	88 23       	and	r24, r24
    2612:	d1 f0       	breq	.+52     	; 0x2648 <main+0xc66>
    2614:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <g_adcUpdated>
						{
							g_adcUpdated[RF_READING] = FALSE;
    2618:	f5 01       	movw	r30, r10
    261a:	60 81       	ld	r22, Z
							uint16_t v = (uint16_t)(((uint32_t)(g_lastConversionResult[RF_READING]) + 9) / 100);    /* round up and adjust for voltage divider */
    261c:	71 81       	ldd	r23, Z+1	; 0x01
    261e:	cb 01       	movw	r24, r22
    2620:	a0 e0       	ldi	r26, 0x00	; 0
							lb_broadcast_rf(v);
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	67 5f       	subi	r22, 0xF7	; 247
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	8f 4f       	sbci	r24, 0xFF	; 255
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	24 e6       	ldi	r18, 0x64	; 100
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <__udivmodsi4>
    263c:	c9 01       	movw	r24, r18
    263e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <lb_broadcast_rf>
    2642:	84 e6       	ldi	r24, 0x64	; 100
    2644:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_LB_broadcast_interval>
							g_LB_broadcast_interval = 100;                                                          /* minimum delay before next broadcast */
    2648:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <g_send_ID_countdown>
						}
					}
				}

				if(!g_send_ID_countdown && !attach_success)
    264c:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <g_send_ID_countdown+0x1>
    2650:	89 2b       	or	r24, r25
    2652:	09 f0       	breq	.+2      	; 0x2656 <main+0xc74>
    2654:	68 ca       	rjmp	.-2864   	; 0x1b26 <main+0x144>
    2656:	c1 10       	cpse	r12, r1
    2658:	66 ca       	rjmp	.-2868   	; 0x1b26 <main+0x144>
    265a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tries.3140>
				{
					static uint8_t tries = 10;

					if(tries)
    265e:	88 23       	and	r24, r24
    2660:	09 f4       	brne	.+2      	; 0x2664 <main+0xc82>
    2662:	61 ca       	rjmp	.-2878   	; 0x1b26 <main+0x144>
    2664:	81 50       	subi	r24, 0x01	; 1
    2666:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tries.3140>
					{
						tries--;
    266a:	90 92 1b 07 	sts	0x071B, r9	; 0x80071b <g_send_ID_countdown+0x1>
						g_send_ID_countdown = SEND_ID_DELAY;
    266e:	80 92 1a 07 	sts	0x071A, r8	; 0x80071a <g_send_ID_countdown>
    2672:	40 91 18 07 	lds	r20, 0x0718	; 0x800718 <g_LB_attached_device>
						lb_send_ID(LINKBUS_MSG_COMMAND, RECEIVER_ID, g_LB_attached_device);
    2676:	62 e0       	ldi	r22, 0x02	; 2
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	0e 94 bc 04 	call	0x978	; 0x978 <lb_send_ID>
    267e:	53 ca       	rjmp	.-2906   	; 0x1b26 <main+0x144>
    2680:	d1 2c       	mov	r13, r1
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <main+0xca6>
					BOOL valid = FALSE;

					if(lb_buff->fields[FIELD1][0] == 'T')   /* volume type field */
					{
						valid = TRUE;
						volType = TONE_VOLUME;
    2684:	dd 24       	eor	r13, r13
    2686:	d3 94       	inc	r13
					}
					else if(lb_buff->fields[FIELD1][0] == 'M')
					{
						valid = TRUE;
						volType = MAIN_VOLUME;
    2688:	f8 01       	movw	r30, r16
    268a:	80 8d       	ldd	r24, Z+24	; 0x18
					if(valid)
					{
						IncrType direction = NOCHANGE;
						int16_t holdVol = -1;

						if(lb_buff->fields[FIELD2][0])
    268c:	81 11       	cpse	r24, r1
    268e:	d4 cd       	rjmp	.-1112   	; 0x2238 <main+0x856>
    2690:	08 c0       	rjmp	.+16     	; 0x26a2 <main+0xcc0>
    2692:	dd 20       	and	r13, r13
    2694:	09 f4       	brne	.+2      	; 0x2698 <main+0xcb6>
								holdVol = atoi(lb_buff->fields[FIELD2]);
								direction = SETTOVALUE;
							}
						}

						if(volType == TONE_VOLUME)
    2696:	e0 cd       	rjmp	.-1088   	; 0x2258 <main+0x876>
    2698:	16 ce       	rjmp	.-980    	; 0x22c6 <main+0x8e4>
    269a:	dd 20       	and	r13, r13
    269c:	09 f4       	brne	.+2      	; 0x26a0 <main+0xcbe>
    269e:	de cd       	rjmp	.-1092   	; 0x225c <main+0x87a>
    26a0:	1c ce       	rjmp	.-968    	; 0x22da <main+0x8f8>
    26a2:	dd 20       	and	r13, r13
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <main+0xcc6>
    26a6:	dc cd       	rjmp	.-1096   	; 0x2260 <main+0x87e>
    26a8:	30 ce       	rjmp	.-928    	; 0x230a <main+0x928>

000026aa <rxSetFrequency>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended receive frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL rxSetFrequency(Frequency_Hz *freq)
	{
    26aa:	0f 93       	push	r16
    26ac:	1f 93       	push	r17
		BOOL activeBandSet = FALSE;
		Frequency_Hz vfo;
		RadioBand bandSet = BAND_INVALID;

		if((*freq < RX_MAXIMUM_80M_FREQUENCY) && (*freq > RX_MINIMUM_80M_FREQUENCY))    /* 80m */
    26ae:	fc 01       	movw	r30, r24
    26b0:	40 81       	ld	r20, Z
    26b2:	51 81       	ldd	r21, Z+1	; 0x01
    26b4:	62 81       	ldd	r22, Z+2	; 0x02
    26b6:	73 81       	ldd	r23, Z+3	; 0x03
    26b8:	8a 01       	movw	r16, r20
    26ba:	9b 01       	movw	r18, r22
    26bc:	01 5e       	subi	r16, 0xE1	; 225
    26be:	17 46       	sbci	r17, 0x67	; 103
    26c0:	25 43       	sbci	r18, 0x35	; 53
    26c2:	31 09       	sbc	r19, r1
    26c4:	0f 31       	cpi	r16, 0x1F	; 31
    26c6:	11 4a       	sbci	r17, 0xA1	; 161
    26c8:	27 40       	sbci	r18, 0x07	; 7
    26ca:	31 05       	cpc	r19, r1
    26cc:	68 f5       	brcc	.+90     	; 0x2728 <rxSetFrequency+0x7e>
		{
			g_freq_80m = *freq;
    26ce:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <g_freq_80m>
    26d2:	50 93 23 01 	sts	0x0123, r21	; 0x800123 <g_freq_80m+0x1>
    26d6:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <g_freq_80m+0x2>
    26da:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <g_freq_80m+0x3>

			if(g_vfo_configuration & VFO_2M_LOW_80M_HIGH)
    26de:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_vfo_configuration>
    26e2:	81 ff       	sbrs	r24, 1
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <rxSetFrequency+0x48>
			{
				vfo = RADIO_IF_FREQUENCY + *freq;
    26e6:	40 52       	subi	r20, 0x20	; 32
    26e8:	5b 4b       	sbci	r21, 0xBB	; 187
    26ea:	6c 45       	sbci	r22, 0x5C	; 92
    26ec:	7f 4f       	sbci	r23, 0xFF	; 255
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
				}
			}
			
			bandSet = BAND_80M;
    26ee:	91 e0       	ldi	r25, 0x01	; 1
    26f0:	70 c0       	rjmp	.+224    	; 0x27d2 <rxSetFrequency+0x128>
			{
				vfo = RADIO_IF_FREQUENCY + *freq;
			}
			else
			{
				if(*freq > RADIO_IF_FREQUENCY)
    26f2:	41 3e       	cpi	r20, 0xE1	; 225
    26f4:	04 e4       	ldi	r16, 0x44	; 68
    26f6:	50 07       	cpc	r21, r16
    26f8:	03 ea       	ldi	r16, 0xA3	; 163
    26fa:	60 07       	cpc	r22, r16
    26fc:	71 05       	cpc	r23, r1
    26fe:	30 f0       	brcs	.+12     	; 0x270c <rxSetFrequency+0x62>
				{
					vfo = *freq - RADIO_IF_FREQUENCY;
    2700:	40 5e       	subi	r20, 0xE0	; 224
    2702:	54 44       	sbci	r21, 0x44	; 68
    2704:	63 4a       	sbci	r22, 0xA3	; 163
    2706:	71 09       	sbc	r23, r1
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
				}
			}
			
			bandSet = BAND_80M;
    2708:	91 e0       	ldi	r25, 0x01	; 1
    270a:	63 c0       	rjmp	.+198    	; 0x27d2 <rxSetFrequency+0x128>
				{
					vfo = *freq - RADIO_IF_FREQUENCY;
				}
				else
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
    270c:	80 ee       	ldi	r24, 0xE0	; 224
    270e:	94 e4       	ldi	r25, 0x44	; 68
    2710:	a3 ea       	ldi	r26, 0xA3	; 163
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	8c 01       	movw	r16, r24
    2716:	9d 01       	movw	r18, r26
    2718:	04 1b       	sub	r16, r20
    271a:	15 0b       	sbc	r17, r21
    271c:	26 0b       	sbc	r18, r22
    271e:	37 0b       	sbc	r19, r23
    2720:	b9 01       	movw	r22, r18
    2722:	a8 01       	movw	r20, r16
				}
			}
			
			bandSet = BAND_80M;
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	55 c0       	rjmp	.+170    	; 0x27d2 <rxSetFrequency+0x128>
		}
		else if((*freq < RX_MAXIMUM_2M_FREQUENCY) && (*freq > RX_MINIMUM_2M_FREQUENCY))
    2728:	8a 01       	movw	r16, r20
    272a:	9b 01       	movw	r18, r22
    272c:	01 50       	subi	r16, 0x01	; 1
    272e:	14 44       	sbci	r17, 0x44	; 68
    2730:	25 49       	sbci	r18, 0x95	; 149
    2732:	38 40       	sbci	r19, 0x08	; 8
    2734:	0f 3f       	cpi	r16, 0xFF	; 255
    2736:	18 40       	sbci	r17, 0x08	; 8
    2738:	2d 43       	sbci	r18, 0x3D	; 61
    273a:	31 05       	cpc	r19, r1
    273c:	08 f0       	brcs	.+2      	; 0x2740 <rxSetFrequency+0x96>
    273e:	42 c0       	rjmp	.+132    	; 0x27c4 <rxSetFrequency+0x11a>
		{
			g_freq_2m = *freq;
    2740:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <g_freq_2m>
    2744:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <g_freq_2m+0x1>
    2748:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <g_freq_2m+0x2>
    274c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <g_freq_2m+0x3>

			if(g_vfo_configuration & VFO_2M_HIGH_80M_LOW)
    2750:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_vfo_configuration>
    2754:	80 ff       	sbrs	r24, 0
    2756:	06 c0       	rjmp	.+12     	; 0x2764 <rxSetFrequency+0xba>
			{
				vfo = RADIO_IF_FREQUENCY + *freq;
    2758:	40 52       	subi	r20, 0x20	; 32
    275a:	5b 4b       	sbci	r21, 0xBB	; 187
    275c:	6c 45       	sbci	r22, 0x5C	; 92
    275e:	7f 4f       	sbci	r23, 0xFF	; 255
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
				}
			}

			bandSet = BAND_2M;
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	37 c0       	rjmp	.+110    	; 0x27d2 <rxSetFrequency+0x128>
			{
				vfo = RADIO_IF_FREQUENCY + *freq;
			}
			else
			{
				if(*freq > RADIO_IF_FREQUENCY)
    2764:	41 3e       	cpi	r20, 0xE1	; 225
    2766:	f4 e4       	ldi	r31, 0x44	; 68
    2768:	5f 07       	cpc	r21, r31
    276a:	f3 ea       	ldi	r31, 0xA3	; 163
    276c:	6f 07       	cpc	r22, r31
    276e:	71 05       	cpc	r23, r1
    2770:	30 f0       	brcs	.+12     	; 0x277e <rxSetFrequency+0xd4>
				{
					vfo = *freq - RADIO_IF_FREQUENCY;
    2772:	40 5e       	subi	r20, 0xE0	; 224
    2774:	54 44       	sbci	r21, 0x44	; 68
    2776:	63 4a       	sbci	r22, 0xA3	; 163
    2778:	71 09       	sbc	r23, r1
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
				}
			}

			bandSet = BAND_2M;
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	2a c0       	rjmp	.+84     	; 0x27d2 <rxSetFrequency+0x128>
				{
					vfo = *freq - RADIO_IF_FREQUENCY;
				}
				else
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
    277e:	80 ee       	ldi	r24, 0xE0	; 224
    2780:	94 e4       	ldi	r25, 0x44	; 68
    2782:	a3 ea       	ldi	r26, 0xA3	; 163
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	8c 01       	movw	r16, r24
    2788:	9d 01       	movw	r18, r26
    278a:	04 1b       	sub	r16, r20
    278c:	15 0b       	sbc	r17, r21
    278e:	26 0b       	sbc	r18, r22
    2790:	37 0b       	sbc	r19, r23
    2792:	b9 01       	movw	r22, r18
    2794:	a8 01       	movw	r20, r16
				}
			}

			bandSet = BAND_2M;
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	1c c0       	rjmp	.+56     	; 0x27d2 <rxSetFrequency+0x128>
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
		}
		else if(g_activeBand == bandSet)
		{
			vfo -= g_cw_offset; // apply CW offset
    279a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_cw_offset>
    279e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_cw_offset+0x1>
    27a2:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <g_cw_offset+0x2>
    27a6:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <g_cw_offset+0x3>
			si5351_set_freq(vfo, RX_CLOCK_VFO);
    27aa:	8a 01       	movw	r16, r20
    27ac:	9b 01       	movw	r18, r22
    27ae:	08 1b       	sub	r16, r24
    27b0:	19 0b       	sbc	r17, r25
    27b2:	2a 0b       	sbc	r18, r26
    27b4:	3b 0b       	sbc	r19, r27
    27b6:	c9 01       	movw	r24, r18
    27b8:	b8 01       	movw	r22, r16
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <si5351_set_freq>
			activeBandSet = TRUE;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	0c c0       	rjmp	.+24     	; 0x27dc <rxSetFrequency+0x132>
			bandSet = BAND_2M;
		}

		if(bandSet == BAND_INVALID)
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
    27c4:	fc 01       	movw	r30, r24
    27c6:	10 82       	st	Z, r1
    27c8:	11 82       	std	Z+1, r1	; 0x01
    27ca:	12 82       	std	Z+2, r1	; 0x02
    27cc:	13 82       	std	Z+3, r1	; 0x03
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL rxSetFrequency(Frequency_Hz *freq)
	{
		BOOL activeBandSet = FALSE;
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	05 c0       	rjmp	.+10     	; 0x27dc <rxSetFrequency+0x132>

		if(bandSet == BAND_INVALID)
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
		}
		else if(g_activeBand == bandSet)
    27d2:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <g_activeBand>
    27d6:	89 17       	cp	r24, r25
    27d8:	01 f3       	breq	.-64     	; 0x279a <rxSetFrequency+0xf0>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL rxSetFrequency(Frequency_Hz *freq)
	{
		BOOL activeBandSet = FALSE;
    27da:	80 e0       	ldi	r24, 0x00	; 0
			si5351_set_freq(vfo, RX_CLOCK_VFO);
			activeBandSet = TRUE;
		}

		return( activeBandSet);
	}
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	08 95       	ret

000027e2 <rxGetFrequency>:

	Frequency_Hz rxGetFrequency(void)
	{
		if(g_rx_initialized)
    27e2:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <g_rx_initialized>
    27e6:	88 23       	and	r24, r24
    27e8:	d1 f0       	breq	.+52     	; 0x281e <rxGetFrequency+0x3c>
		{
			if(g_activeBand == BAND_2M)
    27ea:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <g_activeBand>
    27ee:	81 11       	cpse	r24, r1
    27f0:	09 c0       	rjmp	.+18     	; 0x2804 <rxGetFrequency+0x22>
			{
				return( g_freq_2m);
    27f2:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <g_freq_2m>
    27f6:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <g_freq_2m+0x1>
    27fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_freq_2m+0x2>
    27fe:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_freq_2m+0x3>
    2802:	08 95       	ret
			}
			else if(g_activeBand == BAND_80M)
    2804:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <g_activeBand>
    2808:	81 30       	cpi	r24, 0x01	; 1
    280a:	69 f4       	brne	.+26     	; 0x2826 <rxGetFrequency+0x44>
			{
				return( g_freq_80m);
    280c:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <g_freq_80m>
    2810:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <g_freq_80m+0x1>
    2814:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_freq_80m+0x2>
    2818:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <g_freq_80m+0x3>
    281c:	08 95       	ret
			}
		}

		return( FREQUENCY_NOT_SPECIFIED);
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	cb 01       	movw	r24, r22
    2824:	08 95       	ret
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	70 e0       	ldi	r23, 0x00	; 0
    282a:	cb 01       	movw	r24, r22
	}
    282c:	08 95       	ret

0000282e <rxSetVFOConfiguration>:

	void rxSetVFOConfiguration(RadioVFOConfig config)
	{
		g_vfo_configuration = config;
    282e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <g_vfo_configuration>
    2832:	08 95       	ret

00002834 <rxSetBand>:
	}

	void __attribute__((optimize("O0"))) rxSetBand(RadioBand band) 
	{
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	29 97       	sbiw	r28, 0x09	; 9
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	89 87       	std	Y+9, r24	; 0x09
		if(band == BAND_80M)
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	e1 f4       	brne	.+56     	; 0x2888 <rxSetBand+0x54>
		{
			g_activeBand = band;
    2850:	89 85       	ldd	r24, Y+9	; 0x09
    2852:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <g_activeBand>
			PORTD |= (1 << PORTD7);
    2856:	8b e2       	ldi	r24, 0x2B	; 43
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	2b e2       	ldi	r18, 0x2B	; 43
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	f9 01       	movw	r30, r18
    2860:	20 81       	ld	r18, Z
    2862:	20 68       	ori	r18, 0x80	; 128
    2864:	fc 01       	movw	r30, r24
    2866:	20 83       	st	Z, r18
			Frequency_Hz f = g_freq_80m;
    2868:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_freq_80m>
    286c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <g_freq_80m+0x1>
    2870:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <g_freq_80m+0x2>
    2874:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <g_freq_80m+0x3>
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	ab 83       	std	Y+3, r26	; 0x03
    287e:	bc 83       	std	Y+4, r27	; 0x04
			rxSetFrequency(&f);
    2880:	ce 01       	movw	r24, r28
    2882:	01 96       	adiw	r24, 0x01	; 1
    2884:	12 df       	rcall	.-476    	; 0x26aa <rxSetFrequency>
			g_activeBand = band;
			PORTD &= ~(1 << PORTD7);
			Frequency_Hz f = g_freq_2m;
			rxSetFrequency(&f);
		}
	}
    2886:	1e c0       	rjmp	.+60     	; 0x28c4 <rxSetBand+0x90>
			g_activeBand = band;
			PORTD |= (1 << PORTD7);
			Frequency_Hz f = g_freq_80m;
			rxSetFrequency(&f);
		}
		else if(band == BAND_2M)
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	88 23       	and	r24, r24
    288c:	d9 f4       	brne	.+54     	; 0x28c4 <rxSetBand+0x90>
		{
			g_activeBand = band;
    288e:	89 85       	ldd	r24, Y+9	; 0x09
    2890:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <g_activeBand>
			PORTD &= ~(1 << PORTD7);
    2894:	8b e2       	ldi	r24, 0x2B	; 43
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	2b e2       	ldi	r18, 0x2B	; 43
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	f9 01       	movw	r30, r18
    289e:	20 81       	ld	r18, Z
    28a0:	2f 77       	andi	r18, 0x7F	; 127
    28a2:	fc 01       	movw	r30, r24
    28a4:	20 83       	st	Z, r18
			Frequency_Hz f = g_freq_2m;
    28a6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_freq_2m>
    28aa:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_freq_2m+0x1>
    28ae:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <g_freq_2m+0x2>
    28b2:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <g_freq_2m+0x3>
    28b6:	8d 83       	std	Y+5, r24	; 0x05
    28b8:	9e 83       	std	Y+6, r25	; 0x06
    28ba:	af 83       	std	Y+7, r26	; 0x07
    28bc:	b8 87       	std	Y+8, r27	; 0x08
			rxSetFrequency(&f);
    28be:	ce 01       	movw	r24, r28
    28c0:	05 96       	adiw	r24, 0x05	; 5
    28c2:	f3 de       	rcall	.-538    	; 0x26aa <rxSetFrequency>
		}
	}
    28c4:	00 00       	nop
    28c6:	29 96       	adiw	r28, 0x09	; 9
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	df 91       	pop	r29
    28d4:	cf 91       	pop	r28
    28d6:	08 95       	ret

000028d8 <rxGetBand>:

	RadioBand rxGetBand(void)
	{
		return(g_activeBand);
    28d8:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <g_activeBand>
	}
    28dc:	08 95       	ret

000028de <init_receiver>:

	void init_receiver(void)
	{
		si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0);
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	ba 01       	movw	r22, r20
    28e4:	80 e4       	ldi	r24, 0x40	; 64
    28e6:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <si5351_init>

//		g_freq_2m = DEFAULT_RX_2M_FREQUENCY;
//		g_freq_80m = DEFAULT_RX_80M_FREQUENCY;
//		g_activeBand = DEFAULT_RX_ACTIVE_BAND;
		
		initializeReceiverEEPROMVars();
    28ea:	30 d0       	rcall	.+96     	; 0x294c <initializeReceiverEEPROMVars>

		g_freq_bfo = RADIO_IF_FREQUENCY;
    28ec:	80 ee       	ldi	r24, 0xE0	; 224
    28ee:	94 e4       	ldi	r25, 0x44	; 68
    28f0:	a3 ea       	ldi	r26, 0xA3	; 163
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_freq_bfo>
    28f8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <g_freq_bfo+0x1>
    28fc:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <g_freq_bfo+0x2>
    2900:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <g_freq_bfo+0x3>
		rxSetBand(g_activeBand);    /* also sets RX_CLOCK_VFO to VFO frequency */
    2904:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <g_activeBand>
    2908:	95 df       	rcall	.-214    	; 0x2834 <rxSetBand>

		si5351_set_freq(g_freq_bfo, RX_CLOCK_BFO);
    290a:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_freq_bfo>
    290e:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <g_freq_bfo+0x1>
    2912:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_freq_bfo+0x2>
    2916:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_freq_bfo+0x3>
    291a:	42 e0       	ldi	r20, 0x02	; 2
    291c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <si5351_set_freq>
		si5351_drive_strength(RX_CLOCK_BFO, SI5351_DRIVE_2MA);
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <si5351_drive_strength>
		si5351_clock_enable(RX_CLOCK_BFO, TRUE);
    2928:	61 e0       	ldi	r22, 0x01	; 1
    292a:	82 e0       	ldi	r24, 0x02	; 2
    292c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <si5351_clock_enable>
		
		si5351_drive_strength(RX_CLOCK_VFO, SI5351_DRIVE_2MA);
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <si5351_drive_strength>
		si5351_clock_enable(RX_CLOCK_VFO, TRUE);
    2938:	61 e0       	ldi	r22, 0x01	; 1
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <si5351_clock_enable>

		g_rx_initialized = TRUE;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <g_rx_initialized>
	}
	
	void store_receiver_values(void)
	{
		saveAllReceiverEEPROM();
    2946:	08 95       	ret

00002948 <store_receiver_values>:
    2948:	af c0       	rjmp	.+350    	; 0x2aa8 <saveAllReceiverEEPROM>
    294a:	08 95       	ret

0000294c <initializeReceiverEEPROMVars>:
	}


	void initializeReceiverEEPROMVars(void)
	{
		if(eeprom_read_byte(&ee_receiver_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 1e 24 	call	0x483c	; 0x483c <eeprom_read_byte>
    2954:	85 3a       	cpi	r24, 0xA5	; 165
    2956:	59 f5       	brne	.+86     	; 0x29ae <initializeReceiverEEPROMVars+0x62>
		{
			g_activeBand = eeprom_read_byte(&ee_active_band);
    2958:	88 e0       	ldi	r24, 0x08	; 8
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	0e 94 1e 24 	call	0x483c	; 0x483c <eeprom_read_byte>
    2960:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <g_activeBand>
			g_freq_2m = eeprom_read_dword(&ee_active_2m_frequency);
    2964:	89 e0       	ldi	r24, 0x09	; 9
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 26 24 	call	0x484c	; 0x484c <eeprom_read_dword>
    296c:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <g_freq_2m>
    2970:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <g_freq_2m+0x1>
    2974:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_freq_2m+0x2>
    2978:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <g_freq_2m+0x3>
			g_freq_80m = eeprom_read_dword(&ee_active_80m_frequency);
    297c:	8d e0       	ldi	r24, 0x0D	; 13
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 26 24 	call	0x484c	; 0x484c <eeprom_read_dword>
    2984:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <g_freq_80m>
    2988:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <g_freq_80m+0x1>
    298c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_freq_80m+0x2>
    2990:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <g_freq_80m+0x3>
			g_cw_offset = eeprom_read_dword(&ee_cw_offset_frequency);
    2994:	81 e1       	ldi	r24, 0x11	; 17
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 26 24 	call	0x484c	; 0x484c <eeprom_read_dword>
    299c:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <g_cw_offset>
    29a0:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <g_cw_offset+0x1>
    29a4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_cw_offset+0x2>
    29a8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_cw_offset+0x3>
    29ac:	08 95       	ret
		}
		else
		{
			eeprom_write_dword(&ee_receiver_2m_mem1_freq, EEPROM_2M_MEM1_DEFAULT);
    29ae:	40 e9       	ldi	r20, 0x90	; 144
    29b0:	54 e1       	ldi	r21, 0x14	; 20
    29b2:	69 e9       	ldi	r22, 0x99	; 153
    29b4:	78 e0       	ldi	r23, 0x08	; 8
    29b6:	85 e1       	ldi	r24, 0x15	; 21
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_2m_mem2_freq, EEPROM_2M_MEM2_DEFAULT);
    29be:	40 ee       	ldi	r20, 0xE0	; 224
    29c0:	57 ed       	ldi	r21, 0xD7	; 215
    29c2:	69 e9       	ldi	r22, 0x99	; 153
    29c4:	78 e0       	ldi	r23, 0x08	; 8
    29c6:	89 e1       	ldi	r24, 0x19	; 25
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_2m_mem3_freq, EEPROM_2M_MEM3_DEFAULT);
    29ce:	40 e3       	ldi	r20, 0x30	; 48
    29d0:	5b e9       	ldi	r21, 0x9B	; 155
    29d2:	6a e9       	ldi	r22, 0x9A	; 154
    29d4:	78 e0       	ldi	r23, 0x08	; 8
    29d6:	8d e1       	ldi	r24, 0x1D	; 29
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_2m_mem4_freq, EEPROM_2M_MEM4_DEFAULT);
    29de:	40 e8       	ldi	r20, 0x80	; 128
    29e0:	5e e5       	ldi	r21, 0x5E	; 94
    29e2:	6b e9       	ldi	r22, 0x9B	; 155
    29e4:	78 e0       	ldi	r23, 0x08	; 8
    29e6:	81 e2       	ldi	r24, 0x21	; 33
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_2m_mem5_freq, EEPROM_2M_MEM5_DEFAULT);
    29ee:	40 ed       	ldi	r20, 0xD0	; 208
    29f0:	51 e2       	ldi	r21, 0x21	; 33
    29f2:	6c e9       	ldi	r22, 0x9C	; 156
    29f4:	78 e0       	ldi	r23, 0x08	; 8
    29f6:	85 e2       	ldi	r24, 0x25	; 37
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem1_freq, EEPROM_80M_MEM1_DEFAULT);
    29fe:	4c e6       	ldi	r20, 0x6C	; 108
    2a00:	5e e9       	ldi	r21, 0x9E	; 158
    2a02:	66 e3       	ldi	r22, 0x36	; 54
    2a04:	70 e0       	ldi	r23, 0x00	; 0
    2a06:	89 e2       	ldi	r24, 0x29	; 41
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem2_freq, EEPROM_80M_MEM2_DEFAULT);
    2a0e:	40 e4       	ldi	r20, 0x40	; 64
    2a10:	52 e5       	ldi	r21, 0x52	; 82
    2a12:	66 e3       	ldi	r22, 0x36	; 54
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	8d e2       	ldi	r24, 0x2D	; 45
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem3_freq, EEPROM_80M_MEM3_DEFAULT);
    2a1e:	48 ec       	ldi	r20, 0xC8	; 200
    2a20:	55 e6       	ldi	r21, 0x65	; 101
    2a22:	66 e3       	ldi	r22, 0x36	; 54
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	81 e3       	ldi	r24, 0x31	; 49
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem4_freq, EEPROM_80M_MEM4_DEFAULT);
    2a2e:	40 e5       	ldi	r20, 0x50	; 80
    2a30:	59 e7       	ldi	r21, 0x79	; 121
    2a32:	66 e3       	ldi	r22, 0x36	; 54
    2a34:	70 e0       	ldi	r23, 0x00	; 0
    2a36:	85 e3       	ldi	r24, 0x35	; 53
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem5_freq, EEPROM_80M_MEM5_DEFAULT);
    2a3e:	48 ed       	ldi	r20, 0xD8	; 216
    2a40:	5c e8       	ldi	r21, 0x8C	; 140
    2a42:	66 e3       	ldi	r22, 0x36	; 54
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	89 e3       	ldi	r24, 0x39	; 57
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
			eeprom_write_byte(&ee_receiver_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    2a4e:	65 ea       	ldi	r22, 0xA5	; 165
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 2b 24 	call	0x4856	; 0x4856 <eeprom_write_byte>

			g_activeBand = EEPROM_BAND_DEFAULT;
    2a58:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <g_activeBand>
			g_freq_2m = DEFAULT_RX_2M_FREQUENCY;
    2a5c:	80 e3       	ldi	r24, 0x30	; 48
    2a5e:	99 e2       	ldi	r25, 0x29	; 41
    2a60:	ad ea       	ldi	r26, 0xAD	; 173
    2a62:	b8 e0       	ldi	r27, 0x08	; 8
    2a64:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_freq_2m>
    2a68:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_freq_2m+0x1>
    2a6c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <g_freq_2m+0x2>
    2a70:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <g_freq_2m+0x3>
			g_freq_80m = DEFAULT_RX_80M_FREQUENCY;
    2a74:	80 e3       	ldi	r24, 0x30	; 48
    2a76:	9b e2       	ldi	r25, 0x2B	; 43
    2a78:	a6 e3       	ldi	r26, 0x36	; 54
    2a7a:	b0 e0       	ldi	r27, 0x00	; 0
    2a7c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_freq_80m>
    2a80:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_freq_80m+0x1>
    2a84:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <g_freq_80m+0x2>
    2a88:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <g_freq_80m+0x3>
			g_cw_offset = DEFAULT_RX_CW_OFFSET_FREQUENCY;
    2a8c:	84 ef       	ldi	r24, 0xF4	; 244
    2a8e:	91 e0       	ldi	r25, 0x01	; 1
    2a90:	a0 e0       	ldi	r26, 0x00	; 0
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_cw_offset>
    2a98:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_cw_offset+0x1>
    2a9c:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <g_cw_offset+0x2>
    2aa0:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <g_cw_offset+0x3>

			saveAllReceiverEEPROM();
    2aa4:	01 c0       	rjmp	.+2      	; 0x2aa8 <saveAllReceiverEEPROM>
		}
	}

	void saveAllReceiverEEPROM(void)
	{
		storeEEbyteIfChanged(&ee_active_band, g_activeBand);
    2aa6:	08 95       	ret

00002aa8 <saveAllReceiverEEPROM>:
    2aa8:	60 91 27 07 	lds	r22, 0x0727	; 0x800727 <g_activeBand>
    2aac:	88 e0       	ldi	r24, 0x08	; 8
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	67 d0       	rcall	.+206    	; 0x2b80 <storeEEbyteIfChanged>
		storeEEdwordIfChanged((uint32_t*)&ee_active_2m_frequency, g_freq_2m);
    2ab2:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <g_freq_2m>
    2ab6:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <g_freq_2m+0x1>
    2aba:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <g_freq_2m+0x2>
    2abe:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <g_freq_2m+0x3>
    2ac2:	89 e0       	ldi	r24, 0x09	; 9
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	6d d0       	rcall	.+218    	; 0x2ba2 <storeEEdwordIfChanged>
		storeEEdwordIfChanged((uint32_t*)&ee_active_80m_frequency, g_freq_80m);
    2ac8:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <g_freq_80m>
    2acc:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <g_freq_80m+0x1>
    2ad0:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <g_freq_80m+0x2>
    2ad4:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <g_freq_80m+0x3>
    2ad8:	8d e0       	ldi	r24, 0x0D	; 13
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	62 d0       	rcall	.+196    	; 0x2ba2 <storeEEdwordIfChanged>
		storeEEdwordIfChanged((uint32_t*)&ee_cw_offset_frequency, g_cw_offset);
    2ade:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <g_cw_offset>
    2ae2:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <g_cw_offset+0x1>
    2ae6:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <g_cw_offset+0x2>
    2aea:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <g_cw_offset+0x3>
    2aee:	81 e1       	ldi	r24, 0x11	; 17
		storeEEdwordIfChanged((uint32_t*)&ee_si5351_ref_correction, si5351_get_correction());
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	57 d0       	rcall	.+174    	; 0x2ba2 <storeEEdwordIfChanged>
    2af4:	78 d4       	rcall	.+2288   	; 0x33e6 <si5351_get_correction>
    2af6:	ab 01       	movw	r20, r22
    2af8:	bc 01       	movw	r22, r24
    2afa:	84 e0       	ldi	r24, 0x04	; 4
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	51 c0       	rjmp	.+162    	; 0x2ba2 <storeEEdwordIfChanged>
    2b00:	08 95       	ret

00002b02 <rxSetCWOffset>:

BOOL rxSetCWOffset(Frequency_Hz offset)
{
	BOOL success = FALSE;
	
	if((offset >= 0) && (offset <= MAX_CW_OFFSET))
    2b02:	61 3d       	cpi	r22, 0xD1	; 209
    2b04:	27 e0       	ldi	r18, 0x07	; 7
    2b06:	72 07       	cpc	r23, r18
    2b08:	81 05       	cpc	r24, r1
    2b0a:	91 05       	cpc	r25, r1
    2b0c:	78 f4       	brcc	.+30     	; 0x2b2c <rxSetCWOffset+0x2a>
    2b0e:	dc 01       	movw	r26, r24
	{
		g_cw_offset = offset;
    2b10:	cb 01       	movw	r24, r22
    2b12:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_cw_offset>
    2b16:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_cw_offset+0x1>
    2b1a:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <g_cw_offset+0x2>
    2b1e:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <g_cw_offset+0x3>
		rxSetBand(g_activeBand); // apply offset to currect frequency setting
    2b22:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <g_activeBand>
    2b26:	86 de       	rcall	.-756    	; 0x2834 <rxSetBand>
		success = TRUE;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	08 95       	ret

#endif  /*#ifdef INCLUDE_RECEIVER_SUPPORT */

BOOL rxSetCWOffset(Frequency_Hz offset)
{
	BOOL success = FALSE;
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
		rxSetBand(g_activeBand); // apply offset to currect frequency setting
		success = TRUE;
	}
	
	return success;
}
    2b2e:	08 95       	ret

00002b30 <rxGetCWOffset>:

Frequency_Hz rxGetCWOffset(void)
{
	return g_cw_offset;
    2b30:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <g_cw_offset>
    2b34:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <g_cw_offset+0x1>
    2b38:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_cw_offset+0x2>
    2b3c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_cw_offset+0x3>
}
    2b40:	08 95       	ret

00002b42 <bandForFrequency>:

RadioBand bandForFrequency(Frequency_Hz freq)
{
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
	RadioBand result = BAND_INVALID;

	if((freq >= RX_MINIMUM_2M_FREQUENCY) && (freq <= RX_MAXIMUM_2M_FREQUENCY))
    2b46:	8b 01       	movw	r16, r22
    2b48:	9c 01       	movw	r18, r24
    2b4a:	14 54       	subi	r17, 0x44	; 68
    2b4c:	25 49       	sbci	r18, 0x95	; 149
    2b4e:	38 40       	sbci	r19, 0x08	; 8
    2b50:	01 30       	cpi	r16, 0x01	; 1
    2b52:	19 40       	sbci	r17, 0x09	; 9
    2b54:	2d 43       	sbci	r18, 0x3D	; 61
    2b56:	31 05       	cpc	r19, r1
    2b58:	68 f0       	brcs	.+26     	; 0x2b74 <bandForFrequency+0x32>
	{
		result = BAND_2M;
	}
	else if((freq >= RX_MINIMUM_80M_FREQUENCY) && (freq <= RX_MAXIMUM_80M_FREQUENCY))
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	80 5e       	subi	r24, 0xE0	; 224
    2b60:	97 46       	sbci	r25, 0x67	; 103
    2b62:	a5 43       	sbci	r26, 0x35	; 53
    2b64:	b1 09       	sbc	r27, r1
    2b66:	81 32       	cpi	r24, 0x21	; 33
    2b68:	91 4a       	sbci	r25, 0xA1	; 161
    2b6a:	a7 40       	sbci	r26, 0x07	; 7
    2b6c:	b1 05       	cpc	r27, r1
    2b6e:	20 f4       	brcc	.+8      	; 0x2b78 <bandForFrequency+0x36>
	{
		result = BAND_80M;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	03 c0       	rjmp	.+6      	; 0x2b7a <bandForFrequency+0x38>
{
	RadioBand result = BAND_INVALID;

	if((freq >= RX_MINIMUM_2M_FREQUENCY) && (freq <= RX_MAXIMUM_2M_FREQUENCY))
	{
		result = BAND_2M;
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <bandForFrequency+0x38>
	return g_cw_offset;
}

RadioBand bandForFrequency(Frequency_Hz freq)
{
	RadioBand result = BAND_INVALID;
    2b78:	82 e0       	ldi	r24, 0x02	; 2
	{
		result = BAND_80M;
	}

	return(result);
}
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	08 95       	ret

00002b80 <storeEEbyteIfChanged>:
 *  EEPROM Utility Functions
 ************************************************************************************************/


void storeEEbyteIfChanged(uint8_t* ee_var, uint8_t val)
{
    2b80:	1f 93       	push	r17
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	ec 01       	movw	r28, r24
    2b88:	16 2f       	mov	r17, r22
	if(eeprom_read_byte((uint8_t*)ee_var) != val)
    2b8a:	0e 94 1e 24 	call	0x483c	; 0x483c <eeprom_read_byte>
    2b8e:	81 17       	cp	r24, r17
    2b90:	21 f0       	breq	.+8      	; 0x2b9a <storeEEbyteIfChanged+0x1a>
	{
		eeprom_write_byte(ee_var, val);
    2b92:	61 2f       	mov	r22, r17
    2b94:	ce 01       	movw	r24, r28
    2b96:	0e 94 2b 24 	call	0x4856	; 0x4856 <eeprom_write_byte>
	}
}
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	1f 91       	pop	r17
    2ba0:	08 95       	ret

00002ba2 <storeEEdwordIfChanged>:

void storeEEdwordIfChanged(uint32_t* ee_var, uint32_t val)
{
    2ba2:	cf 92       	push	r12
    2ba4:	df 92       	push	r13
    2ba6:	ef 92       	push	r14
    2ba8:	ff 92       	push	r15
    2baa:	cf 93       	push	r28
    2bac:	df 93       	push	r29
    2bae:	ec 01       	movw	r28, r24
    2bb0:	6a 01       	movw	r12, r20
    2bb2:	7b 01       	movw	r14, r22
	if(eeprom_read_dword(ee_var) != val)
    2bb4:	0e 94 26 24 	call	0x484c	; 0x484c <eeprom_read_dword>
    2bb8:	6c 15       	cp	r22, r12
    2bba:	7d 05       	cpc	r23, r13
    2bbc:	8e 05       	cpc	r24, r14
    2bbe:	9f 05       	cpc	r25, r15
    2bc0:	29 f0       	breq	.+10     	; 0x2bcc <storeEEdwordIfChanged+0x2a>
	{
		eeprom_write_dword(ee_var, val);
    2bc2:	b7 01       	movw	r22, r14
    2bc4:	a6 01       	movw	r20, r12
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	0e 94 39 24 	call	0x4872	; 0x4872 <eeprom_write_dword>
	}
}
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	ff 90       	pop	r15
    2bd2:	ef 90       	pop	r14
    2bd4:	df 90       	pop	r13
    2bd6:	cf 90       	pop	r12
    2bd8:	08 95       	ret

00002bda <timeValToString>:
/***********************************************************************************************
 *  Print Formatting Utility Functions
 ************************************************************************************************/

void timeValToString(char *str, int32_t timeVal, TimeFormat tf)
{
    2bda:	4f 92       	push	r4
    2bdc:	5f 92       	push	r5
    2bde:	6f 92       	push	r6
    2be0:	7f 92       	push	r7
    2be2:	8f 92       	push	r8
    2be4:	9f 92       	push	r9
    2be6:	af 92       	push	r10
    2be8:	bf 92       	push	r11
    2bea:	cf 92       	push	r12
    2bec:	df 92       	push	r13
    2bee:	ef 92       	push	r14
    2bf0:	ff 92       	push	r15
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	cf 93       	push	r28
    2bf8:	df 93       	push	r29
    2bfa:	ec 01       	movw	r28, r24
    2bfc:	6a 01       	movw	r12, r20
    2bfe:	7b 01       	movw	r14, r22
    2c00:	62 2e       	mov	r6, r18
	int32_t temp;
	uint8_t hold;
	uint8_t index = 7;
	BOOL done = FALSE;

	if(tf == Minutes_Seconds_Elapsed)
    2c02:	83 e0       	ldi	r24, 0x03	; 3
    2c04:	28 13       	cpse	r18, r24
    2c06:	7e c0       	rjmp	.+252    	; 0x2d04 <timeValToString+0x12a>
	{
		if(timeVal < 0)
    2c08:	77 23       	and	r23, r23
    2c0a:	3c f4       	brge	.+14     	; 0x2c1a <timeValToString+0x40>
		{
			timeVal += 86400L;  /* account for midnight rollover */
    2c0c:	90 e8       	ldi	r25, 0x80	; 128
    2c0e:	c9 0e       	add	r12, r25
    2c10:	91 e5       	ldi	r25, 0x51	; 81
    2c12:	d9 1e       	adc	r13, r25
    2c14:	91 e0       	ldi	r25, 0x01	; 1
    2c16:	e9 1e       	adc	r14, r25
    2c18:	f1 1c       	adc	r15, r1

		}
		if(timeVal < 6000)
    2c1a:	e0 e7       	ldi	r30, 0x70	; 112
    2c1c:	ce 16       	cp	r12, r30
    2c1e:	e7 e1       	ldi	r30, 0x17	; 23
    2c20:	de 06       	cpc	r13, r30
    2c22:	e1 04       	cpc	r14, r1
    2c24:	f1 04       	cpc	r15, r1
    2c26:	2c f4       	brge	.+10     	; 0x2c32 <timeValToString+0x58>
		{
			str[5] = '\0';
    2c28:	1d 82       	std	Y+5, r1	; 0x05
			index = 4;
    2c2a:	68 94       	set
    2c2c:	77 24       	eor	r7, r7
    2c2e:	72 f8       	bld	r7, 2
    2c30:	ce c0       	rjmp	.+412    	; 0x2dce <timeValToString+0x1f4>
		}
		else
		{
			if(timeVal < 60000)
    2c32:	f0 e6       	ldi	r31, 0x60	; 96
    2c34:	cf 16       	cp	r12, r31
    2c36:	fa ee       	ldi	r31, 0xEA	; 234
    2c38:	df 06       	cpc	r13, r31
    2c3a:	e1 04       	cpc	r14, r1
    2c3c:	f1 04       	cpc	r15, r1
    2c3e:	ec f4       	brge	.+58     	; 0x2c7a <timeValToString+0xa0>
			{
				sprintf(str, ">%ldm", timeVal / 60);
    2c40:	c7 01       	movw	r24, r14
    2c42:	b6 01       	movw	r22, r12
    2c44:	2c e3       	ldi	r18, 0x3C	; 60
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2c50:	5f 93       	push	r21
    2c52:	4f 93       	push	r20
    2c54:	3f 93       	push	r19
    2c56:	2f 93       	push	r18
    2c58:	8c eb       	ldi	r24, 0xBC	; 188
    2c5a:	94 e0       	ldi	r25, 0x04	; 4
    2c5c:	9f 93       	push	r25
    2c5e:	8f 93       	push	r24
    2c60:	df 93       	push	r29
    2c62:	cf 93       	push	r28
    2c64:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
    2c68:	ed b7       	in	r30, 0x3d	; 61
    2c6a:	fe b7       	in	r31, 0x3e	; 62
    2c6c:	38 96       	adiw	r30, 0x08	; 8
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	fe bf       	out	0x3e, r31	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	ed bf       	out	0x3d, r30	; 61
    2c78:	fb c0       	rjmp	.+502    	; 0x2e70 <timeValToString+0x296>
			}
			else
			{
				sprintf(str, "%ld.%1ldh", timeVal / 3600, (10 * (timeVal % 3600) / 3600));
    2c7a:	0f 2e       	mov	r0, r31
    2c7c:	f0 e1       	ldi	r31, 0x10	; 16
    2c7e:	8f 2e       	mov	r8, r31
    2c80:	fe e0       	ldi	r31, 0x0E	; 14
    2c82:	9f 2e       	mov	r9, r31
    2c84:	a1 2c       	mov	r10, r1
    2c86:	b1 2c       	mov	r11, r1
    2c88:	f0 2d       	mov	r31, r0
    2c8a:	c7 01       	movw	r24, r14
    2c8c:	b6 01       	movw	r22, r12
    2c8e:	a5 01       	movw	r20, r10
    2c90:	94 01       	movw	r18, r8
    2c92:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2c96:	12 2f       	mov	r17, r18
    2c98:	03 2f       	mov	r16, r19
    2c9a:	f4 2e       	mov	r15, r20
    2c9c:	e5 2e       	mov	r14, r21
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	aa 1f       	adc	r26, r26
    2ca8:	bb 1f       	adc	r27, r27
    2caa:	2c 01       	movw	r4, r24
    2cac:	3d 01       	movw	r6, r26
    2cae:	44 0c       	add	r4, r4
    2cb0:	55 1c       	adc	r5, r5
    2cb2:	66 1c       	adc	r6, r6
    2cb4:	77 1c       	adc	r7, r7
    2cb6:	44 0c       	add	r4, r4
    2cb8:	55 1c       	adc	r5, r5
    2cba:	66 1c       	adc	r6, r6
    2cbc:	77 1c       	adc	r7, r7
    2cbe:	bc 01       	movw	r22, r24
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	64 0d       	add	r22, r4
    2cc4:	75 1d       	adc	r23, r5
    2cc6:	86 1d       	adc	r24, r6
    2cc8:	97 1d       	adc	r25, r7
    2cca:	a5 01       	movw	r20, r10
    2ccc:	94 01       	movw	r18, r8
    2cce:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2cd2:	5f 93       	push	r21
    2cd4:	4f 93       	push	r20
    2cd6:	3f 93       	push	r19
    2cd8:	2f 93       	push	r18
    2cda:	ef 92       	push	r14
    2cdc:	ff 92       	push	r15
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	82 ec       	ldi	r24, 0xC2	; 194
    2ce4:	94 e0       	ldi	r25, 0x04	; 4
    2ce6:	9f 93       	push	r25
    2ce8:	8f 93       	push	r24
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	0e 94 7d 21 	call	0x42fa	; 0x42fa <sprintf>
    2cf2:	ed b7       	in	r30, 0x3d	; 61
    2cf4:	fe b7       	in	r31, 0x3e	; 62
    2cf6:	3c 96       	adiw	r30, 0x0c	; 12
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	fe bf       	out	0x3e, r31	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	ed bf       	out	0x3d, r30	; 61
    2d02:	b6 c0       	rjmp	.+364    	; 0x2e70 <timeValToString+0x296>
			done = TRUE;
		}
	}
	else
	{
		if(timeVal < 0)
    2d04:	77 23       	and	r23, r23
    2d06:	7c f4       	brge	.+30     	; 0x2d26 <timeValToString+0x14c>
		{
			timeVal = -timeVal;
    2d08:	f0 94       	com	r15
    2d0a:	e0 94       	com	r14
    2d0c:	d0 94       	com	r13
    2d0e:	c0 94       	com	r12
    2d10:	c1 1c       	adc	r12, r1
    2d12:	d1 1c       	adc	r13, r1
    2d14:	e1 1c       	adc	r14, r1
    2d16:	f1 1c       	adc	r15, r1
			str[9] = '\0';
    2d18:	19 86       	std	Y+9, r1	; 0x09
			str[0] = '-';
    2d1a:	8d e2       	ldi	r24, 0x2D	; 45
    2d1c:	88 83       	st	Y, r24
			index = 8;
    2d1e:	68 94       	set
    2d20:	77 24       	eor	r7, r7
    2d22:	73 f8       	bld	r7, 3
    2d24:	54 c0       	rjmp	.+168    	; 0x2dce <timeValToString+0x1f4>
		}
		else
		{
			str[8] = '\0';
    2d26:	18 86       	std	Y+8, r1	; 0x08

void timeValToString(char *str, int32_t timeVal, TimeFormat tf)
{
	int32_t temp;
	uint8_t hold;
	uint8_t index = 7;
    2d28:	0f 2e       	mov	r0, r31
    2d2a:	f7 e0       	ldi	r31, 0x07	; 7
    2d2c:	7f 2e       	mov	r7, r31
    2d2e:	f0 2d       	mov	r31, r0
    2d30:	4e c0       	rjmp	.+156    	; 0x2dce <timeValToString+0x1f4>
		str[index--] = '0' + (temp % 10);   /* minutes */
		temp /= 10;

		if(tf == Minutes_Seconds_Elapsed)
		{
			str[index--] = '0' + (temp % 10);   /* 10s of minutes */
    2d32:	c5 0d       	add	r28, r5
    2d34:	d1 1d       	adc	r29, r1
    2d36:	ca 01       	movw	r24, r20
    2d38:	b9 01       	movw	r22, r18
    2d3a:	2a e0       	ldi	r18, 0x0A	; 10
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2d46:	60 5d       	subi	r22, 0xD0	; 208
    2d48:	68 83       	st	Y, r22
    2d4a:	92 c0       	rjmp	.+292    	; 0x2e70 <timeValToString+0x296>
		}
		else
		{
			str[index--] = '0' + (temp % 6);    /* 10s of minutes */
    2d4c:	8e 01       	movw	r16, r28
    2d4e:	05 0d       	add	r16, r5
    2d50:	11 1d       	adc	r17, r1
    2d52:	ca 01       	movw	r24, r20
    2d54:	b9 01       	movw	r22, r18
    2d56:	26 e0       	ldi	r18, 0x06	; 6
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2d62:	60 5d       	subi	r22, 0xD0	; 208
    2d64:	f8 01       	movw	r30, r16
    2d66:	60 83       	st	Z, r22
			temp /= 6;

			str[index--] = ':';
    2d68:	8b ef       	ldi	r24, 0xFB	; 251
    2d6a:	87 0d       	add	r24, r7
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e8 0f       	add	r30, r24
    2d70:	f1 1d       	adc	r31, r1
    2d72:	8a e3       	ldi	r24, 0x3A	; 58
    2d74:	80 83       	st	Z, r24

			hold = temp % 24;
    2d76:	c7 01       	movw	r24, r14
    2d78:	b6 01       	movw	r22, r12
    2d7a:	20 e1       	ldi	r18, 0x10	; 16
    2d7c:	3e e0       	ldi	r19, 0x0E	; 14
    2d7e:	40 e0       	ldi	r20, 0x00	; 0
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2d86:	ca 01       	movw	r24, r20
    2d88:	b9 01       	movw	r22, r18
    2d8a:	28 e1       	ldi	r18, 0x18	; 24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e0       	ldi	r20, 0x00	; 0
    2d90:	50 e0       	ldi	r21, 0x00	; 0
    2d92:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
			str[index--] = '0' + (hold % 10);   /* hours */
    2d96:	8a ef       	ldi	r24, 0xFA	; 250
    2d98:	87 0d       	add	r24, r7
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e8 0f       	add	r30, r24
    2d9e:	f1 1d       	adc	r31, r1
    2da0:	8d ec       	ldi	r24, 0xCD	; 205
    2da2:	68 9f       	mul	r22, r24
    2da4:	81 2d       	mov	r24, r1
    2da6:	11 24       	eor	r1, r1
    2da8:	86 95       	lsr	r24
    2daa:	86 95       	lsr	r24
    2dac:	86 95       	lsr	r24
    2dae:	28 2f       	mov	r18, r24
    2db0:	22 0f       	add	r18, r18
    2db2:	92 2f       	mov	r25, r18
    2db4:	99 0f       	add	r25, r25
    2db6:	99 0f       	add	r25, r25
    2db8:	92 0f       	add	r25, r18
    2dba:	69 1b       	sub	r22, r25
    2dbc:	60 5d       	subi	r22, 0xD0	; 208
    2dbe:	60 83       	st	Z, r22
			hold /= 10;
			str[index--] = '0' + hold;          /* 10s of hours */
    2dc0:	99 ef       	ldi	r25, 0xF9	; 249
    2dc2:	97 0d       	add	r25, r7
    2dc4:	c9 0f       	add	r28, r25
    2dc6:	d1 1d       	adc	r29, r1
    2dc8:	80 5d       	subi	r24, 0xD0	; 208
    2dca:	88 83       	st	Y, r24
		}
	}
}
    2dcc:	51 c0       	rjmp	.+162    	; 0x2e70 <timeValToString+0x296>
		}
	}

	if(!done)
	{
		str[index--] = '0' + (timeVal % 10);    /* seconds */
    2dce:	8e 01       	movw	r16, r28
    2dd0:	07 0d       	add	r16, r7
    2dd2:	11 1d       	adc	r17, r1
    2dd4:	0f 2e       	mov	r0, r31
    2dd6:	fa e0       	ldi	r31, 0x0A	; 10
    2dd8:	8f 2e       	mov	r8, r31
    2dda:	91 2c       	mov	r9, r1
    2ddc:	a1 2c       	mov	r10, r1
    2dde:	b1 2c       	mov	r11, r1
    2de0:	f0 2d       	mov	r31, r0
    2de2:	c7 01       	movw	r24, r14
    2de4:	b6 01       	movw	r22, r12
    2de6:	a5 01       	movw	r20, r10
    2de8:	94 01       	movw	r18, r8
    2dea:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2dee:	60 5d       	subi	r22, 0xD0	; 208
    2df0:	f8 01       	movw	r30, r16
    2df2:	60 83       	st	Z, r22
		temp = timeVal / 10;
		str[index--] = '0' + (temp % 6);        /* 10s of seconds */
    2df4:	8f ef       	ldi	r24, 0xFF	; 255
    2df6:	87 0d       	add	r24, r7
    2df8:	8e 01       	movw	r16, r28
    2dfa:	08 0f       	add	r16, r24
    2dfc:	11 1d       	adc	r17, r1
    2dfe:	ca 01       	movw	r24, r20
    2e00:	b9 01       	movw	r22, r18
    2e02:	26 e0       	ldi	r18, 0x06	; 6
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e0       	ldi	r20, 0x00	; 0
    2e08:	50 e0       	ldi	r21, 0x00	; 0
    2e0a:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2e0e:	60 5d       	subi	r22, 0xD0	; 208
    2e10:	f8 01       	movw	r30, r16
    2e12:	60 83       	st	Z, r22
		temp /= 6;

		str[index--] = ':';
    2e14:	8e ef       	ldi	r24, 0xFE	; 254
    2e16:	87 0d       	add	r24, r7
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e8 0f       	add	r30, r24
    2e1c:	f1 1d       	adc	r31, r1
    2e1e:	8a e3       	ldi	r24, 0x3A	; 58
    2e20:	80 83       	st	Z, r24

		str[index--] = '0' + (temp % 10);   /* minutes */
    2e22:	0f 2e       	mov	r0, r31
    2e24:	fc ef       	ldi	r31, 0xFC	; 252
    2e26:	5f 2e       	mov	r5, r31
    2e28:	f0 2d       	mov	r31, r0
    2e2a:	57 0c       	add	r5, r7
    2e2c:	8d ef       	ldi	r24, 0xFD	; 253
    2e2e:	87 0d       	add	r24, r7
    2e30:	8e 01       	movw	r16, r28
    2e32:	08 0f       	add	r16, r24
    2e34:	11 1d       	adc	r17, r1
    2e36:	c7 01       	movw	r24, r14
    2e38:	b6 01       	movw	r22, r12
    2e3a:	2c e3       	ldi	r18, 0x3C	; 60
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2e46:	ca 01       	movw	r24, r20
    2e48:	b9 01       	movw	r22, r18
    2e4a:	a5 01       	movw	r20, r10
    2e4c:	94 01       	movw	r18, r8
    2e4e:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>
    2e52:	60 5d       	subi	r22, 0xD0	; 208
    2e54:	f8 01       	movw	r30, r16
    2e56:	60 83       	st	Z, r22
		temp /= 10;
    2e58:	c7 01       	movw	r24, r14
    2e5a:	b6 01       	movw	r22, r12
    2e5c:	28 e5       	ldi	r18, 0x58	; 88
    2e5e:	32 e0       	ldi	r19, 0x02	; 2
    2e60:	40 e0       	ldi	r20, 0x00	; 0
    2e62:	50 e0       	ldi	r21, 0x00	; 0
    2e64:	0e 94 8c 20 	call	0x4118	; 0x4118 <__divmodsi4>

		if(tf == Minutes_Seconds_Elapsed)
    2e68:	f3 e0       	ldi	r31, 0x03	; 3
    2e6a:	6f 12       	cpse	r6, r31
    2e6c:	6f cf       	rjmp	.-290    	; 0x2d4c <timeValToString+0x172>
    2e6e:	61 cf       	rjmp	.-318    	; 0x2d32 <timeValToString+0x158>
			str[index--] = '0' + (hold % 10);   /* hours */
			hold /= 10;
			str[index--] = '0' + hold;          /* 10s of hours */
		}
	}
}
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	ff 90       	pop	r15
    2e7a:	ef 90       	pop	r14
    2e7c:	df 90       	pop	r13
    2e7e:	cf 90       	pop	r12
    2e80:	bf 90       	pop	r11
    2e82:	af 90       	pop	r10
    2e84:	9f 90       	pop	r9
    2e86:	8f 90       	pop	r8
    2e88:	7f 90       	pop	r7
    2e8a:	6f 90       	pop	r6
    2e8c:	5f 90       	pop	r5
    2e8e:	4f 90       	pop	r4
    2e90:	08 95       	ret

00002e92 <stringToTimeVal>:

int32_t stringToTimeVal(char *str)
{
    2e92:	8f 92       	push	r8
    2e94:	9f 92       	push	r9
    2e96:	af 92       	push	r10
    2e98:	bf 92       	push	r11
    2e9a:	ff 92       	push	r15
    2e9c:	0f 93       	push	r16
    2e9e:	1f 93       	push	r17
    2ea0:	cf 93       	push	r28
    2ea2:	df 93       	push	r29
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <stringToTimeVal+0x14>
    2ea6:	1f 92       	push	r1
    2ea8:	cd b7       	in	r28, 0x3d	; 61
    2eaa:	de b7       	in	r29, 0x3e	; 62
    2eac:	8c 01       	movw	r16, r24
	int32_t time_sec = 0;
	BOOL missingTens = FALSE;
	uint8_t index = 0;
	char field[3];

	field[2] = '\0';
    2eae:	1b 82       	std	Y+3, r1	; 0x03
	field[1] = '\0';
    2eb0:	1a 82       	std	Y+2, r1	; 0x02

	if(str[1] == ':')
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	81 81       	ldd	r24, Z+1	; 0x01
	{
		missingTens = TRUE;
	}

	/* hh:mm:ss or h:mm:ss */
	field[0] = str[index++];        /* tens of hours or hours */
    2eb6:	90 81       	ld	r25, Z
    2eb8:	99 83       	std	Y+1, r25	; 0x01
	if(!missingTens)
    2eba:	8a 33       	cpi	r24, 0x3A	; 58
    2ebc:	29 f0       	breq	.+10     	; 0x2ec8 <stringToTimeVal+0x36>
	{
		field[1] = str[index++];    /* hours */
    2ebe:	8a 83       	std	Y+2, r24	; 0x02
    2ec0:	68 94       	set
    2ec2:	ff 24       	eor	r15, r15
    2ec4:	f1 f8       	bld	r15, 1
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <stringToTimeVal+0x3a>
	{
		missingTens = TRUE;
	}

	/* hh:mm:ss or h:mm:ss */
	field[0] = str[index++];        /* tens of hours or hours */
    2ec8:	ff 24       	eor	r15, r15
    2eca:	f3 94       	inc	r15
	if(!missingTens)
	{
		field[1] = str[index++];    /* hours */
	}
	
	time_sec = SecondsFromHours(atol(field));
    2ecc:	ce 01       	movw	r24, r28
    2ece:	01 96       	adiw	r24, 0x01	; 1
    2ed0:	0e 94 2b 21 	call	0x4256	; 0x4256 <atol>
    2ed4:	9b 01       	movw	r18, r22
    2ed6:	ac 01       	movw	r20, r24
    2ed8:	a0 e1       	ldi	r26, 0x10	; 16
    2eda:	be e0       	ldi	r27, 0x0E	; 14
    2edc:	0e 94 b7 20 	call	0x416e	; 0x416e <__muluhisi3>
    2ee0:	4b 01       	movw	r8, r22
    2ee2:	5c 01       	movw	r10, r24
	index++;

	field[0] = str[index++];
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	8f 0d       	add	r24, r15
    2ee8:	f8 01       	movw	r30, r16
    2eea:	e8 0f       	add	r30, r24
    2eec:	f1 1d       	adc	r31, r1
    2eee:	80 81       	ld	r24, Z
    2ef0:	89 83       	std	Y+1, r24	; 0x01
	field[1] = str[index++];    /* minutes */
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	8f 0d       	add	r24, r15
    2ef6:	f8 01       	movw	r30, r16
    2ef8:	e8 0f       	add	r30, r24
    2efa:	f1 1d       	adc	r31, r1
    2efc:	80 81       	ld	r24, Z
    2efe:	8a 83       	std	Y+2, r24	; 0x02
	time_sec += SecondsFromMinutes(atol(field));
    2f00:	ce 01       	movw	r24, r28
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	0e 94 2b 21 	call	0x4256	; 0x4256 <atol>
    2f08:	9b 01       	movw	r18, r22
    2f0a:	ac 01       	movw	r20, r24
    2f0c:	ac e3       	ldi	r26, 0x3C	; 60
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	0e 94 b7 20 	call	0x416e	; 0x416e <__muluhisi3>
    2f14:	86 0e       	add	r8, r22
    2f16:	97 1e       	adc	r9, r23
    2f18:	a8 1e       	adc	r10, r24
    2f1a:	b9 1e       	adc	r11, r25
	index++;

	field[0] = str[index++];
    2f1c:	84 e0       	ldi	r24, 0x04	; 4
    2f1e:	8f 0d       	add	r24, r15
    2f20:	f8 01       	movw	r30, r16
    2f22:	e8 0f       	add	r30, r24
    2f24:	f1 1d       	adc	r31, r1
    2f26:	80 81       	ld	r24, Z
    2f28:	89 83       	std	Y+1, r24	; 0x01
	field[1] = str[index++];    /* seconds */
    2f2a:	95 e0       	ldi	r25, 0x05	; 5
    2f2c:	9f 0d       	add	r25, r15
    2f2e:	f8 01       	movw	r30, r16
    2f30:	e9 0f       	add	r30, r25
    2f32:	f1 1d       	adc	r31, r1
    2f34:	80 81       	ld	r24, Z
    2f36:	8a 83       	std	Y+2, r24	; 0x02
	time_sec += atoi(field);
    2f38:	ce 01       	movw	r24, r28
    2f3a:	01 96       	adiw	r24, 0x01	; 1
    2f3c:	0e 94 0e 21 	call	0x421c	; 0x421c <atoi>

	return(time_sec);
    2f40:	09 2e       	mov	r0, r25
    2f42:	00 0c       	add	r0, r0
    2f44:	aa 0b       	sbc	r26, r26
    2f46:	bb 0b       	sbc	r27, r27
    2f48:	bc 01       	movw	r22, r24
    2f4a:	cd 01       	movw	r24, r26
    2f4c:	68 0d       	add	r22, r8
    2f4e:	79 1d       	adc	r23, r9
    2f50:	8a 1d       	adc	r24, r10
    2f52:	9b 1d       	adc	r25, r11
}
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	df 91       	pop	r29
    2f5c:	cf 91       	pop	r28
    2f5e:	1f 91       	pop	r17
    2f60:	0f 91       	pop	r16
    2f62:	ff 90       	pop	r15
    2f64:	bf 90       	pop	r11
    2f66:	af 90       	pop	r10
    2f68:	9f 90       	pop	r9
    2f6a:	8f 90       	pop	r8
    2f6c:	08 95       	ret

00002f6e <ad5245_set_potentiometer>:

#define AD5245_SLAVE_ADDR_A0_0 0x58
#define AD5245_SLAVE_ADDR_A0_1 0x59

void ad5245_set_potentiometer(uint8_t setting)
{
    2f6e:	cf 93       	push	r28
    2f70:	df 93       	push	r29
    2f72:	1f 92       	push	r1
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(AD5245_SLAVE_ADDR_A0_0, 0x00, &setting, 1);
    2f7a:	21 e0       	ldi	r18, 0x01	; 1
    2f7c:	ae 01       	movw	r20, r28
    2f7e:	4f 5f       	subi	r20, 0xFF	; 255
    2f80:	5f 4f       	sbci	r21, 0xFF	; 255
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	88 e5       	ldi	r24, 0x58	; 88
    2f86:	ee d0       	rcall	.+476    	; 0x3164 <i2c_device_write>
}
    2f88:	0f 90       	pop	r0
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	08 95       	ret

00002f90 <dac081c_set_dac>:
#include <util/twi.h>

#define DAC081C_SLAVE_ADDR_A0 0x18

void dac081c_set_dac(uint8_t setting)
{
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	1f 92       	push	r1
    2f96:	cd b7       	in	r28, 0x3d	; 61
    2f98:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte1=0, byte2=0;
	
	byte1 |= (setting >> 4);
	byte2 |= (setting << 4);
    2f9a:	90 e1       	ldi	r25, 0x10	; 16
    2f9c:	89 9f       	mul	r24, r25
    2f9e:	90 01       	movw	r18, r0
    2fa0:	11 24       	eor	r1, r1
    2fa2:	29 83       	std	Y+1, r18	; 0x01
	i2c_device_write(DAC081C_SLAVE_ADDR_A0, byte1, &byte2, 1);
    2fa4:	68 2f       	mov	r22, r24
    2fa6:	62 95       	swap	r22
    2fa8:	6f 70       	andi	r22, 0x0F	; 15
    2faa:	21 e0       	ldi	r18, 0x01	; 1
    2fac:	ae 01       	movw	r20, r28
    2fae:	4f 5f       	subi	r20, 0xFF	; 255
    2fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb2:	88 e1       	ldi	r24, 0x18	; 24
    2fb4:	d7 d0       	rcall	.+430    	; 0x3164 <i2c_device_write>
}
    2fb6:	0f 90       	pop	r0
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	08 95       	ret

00002fbe <dac081c_read_dac>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	uint8_t __attribute__((optimize("O0"))) dac081c_read_dac(void)
#else
	uint8_t dac081c_read_dac(void)
#endif
{
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <dac081c_read_dac+0xa>
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <dac081c_read_dac+0xc>
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
	uint8_t bytes[2];
	uint8_t bytes2read = 2;
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t index = 0;
	
	i2c_start();
    2fd2:	1a 82       	std	Y+2, r1	; 0x02
	if(i2c_status(TW_START))
    2fd4:	61 d0       	rcall	.+194    	; 0x3098 <i2c_start>
    2fd6:	88 e0       	ldi	r24, 0x08	; 8
    2fd8:	b6 d0       	rcall	.+364    	; 0x3146 <i2c_status>
    2fda:	88 23       	and	r24, r24
    2fdc:	11 f0       	breq	.+4      	; 0x2fe2 <dac081c_read_dac+0x24>
	{
		return(TRUE);
    2fde:	81 e0       	ldi	r24, 0x01	; 1
	}

	if(i2c_write_success((DAC081C_SLAVE_ADDR_A0 | TW_READ), TW_MR_SLA_ACK))
    2fe0:	41 c0       	rjmp	.+130    	; 0x3064 <dac081c_read_dac+0xa6>
    2fe2:	60 e4       	ldi	r22, 0x40	; 64
    2fe4:	89 e1       	ldi	r24, 0x19	; 25
    2fe6:	75 d0       	rcall	.+234    	; 0x30d2 <i2c_write_success>
    2fe8:	88 23       	and	r24, r24
    2fea:	51 f1       	breq	.+84     	; 0x3040 <dac081c_read_dac+0x82>
	{
		return(TRUE);
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	3a c0       	rjmp	.+116    	; 0x3064 <dac081c_read_dac+0xa6>
	}

	while(bytes2read--)
	{
		if(bytes2read)
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	88 23       	and	r24, r24
    2ff4:	a1 f0       	breq	.+40     	; 0x301e <dac081c_read_dac+0x60>
		{
			bytes[index++] = i2c_read_ack();
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	91 e0       	ldi	r25, 0x01	; 1
    2ffa:	98 0f       	add	r25, r24
    2ffc:	9a 83       	std	Y+2, r25	; 0x02
    2ffe:	08 2f       	mov	r16, r24
    3000:	10 e0       	ldi	r17, 0x00	; 0
    3002:	83 d0       	rcall	.+262    	; 0x310a <i2c_read_ack>
    3004:	28 2f       	mov	r18, r24
    3006:	ce 01       	movw	r24, r28
    3008:	03 96       	adiw	r24, 0x03	; 3
    300a:	80 0f       	add	r24, r16
    300c:	91 1f       	adc	r25, r17
    300e:	fc 01       	movw	r30, r24
			if(i2c_status(TW_MR_DATA_ACK))
    3010:	20 83       	st	Z, r18
    3012:	80 e5       	ldi	r24, 0x50	; 80
    3014:	98 d0       	rcall	.+304    	; 0x3146 <i2c_status>
    3016:	88 23       	and	r24, r24
			{
				return(TRUE);
    3018:	99 f0       	breq	.+38     	; 0x3040 <dac081c_read_dac+0x82>
    301a:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		else
		{
			bytes[index] = i2c_read_nack();
    301c:	23 c0       	rjmp	.+70     	; 0x3064 <dac081c_read_dac+0xa6>
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	08 2f       	mov	r16, r24
    3022:	10 e0       	ldi	r17, 0x00	; 0
    3024:	81 d0       	rcall	.+258    	; 0x3128 <i2c_read_nack>
    3026:	28 2f       	mov	r18, r24
    3028:	ce 01       	movw	r24, r28
    302a:	03 96       	adiw	r24, 0x03	; 3
    302c:	80 0f       	add	r24, r16
    302e:	91 1f       	adc	r25, r17
    3030:	fc 01       	movw	r30, r24
			if(i2c_status(TW_MR_DATA_NACK))
    3032:	20 83       	st	Z, r18
    3034:	88 e5       	ldi	r24, 0x58	; 88
    3036:	87 d0       	rcall	.+270    	; 0x3146 <i2c_status>
    3038:	88 23       	and	r24, r24
    303a:	11 f0       	breq	.+4      	; 0x3040 <dac081c_read_dac+0x82>
			{
				return(TRUE);
    303c:	81 e0       	ldi	r24, 0x01	; 1
	if(i2c_write_success((DAC081C_SLAVE_ADDR_A0 | TW_READ), TW_MR_SLA_ACK))
	{
		return(TRUE);
	}

	while(bytes2read--)
    303e:	12 c0       	rjmp	.+36     	; 0x3064 <dac081c_read_dac+0xa6>
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9f ef       	ldi	r25, 0xFF	; 255
    3044:	98 0f       	add	r25, r24
    3046:	99 83       	std	Y+1, r25	; 0x01
    3048:	88 23       	and	r24, r24
				return(TRUE);
			}
		}
	}

	i2c_stop();
    304a:	91 f6       	brne	.-92     	; 0x2ff0 <dac081c_read_dac+0x32>
    304c:	3e d0       	rcall	.+124    	; 0x30ca <i2c_stop>
		
	bytes[0] = (bytes[0] << 4);
    304e:	8b 81       	ldd	r24, Y+3	; 0x03
    3050:	82 95       	swap	r24
    3052:	80 7f       	andi	r24, 0xF0	; 240
    3054:	8b 83       	std	Y+3, r24	; 0x03
	bytes[0] |= (bytes[1] >> 4);
    3056:	9b 81       	ldd	r25, Y+3	; 0x03
    3058:	8c 81       	ldd	r24, Y+4	; 0x04
    305a:	82 95       	swap	r24
    305c:	8f 70       	andi	r24, 0x0F	; 15
    305e:	89 2b       	or	r24, r25
    3060:	8b 83       	std	Y+3, r24	; 0x03

	return(bytes[0]);
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	df 91       	pop	r29
    306e:	cf 91       	pop	r28
    3070:	1f 91       	pop	r17
    3072:	0f 91       	pop	r16
    3074:	08 95       	ret

00003076 <i2c_init>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
    3076:	e4 e6       	ldi	r30, 0x64	; 100
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	8f 77       	andi	r24, 0x7F	; 127
    307e:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
    3080:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 0x25;
    3084:	85 e2       	ldi	r24, 0x25	; 37
    3086:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
    308a:	84 e0       	ldi	r24, 0x04	; 4
    308c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	g_i2c_not_timed_out = TRUE;
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <g_i2c_not_timed_out>
    3096:	08 95       	ret

00003098 <i2c_start>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    3098:	84 ea       	ldi	r24, 0xA4	; 164
    309a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    309e:	ec eb       	ldi	r30, 0xBC	; 188
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	88 23       	and	r24, r24
    30a6:	24 f0       	brlt	.+8      	; 0x30b0 <i2c_start+0x18>
    30a8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_i2c_not_timed_out>
    30ac:	81 11       	cpse	r24, r1
    30ae:	f9 cf       	rjmp	.-14     	; 0x30a2 <i2c_start+0xa>
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
    30b0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_i2c_not_timed_out>
    30b4:	81 11       	cpse	r24, r1
    30b6:	07 c0       	rjmp	.+14     	; 0x30c6 <i2c_start+0x2e>
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
    30b8:	80 e9       	ldi	r24, 0x90	; 144
    30ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			g_i2c_not_timed_out = TRUE;
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <g_i2c_not_timed_out>
			return( TRUE);
    30c4:	08 95       	ret
		}

		return( FALSE);
    30c6:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
    30c8:	08 95       	ret

000030ca <i2c_stop>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    30ca:	84 e9       	ldi	r24, 0x94	; 148
    30cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    30d0:	08 95       	ret

000030d2 <i2c_write_success>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
    30d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
    30d6:	84 e8       	ldi	r24, 0x84	; 132
    30d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    30dc:	ec eb       	ldi	r30, 0xBC	; 188
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	88 23       	and	r24, r24
    30e4:	24 f0       	brlt	.+8      	; 0x30ee <i2c_write_success+0x1c>
    30e6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_i2c_not_timed_out>
    30ea:	81 11       	cpse	r24, r1
    30ec:	f9 cf       	rjmp	.-14     	; 0x30e0 <i2c_write_success+0xe>
		{
			;
		}

		uint8_t stat = TW_STATUS;
    30ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    30f2:	88 7f       	andi	r24, 0xF8	; 248
    30f4:	86 17       	cp	r24, r22
    30f6:	39 f0       	breq	.+14     	; 0x3106 <i2c_write_success+0x34>
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    30f8:	84 e9       	ldi	r24, 0x94	; 148
    30fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			g_i2c_not_timed_out = TRUE;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <g_i2c_not_timed_out>
			return(TRUE);
    3104:	08 95       	ret
		}

		return( FALSE);
    3106:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    3108:	08 95       	ret

0000310a <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    310a:	84 ec       	ldi	r24, 0xC4	; 196
    310c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    3110:	ec eb       	ldi	r30, 0xBC	; 188
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	88 23       	and	r24, r24
    3118:	24 f0       	brlt	.+8      	; 0x3122 <i2c_read_ack+0x18>
    311a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_i2c_not_timed_out>
    311e:	81 11       	cpse	r24, r1
    3120:	f9 cf       	rjmp	.-14     	; 0x3114 <i2c_read_ack+0xa>
		{
			;
		}
		
		return(TWDR);
    3122:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			;
		}
		
		return( TWDR);
#endif
}
    3126:	08 95       	ret

00003128 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    3128:	84 e8       	ldi	r24, 0x84	; 132
    312a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    312e:	ec eb       	ldi	r30, 0xBC	; 188
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	88 23       	and	r24, r24
    3136:	24 f0       	brlt	.+8      	; 0x3140 <i2c_read_nack+0x18>
    3138:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <g_i2c_not_timed_out>
    313c:	81 11       	cpse	r24, r1
    313e:	f9 cf       	rjmp	.-14     	; 0x3132 <i2c_read_nack+0xa>
		{
			;
		}
		
		return( TWDR);
    3140:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			;
		}
		
		return( TWDR);
#endif
}
    3144:	08 95       	ret

00003146 <i2c_status>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
    3146:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    314a:	28 7f       	andi	r18, 0xF8	; 248
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	28 17       	cp	r18, r24
    3152:	39 07       	cpc	r19, r25
    3154:	29 f0       	breq	.+10     	; 0x3160 <i2c_status+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    3156:	84 e9       	ldi	r24, 0x94	; 148
    3158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return(TRUE);
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	08 95       	ret
	}

	return(FALSE);
    3160:	80 e0       	ldi	r24, 0x00	; 0
}
    3162:	08 95       	ret

00003164 <i2c_device_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	00 d0       	rcall	.+0      	; 0x316a <i2c_device_write+0x6>
    316a:	00 d0       	rcall	.+0      	; 0x316c <i2c_device_write+0x8>
    316c:	00 d0       	rcall	.+0      	; 0x316e <i2c_device_write+0xa>
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	8a 83       	std	Y+2, r24	; 0x02
    3174:	6b 83       	std	Y+3, r22	; 0x03
    3176:	5d 83       	std	Y+5, r21	; 0x05
    3178:	4c 83       	std	Y+4, r20	; 0x04
    317a:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    317c:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    317e:	8c df       	rcall	.-232    	; 0x3098 <i2c_start>
		if(i2c_status(TW_START))
    3180:	88 e0       	ldi	r24, 0x08	; 8
    3182:	e1 df       	rcall	.-62     	; 0x3146 <i2c_status>
    3184:	88 23       	and	r24, r24
    3186:	11 f0       	breq	.+4      	; 0x318c <i2c_device_write+0x28>
		{
			return(TRUE);
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	28 c0       	rjmp	.+80     	; 0x31dc <i2c_device_write+0x78>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    318c:	68 e1       	ldi	r22, 0x18	; 24
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	a0 df       	rcall	.-192    	; 0x30d2 <i2c_write_success>
    3192:	88 23       	and	r24, r24
    3194:	11 f0       	breq	.+4      	; 0x319a <i2c_device_write+0x36>
		{
			return(TRUE);
    3196:	81 e0       	ldi	r24, 0x01	; 1
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    3198:	21 c0       	rjmp	.+66     	; 0x31dc <i2c_device_write+0x78>
    319a:	68 e2       	ldi	r22, 0x28	; 40
    319c:	8b 81       	ldd	r24, Y+3	; 0x03
    319e:	99 df       	rcall	.-206    	; 0x30d2 <i2c_write_success>
    31a0:	88 23       	and	r24, r24
    31a2:	a1 f0       	breq	.+40     	; 0x31cc <i2c_device_write+0x68>
		{
			return(TRUE);
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	1a c0       	rjmp	.+52     	; 0x31dc <i2c_device_write+0x78>
		}

		while(bytes2write--)
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	91 e0       	ldi	r25, 0x01	; 1
    31ac:	98 0f       	add	r25, r24
    31ae:	99 83       	std	Y+1, r25	; 0x01
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	2c 81       	ldd	r18, Y+4	; 0x04
    31b6:	3d 81       	ldd	r19, Y+5	; 0x05
    31b8:	82 0f       	add	r24, r18
    31ba:	93 1f       	adc	r25, r19
    31bc:	fc 01       	movw	r30, r24
    31be:	80 81       	ld	r24, Z
    31c0:	68 e2       	ldi	r22, 0x28	; 40
    31c2:	87 df       	rcall	.-242    	; 0x30d2 <i2c_write_success>
    31c4:	88 23       	and	r24, r24
    31c6:	11 f0       	breq	.+4      	; 0x31cc <i2c_device_write+0x68>
			{
				return(TRUE);
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	08 c0       	rjmp	.+16     	; 0x31dc <i2c_device_write+0x78>
		if(i2c_write_success(addr, TW_MT_DATA_ACK))
		{
			return(TRUE);
		}

		while(bytes2write--)
    31cc:	8e 81       	ldd	r24, Y+6	; 0x06
    31ce:	9f ef       	ldi	r25, 0xFF	; 255
    31d0:	98 0f       	add	r25, r24
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	88 23       	and	r24, r24
			{
				return(TRUE);
			}
		}

		i2c_stop();
    31d6:	41 f7       	brne	.-48     	; 0x31a8 <i2c_device_write+0x44>
    31d8:	78 df       	rcall	.-272    	; 0x30ca <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    31da:	80 e0       	ldi	r24, 0x00	; 0
}
    31dc:	26 96       	adiw	r28, 0x06	; 6
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	08 95       	ret

000031ee <i2c_device_read>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	00 d0       	rcall	.+0      	; 0x31f8 <i2c_device_read+0xa>
    31f8:	00 d0       	rcall	.+0      	; 0x31fa <i2c_device_read+0xc>
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <i2c_device_read+0xe>
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	8a 83       	std	Y+2, r24	; 0x02
    3202:	6b 83       	std	Y+3, r22	; 0x03
    3204:	5d 83       	std	Y+5, r21	; 0x05
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    3206:	4c 83       	std	Y+4, r20	; 0x04

		i2c_start();
    3208:	2e 83       	std	Y+6, r18	; 0x06
    320a:	19 82       	std	Y+1, r1	; 0x01
		if(i2c_status(TW_START))
    320c:	45 df       	rcall	.-374    	; 0x3098 <i2c_start>
    320e:	88 e0       	ldi	r24, 0x08	; 8
    3210:	9a df       	rcall	.-204    	; 0x3146 <i2c_status>
    3212:	88 23       	and	r24, r24
		{
			return(TRUE);
    3214:	11 f0       	breq	.+4      	; 0x321a <i2c_device_read+0x2c>
    3216:	81 e0       	ldi	r24, 0x01	; 1
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    3218:	4d c0       	rjmp	.+154    	; 0x32b4 <i2c_device_read+0xc6>
    321a:	68 e1       	ldi	r22, 0x18	; 24
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	59 df       	rcall	.-334    	; 0x30d2 <i2c_write_success>
    3220:	88 23       	and	r24, r24
		{
			return(TRUE);
    3222:	11 f0       	breq	.+4      	; 0x3228 <i2c_device_read+0x3a>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	46 c0       	rjmp	.+140    	; 0x32b4 <i2c_device_read+0xc6>
    3228:	68 e2       	ldi	r22, 0x28	; 40
    322a:	8b 81       	ldd	r24, Y+3	; 0x03
    322c:	52 df       	rcall	.-348    	; 0x30d2 <i2c_write_success>
		{
			return(TRUE);
    322e:	88 23       	and	r24, r24
    3230:	11 f0       	breq	.+4      	; 0x3236 <i2c_device_read+0x48>
		}

		i2c_start();
    3232:	81 e0       	ldi	r24, 0x01	; 1
		if(i2c_status(TW_REP_START))
    3234:	3f c0       	rjmp	.+126    	; 0x32b4 <i2c_device_read+0xc6>
    3236:	30 df       	rcall	.-416    	; 0x3098 <i2c_start>
    3238:	80 e1       	ldi	r24, 0x10	; 16
    323a:	85 df       	rcall	.-246    	; 0x3146 <i2c_status>
    323c:	88 23       	and	r24, r24
		{
			return(TRUE);
    323e:	11 f0       	breq	.+4      	; 0x3244 <i2c_device_read+0x56>
    3240:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    3242:	38 c0       	rjmp	.+112    	; 0x32b4 <i2c_device_read+0xc6>
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	81 60       	ori	r24, 0x01	; 1
    3248:	60 e4       	ldi	r22, 0x40	; 64
    324a:	43 df       	rcall	.-378    	; 0x30d2 <i2c_write_success>
    324c:	88 23       	and	r24, r24
    324e:	51 f1       	breq	.+84     	; 0x32a4 <i2c_device_read+0xb6>
		{
			return(TRUE);
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	30 c0       	rjmp	.+96     	; 0x32b4 <i2c_device_read+0xc6>
		}

		while(bytes2read--)
		{
			if(bytes2read)
    3254:	8e 81       	ldd	r24, Y+6	; 0x06
    3256:	88 23       	and	r24, r24
			{
				data[index++] = i2c_read_ack();
    3258:	a1 f0       	breq	.+40     	; 0x3282 <i2c_device_read+0x94>
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	91 e0       	ldi	r25, 0x01	; 1
    325e:	98 0f       	add	r25, r24
    3260:	99 83       	std	Y+1, r25	; 0x01
    3262:	88 2f       	mov	r24, r24
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	2c 81       	ldd	r18, Y+4	; 0x04
    3268:	3d 81       	ldd	r19, Y+5	; 0x05
    326a:	89 01       	movw	r16, r18
    326c:	08 0f       	add	r16, r24
    326e:	19 1f       	adc	r17, r25
    3270:	4c df       	rcall	.-360    	; 0x310a <i2c_read_ack>
    3272:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_ACK))
    3274:	80 83       	st	Z, r24
    3276:	80 e5       	ldi	r24, 0x50	; 80
    3278:	66 df       	rcall	.-308    	; 0x3146 <i2c_status>
    327a:	88 23       	and	r24, r24
				{
					return(TRUE);
    327c:	99 f0       	breq	.+38     	; 0x32a4 <i2c_device_read+0xb6>
    327e:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    3280:	19 c0       	rjmp	.+50     	; 0x32b4 <i2c_device_read+0xc6>
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	88 2f       	mov	r24, r24
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	2c 81       	ldd	r18, Y+4	; 0x04
    328a:	3d 81       	ldd	r19, Y+5	; 0x05
    328c:	89 01       	movw	r16, r18
    328e:	08 0f       	add	r16, r24
    3290:	19 1f       	adc	r17, r25
    3292:	4a df       	rcall	.-364    	; 0x3128 <i2c_read_nack>
    3294:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_NACK))
    3296:	80 83       	st	Z, r24
    3298:	88 e5       	ldi	r24, 0x58	; 88
    329a:	55 df       	rcall	.-342    	; 0x3146 <i2c_status>
    329c:	88 23       	and	r24, r24
    329e:	11 f0       	breq	.+4      	; 0x32a4 <i2c_device_read+0xb6>
				{
					return(TRUE);
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	08 c0       	rjmp	.+16     	; 0x32b4 <i2c_device_read+0xc6>
		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
		{
			return(TRUE);
		}

		while(bytes2read--)
    32a4:	8e 81       	ldd	r24, Y+6	; 0x06
    32a6:	9f ef       	ldi	r25, 0xFF	; 255
    32a8:	98 0f       	add	r25, r24
    32aa:	9e 83       	std	Y+6, r25	; 0x06
    32ac:	88 23       	and	r24, r24
    32ae:	91 f6       	brne	.-92     	; 0x3254 <i2c_device_read+0x66>
					return(TRUE);
				}
			}
		}

		i2c_stop();
    32b0:	0c df       	rcall	.-488    	; 0x30ca <i2c_stop>
    32b2:	80 e0       	ldi	r24, 0x00	; 0

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    32b4:	26 96       	adiw	r28, 0x06	; 6
}
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	08 95       	ret

000032ca <max5478_set_dualpotentiometer_wipers>:
#define MAX_5478_WIPER_B_NVREG_COMMAND 0x22
#define MAX_5478_WIPER_B_NVREG_TO_VREG_COMMAND 0x62
#define MAX_5478_WIPER_B_VREG_TO_NVREG_COMMAND 0x52

void max5478_set_dualpotentiometer_wipers(uint16_t setting)
{
    32ca:	1f 93       	push	r17
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	1f 92       	push	r1
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	19 2f       	mov	r17, r25
	uint8_t data = setting & 0xFF;
    32d8:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(MAX5478_SLAVE_ADDR_A0_0, MAX_5478_WIPER_A_VREG_COMMAND, &data, 1); // Fine attenuation
    32da:	21 e0       	ldi	r18, 0x01	; 1
    32dc:	ae 01       	movw	r20, r28
    32de:	4f 5f       	subi	r20, 0xFF	; 255
    32e0:	5f 4f       	sbci	r21, 0xFF	; 255
    32e2:	61 e1       	ldi	r22, 0x11	; 17
    32e4:	80 e5       	ldi	r24, 0x50	; 80
    32e6:	3e df       	rcall	.-388    	; 0x3164 <i2c_device_write>
	data = (setting >> 8);
    32e8:	19 83       	std	Y+1, r17	; 0x01
	i2c_device_write(MAX5478_SLAVE_ADDR_A0_0, MAX_5478_WIPER_B_VREG_COMMAND, &data, 1); // Coarse attenuation
    32ea:	21 e0       	ldi	r18, 0x01	; 1
    32ec:	ae 01       	movw	r20, r28
    32ee:	4f 5f       	subi	r20, 0xFF	; 255
    32f0:	5f 4f       	sbci	r21, 0xFF	; 255
    32f2:	62 e1       	ldi	r22, 0x12	; 18
    32f4:	80 e5       	ldi	r24, 0x50	; 80
    32f6:	36 df       	rcall	.-404    	; 0x3164 <i2c_device_write>
    32f8:	0f 90       	pop	r0
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	1f 91       	pop	r17
    3300:	08 95       	ret

00003302 <pcf8574_writePort>:
BOOL pcf8574_read(uint8_t addr, uint8_t *data);


void pcf8574_writePort( uint8_t data)
{
	pcf8574_write(PCF8574_SLAVE_ADDR_A000_0, data);
    3302:	68 2f       	mov	r22, r24
    3304:	80 e7       	ldi	r24, 0x70	; 112
    3306:	05 c0       	rjmp	.+10     	; 0x3312 <pcf8574_write>
    3308:	08 95       	ret

0000330a <pcf8574_readPort>:

BOOL pcf8574_readPort(uint8_t *portData)
{
	BOOL failure;

	failure = pcf8574_read(PCF8574_SLAVE_ADDR_A000_1, portData);
    330a:	bc 01       	movw	r22, r24
    330c:	81 e7       	ldi	r24, 0x71	; 113
    330e:	24 c0       	rjmp	.+72     	; 0x3358 <pcf8574_read>

	return(failure);
}
    3310:	08 95       	ret

00003312 <pcf8574_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
		BOOL __attribute__((optimize("O0"))) pcf8574_write(uint8_t slaveAddr, uint8_t data)
#else
		BOOL pcf8574_write(uint8_t slaveAddr, uint8_t data)
#endif
	{
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	00 d0       	rcall	.+0      	; 0x3318 <pcf8574_write+0x6>
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	89 83       	std	Y+1, r24	; 0x01
		#ifndef DEBUG_WITHOUT_I2C
			i2c_start();
    331e:	6a 83       	std	Y+2, r22	; 0x02
			if(i2c_status(TW_START))
    3320:	bb de       	rcall	.-650    	; 0x3098 <i2c_start>
    3322:	88 e0       	ldi	r24, 0x08	; 8
    3324:	10 df       	rcall	.-480    	; 0x3146 <i2c_status>
    3326:	88 23       	and	r24, r24
    3328:	11 f0       	breq	.+4      	; 0x332e <pcf8574_write+0x1c>
			{
				return(TRUE);
    332a:	81 e0       	ldi	r24, 0x01	; 1
			}
			
			if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    332c:	10 c0       	rjmp	.+32     	; 0x334e <pcf8574_write+0x3c>
    332e:	68 e1       	ldi	r22, 0x18	; 24
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	cf de       	rcall	.-610    	; 0x30d2 <i2c_write_success>
    3334:	88 23       	and	r24, r24
			{
				return(TRUE);
    3336:	11 f0       	breq	.+4      	; 0x333c <pcf8574_write+0x2a>
    3338:	81 e0       	ldi	r24, 0x01	; 1
			}
			
			if(i2c_write_success(data, TW_MT_DATA_ACK))
    333a:	09 c0       	rjmp	.+18     	; 0x334e <pcf8574_write+0x3c>
    333c:	68 e2       	ldi	r22, 0x28	; 40
    333e:	8a 81       	ldd	r24, Y+2	; 0x02
    3340:	c8 de       	rcall	.-624    	; 0x30d2 <i2c_write_success>
    3342:	88 23       	and	r24, r24
			{
				return(TRUE);
    3344:	11 f0       	breq	.+4      	; 0x334a <pcf8574_write+0x38>
    3346:	81 e0       	ldi	r24, 0x01	; 1
			}
			
			i2c_stop();
    3348:	02 c0       	rjmp	.+4      	; 0x334e <pcf8574_write+0x3c>
    334a:	bf de       	rcall	.-642    	; 0x30ca <i2c_stop>
		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

		return(FALSE);
    334c:	80 e0       	ldi	r24, 0x00	; 0
	}
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	df 91       	pop	r29
    3354:	cf 91       	pop	r28
    3356:	08 95       	ret

00003358 <pcf8574_read>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
		BOOL __attribute__((optimize("O0"))) pcf8574_read(uint8_t slaveAddr, uint8_t *data)
#else
		BOOL pcf8574_read(uint8_t slaveAddr, uint8_t *data)
#endif
	{
    3358:	cf 93       	push	r28
    335a:	df 93       	push	r29
    335c:	00 d0       	rcall	.+0      	; 0x335e <pcf8574_read+0x6>
    335e:	1f 92       	push	r1
    3360:	cd b7       	in	r28, 0x3d	; 61
    3362:	de b7       	in	r29, 0x3e	; 62
    3364:	89 83       	std	Y+1, r24	; 0x01
		#ifndef DEBUG_WITHOUT_I2C

			i2c_start();
    3366:	7b 83       	std	Y+3, r23	; 0x03
    3368:	6a 83       	std	Y+2, r22	; 0x02
			if(i2c_status(TW_START))
    336a:	96 de       	rcall	.-724    	; 0x3098 <i2c_start>
    336c:	88 e0       	ldi	r24, 0x08	; 8
    336e:	eb de       	rcall	.-554    	; 0x3146 <i2c_status>
    3370:	88 23       	and	r24, r24
			{
				return(TRUE);
    3372:	11 f0       	breq	.+4      	; 0x3378 <pcf8574_read+0x20>
			}

			if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	1c c0       	rjmp	.+56     	; 0x33b0 <pcf8574_read+0x58>
    3378:	68 e1       	ldi	r22, 0x18	; 24
    337a:	89 81       	ldd	r24, Y+1	; 0x01
    337c:	aa de       	rcall	.-684    	; 0x30d2 <i2c_write_success>
			{
				return(TRUE);
    337e:	88 23       	and	r24, r24
    3380:	11 f0       	breq	.+4      	; 0x3386 <pcf8574_read+0x2e>
			}

			i2c_start();
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	15 c0       	rjmp	.+42     	; 0x33b0 <pcf8574_read+0x58>
			if(i2c_status(TW_START))
    3386:	88 de       	rcall	.-752    	; 0x3098 <i2c_start>
    3388:	88 e0       	ldi	r24, 0x08	; 8
    338a:	dd de       	rcall	.-582    	; 0x3146 <i2c_status>
    338c:	88 23       	and	r24, r24
			{
				return(TRUE);
    338e:	11 f0       	breq	.+4      	; 0x3394 <pcf8574_read+0x3c>
    3390:	81 e0       	ldi	r24, 0x01	; 1
			}

			*data = i2c_read_nack();
    3392:	0e c0       	rjmp	.+28     	; 0x33b0 <pcf8574_read+0x58>
    3394:	c9 de       	rcall	.-622    	; 0x3128 <i2c_read_nack>
    3396:	28 2f       	mov	r18, r24
    3398:	8a 81       	ldd	r24, Y+2	; 0x02
    339a:	9b 81       	ldd	r25, Y+3	; 0x03
    339c:	fc 01       	movw	r30, r24
			if(i2c_status(TW_MR_DATA_NACK))
    339e:	20 83       	st	Z, r18
    33a0:	88 e5       	ldi	r24, 0x58	; 88
    33a2:	d1 de       	rcall	.-606    	; 0x3146 <i2c_status>
    33a4:	88 23       	and	r24, r24
    33a6:	11 f0       	breq	.+4      	; 0x33ac <pcf8574_read+0x54>
			{
				return(TRUE);
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <pcf8574_read+0x58>
			}

			i2c_stop();
    33ac:	8e de       	rcall	.-740    	; 0x30ca <i2c_stop>
    33ae:	80 e0       	ldi	r24, 0x00	; 0

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

		return(FALSE);
    33b0:	0f 90       	pop	r0
	}
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	08 95       	ret

000033bc <si5351_get_frequency>:
    33bc:	24 e0       	ldi	r18, 0x04	; 4
 * Returns TRUE on failure
 *
 */
	Frequency_Hz si5351_get_frequency(Si5351_clock clock)
	{
		return(clock_out[clock]);
    33be:	82 9f       	mul	r24, r18
    33c0:	c0 01       	movw	r24, r0
    33c2:	11 24       	eor	r1, r1
    33c4:	fc 01       	movw	r30, r24
    33c6:	e8 5d       	subi	r30, 0xD8	; 216
    33c8:	f8 4f       	sbci	r31, 0xF8	; 248
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
	}
    33d2:	08 95       	ret

000033d4 <si5351_set_correction>:
 * EEPROM during initialization for use by the tuning
 * algorithms.
 */
	void si5351_set_correction(int32_t corr)
	{
		g_si5351_ref_correction = corr;
    33d4:	60 93 39 07 	sts	0x0739, r22	; 0x800739 <g_si5351_ref_correction>
    33d8:	70 93 3a 07 	sts	0x073A, r23	; 0x80073a <g_si5351_ref_correction+0x1>
    33dc:	80 93 3b 07 	sts	0x073B, r24	; 0x80073b <g_si5351_ref_correction+0x2>
    33e0:	90 93 3c 07 	sts	0x073C, r25	; 0x80073c <g_si5351_ref_correction+0x3>
    33e4:	08 95       	ret

000033e6 <si5351_get_correction>:
 *
 * Returns the oscillator correction factor.
 */
	int32_t si5351_get_correction(void)
	{
		return(g_si5351_ref_correction);
    33e6:	60 91 39 07 	lds	r22, 0x0739	; 0x800739 <g_si5351_ref_correction>
    33ea:	70 91 3a 07 	lds	r23, 0x073A	; 0x80073a <g_si5351_ref_correction+0x1>
    33ee:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <g_si5351_ref_correction+0x2>
    33f2:	90 91 3c 07 	lds	r25, 0x073C	; 0x80073c <g_si5351_ref_correction+0x3>
	}
    33f6:	08 95       	ret

000033f8 <reduce_by_gcd>:
 *
 * Simple implementation of Euclid's Algorithm for calculating GCD of two uint32's
 *
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
    33f8:	4f 92       	push	r4
    33fa:	5f 92       	push	r5
    33fc:	6f 92       	push	r6
    33fe:	7f 92       	push	r7
    3400:	8f 92       	push	r8
    3402:	9f 92       	push	r9
    3404:	af 92       	push	r10
    3406:	bf 92       	push	r11
    3408:	cf 92       	push	r12
    340a:	df 92       	push	r13
    340c:	ef 92       	push	r14
    340e:	ff 92       	push	r15
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	ec 01       	movw	r28, r24
    341a:	8b 01       	movw	r16, r22
		uint32_t r;
		uint32_t b = *m;
    341c:	48 80       	ld	r4, Y
    341e:	59 80       	ldd	r5, Y+1	; 0x01
    3420:	6a 80       	ldd	r6, Y+2	; 0x02
    3422:	7b 80       	ldd	r7, Y+3	; 0x03
		uint32_t c = *n;

		if(!b || !c)
    3424:	41 14       	cp	r4, r1
    3426:	51 04       	cpc	r5, r1
    3428:	61 04       	cpc	r6, r1
    342a:	71 04       	cpc	r7, r1
    342c:	09 f4       	brne	.+2      	; 0x3430 <reduce_by_gcd+0x38>
    342e:	43 c0       	rjmp	.+134    	; 0x34b6 <reduce_by_gcd+0xbe>
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
		uint32_t r;
		uint32_t b = *m;
		uint32_t c = *n;
    3430:	fb 01       	movw	r30, r22
    3432:	80 80       	ld	r8, Z
    3434:	91 80       	ldd	r9, Z+1	; 0x01
    3436:	a2 80       	ldd	r10, Z+2	; 0x02
    3438:	b3 80       	ldd	r11, Z+3	; 0x03

		if(!b || !c)
    343a:	81 14       	cp	r8, r1
    343c:	91 04       	cpc	r9, r1
    343e:	a1 04       	cpc	r10, r1
    3440:	b1 04       	cpc	r11, r1
    3442:	c9 f1       	breq	.+114    	; 0x34b6 <reduce_by_gcd+0xbe>
		{
			return;
		}

		for(r = b % c; r; b = c, c = r, r = b % c)
    3444:	c3 01       	movw	r24, r6
    3446:	b2 01       	movw	r22, r4
    3448:	a5 01       	movw	r20, r10
    344a:	94 01       	movw	r18, r8
    344c:	43 d6       	rcall	.+3206   	; 0x40d4 <__udivmodsi4>
    344e:	6b 01       	movw	r12, r22
    3450:	7c 01       	movw	r14, r24
    3452:	67 2b       	or	r22, r23
    3454:	68 2b       	or	r22, r24
    3456:	69 2b       	or	r22, r25
    3458:	19 f4       	brne	.+6      	; 0x3460 <reduce_by_gcd+0x68>
    345a:	0f c0       	rjmp	.+30     	; 0x347a <reduce_by_gcd+0x82>
    345c:	6b 01       	movw	r12, r22
    345e:	7c 01       	movw	r14, r24
    3460:	c5 01       	movw	r24, r10
    3462:	b4 01       	movw	r22, r8
    3464:	a7 01       	movw	r20, r14
    3466:	96 01       	movw	r18, r12
    3468:	35 d6       	rcall	.+3178   	; 0x40d4 <__udivmodsi4>
    346a:	46 01       	movw	r8, r12
    346c:	57 01       	movw	r10, r14
    346e:	61 15       	cp	r22, r1
    3470:	71 05       	cpc	r23, r1
    3472:	81 05       	cpc	r24, r1
    3474:	91 05       	cpc	r25, r1
    3476:	91 f7       	brne	.-28     	; 0x345c <reduce_by_gcd+0x64>
    3478:	02 c0       	rjmp	.+4      	; 0x347e <reduce_by_gcd+0x86>
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
		uint32_t r;
		uint32_t b = *m;
		uint32_t c = *n;
    347a:	75 01       	movw	r14, r10
    347c:	64 01       	movw	r12, r8
		for(r = b % c; r; b = c, c = r, r = b % c)
		{
			;
		}

		if(c > 1)
    347e:	f2 e0       	ldi	r31, 0x02	; 2
    3480:	cf 16       	cp	r12, r31
    3482:	d1 04       	cpc	r13, r1
    3484:	e1 04       	cpc	r14, r1
    3486:	f1 04       	cpc	r15, r1
    3488:	b0 f0       	brcs	.+44     	; 0x34b6 <reduce_by_gcd+0xbe>
		{
			*m /= c;
    348a:	c3 01       	movw	r24, r6
    348c:	b2 01       	movw	r22, r4
    348e:	a7 01       	movw	r20, r14
    3490:	96 01       	movw	r18, r12
    3492:	20 d6       	rcall	.+3136   	; 0x40d4 <__udivmodsi4>
    3494:	28 83       	st	Y, r18
    3496:	39 83       	std	Y+1, r19	; 0x01
    3498:	4a 83       	std	Y+2, r20	; 0x02
    349a:	5b 83       	std	Y+3, r21	; 0x03
			*n /= c;
    349c:	f8 01       	movw	r30, r16
    349e:	60 81       	ld	r22, Z
    34a0:	71 81       	ldd	r23, Z+1	; 0x01
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	93 81       	ldd	r25, Z+3	; 0x03
    34a6:	a7 01       	movw	r20, r14
    34a8:	96 01       	movw	r18, r12
    34aa:	14 d6       	rcall	.+3112   	; 0x40d4 <__udivmodsi4>
    34ac:	f8 01       	movw	r30, r16
    34ae:	20 83       	st	Z, r18
    34b0:	31 83       	std	Z+1, r19	; 0x01
    34b2:	42 83       	std	Z+2, r20	; 0x02
    34b4:	53 83       	std	Z+3, r21	; 0x03
		}

		return;
	}
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
    34be:	ff 90       	pop	r15
    34c0:	ef 90       	pop	r14
    34c2:	df 90       	pop	r13
    34c4:	cf 90       	pop	r12
    34c6:	bf 90       	pop	r11
    34c8:	af 90       	pop	r10
    34ca:	9f 90       	pop	r9
    34cc:	8f 90       	pop	r8
    34ce:	7f 90       	pop	r7
    34d0:	6f 90       	pop	r6
    34d2:	5f 90       	pop	r5
    34d4:	4f 90       	pop	r4
    34d6:	08 95       	ret

000034d8 <pll_calc>:
#ifdef DEBUGGING_ONLY
		Frequency_Hz pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
#else
		BOOL pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
#endif
	{
    34d8:	4f 92       	push	r4
    34da:	5f 92       	push	r5
    34dc:	6f 92       	push	r6
    34de:	7f 92       	push	r7
    34e0:	8f 92       	push	r8
    34e2:	9f 92       	push	r9
    34e4:	af 92       	push	r10
    34e6:	bf 92       	push	r11
    34e8:	cf 92       	push	r12
    34ea:	df 92       	push	r13
    34ec:	ef 92       	push	r14
    34ee:	ff 92       	push	r15
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    34fc:	28 97       	sbiw	r28, 0x08	; 8
    34fe:	0f b6       	in	r0, 0x3f	; 63
    3500:	f8 94       	cli
    3502:	de bf       	out	0x3e, r29	; 62
    3504:	0f be       	out	0x3f, r0	; 63
    3506:	cd bf       	out	0x3d, r28	; 61
    3508:	8a 01       	movw	r16, r20
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = 0;
#endif
		Frequency_Hz ref_freq = xtal_freq;
    350a:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <xtal_freq>
    350e:	d0 90 31 01 	lds	r13, 0x0131	; 0x800131 <xtal_freq+0x1>
    3512:	e0 90 32 01 	lds	r14, 0x0132	; 0x800132 <xtal_freq+0x2>
    3516:	f0 90 33 01 	lds	r15, 0x0133	; 0x800133 <xtal_freq+0x3>
				return(TRUE);
			}
#endif

		/* Determine integer part of feedback equation */
		a = vco_freq / ref_freq;
    351a:	a7 01       	movw	r20, r14
    351c:	96 01       	movw	r18, r12
    351e:	da d5       	rcall	.+2996   	; 0x40d4 <__udivmodsi4>
    3520:	49 01       	movw	r8, r18
    3522:	5a 01       	movw	r10, r20
				return(TRUE);
			}
#endif

		/* Find best approximation for b/c = fVCO mod fIN */
		b = vco_freq % ref_freq;
    3524:	69 83       	std	Y+1, r22	; 0x01
    3526:	7a 83       	std	Y+2, r23	; 0x02
    3528:	8b 83       	std	Y+3, r24	; 0x03
    352a:	9c 83       	std	Y+4, r25	; 0x04
		c = ref_freq;
    352c:	cd 82       	std	Y+5, r12	; 0x05
    352e:	de 82       	std	Y+6, r13	; 0x06
    3530:	ef 82       	std	Y+7, r14	; 0x07
    3532:	f8 86       	std	Y+8, r15	; 0x08

		reduce_by_gcd(&b, &c);
    3534:	be 01       	movw	r22, r28
    3536:	6b 5f       	subi	r22, 0xFB	; 251
    3538:	7f 4f       	sbci	r23, 0xFF	; 255
    353a:	ce 01       	movw	r24, r28
    353c:	01 96       	adiw	r24, 0x01	; 1
    353e:	5c df       	rcall	.-328    	; 0x33f8 <reduce_by_gcd>

		uint32_t bx128 = b << 7;
    3540:	c9 80       	ldd	r12, Y+1	; 0x01
    3542:	da 80       	ldd	r13, Y+2	; 0x02
    3544:	eb 80       	ldd	r14, Y+3	; 0x03
    3546:	fc 80       	ldd	r15, Y+4	; 0x04
    3548:	cc 0c       	add	r12, r12
    354a:	dd 1c       	adc	r13, r13
    354c:	ee 1c       	adc	r14, r14
    354e:	ff 1c       	adc	r15, r15
    3550:	cc 0c       	add	r12, r12
    3552:	dd 1c       	adc	r13, r13
    3554:	ee 1c       	adc	r14, r14
    3556:	ff 1c       	adc	r15, r15
    3558:	cc 0c       	add	r12, r12
    355a:	dd 1c       	adc	r13, r13
    355c:	ee 1c       	adc	r14, r14
    355e:	ff 1c       	adc	r15, r15
    3560:	cc 0c       	add	r12, r12
    3562:	dd 1c       	adc	r13, r13
    3564:	ee 1c       	adc	r14, r14
    3566:	ff 1c       	adc	r15, r15
    3568:	cc 0c       	add	r12, r12
    356a:	dd 1c       	adc	r13, r13
    356c:	ee 1c       	adc	r14, r14
    356e:	ff 1c       	adc	r15, r15
    3570:	cc 0c       	add	r12, r12
    3572:	dd 1c       	adc	r13, r13
    3574:	ee 1c       	adc	r14, r14
    3576:	ff 1c       	adc	r15, r15
    3578:	cc 0c       	add	r12, r12
    357a:	dd 1c       	adc	r13, r13
    357c:	ee 1c       	adc	r14, r14
    357e:	ff 1c       	adc	r15, r15
		uint32_t bx128overc = bx128 / c;
    3580:	4d 80       	ldd	r4, Y+5	; 0x05
    3582:	5e 80       	ldd	r5, Y+6	; 0x06
    3584:	6f 80       	ldd	r6, Y+7	; 0x07
    3586:	78 84       	ldd	r7, Y+8	; 0x08
    3588:	c7 01       	movw	r24, r14
    358a:	b6 01       	movw	r22, r12
    358c:	a3 01       	movw	r20, r6
    358e:	92 01       	movw	r18, r4
    3590:	a1 d5       	rcall	.+2882   	; 0x40d4 <__udivmodsi4>
    3592:	ca 01       	movw	r24, r20
    3594:	b9 01       	movw	r22, r18
		reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    3596:	88 0c       	add	r8, r8
    3598:	99 1c       	adc	r9, r9
    359a:	aa 1c       	adc	r10, r10
    359c:	bb 1c       	adc	r11, r11
    359e:	88 0c       	add	r8, r8
    35a0:	99 1c       	adc	r9, r9
    35a2:	aa 1c       	adc	r10, r10
    35a4:	bb 1c       	adc	r11, r11
    35a6:	88 0c       	add	r8, r8
    35a8:	99 1c       	adc	r9, r9
    35aa:	aa 1c       	adc	r10, r10
    35ac:	bb 1c       	adc	r11, r11
    35ae:	88 0c       	add	r8, r8
    35b0:	99 1c       	adc	r9, r9
    35b2:	aa 1c       	adc	r10, r10
    35b4:	bb 1c       	adc	r11, r11
    35b6:	88 0c       	add	r8, r8
    35b8:	99 1c       	adc	r9, r9
    35ba:	aa 1c       	adc	r10, r10
    35bc:	bb 1c       	adc	r11, r11
    35be:	88 0c       	add	r8, r8
    35c0:	99 1c       	adc	r9, r9
    35c2:	aa 1c       	adc	r10, r10
    35c4:	bb 1c       	adc	r11, r11
    35c6:	88 0c       	add	r8, r8
    35c8:	99 1c       	adc	r9, r9
    35ca:	aa 1c       	adc	r10, r10
    35cc:	bb 1c       	adc	r11, r11
    35ce:	32 50       	subi	r19, 0x02	; 2
    35d0:	41 09       	sbc	r20, r1
    35d2:	51 09       	sbc	r21, r1
    35d4:	82 0e       	add	r8, r18
    35d6:	93 1e       	adc	r9, r19
    35d8:	a4 1e       	adc	r10, r20
    35da:	b5 1e       	adc	r11, r21
    35dc:	f8 01       	movw	r30, r16
    35de:	80 82       	st	Z, r8
    35e0:	91 82       	std	Z+1, r9	; 0x01
    35e2:	a2 82       	std	Z+2, r10	; 0x02
		reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    35e4:	b3 82       	std	Z+3, r11	; 0x03
    35e6:	a3 01       	movw	r20, r6
    35e8:	92 01       	movw	r18, r4
    35ea:	65 d5       	rcall	.+2762   	; 0x40b6 <__mulsi3>
    35ec:	c6 1a       	sub	r12, r22
    35ee:	d7 0a       	sbc	r13, r23
    35f0:	e8 0a       	sbc	r14, r24
    35f2:	f9 0a       	sbc	r15, r25
    35f4:	c4 82       	std	Z+4, r12	; 0x04
    35f6:	d5 82       	std	Z+5, r13	; 0x05
    35f8:	e6 82       	std	Z+6, r14	; 0x06
    35fa:	f7 82       	std	Z+7, r15	; 0x07
		reg->ms.p3 = c;
    35fc:	40 86       	std	Z+8, r4	; 0x08
    35fe:	51 86       	std	Z+9, r5	; 0x09
    3600:	62 86       	std	Z+10, r6	; 0x0a
    3602:	73 86       	std	Z+11, r7	; 0x0b
#else

			return(FALSE);

#endif
	}
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	28 96       	adiw	r28, 0x08	; 8
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	ff 90       	pop	r15
    361c:	ef 90       	pop	r14
    361e:	df 90       	pop	r13
    3620:	cf 90       	pop	r12
    3622:	bf 90       	pop	r11
    3624:	af 90       	pop	r10
    3626:	9f 90       	pop	r9
    3628:	8f 90       	pop	r8
    362a:	7f 90       	pop	r7
    362c:	6f 90       	pop	r6
    362e:	5f 90       	pop	r5
    3630:	4f 90       	pop	r4
    3632:	08 95       	ret

00003634 <multisynth_calc>:
#ifdef DEBUGGING_ONLY
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4, uint32_t *div)
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
    3634:	3f 92       	push	r3
    3636:	4f 92       	push	r4
    3638:	5f 92       	push	r5
    363a:	6f 92       	push	r6
    363c:	7f 92       	push	r7
    363e:	8f 92       	push	r8
    3640:	9f 92       	push	r9
    3642:	af 92       	push	r10
    3644:	bf 92       	push	r11
    3646:	cf 92       	push	r12
    3648:	df 92       	push	r13
    364a:	ef 92       	push	r14
    364c:	ff 92       	push	r15
    364e:	0f 93       	push	r16
    3650:	1f 93       	push	r17
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	4b 01       	movw	r8, r22
    3658:	5c 01       	movw	r10, r24
    365a:	ea 01       	movw	r28, r20
		uint32_t a = 0;
		Frequency_Hz freq_VCO = 0;

		*int_mode = TRUE;   /* assumed */
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	f9 01       	movw	r30, r18
    3660:	80 83       	st	Z, r24
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
    3662:	f0 e8       	ldi	r31, 0x80	; 128
    3664:	8f 16       	cp	r8, r31
    3666:	f1 ed       	ldi	r31, 0xD1	; 209
    3668:	9f 06       	cpc	r9, r31
    366a:	f0 ef       	ldi	r31, 0xF0	; 240
    366c:	af 06       	cpc	r10, r31
    366e:	f8 e0       	ldi	r31, 0x08	; 8
    3670:	bf 06       	cpc	r11, r31
    3672:	40 f1       	brcs	.+80     	; 0x36c4 <multisynth_calc+0x90>
		{
			a = 4;
			freq_VCO = a * freq_Fout;
    3674:	c5 01       	movw	r24, r10
    3676:	b4 01       	movw	r22, r8
    3678:	66 0f       	add	r22, r22
    367a:	77 1f       	adc	r23, r23
    367c:	88 1f       	adc	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	66 0f       	add	r22, r22
    3682:	77 1f       	adc	r23, r23
    3684:	88 1f       	adc	r24, r24
    3686:	99 1f       	adc	r25, r25
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
		{
			a = 4;
    3688:	c1 2c       	mov	r12, r1
    368a:	d1 2c       	mov	r13, r1
    368c:	76 01       	movw	r14, r12
    368e:	68 94       	set
    3690:	c2 f8       	bld	r12, 2
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
			{
				temp = SI5351_PLL_VCO_MAX - (count * freq_Fout);    /* SI5351_PLL_VCO_MAX assumed even */
    3692:	3b c0       	rjmp	.+118    	; 0x370a <multisynth_calc+0xd6>
    3694:	a3 2d       	mov	r26, r3
    3696:	b0 e0       	ldi	r27, 0x00	; 0
    3698:	a5 01       	movw	r20, r10
    369a:	94 01       	movw	r18, r8
    369c:	68 d5       	rcall	.+2768   	; 0x416e <__muluhisi3>
    369e:	a3 01       	movw	r20, r6
    36a0:	92 01       	movw	r18, r4
    36a2:	26 1b       	sub	r18, r22
    36a4:	37 0b       	sbc	r19, r23
    36a6:	48 0b       	sbc	r20, r24
    36a8:	59 0b       	sbc	r21, r25
    36aa:	ca 01       	movw	r24, r20
    36ac:	b9 01       	movw	r22, r18
				count += 2;
    36ae:	33 94       	inc	r3
    36b0:	33 94       	inc	r3

				if(temp >= SI5351_PLL_VCO_MIN)
    36b2:	61 15       	cp	r22, r1
    36b4:	36 e4       	ldi	r19, 0x46	; 70
    36b6:	73 07       	cpc	r23, r19
    36b8:	33 ec       	ldi	r19, 0xC3	; 195
    36ba:	83 07       	cpc	r24, r19
    36bc:	33 e2       	ldi	r19, 0x23	; 35
    36be:	93 07       	cpc	r25, r19
    36c0:	f0 f0       	brcs	.+60     	; 0x36fe <multisynth_calc+0xca>
    36c2:	10 c0       	rjmp	.+32     	; 0x36e4 <multisynth_calc+0xb0>
    36c4:	68 94       	set
    36c6:	33 24       	eor	r3, r3
    36c8:	31 f8       	bld	r3, 1
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	79 ee       	ldi	r23, 0xE9	; 233
    36ce:	84 ea       	ldi	r24, 0xA4	; 164
    36d0:	95 e3       	ldi	r25, 0x35	; 53
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
			{
				temp = SI5351_PLL_VCO_MAX - (count * freq_Fout);    /* SI5351_PLL_VCO_MAX assumed even */
    36d2:	0f 2e       	mov	r0, r31
    36d4:	41 2c       	mov	r4, r1
    36d6:	f9 ee       	ldi	r31, 0xE9	; 233
    36d8:	5f 2e       	mov	r5, r31
    36da:	f4 ea       	ldi	r31, 0xA4	; 164
    36dc:	6f 2e       	mov	r6, r31
    36de:	f5 e3       	ldi	r31, 0x35	; 53
    36e0:	7f 2e       	mov	r7, r31
				count += 2;

				if(temp >= SI5351_PLL_VCO_MIN)
				{
					temp /= freq_Fout;
    36e2:	f0 2d       	mov	r31, r0
    36e4:	a5 01       	movw	r20, r10
    36e6:	94 01       	movw	r18, r8
    36e8:	f5 d4       	rcall	.+2538   	; 0x40d4 <__udivmodsi4>
    36ea:	69 01       	movw	r12, r18
    36ec:	7a 01       	movw	r14, r20

					if(temp >= 4)   /* accepts only even integers of 4 or greater */
    36ee:	44 e0       	ldi	r20, 0x04	; 4
    36f0:	c4 16       	cp	r12, r20
    36f2:	d1 04       	cpc	r13, r1
    36f4:	e1 04       	cpc	r14, r1
    36f6:	f1 04       	cpc	r15, r1
    36f8:	08 f0       	brcs	.+2      	; 0x36fc <multisynth_calc+0xc8>
    36fa:	42 c0       	rjmp	.+132    	; 0x3780 <multisynth_calc+0x14c>
    36fc:	cb cf       	rjmp	.-106    	; 0x3694 <multisynth_calc+0x60>
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
		uint32_t a = 0;
		Frequency_Hz freq_VCO = 0;
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	70 e0       	ldi	r23, 0x00	; 0
    3702:	cb 01       	movw	r24, r22
    3704:	c1 2c       	mov	r12, r1
    3706:	d1 2c       	mov	r13, r1
    3708:	76 01       	movw	r14, r12
			{
				freq_VCO = a * freq_Fout;
			}
		}

		*divBy4 = (a == 4);
    370a:	21 e0       	ldi	r18, 0x01	; 1
    370c:	54 e0       	ldi	r21, 0x04	; 4
    370e:	c5 16       	cp	r12, r21
    3710:	d1 04       	cpc	r13, r1
    3712:	e1 04       	cpc	r14, r1
    3714:	f1 04       	cpc	r15, r1
    3716:	09 f0       	breq	.+2      	; 0x371a <multisynth_calc+0xe6>
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	f8 01       	movw	r30, r16
    371c:	20 83       	st	Z, r18
		reg->ms.p1 = (uint32_t)(a << 7) - 512;  /* 128 * a + floor((128 * b) / c) - 512 */
    371e:	cc 0c       	add	r12, r12
    3720:	dd 1c       	adc	r13, r13
    3722:	ee 1c       	adc	r14, r14
    3724:	ff 1c       	adc	r15, r15
    3726:	cc 0c       	add	r12, r12
    3728:	dd 1c       	adc	r13, r13
    372a:	ee 1c       	adc	r14, r14
    372c:	ff 1c       	adc	r15, r15
    372e:	cc 0c       	add	r12, r12
    3730:	dd 1c       	adc	r13, r13
    3732:	ee 1c       	adc	r14, r14
    3734:	ff 1c       	adc	r15, r15
    3736:	cc 0c       	add	r12, r12
    3738:	dd 1c       	adc	r13, r13
    373a:	ee 1c       	adc	r14, r14
    373c:	ff 1c       	adc	r15, r15
    373e:	cc 0c       	add	r12, r12
    3740:	dd 1c       	adc	r13, r13
    3742:	ee 1c       	adc	r14, r14
    3744:	ff 1c       	adc	r15, r15
    3746:	cc 0c       	add	r12, r12
    3748:	dd 1c       	adc	r13, r13
    374a:	ee 1c       	adc	r14, r14
    374c:	ff 1c       	adc	r15, r15
    374e:	cc 0c       	add	r12, r12
    3750:	dd 1c       	adc	r13, r13
    3752:	ee 1c       	adc	r14, r14
    3754:	ff 1c       	adc	r15, r15
    3756:	f2 e0       	ldi	r31, 0x02	; 2
    3758:	df 1a       	sub	r13, r31
    375a:	e1 08       	sbc	r14, r1
    375c:	f1 08       	sbc	r15, r1
    375e:	c8 82       	st	Y, r12
    3760:	d9 82       	std	Y+1, r13	; 0x01
    3762:	ea 82       	std	Y+2, r14	; 0x02
    3764:	fb 82       	std	Y+3, r15	; 0x03
		reg->ms.p2 = 0;                         /* 128 * b - c * floor((128 * b) / c) */
    3766:	1c 82       	std	Y+4, r1	; 0x04
    3768:	1d 82       	std	Y+5, r1	; 0x05
    376a:	1e 82       	std	Y+6, r1	; 0x06
    376c:	1f 82       	std	Y+7, r1	; 0x07
		reg->ms.p3 = 1;
    376e:	01 e0       	ldi	r16, 0x01	; 1
    3770:	10 e0       	ldi	r17, 0x00	; 0
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	08 87       	std	Y+8, r16	; 0x08
    3778:	19 87       	std	Y+9, r17	; 0x09
    377a:	2a 87       	std	Y+10, r18	; 0x0a

#ifdef DEBUGGING_ONLY
			*div = a;
#endif

		return(freq_VCO);
    377c:	3b 87       	std	Y+11, r19	; 0x0b
				}
			}

			if(success)
			{
				freq_VCO = a * freq_Fout;
    377e:	06 c0       	rjmp	.+12     	; 0x378c <multisynth_calc+0x158>
    3780:	a5 01       	movw	r20, r10
    3782:	94 01       	movw	r18, r8
    3784:	c7 01       	movw	r24, r14
    3786:	b6 01       	movw	r22, r12
    3788:	96 d4       	rcall	.+2348   	; 0x40b6 <__mulsi3>
    378a:	bf cf       	rjmp	.-130    	; 0x370a <multisynth_calc+0xd6>
#ifdef DEBUGGING_ONLY
			*div = a;
#endif

		return(freq_VCO);
	}
    378c:	df 91       	pop	r29
    378e:	cf 91       	pop	r28
    3790:	1f 91       	pop	r17
    3792:	0f 91       	pop	r16
    3794:	ff 90       	pop	r15
    3796:	ef 90       	pop	r14
    3798:	df 90       	pop	r13
    379a:	cf 90       	pop	r12
    379c:	bf 90       	pop	r11
    379e:	af 90       	pop	r10
    37a0:	9f 90       	pop	r9
    37a2:	8f 90       	pop	r8
    37a4:	7f 90       	pop	r7
    37a6:	6f 90       	pop	r6
    37a8:	5f 90       	pop	r5
    37aa:	4f 90       	pop	r4
    37ac:	3f 90       	pop	r3
    37ae:	08 95       	ret

000037b0 <multisynth_estimate>:
 * Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
 *
 * Note: do not call this function with global value freqVCOB == zero
 */
	Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
	{
    37b0:	2f 92       	push	r2
    37b2:	3f 92       	push	r3
    37b4:	4f 92       	push	r4
    37b6:	5f 92       	push	r5
    37b8:	6f 92       	push	r6
    37ba:	7f 92       	push	r7
    37bc:	8f 92       	push	r8
    37be:	9f 92       	push	r9
    37c0:	af 92       	push	r10
    37c2:	bf 92       	push	r11
    37c4:	cf 92       	push	r12
    37c6:	df 92       	push	r13
    37c8:	ef 92       	push	r14
    37ca:	ff 92       	push	r15
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	cf 93       	push	r28
    37d2:	df 93       	push	r29
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	62 97       	sbiw	r28, 0x12	; 18
    37da:	0f b6       	in	r0, 0x3f	; 63
    37dc:	f8 94       	cli
    37de:	de bf       	out	0x3e, r29	; 62
    37e0:	0f be       	out	0x3f, r0	; 63
    37e2:	cd bf       	out	0x3d, r28	; 61
    37e4:	6b 01       	movw	r12, r22
    37e6:	7c 01       	movw	r14, r24
    37e8:	1a 01       	movw	r2, r20
    37ea:	3e 87       	std	Y+14, r19	; 0x0e
    37ec:	2d 87       	std	Y+13, r18	; 0x0d
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* Determine integer part of feedback equation */
		a = freqVCOB / freq_Fout;
    37ee:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <freqVCOB>
    37f2:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <freqVCOB+0x1>
    37f6:	a0 91 37 07 	lds	r26, 0x0737	; 0x800737 <freqVCOB+0x2>
    37fa:	b0 91 38 07 	lds	r27, 0x0738	; 0x800738 <freqVCOB+0x3>
    37fe:	89 87       	std	Y+9, r24	; 0x09
    3800:	9a 87       	std	Y+10, r25	; 0x0a
    3802:	ab 87       	std	Y+11, r26	; 0x0b
    3804:	bc 87       	std	Y+12, r27	; 0x0c
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	a7 01       	movw	r20, r14
    380c:	96 01       	movw	r18, r12
    380e:	62 d4       	rcall	.+2244   	; 0x40d4 <__udivmodsi4>
    3810:	49 01       	movw	r8, r18
    3812:	5a 01       	movw	r10, r20
    3814:	2f 87       	std	Y+15, r18	; 0x0f
    3816:	38 8b       	std	Y+16, r19	; 0x10
    3818:	49 8b       	std	Y+17, r20	; 0x11
    381a:	5a 8b       	std	Y+18, r21	; 0x12
		b = freqVCOB % freq_Fout;
    381c:	69 83       	std	Y+1, r22	; 0x01
    381e:	7a 83       	std	Y+2, r23	; 0x02
    3820:	8b 83       	std	Y+3, r24	; 0x03
		c = freq_Fout;
    3822:	9c 83       	std	Y+4, r25	; 0x04
    3824:	cd 82       	std	Y+5, r12	; 0x05
    3826:	de 82       	std	Y+6, r13	; 0x06
    3828:	ef 82       	std	Y+7, r14	; 0x07
		reduce_by_gcd(&b, &c);  /* prevents overflow conditions and makes results agree with ClockBuilder */
    382a:	f8 86       	std	Y+8, r15	; 0x08
    382c:	be 01       	movw	r22, r28
    382e:	6b 5f       	subi	r22, 0xFB	; 251
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	ce 01       	movw	r24, r28
    3834:	01 96       	adiw	r24, 0x01	; 1

		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
    3836:	e0 dd       	rcall	.-1088   	; 0x33f8 <reduce_by_gcd>
    3838:	4d 80       	ldd	r4, Y+5	; 0x05
    383a:	5e 80       	ldd	r5, Y+6	; 0x06
    383c:	6f 80       	ldd	r6, Y+7	; 0x07
    383e:	78 84       	ldd	r7, Y+8	; 0x08
    3840:	c9 80       	ldd	r12, Y+1	; 0x01
    3842:	da 80       	ldd	r13, Y+2	; 0x02
    3844:	eb 80       	ldd	r14, Y+3	; 0x03
    3846:	fc 80       	ldd	r15, Y+4	; 0x04
    3848:	a5 01       	movw	r20, r10
    384a:	94 01       	movw	r18, r8
    384c:	c3 01       	movw	r24, r6
    384e:	b2 01       	movw	r22, r4
    3850:	32 d4       	rcall	.+2148   	; 0x40b6 <__mulsi3>
    3852:	9b 01       	movw	r18, r22
    3854:	ac 01       	movw	r20, r24
    3856:	2c 0d       	add	r18, r12
    3858:	3d 1d       	adc	r19, r13
    385a:	4e 1d       	adc	r20, r14
    385c:	5f 1d       	adc	r21, r15
    385e:	69 85       	ldd	r22, Y+9	; 0x09
    3860:	7a 85       	ldd	r23, Y+10	; 0x0a
    3862:	8b 85       	ldd	r24, Y+11	; 0x0b
    3864:	9c 85       	ldd	r25, Y+12	; 0x0c
    3866:	36 d4       	rcall	.+2156   	; 0x40d4 <__udivmodsi4>
    3868:	ca 01       	movw	r24, r20
		freq_Fout *= c;
    386a:	b9 01       	movw	r22, r18
    386c:	a3 01       	movw	r20, r6
    386e:	92 01       	movw	r18, r4
    3870:	22 d4       	rcall	.+2116   	; 0x40b6 <__mulsi3>
    3872:	69 87       	std	Y+9, r22	; 0x09
    3874:	7a 87       	std	Y+10, r23	; 0x0a
    3876:	8b 87       	std	Y+11, r24	; 0x0b
    3878:	9c 87       	std	Y+12, r25	; 0x0c

		*int_mode = (b == 0) && !(a % 2);
    387a:	c1 14       	cp	r12, r1
    387c:	d1 04       	cpc	r13, r1
    387e:	e1 04       	cpc	r14, r1
    3880:	f1 04       	cpc	r15, r1
    3882:	09 f0       	breq	.+2      	; 0x3886 <multisynth_estimate+0xd6>
    3884:	85 c0       	rjmp	.+266    	; 0x3990 <multisynth_estimate+0x1e0>
    3886:	80 fe       	sbrs	r8, 0
    3888:	75 c0       	rjmp	.+234    	; 0x3974 <multisynth_estimate+0x1c4>
    388a:	82 c0       	rjmp	.+260    	; 0x3990 <multisynth_estimate+0x1e0>
		*divBy4 = (a == 4) && *int_mode;
    388c:	81 e0       	ldi	r24, 0x01	; 1
    388e:	d8 01       	movw	r26, r16
    3890:	8c 93       	st	X, r24

		/* Calculate parameters */
		if(*divBy4)
		{
			reg->ms.p1 = 0;
    3892:	f1 01       	movw	r30, r2
    3894:	10 82       	st	Z, r1
    3896:	11 82       	std	Z+1, r1	; 0x01
    3898:	12 82       	std	Z+2, r1	; 0x02
    389a:	13 82       	std	Z+3, r1	; 0x03
			reg->ms.p2 = 0;
    389c:	14 82       	std	Z+4, r1	; 0x04
    389e:	15 82       	std	Z+5, r1	; 0x05
    38a0:	16 82       	std	Z+6, r1	; 0x06
    38a2:	17 82       	std	Z+7, r1	; 0x07
			reg->ms.p3 = 1;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	a0 e0       	ldi	r26, 0x00	; 0
    38aa:	b0 e0       	ldi	r27, 0x00	; 0
    38ac:	80 87       	std	Z+8, r24	; 0x08
    38ae:	91 87       	std	Z+9, r25	; 0x09
    38b0:	a2 87       	std	Z+10, r26	; 0x0a
    38b2:	b3 87       	std	Z+11, r27	; 0x0b
    38b4:	71 c0       	rjmp	.+226    	; 0x3998 <multisynth_estimate+0x1e8>
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
		*divBy4 = (a == 4) && *int_mode;
    38b6:	d8 01       	movw	r26, r16
    38b8:	1c 92       	st	X, r1
			reg->ms.p2 = 0;
			reg->ms.p3 = 1;
		}
		else
		{
			uint32_t bx128 = b << 7;
    38ba:	cc 0c       	add	r12, r12
    38bc:	dd 1c       	adc	r13, r13
    38be:	ee 1c       	adc	r14, r14
    38c0:	ff 1c       	adc	r15, r15
    38c2:	cc 0c       	add	r12, r12
    38c4:	dd 1c       	adc	r13, r13
    38c6:	ee 1c       	adc	r14, r14
    38c8:	ff 1c       	adc	r15, r15
    38ca:	cc 0c       	add	r12, r12
    38cc:	dd 1c       	adc	r13, r13
    38ce:	ee 1c       	adc	r14, r14
    38d0:	ff 1c       	adc	r15, r15
    38d2:	cc 0c       	add	r12, r12
    38d4:	dd 1c       	adc	r13, r13
    38d6:	ee 1c       	adc	r14, r14
    38d8:	ff 1c       	adc	r15, r15
    38da:	cc 0c       	add	r12, r12
    38dc:	dd 1c       	adc	r13, r13
    38de:	ee 1c       	adc	r14, r14
    38e0:	ff 1c       	adc	r15, r15
    38e2:	cc 0c       	add	r12, r12
    38e4:	dd 1c       	adc	r13, r13
    38e6:	ee 1c       	adc	r14, r14
    38e8:	ff 1c       	adc	r15, r15
    38ea:	cc 0c       	add	r12, r12
    38ec:	dd 1c       	adc	r13, r13
    38ee:	ee 1c       	adc	r14, r14
			uint32_t bx128overc = bx128 / c;
    38f0:	ff 1c       	adc	r15, r15
    38f2:	c7 01       	movw	r24, r14
    38f4:	b6 01       	movw	r22, r12
    38f6:	a3 01       	movw	r20, r6
    38f8:	92 01       	movw	r18, r4
    38fa:	ec d3       	rcall	.+2008   	; 0x40d4 <__udivmodsi4>
    38fc:	ca 01       	movw	r24, r20
    38fe:	b9 01       	movw	r22, r18
			reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    3900:	88 0c       	add	r8, r8
    3902:	99 1c       	adc	r9, r9
    3904:	aa 1c       	adc	r10, r10
    3906:	bb 1c       	adc	r11, r11
    3908:	88 0c       	add	r8, r8
    390a:	99 1c       	adc	r9, r9
    390c:	aa 1c       	adc	r10, r10
    390e:	bb 1c       	adc	r11, r11
    3910:	88 0c       	add	r8, r8
    3912:	99 1c       	adc	r9, r9
    3914:	aa 1c       	adc	r10, r10
    3916:	bb 1c       	adc	r11, r11
    3918:	88 0c       	add	r8, r8
    391a:	99 1c       	adc	r9, r9
    391c:	aa 1c       	adc	r10, r10
    391e:	bb 1c       	adc	r11, r11
    3920:	88 0c       	add	r8, r8
    3922:	99 1c       	adc	r9, r9
    3924:	aa 1c       	adc	r10, r10
    3926:	bb 1c       	adc	r11, r11
    3928:	88 0c       	add	r8, r8
    392a:	99 1c       	adc	r9, r9
    392c:	aa 1c       	adc	r10, r10
    392e:	bb 1c       	adc	r11, r11
    3930:	88 0c       	add	r8, r8
    3932:	99 1c       	adc	r9, r9
    3934:	aa 1c       	adc	r10, r10
    3936:	bb 1c       	adc	r11, r11
    3938:	89 01       	movw	r16, r18
    393a:	9a 01       	movw	r18, r20
    393c:	12 50       	subi	r17, 0x02	; 2
    393e:	21 09       	sbc	r18, r1
    3940:	31 09       	sbc	r19, r1
    3942:	80 0e       	add	r8, r16
    3944:	91 1e       	adc	r9, r17
    3946:	a2 1e       	adc	r10, r18
    3948:	b3 1e       	adc	r11, r19
    394a:	f1 01       	movw	r30, r2
    394c:	80 82       	st	Z, r8
    394e:	91 82       	std	Z+1, r9	; 0x01
    3950:	a2 82       	std	Z+2, r10	; 0x02
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    3952:	b3 82       	std	Z+3, r11	; 0x03
    3954:	a3 01       	movw	r20, r6
    3956:	92 01       	movw	r18, r4
    3958:	ae d3       	rcall	.+1884   	; 0x40b6 <__mulsi3>
    395a:	c6 1a       	sub	r12, r22
    395c:	d7 0a       	sbc	r13, r23
    395e:	e8 0a       	sbc	r14, r24
    3960:	f9 0a       	sbc	r15, r25
    3962:	c4 82       	std	Z+4, r12	; 0x04
    3964:	d5 82       	std	Z+5, r13	; 0x05
    3966:	e6 82       	std	Z+6, r14	; 0x06
    3968:	f7 82       	std	Z+7, r15	; 0x07
			reg->ms.p3 = c;
    396a:	40 86       	std	Z+8, r4	; 0x08
    396c:	51 86       	std	Z+9, r5	; 0x09
    396e:	62 86       	std	Z+10, r6	; 0x0a
    3970:	73 86       	std	Z+11, r7	; 0x0b
		}

		return(freq_Fout);
    3972:	12 c0       	rjmp	.+36     	; 0x3998 <multisynth_estimate+0x1e8>
		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	ad 85       	ldd	r26, Y+13	; 0x0d
    3978:	be 85       	ldd	r27, Y+14	; 0x0e
    397a:	8c 93       	st	X, r24
		*divBy4 = (a == 4) && *int_mode;
    397c:	8f 85       	ldd	r24, Y+15	; 0x0f
    397e:	98 89       	ldd	r25, Y+16	; 0x10
    3980:	a9 89       	ldd	r26, Y+17	; 0x11
    3982:	ba 89       	ldd	r27, Y+18	; 0x12
    3984:	04 97       	sbiw	r24, 0x04	; 4
    3986:	a1 05       	cpc	r26, r1
    3988:	b1 05       	cpc	r27, r1
    398a:	09 f0       	breq	.+2      	; 0x398e <multisynth_estimate+0x1de>
    398c:	94 cf       	rjmp	.-216    	; 0x38b6 <multisynth_estimate+0x106>
    398e:	7e cf       	rjmp	.-260    	; 0x388c <multisynth_estimate+0xdc>
		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
    3990:	ad 85       	ldd	r26, Y+13	; 0x0d
    3992:	be 85       	ldd	r27, Y+14	; 0x0e
    3994:	1c 92       	st	X, r1
    3996:	8f cf       	rjmp	.-226    	; 0x38b6 <multisynth_estimate+0x106>
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
			reg->ms.p3 = c;
		}

		return(freq_Fout);
	}
    3998:	69 85       	ldd	r22, Y+9	; 0x09
    399a:	7a 85       	ldd	r23, Y+10	; 0x0a
    399c:	8b 85       	ldd	r24, Y+11	; 0x0b
    399e:	9c 85       	ldd	r25, Y+12	; 0x0c
    39a0:	62 96       	adiw	r28, 0x12	; 18
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	ff 90       	pop	r15
    39b6:	ef 90       	pop	r14
    39b8:	df 90       	pop	r13
    39ba:	cf 90       	pop	r12
    39bc:	bf 90       	pop	r11
    39be:	af 90       	pop	r10
    39c0:	9f 90       	pop	r9
    39c2:	8f 90       	pop	r8
    39c4:	7f 90       	pop	r7
    39c6:	6f 90       	pop	r6
    39c8:	5f 90       	pop	r5
    39ca:	4f 90       	pop	r4
    39cc:	3f 90       	pop	r3
    39ce:	2f 90       	pop	r2


	BOOL si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data)
	{
    39d0:	08 95       	ret

000039d2 <si5351_write_bulk>:
		return(i2c_device_write(SI5351_BUS_BASE_ADDR, addr, data, bytes));
    39d2:	26 2f       	mov	r18, r22
    39d4:	68 2f       	mov	r22, r24
    39d6:	80 ec       	ldi	r24, 0xC0	; 192
    39d8:	c5 cb       	rjmp	.-2166   	; 0x3164 <i2c_device_write>
	}
    39da:	08 95       	ret

000039dc <set_pll>:
#ifdef DEBUGGING_ONLY
		uint32_t set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#else
		void set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#endif
	{
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29
    39e6:	cd b7       	in	r28, 0x3d	; 61
    39e8:	de b7       	in	r29, 0x3e	; 62
    39ea:	66 97       	sbiw	r28, 0x16	; 22
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
		/* Output Multisynth Settings (Synthesis Stage 2) */
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
			Frequency_Hz pll_error = freq_VCO - result;
#else
			pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
    39f6:	f4 2e       	mov	r15, r20
    39f8:	00 91 39 07 	lds	r16, 0x0739	; 0x800739 <g_si5351_ref_correction>
    39fc:	10 91 3a 07 	lds	r17, 0x073A	; 0x80073a <g_si5351_ref_correction+0x1>
    3a00:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <g_si5351_ref_correction+0x2>
    3a04:	30 91 3c 07 	lds	r19, 0x073C	; 0x80073c <g_si5351_ref_correction+0x3>
    3a08:	ae 01       	movw	r20, r28
    3a0a:	4f 5f       	subi	r20, 0xFF	; 255
    3a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a0e:	64 dd       	rcall	.-1336   	; 0x34d8 <pll_calc>

		/* Prepare an array for parameters to be written to */
		uint8_t i = 0;

		/* Registers 26-27 */
		params[i++] = pll_reg.reg.p3_1;
    3a10:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a12:	8d 87       	std	Y+13, r24	; 0x0d
		params[i++] = pll_reg.reg.p3_0;
    3a14:	89 85       	ldd	r24, Y+9	; 0x09
    3a16:	8e 87       	std	Y+14, r24	; 0x0e

		/* Register 28 */
		params[i++] = pll_reg.reg.p1_2 & 0x03;
    3a18:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1a:	83 70       	andi	r24, 0x03	; 3
    3a1c:	8f 87       	std	Y+15, r24	; 0x0f

		/* Registers 29-30 */
		params[i++] = pll_reg.reg.p1_1;
    3a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a20:	88 8b       	std	Y+16, r24	; 0x10
		params[i++] = pll_reg.reg.p1_0;
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	89 8b       	std	Y+17, r24	; 0x11

		/* Register 31 */
		params[i] = pll_reg.reg.p3_2 << 4;
		params[i++] += pll_reg.reg.p2_2 & 0x0F;
    3a26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a28:	8f 81       	ldd	r24, Y+7	; 0x07
    3a2a:	8f 70       	andi	r24, 0x0F	; 15
    3a2c:	20 e1       	ldi	r18, 0x10	; 16
    3a2e:	92 9f       	mul	r25, r18
    3a30:	80 0d       	add	r24, r0
    3a32:	11 24       	eor	r1, r1

		/* Registers 32-33 */
		params[i++] = pll_reg.reg.p2_1;
    3a34:	8a 8b       	std	Y+18, r24	; 0x12
    3a36:	8e 81       	ldd	r24, Y+6	; 0x06
		params[i++] = pll_reg.reg.p2_0;
    3a38:	8b 8b       	std	Y+19, r24	; 0x13
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05

		/* Write the parameters */
		if(target_pll == SI5351_PLLA)
    3a3c:	8c 8b       	std	Y+20, r24	; 0x14
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	f8 12       	cpse	r15, r24
		{
			si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
    3a42:	07 c0       	rjmp	.+14     	; 0x3a52 <set_pll+0x76>
    3a44:	ae 01       	movw	r20, r28
    3a46:	43 5f       	subi	r20, 0xF3	; 243
    3a48:	5f 4f       	sbci	r21, 0xFF	; 255
    3a4a:	68 e0       	ldi	r22, 0x08	; 8
    3a4c:	8a e1       	ldi	r24, 0x1A	; 26
    3a4e:	c1 df       	rcall	.-126    	; 0x39d2 <si5351_write_bulk>
    3a50:	06 c0       	rjmp	.+12     	; 0x3a5e <set_pll+0x82>
		}
		else    /* if(target_pll == SI5351_PLLB) */
		{
			si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
    3a52:	ae 01       	movw	r20, r28
    3a54:	43 5f       	subi	r20, 0xF3	; 243
    3a56:	5f 4f       	sbci	r21, 0xFF	; 255
    3a58:	68 e0       	ldi	r22, 0x08	; 8
    3a5a:	82 e2       	ldi	r24, 0x22	; 34
    3a5c:	ba df       	rcall	.-140    	; 0x39d2 <si5351_write_bulk>
		}

#ifdef DEBUGGING_ONLY
			return(result);
#endif
	}
    3a5e:	66 96       	adiw	r28, 0x16	; 22
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	08 95       	ret

00003a76 <si5351_set_vcoB_freq>:
 * Currently this only works for PLLB.
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
    3a76:	60 93 35 07 	sts	0x0735, r22	; 0x800735 <freqVCOB>
    3a7a:	70 93 36 07 	sts	0x0736, r23	; 0x800736 <freqVCOB+0x1>
    3a7e:	80 93 37 07 	sts	0x0737, r24	; 0x800737 <freqVCOB+0x2>
    3a82:	90 93 38 07 	sts	0x0738, r25	; 0x800738 <freqVCOB+0x3>
		set_pll(freq_VCO, SI5351_PLLB);
    3a86:	42 e0       	ldi	r20, 0x02	; 2
    3a88:	a9 cf       	rjmp	.-174    	; 0x39dc <set_pll>
    3a8a:	08 95       	ret

00003a8c <si5351_write>:
	{
		return(i2c_device_write(SI5351_BUS_BASE_ADDR, addr, data, bytes));
	}

	BOOL si5351_write(uint8_t addr, uint8_t data)
	{
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	1f 92       	push	r1
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
		return(i2c_device_write(SI5351_BUS_BASE_ADDR, addr, &data, 1));
    3a96:	69 83       	std	Y+1, r22	; 0x01
    3a98:	21 e0       	ldi	r18, 0x01	; 1
    3a9a:	ae 01       	movw	r20, r28
    3a9c:	4f 5f       	subi	r20, 0xFF	; 255
    3a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3aa0:	68 2f       	mov	r22, r24
    3aa2:	80 ec       	ldi	r24, 0xC0	; 192
	}
    3aa4:	5f db       	rcall	.-2370   	; 0x3164 <i2c_device_write>
    3aa6:	0f 90       	pop	r0
    3aa8:	df 91       	pop	r29
    3aaa:	cf 91       	pop	r28
 *
 * Apply a reset to the indicated PLL(s).
 *
 */
	void pll_reset(Si5351_pll target_pll)
	{
    3aac:	08 95       	ret

00003aae <pll_reset>:
    3aae:	cf 93       	push	r28
		if(target_pll & SI5351_PLLA)
    3ab0:	c8 2f       	mov	r28, r24
    3ab2:	80 ff       	sbrs	r24, 0
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
    3ab4:	03 c0       	rjmp	.+6      	; 0x3abc <pll_reset+0xe>
    3ab6:	60 e2       	ldi	r22, 0x20	; 32
    3ab8:	81 eb       	ldi	r24, 0xB1	; 177
    3aba:	e8 df       	rcall	.-48     	; 0x3a8c <si5351_write>
		}

		if(target_pll & SI5351_PLLB)
    3abc:	c1 ff       	sbrs	r28, 1
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
    3abe:	03 c0       	rjmp	.+6      	; 0x3ac6 <pll_reset+0x18>
    3ac0:	60 e8       	ldi	r22, 0x80	; 128
    3ac2:	81 eb       	ldi	r24, 0xB1	; 177
    3ac4:	e3 df       	rcall	.-58     	; 0x3a8c <si5351_write>
		}
	}
    3ac6:	cf 91       	pop	r28
    3ac8:	08 95       	ret

00003aca <si5351_read>:
	{
		return(i2c_device_write(SI5351_BUS_BASE_ADDR, addr, &data, 1));
	}

	BOOL si5351_read(uint8_t addr, uint8_t *data)
	{
    3aca:	ab 01       	movw	r20, r22
		return(i2c_device_read(SI5351_BUS_BASE_ADDR, addr, data, 1));
    3acc:	21 e0       	ldi	r18, 0x01	; 1
    3ace:	68 2f       	mov	r22, r24
    3ad0:	80 ec       	ldi	r24, 0xC0	; 192
    3ad2:	8d cb       	rjmp	.-2278   	; 0x31ee <i2c_device_read>
    3ad4:	08 95       	ret

00003ad6 <si5351_init>:
	}
    3ad6:	cf 92       	push	r12
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	void si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    3ad8:	df 92       	push	r13
    3ada:	ef 92       	push	r14
    3adc:	ff 92       	push	r15
    3ade:	1f 93       	push	r17
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	1f 92       	push	r1
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
    3aea:	18 2f       	mov	r17, r24
    3aec:	6a 01       	movw	r12, r20
    3aee:	7b 01       	movw	r14, r22
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			i2c_init();
    3af0:	c2 da       	rcall	.-2684   	; 0x3076 <i2c_init>
			uint8_t result_val = 0x00;
			BOOL result = FALSE;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    3af2:	10 92 35 07 	sts	0x0735, r1	; 0x800735 <freqVCOB>
    3af6:	10 92 36 07 	sts	0x0736, r1	; 0x800736 <freqVCOB+0x1>
    3afa:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <freqVCOB+0x2>
		xtal_freq = SI5351_XTAL_FREQ;
    3afe:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <freqVCOB+0x3>
    3b02:	80 e4       	ldi	r24, 0x40	; 64
    3b04:	98 e7       	ldi	r25, 0x78	; 120
    3b06:	ad e7       	ldi	r26, 0x7D	; 125
    3b08:	b1 e0       	ldi	r27, 0x01	; 1
    3b0a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <xtal_freq>
    3b0e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <xtal_freq+0x1>
    3b12:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <xtal_freq+0x2>
		enabledClocksMask = 0x00;
    3b16:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <xtal_freq+0x3>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		si5351_write(3, 0xff);
    3b1a:	10 92 34 07 	sts	0x0734, r1	; 0x800734 <enabledClocksMask>
    3b1e:	6f ef       	ldi	r22, 0xFF	; 255

		/* Power down clocks */
		si5351_write(16, 0xCC);
    3b20:	83 e0       	ldi	r24, 0x03	; 3
    3b22:	b4 df       	rcall	.-152    	; 0x3a8c <si5351_write>
    3b24:	6c ec       	ldi	r22, 0xCC	; 204
    3b26:	80 e1       	ldi	r24, 0x10	; 16
		si5351_write(17, 0xCC);
    3b28:	b1 df       	rcall	.-158    	; 0x3a8c <si5351_write>
    3b2a:	6c ec       	ldi	r22, 0xCC	; 204
    3b2c:	81 e1       	ldi	r24, 0x11	; 17
    3b2e:	ae df       	rcall	.-164    	; 0x3a8c <si5351_write>
		si5351_write(18, 0xCC);
    3b30:	6c ec       	ldi	r22, 0xCC	; 204
    3b32:	82 e1       	ldi	r24, 0x12	; 18
    3b34:	ab df       	rcall	.-170    	; 0x3a8c <si5351_write>
    3b36:	61 2f       	mov	r22, r17

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    3b38:	62 61       	ori	r22, 0x12	; 18
    3b3a:	69 83       	std	Y+1, r22	; 0x01
    3b3c:	87 eb       	ldi	r24, 0xB7	; 183

		si5351_write(SI5351_CRYSTAL_LOAD, reg_val);
    3b3e:	a6 df       	rcall	.-180    	; 0x3a8c <si5351_write>
    3b40:	c1 14       	cp	r12, r1

		if(!ref_osc_freq)
    3b42:	d1 04       	cpc	r13, r1
    3b44:	e1 04       	cpc	r14, r1
    3b46:	f1 04       	cpc	r15, r1
    3b48:	51 f4       	brne	.+20     	; 0x3b5e <si5351_init+0x88>
    3b4a:	0f 2e       	mov	r0, r31
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    3b4c:	f0 e4       	ldi	r31, 0x40	; 64
    3b4e:	cf 2e       	mov	r12, r31
    3b50:	f8 e7       	ldi	r31, 0x78	; 120
    3b52:	df 2e       	mov	r13, r31
    3b54:	fd e7       	ldi	r31, 0x7D	; 125
    3b56:	ef 2e       	mov	r14, r31
    3b58:	ff 24       	eor	r15, r15
    3b5a:	f3 94       	inc	r15
    3b5c:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    3b5e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <xtal_freq>
    3b62:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <xtal_freq+0x1>
    3b66:	a0 91 32 01 	lds	r26, 0x0132	; 0x800132 <xtal_freq+0x2>
    3b6a:	b0 91 33 01 	lds	r27, 0x0133	; 0x800133 <xtal_freq+0x3>
    3b6e:	c8 16       	cp	r12, r24
    3b70:	d9 06       	cpc	r13, r25
    3b72:	ea 06       	cpc	r14, r26
    3b74:	fb 06       	cpc	r15, r27
    3b76:	a1 f0       	breq	.+40     	; 0x3ba0 <si5351_init+0xca>
		{
			if(si5351_read(SI5351_PLL_INPUT_SOURCE, &reg_val))
    3b78:	be 01       	movw	r22, r28
    3b7a:	6f 5f       	subi	r22, 0xFF	; 255
    3b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7e:	8f e0       	ldi	r24, 0x0F	; 15
    3b80:	a4 df       	rcall	.-184    	; 0x3aca <si5351_read>
    3b82:	81 11       	cpse	r24, r1
    3b84:	0d c0       	rjmp	.+26     	; 0x3ba0 <si5351_init+0xca>
    3b86:	69 81       	ldd	r22, Y+1	; 0x01
			{
				return;
			}

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    3b88:	6f 73       	andi	r22, 0x3F	; 63
    3b8a:	69 83       	std	Y+1, r22	; 0x01

			xtal_freq = ref_osc_freq;
    3b8c:	c0 92 30 01 	sts	0x0130, r12	; 0x800130 <xtal_freq>
    3b90:	d0 92 31 01 	sts	0x0131, r13	; 0x800131 <xtal_freq+0x1>
    3b94:	e0 92 32 01 	sts	0x0132, r14	; 0x800132 <xtal_freq+0x2>
    3b98:	f0 92 33 01 	sts	0x0133, r15	; 0x800133 <xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
    3b9c:	8f e0       	ldi	r24, 0x0F	; 15
    3b9e:	76 df       	rcall	.-276    	; 0x3a8c <si5351_write>
    3ba0:	0f 90       	pop	r0
		}
	}
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	1f 91       	pop	r17
    3ba8:	ff 90       	pop	r15
    3baa:	ef 90       	pop	r14
    3bac:	df 90       	pop	r13
    3bae:	cf 90       	pop	r12
    3bb0:	08 95       	ret

00003bb2 <si5351_clock_enable>:
    3bb2:	0f 93       	push	r16
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	void si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    3bb4:	1f 93       	push	r17
    3bb6:	cf 93       	push	r28
    3bb8:	df 93       	push	r29
    3bba:	1f 92       	push	r1
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	18 2f       	mov	r17, r24
    3bc2:	06 2f       	mov	r16, r22
		uint8_t reg_val;

		if(si5351_read(SI5351_OUTPUT_ENABLE_CTRL, &reg_val))
    3bc4:	be 01       	movw	r22, r28
    3bc6:	6f 5f       	subi	r22, 0xFF	; 255
    3bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bca:	83 e0       	ldi	r24, 0x03	; 3
    3bcc:	7e df       	rcall	.-260    	; 0x3aca <si5351_read>
    3bce:	81 11       	cpse	r24, r1
    3bd0:	1b c0       	rjmp	.+54     	; 0x3c08 <si5351_clock_enable+0x56>
    3bd2:	00 23       	and	r16, r16
		{
			return;
		}

		if(enable)
    3bd4:	61 f0       	breq	.+24     	; 0x3bee <si5351_clock_enable+0x3c>
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
		{
			reg_val &= ~(1 << (uint8_t)clk);
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <si5351_clock_enable+0x2e>
    3bdc:	88 0f       	add	r24, r24
    3bde:	99 1f       	adc	r25, r25
    3be0:	1a 95       	dec	r17
    3be2:	e2 f7       	brpl	.-8      	; 0x3bdc <si5351_clock_enable+0x2a>
    3be4:	80 95       	com	r24
    3be6:	99 81       	ldd	r25, Y+1	; 0x01
    3be8:	89 23       	and	r24, r25
    3bea:	89 83       	std	Y+1, r24	; 0x01
    3bec:	0a c0       	rjmp	.+20     	; 0x3c02 <si5351_clock_enable+0x50>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <si5351_clock_enable+0x46>
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	1a 95       	dec	r17
    3bfa:	e2 f7       	brpl	.-8      	; 0x3bf4 <si5351_clock_enable+0x42>
    3bfc:	99 81       	ldd	r25, Y+1	; 0x01
    3bfe:	89 2b       	or	r24, r25
    3c00:	89 83       	std	Y+1, r24	; 0x01
		}

		si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
    3c02:	69 81       	ldd	r22, Y+1	; 0x01
    3c04:	83 e0       	ldi	r24, 0x03	; 3
    3c06:	42 df       	rcall	.-380    	; 0x3a8c <si5351_write>
    3c08:	0f 90       	pop	r0
	}
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	1f 91       	pop	r17
    3c10:	0f 91       	pop	r16
    3c12:	08 95       	ret

00003c14 <si5351_drive_strength>:
    3c14:	0f 93       	push	r16
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	void si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    3c16:	1f 93       	push	r17
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	1f 92       	push	r1
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
    3c22:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		const uint8_t mask = 0x03;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    3c24:	10 e1       	ldi	r17, 0x10	; 16
    3c26:	18 0f       	add	r17, r24
    3c28:	be 01       	movw	r22, r28
    3c2a:	6f 5f       	subi	r22, 0xFF	; 255
    3c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2e:	81 2f       	mov	r24, r17
    3c30:	4c df       	rcall	.-360    	; 0x3aca <si5351_read>
    3c32:	81 11       	cpse	r24, r1
    3c34:	1c c0       	rjmp	.+56     	; 0x3c6e <si5351_drive_strength+0x5a>
    3c36:	01 30       	cpi	r16, 0x01	; 1
		{
			return;
		}

		switch(drive)
    3c38:	51 f0       	breq	.+20     	; 0x3c4e <si5351_drive_strength+0x3a>
    3c3a:	28 f0       	brcs	.+10     	; 0x3c46 <si5351_drive_strength+0x32>
    3c3c:	02 30       	cpi	r16, 0x02	; 2
    3c3e:	61 f0       	breq	.+24     	; 0x3c58 <si5351_drive_strength+0x44>
    3c40:	03 30       	cpi	r16, 0x03	; 3
    3c42:	79 f0       	breq	.+30     	; 0x3c62 <si5351_drive_strength+0x4e>
    3c44:	11 c0       	rjmp	.+34     	; 0x3c68 <si5351_drive_strength+0x54>
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    3c48:	8c 7f       	andi	r24, 0xFC	; 252
    3c4a:	89 83       	std	Y+1, r24	; 0x01
				reg_val |= 0x00;
			}
			break;
    3c4c:	0d c0       	rjmp	.+26     	; 0x3c68 <si5351_drive_strength+0x54>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x01;
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	8c 7f       	andi	r24, 0xFC	; 252
    3c52:	81 60       	ori	r24, 0x01	; 1
    3c54:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
    3c56:	08 c0       	rjmp	.+16     	; 0x3c68 <si5351_drive_strength+0x54>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x02;
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	8c 7f       	andi	r24, 0xFC	; 252
    3c5c:	82 60       	ori	r24, 0x02	; 2
    3c5e:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
    3c60:	03 c0       	rjmp	.+6      	; 0x3c68 <si5351_drive_strength+0x54>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	83 60       	ori	r24, 0x03	; 3
    3c66:	89 83       	std	Y+1, r24	; 0x01
			{
			}
			break;
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    3c68:	69 81       	ldd	r22, Y+1	; 0x01
    3c6a:	81 2f       	mov	r24, r17
    3c6c:	0f df       	rcall	.-482    	; 0x3a8c <si5351_write>
	}
    3c6e:	0f 90       	pop	r0
    3c70:	df 91       	pop	r29
    3c72:	cf 91       	pop	r28
    3c74:	1f 91       	pop	r17
    3c76:	0f 91       	pop	r16
    3c78:	08 95       	ret

00003c7a <set_multisynth_registers_source>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	void set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	cf 93       	push	r28
    3c80:	df 93       	push	r29
    3c82:	1f 92       	push	r1
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t addr = SI5351_CLK0_CTRL + (uint8_t)clk;
    3c8a:	10 e1       	ldi	r17, 0x10	; 16
    3c8c:	18 0f       	add	r17, r24

		if(si5351_read(addr, &reg_val))
    3c8e:	be 01       	movw	r22, r28
    3c90:	6f 5f       	subi	r22, 0xFF	; 255
    3c92:	7f 4f       	sbci	r23, 0xFF	; 255
    3c94:	81 2f       	mov	r24, r17
    3c96:	19 df       	rcall	.-462    	; 0x3aca <si5351_read>
    3c98:	81 11       	cpse	r24, r1
    3c9a:	0e c0       	rjmp	.+28     	; 0x3cb8 <set_multisynth_registers_source+0x3e>
		{
			return;
		}

		if(pll == SI5351_PLLA)
    3c9c:	01 30       	cpi	r16, 0x01	; 1
    3c9e:	21 f4       	brne	.+8      	; 0x3ca8 <set_multisynth_registers_source+0x2e>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	8f 7d       	andi	r24, 0xDF	; 223
    3ca4:	89 83       	std	Y+1, r24	; 0x01
    3ca6:	05 c0       	rjmp	.+10     	; 0x3cb2 <set_multisynth_registers_source+0x38>
		}
		else if(pll == SI5351_PLLB)
    3ca8:	02 30       	cpi	r16, 0x02	; 2
    3caa:	19 f4       	brne	.+6      	; 0x3cb2 <set_multisynth_registers_source+0x38>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    3cac:	89 81       	ldd	r24, Y+1	; 0x01
    3cae:	80 62       	ori	r24, 0x20	; 32
		}

		si5351_write(addr, reg_val);
    3cb0:	89 83       	std	Y+1, r24	; 0x01
    3cb2:	69 81       	ldd	r22, Y+1	; 0x01
    3cb4:	81 2f       	mov	r24, r17
    3cb6:	ea de       	rcall	.-556    	; 0x3a8c <si5351_write>
	}
    3cb8:	0f 90       	pop	r0
    3cba:	df 91       	pop	r29
    3cbc:	cf 91       	pop	r28
    3cbe:	1f 91       	pop	r17
    3cc0:	0f 91       	pop	r16
    3cc2:	08 95       	ret

00003cc4 <set_integer_mode>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	void set_integer_mode(Si5351_clock clk, BOOL enable)
	{
    3cc4:	0f 93       	push	r16
    3cc6:	1f 93       	push	r17
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	1f 92       	push	r1
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
    3cd2:	06 2f       	mov	r16, r22
		uint8_t reg_val;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    3cd4:	10 e1       	ldi	r17, 0x10	; 16
    3cd6:	18 0f       	add	r17, r24
    3cd8:	be 01       	movw	r22, r28
    3cda:	6f 5f       	subi	r22, 0xFF	; 255
    3cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cde:	81 2f       	mov	r24, r17
    3ce0:	f4 de       	rcall	.-536    	; 0x3aca <si5351_read>
    3ce2:	81 11       	cpse	r24, r1
    3ce4:	0c c0       	rjmp	.+24     	; 0x3cfe <set_integer_mode+0x3a>
    3ce6:	00 23       	and	r16, r16
		{
			return;
		}

		if(enable)
    3ce8:	21 f0       	breq	.+8      	; 0x3cf2 <set_integer_mode+0x2e>
    3cea:	89 81       	ldd	r24, Y+1	; 0x01
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    3cec:	80 64       	ori	r24, 0x40	; 64
    3cee:	89 83       	std	Y+1, r24	; 0x01
    3cf0:	03 c0       	rjmp	.+6      	; 0x3cf8 <set_integer_mode+0x34>
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    3cf4:	8f 7b       	andi	r24, 0xBF	; 191
    3cf6:	89 83       	std	Y+1, r24	; 0x01
    3cf8:	69 81       	ldd	r22, Y+1	; 0x01
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    3cfa:	81 2f       	mov	r24, r17
    3cfc:	c7 de       	rcall	.-626    	; 0x3a8c <si5351_write>
    3cfe:	0f 90       	pop	r0
	}
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
    3d04:	1f 91       	pop	r17
    3d06:	0f 91       	pop	r16
    3d08:	08 95       	ret

00003d0a <ms_div>:
    3d0a:	ff 92       	push	r15


	void ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
	{
    3d0c:	0f 93       	push	r16
    3d0e:	1f 93       	push	r17
    3d10:	cf 93       	push	r28
    3d12:	df 93       	push	r29
    3d14:	1f 92       	push	r1
    3d16:	cd b7       	in	r28, 0x3d	; 61
    3d18:	de b7       	in	r29, 0x3e	; 62
    3d1a:	81 30       	cpi	r24, 0x01	; 1
		uint8_t reg_val, reg_addr;

		switch(clk)
    3d1c:	21 f0       	breq	.+8      	; 0x3d26 <ms_div+0x1c>
    3d1e:	68 f0       	brcs	.+26     	; 0x3d3a <ms_div+0x30>
    3d20:	82 30       	cpi	r24, 0x02	; 2
    3d22:	31 f0       	breq	.+12     	; 0x3d30 <ms_div+0x26>
    3d24:	28 c0       	rjmp	.+80     	; 0x3d76 <ms_div+0x6c>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    3d26:	0f 2e       	mov	r0, r31
    3d28:	f4 e3       	ldi	r31, 0x34	; 52
    3d2a:	ff 2e       	mov	r15, r31
    3d2c:	f0 2d       	mov	r31, r0
    3d2e:	09 c0       	rjmp	.+18     	; 0x3d42 <ms_div+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    3d30:	0f 2e       	mov	r0, r31
    3d32:	fc e3       	ldi	r31, 0x3C	; 60
    3d34:	ff 2e       	mov	r15, r31
    3d36:	f0 2d       	mov	r31, r0
			}
			break;
    3d38:	04 c0       	rjmp	.+8      	; 0x3d42 <ms_div+0x38>

		switch(clk)
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    3d3a:	0f 2e       	mov	r0, r31
    3d3c:	fc e2       	ldi	r31, 0x2C	; 44
    3d3e:	ff 2e       	mov	r15, r31
    3d40:	f0 2d       	mov	r31, r0
    3d42:	04 2f       	mov	r16, r20
    3d44:	16 2f       	mov	r17, r22

			default:
				return;
		}

		if(si5351_read(reg_addr, &reg_val))
    3d46:	be 01       	movw	r22, r28
    3d48:	6f 5f       	subi	r22, 0xFF	; 255
    3d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d4c:	8f 2d       	mov	r24, r15
    3d4e:	bd de       	rcall	.-646    	; 0x3aca <si5351_read>
    3d50:	81 11       	cpse	r24, r1
    3d52:	11 c0       	rjmp	.+34     	; 0x3d76 <ms_div+0x6c>
    3d54:	89 81       	ldd	r24, Y+1	; 0x01
		{
			return;
		}

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    3d56:	83 78       	andi	r24, 0x83	; 131
    3d58:	01 11       	cpse	r16, r1

		if(div_by_4)
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <ms_div+0x56>
    3d5c:	89 83       	std	Y+1, r24	; 0x01
		{
			return;
		}

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    3d5e:	02 c0       	rjmp	.+4      	; 0x3d64 <ms_div+0x5a>
    3d60:	8c 60       	ori	r24, 0x0C	; 12

		if(div_by_4)
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	80 e1       	ldi	r24, 0x10	; 16
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    3d66:	18 9f       	mul	r17, r24
    3d68:	b0 01       	movw	r22, r0
    3d6a:	11 24       	eor	r1, r1
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	68 2b       	or	r22, r24
    3d70:	69 83       	std	Y+1, r22	; 0x01
    3d72:	8f 2d       	mov	r24, r15

		si5351_write(reg_addr, reg_val);
    3d74:	8b de       	rcall	.-746    	; 0x3a8c <si5351_write>
    3d76:	0f 90       	pop	r0
	}
    3d78:	df 91       	pop	r29
    3d7a:	cf 91       	pop	r28
    3d7c:	1f 91       	pop	r17
    3d7e:	0f 91       	pop	r16
    3d80:	ff 90       	pop	r15
    3d82:	08 95       	ret

00003d84 <set_multisynth_registers>:
    3d84:	8f 92       	push	r8
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	void set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
	{
    3d86:	af 92       	push	r10
    3d88:	cf 92       	push	r12
    3d8a:	df 92       	push	r13
    3d8c:	ef 92       	push	r14
    3d8e:	ff 92       	push	r15
    3d90:	0f 93       	push	r16
    3d92:	1f 93       	push	r17
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	67 97       	sbiw	r28, 0x17	; 23
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	cd bf       	out	0x3d, r28	; 61
    3da8:	f8 2e       	mov	r15, r24
    3daa:	cc 86       	std	Y+12, r12	; 0x0c
    3dac:	dd 86       	std	Y+13, r13	; 0x0d
    3dae:	ee 86       	std	Y+14, r14	; 0x0e
    3db0:	08 8b       	std	Y+16, r16	; 0x10
    3db2:	19 8b       	std	Y+17, r17	; 0x11
    3db4:	2a 8b       	std	Y+18, r18	; 0x12
    3db6:	6e 8b       	std	Y+22, r22	; 0x16
    3db8:	59 83       	std	Y+1, r21	; 0x01
		uint8_t params[10];
		uint8_t i = 0;
		uint8_t reg_val;

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    3dba:	4a 83       	std	Y+2, r20	; 0x02
		params[i++] = ms_reg.reg.p3_0;
    3dbc:	88 0f       	add	r24, r24

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), &reg_val))
    3dbe:	88 0f       	add	r24, r24
    3dc0:	88 0f       	add	r24, r24
    3dc2:	be 01       	movw	r22, r28
    3dc4:	65 5f       	subi	r22, 0xF5	; 245
    3dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc8:	84 5d       	subi	r24, 0xD4	; 212
    3dca:	7f de       	rcall	.-770    	; 0x3aca <si5351_read>
    3dcc:	81 11       	cpse	r24, r1
    3dce:	3b c0       	rjmp	.+118    	; 0x3e46 <set_multisynth_registers+0xc2>
		{
			return;
		}

		reg_val &= 0xFC;    /*~(0x03); */
    3dd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3dd2:	8c 7f       	andi	r24, 0xFC	; 252
    3dd4:	8b 87       	std	Y+11, r24	; 0x0b
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    3dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd8:	93 70       	andi	r25, 0x03	; 3
    3dda:	89 2b       	or	r24, r25

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    3ddc:	8b 83       	std	Y+3, r24	; 0x03
		params[i++] = ms_reg.reg.p1_0;
    3dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de0:	8c 83       	std	Y+4, r24	; 0x04

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    3de2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3de4:	8d 83       	std	Y+5, r24	; 0x05
    3de6:	9e 89       	ldd	r25, Y+22	; 0x16
    3de8:	8a 89       	ldd	r24, Y+18	; 0x12
    3dea:	8f 70       	andi	r24, 0x0F	; 15
    3dec:	20 e1       	ldi	r18, 0x10	; 16
    3dee:	92 9f       	mul	r25, r18

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    3df0:	80 0d       	add	r24, r0
    3df2:	11 24       	eor	r1, r1
		params[i++] = ms_reg.reg.p2_0;
    3df4:	8e 83       	std	Y+6, r24	; 0x06
    3df6:	89 89       	ldd	r24, Y+17	; 0x11

		/* Write the parameters */
		switch(clk)
    3df8:	8f 83       	std	Y+7, r24	; 0x07
    3dfa:	88 89       	ldd	r24, Y+16	; 0x10
    3dfc:	88 87       	std	Y+8, r24	; 0x08
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	f8 16       	cp	r15, r24
    3e02:	69 f0       	breq	.+26     	; 0x3e1e <set_multisynth_registers+0x9a>
    3e04:	f8 16       	cp	r15, r24
    3e06:	20 f0       	brcs	.+8      	; 0x3e10 <set_multisynth_registers+0x8c>
    3e08:	22 e0       	ldi	r18, 0x02	; 2
		{
			case SI5351_CLK0:
			{
				si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
    3e0a:	f2 16       	cp	r15, r18
    3e0c:	79 f0       	breq	.+30     	; 0x3e2c <set_multisynth_registers+0xa8>
    3e0e:	14 c0       	rjmp	.+40     	; 0x3e38 <set_multisynth_registers+0xb4>
    3e10:	ae 01       	movw	r20, r28
    3e12:	4f 5f       	subi	r20, 0xFF	; 255
    3e14:	5f 4f       	sbci	r21, 0xFF	; 255
    3e16:	68 e0       	ldi	r22, 0x08	; 8
			}
			break;
    3e18:	8a e2       	ldi	r24, 0x2A	; 42

			case SI5351_CLK1:
			{
				si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
    3e1a:	db dd       	rcall	.-1098   	; 0x39d2 <si5351_write_bulk>
    3e1c:	0d c0       	rjmp	.+26     	; 0x3e38 <set_multisynth_registers+0xb4>
    3e1e:	ae 01       	movw	r20, r28
    3e20:	4f 5f       	subi	r20, 0xFF	; 255
    3e22:	5f 4f       	sbci	r21, 0xFF	; 255
    3e24:	68 e0       	ldi	r22, 0x08	; 8
    3e26:	82 e3       	ldi	r24, 0x32	; 50
			}
			break;
    3e28:	d4 dd       	rcall	.-1112   	; 0x39d2 <si5351_write_bulk>

			case SI5351_CLK2:
			{
				si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
    3e2a:	06 c0       	rjmp	.+12     	; 0x3e38 <set_multisynth_registers+0xb4>
    3e2c:	ae 01       	movw	r20, r28
    3e2e:	4f 5f       	subi	r20, 0xFF	; 255
    3e30:	5f 4f       	sbci	r21, 0xFF	; 255
    3e32:	68 e0       	ldi	r22, 0x08	; 8
    3e34:	8a e3       	ldi	r24, 0x3A	; 58
    3e36:	cd dd       	rcall	.-1126   	; 0x39d2 <si5351_write_bulk>
			{
			}
			break;
		}

		set_integer_mode(clk, int_mode);
    3e38:	6a 2d       	mov	r22, r10
    3e3a:	8f 2d       	mov	r24, r15
    3e3c:	43 df       	rcall	.-378    	; 0x3cc4 <set_integer_mode>
    3e3e:	4c a1       	ldd	r20, Y+36	; 0x24
		ms_div(clk, r_div, div_by_4);
    3e40:	68 2d       	mov	r22, r8
    3e42:	8f 2d       	mov	r24, r15
    3e44:	62 df       	rcall	.-316    	; 0x3d0a <ms_div>
    3e46:	67 96       	adiw	r28, 0x17	; 23
    3e48:	0f b6       	in	r0, 0x3f	; 63
	}
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
    3e52:	df 91       	pop	r29
    3e54:	cf 91       	pop	r28
    3e56:	1f 91       	pop	r17
    3e58:	0f 91       	pop	r16
    3e5a:	ff 90       	pop	r15
    3e5c:	ef 90       	pop	r14
    3e5e:	df 90       	pop	r13
    3e60:	cf 90       	pop	r12
    3e62:	af 90       	pop	r10
    3e64:	8f 90       	pop	r8
    3e66:	08 95       	ret

00003e68 <si5351_set_freq>:
 *
 * Returns TRUE on failure
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk)
	{
    3e68:	3f 92       	push	r3
    3e6a:	4f 92       	push	r4
    3e6c:	5f 92       	push	r5
    3e6e:	6f 92       	push	r6
    3e70:	7f 92       	push	r7
    3e72:	8f 92       	push	r8
    3e74:	9f 92       	push	r9
    3e76:	af 92       	push	r10
    3e78:	bf 92       	push	r11
    3e7a:	cf 92       	push	r12
    3e7c:	df 92       	push	r13
    3e7e:	ef 92       	push	r14
    3e80:	ff 92       	push	r15
    3e82:	0f 93       	push	r16
    3e84:	1f 93       	push	r17
    3e86:	cf 93       	push	r28
    3e88:	df 93       	push	r29
    3e8a:	cd b7       	in	r28, 0x3d	; 61
    3e8c:	de b7       	in	r29, 0x3e	; 62
    3e8e:	2e 97       	sbiw	r28, 0x0e	; 14
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	6b 01       	movw	r12, r22
    3e9c:	7c 01       	movw	r14, r24
    3e9e:	b4 2e       	mov	r11, r20
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		BOOL int_mode = FALSE;
    3ea0:	1d 86       	std	Y+13, r1	; 0x0d
		BOOL div_by_4 = FALSE;
    3ea2:	1e 86       	std	Y+14, r1	; 0x0e
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    3ea4:	80 e4       	ldi	r24, 0x40	; 64
    3ea6:	c8 16       	cp	r12, r24
    3ea8:	82 e4       	ldi	r24, 0x42	; 66
    3eaa:	d8 06       	cpc	r13, r24
    3eac:	8f e0       	ldi	r24, 0x0F	; 15
    3eae:	e8 06       	cpc	r14, r24
    3eb0:	f1 04       	cpc	r15, r1
			{
				freq_Fout /= 100;
    3eb2:	60 f0       	brcs	.+24     	; 0x3ecc <si5351_set_freq+0x64>
    3eb4:	c7 01       	movw	r24, r14
    3eb6:	b6 01       	movw	r22, r12
    3eb8:	24 e6       	ldi	r18, 0x64	; 100
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e0       	ldi	r20, 0x00	; 0
    3ebe:	50 e0       	ldi	r21, 0x00	; 0
    3ec0:	09 d1       	rcall	.+530    	; 0x40d4 <__udivmodsi4>
				freq_Fout *= 100;
    3ec2:	a4 e6       	ldi	r26, 0x64	; 100
    3ec4:	b0 e0       	ldi	r27, 0x00	; 0
    3ec6:	53 d1       	rcall	.+678    	; 0x416e <__muluhisi3>
    3ec8:	6b 01       	movw	r12, r22
    3eca:	7c 01       	movw	r14, r24
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    3ece:	b8 16       	cp	r11, r24
    3ed0:	c9 f0       	breq	.+50     	; 0x3f04 <si5351_set_freq+0x9c>
    3ed2:	b8 16       	cp	r11, r24
    3ed4:	20 f0       	brcs	.+8      	; 0x3ede <si5351_set_freq+0x76>
    3ed6:	82 e0       	ldi	r24, 0x02	; 2
    3ed8:	b8 16       	cp	r11, r24
    3eda:	51 f1       	breq	.+84     	; 0x3f30 <si5351_set_freq+0xc8>
    3edc:	c1 c0       	rjmp	.+386    	; 0x4060 <si5351_set_freq+0x1f8>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    3ede:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <enabledClocksMask>
    3ee2:	81 60       	ori	r24, 0x01	; 1
    3ee4:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <enabledClocksMask>
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    3ee8:	c0 92 28 07 	sts	0x0728, r12	; 0x800728 <clock_out>
    3eec:	d0 92 29 07 	sts	0x0729, r13	; 0x800729 <clock_out+0x1>
    3ef0:	e0 92 2a 07 	sts	0x072A, r14	; 0x80072a <clock_out+0x2>
    3ef4:	f0 92 2b 07 	sts	0x072B, r15	; 0x80072b <clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    3ef8:	68 94       	set
    3efa:	33 24       	eor	r3, r3
    3efc:	34 f8       	bld	r3, 4

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    3efe:	99 24       	eor	r9, r9
    3f00:	93 94       	inc	r9
    3f02:	2f c0       	rjmp	.+94     	; 0x3f62 <si5351_set_freq+0xfa>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    3f04:	60 91 34 07 	lds	r22, 0x0734	; 0x800734 <enabledClocksMask>
    3f08:	62 60       	ori	r22, 0x02	; 2
    3f0a:	60 93 34 07 	sts	0x0734, r22	; 0x800734 <enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */
    3f0e:	60 95       	com	r22
    3f10:	6a 6f       	ori	r22, 0xFA	; 250
    3f12:	83 e0       	ldi	r24, 0x03	; 3
    3f14:	bb dd       	rcall	.-1162   	; 0x3a8c <si5351_write>

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    3f16:	c0 92 2c 07 	sts	0x072C, r12	; 0x80072c <clock_out+0x4>
    3f1a:	d0 92 2d 07 	sts	0x072D, r13	; 0x80072d <clock_out+0x5>
    3f1e:	e0 92 2e 07 	sts	0x072E, r14	; 0x80072e <clock_out+0x6>
    3f22:	f0 92 2f 07 	sts	0x072F, r15	; 0x80072f <clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    3f26:	0f 2e       	mov	r0, r31
    3f28:	f1 e1       	ldi	r31, 0x11	; 17
    3f2a:	3f 2e       	mov	r3, r31
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    3f2c:	f0 2d       	mov	r31, r0
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    3f2e:	9c c0       	rjmp	.+312    	; 0x4068 <si5351_set_freq+0x200>
    3f30:	60 91 34 07 	lds	r22, 0x0734	; 0x800734 <enabledClocksMask>
    3f34:	64 60       	ori	r22, 0x04	; 4
    3f36:	60 93 34 07 	sts	0x0734, r22	; 0x800734 <enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */
    3f3a:	60 95       	com	r22
    3f3c:	6c 6f       	ori	r22, 0xFC	; 252
    3f3e:	83 e0       	ldi	r24, 0x03	; 3

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    3f40:	a5 dd       	rcall	.-1206   	; 0x3a8c <si5351_write>
    3f42:	c0 92 30 07 	sts	0x0730, r12	; 0x800730 <clock_out+0x8>
    3f46:	d0 92 31 07 	sts	0x0731, r13	; 0x800731 <clock_out+0x9>
    3f4a:	e0 92 32 07 	sts	0x0732, r14	; 0x800732 <clock_out+0xa>
    3f4e:	f0 92 33 07 	sts	0x0733, r15	; 0x800733 <clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    3f52:	0f 2e       	mov	r0, r31
    3f54:	f2 e1       	ldi	r31, 0x12	; 18
    3f56:	3f 2e       	mov	r3, r31
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
			}
			break;
    3f58:	f0 2d       	mov	r31, r0
    3f5a:	86 c0       	rjmp	.+268    	; 0x4068 <si5351_set_freq+0x200>
    3f5c:	68 94       	set
		if((target_pll == SI5351_PLLA) || !freqVCOB)
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    3f5e:	99 24       	eor	r9, r9
    3f60:	91 f8       	bld	r9, 1
    3f62:	8e 01       	movw	r16, r28
    3f64:	02 5f       	subi	r16, 0xF2	; 242
    3f66:	1f 4f       	sbci	r17, 0xFF	; 255
    3f68:	9e 01       	movw	r18, r28
    3f6a:	23 5f       	subi	r18, 0xF3	; 243
    3f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6e:	ae 01       	movw	r20, r28
    3f70:	4f 5f       	subi	r20, 0xFF	; 255
    3f72:	5f 4f       	sbci	r21, 0xFF	; 255
    3f74:	c7 01       	movw	r24, r14
    3f76:	b6 01       	movw	r22, r12
    3f78:	5d db       	rcall	.-2374   	; 0x3634 <multisynth_calc>
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    3f7a:	2b 01       	movw	r4, r22
    3f7c:	3c 01       	movw	r6, r24
    3f7e:	69 2d       	mov	r22, r9
    3f80:	8b 2d       	mov	r24, r11
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    3f82:	7b de       	rcall	.-778    	; 0x3c7a <set_multisynth_registers_source>
    3f84:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f86:	8f 93       	push	r24
    3f88:	81 2c       	mov	r8, r1
    3f8a:	ad 84       	ldd	r10, Y+13	; 0x0d
    3f8c:	c9 80       	ldd	r12, Y+1	; 0x01
    3f8e:	da 80       	ldd	r13, Y+2	; 0x02
    3f90:	eb 80       	ldd	r14, Y+3	; 0x03
    3f92:	fc 80       	ldd	r15, Y+4	; 0x04
    3f94:	0d 81       	ldd	r16, Y+5	; 0x05
    3f96:	1e 81       	ldd	r17, Y+6	; 0x06
    3f98:	2f 81       	ldd	r18, Y+7	; 0x07
    3f9a:	38 85       	ldd	r19, Y+8	; 0x08
    3f9c:	49 85       	ldd	r20, Y+9	; 0x09
    3f9e:	5a 85       	ldd	r21, Y+10	; 0x0a
    3fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    3fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fa4:	8b 2d       	mov	r24, r11
    3fa6:	ee de       	rcall	.-548    	; 0x3d84 <set_multisynth_registers>
    3fa8:	0f 90       	pop	r0
    3faa:	41 14       	cp	r4, r1
    3fac:	51 04       	cpc	r5, r1
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    3fae:	61 04       	cpc	r6, r1
    3fb0:	71 04       	cpc	r7, r1
    3fb2:	81 f1       	breq	.+96     	; 0x4014 <si5351_set_freq+0x1ac>
    3fb4:	2b c0       	rjmp	.+86     	; 0x400c <si5351_set_freq+0x1a4>
    3fb6:	8e 01       	movw	r16, r28
    3fb8:	02 5f       	subi	r16, 0xF2	; 242
    3fba:	1f 4f       	sbci	r17, 0xFF	; 255
    3fbc:	9e 01       	movw	r18, r28
    3fbe:	23 5f       	subi	r18, 0xF3	; 243
    3fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc2:	ae 01       	movw	r20, r28
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    3fc4:	4f 5f       	subi	r20, 0xFF	; 255
    3fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc8:	c7 01       	movw	r24, r14
    3fca:	b6 01       	movw	r22, r12
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    3fcc:	f1 db       	rcall	.-2078   	; 0x37b0 <multisynth_estimate>
    3fce:	62 e0       	ldi	r22, 0x02	; 2
    3fd0:	8b 2d       	mov	r24, r11
    3fd2:	53 de       	rcall	.-858    	; 0x3c7a <set_multisynth_registers_source>
    3fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fd6:	8f 93       	push	r24
    3fd8:	81 2c       	mov	r8, r1
    3fda:	ad 84       	ldd	r10, Y+13	; 0x0d
    3fdc:	c9 80       	ldd	r12, Y+1	; 0x01
    3fde:	da 80       	ldd	r13, Y+2	; 0x02
    3fe0:	eb 80       	ldd	r14, Y+3	; 0x03
    3fe2:	fc 80       	ldd	r15, Y+4	; 0x04
    3fe4:	0d 81       	ldd	r16, Y+5	; 0x05
    3fe6:	1e 81       	ldd	r17, Y+6	; 0x06
    3fe8:	2f 81       	ldd	r18, Y+7	; 0x07
    3fea:	38 85       	ldd	r19, Y+8	; 0x08
    3fec:	49 85       	ldd	r20, Y+9	; 0x09
    3fee:	5a 85       	ldd	r21, Y+10	; 0x0a
    3ff0:	6b 85       	ldd	r22, Y+11	; 0x0b
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		si5351_write(3, ~enabledClocksMask);    /* only enable clock(s) in use */
    3ff2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff4:	8b 2d       	mov	r24, r11
    3ff6:	c6 de       	rcall	.-628    	; 0x3d84 <set_multisynth_registers>
    3ff8:	60 91 34 07 	lds	r22, 0x0734	; 0x800734 <enabledClocksMask>
    3ffc:	60 95       	com	r22
    3ffe:	83 e0       	ldi	r24, 0x03	; 3
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    4000:	45 dd       	rcall	.-1398   	; 0x3a8c <si5351_write>
    4002:	0f 90       	pop	r0
    4004:	41 2c       	mov	r4, r1
    4006:	51 2c       	mov	r5, r1

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
			{
				set_pll(freq_VCO, target_pll);
    4008:	32 01       	movw	r6, r4
    400a:	11 c0       	rjmp	.+34     	; 0x402e <si5351_set_freq+0x1c6>
    400c:	49 2d       	mov	r20, r9
    400e:	c3 01       	movw	r24, r6
    4010:	b2 01       	movw	r22, r4
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		si5351_write(3, ~enabledClocksMask);    /* only enable clock(s) in use */
    4012:	e4 dc       	rcall	.-1592   	; 0x39dc <set_pll>
    4014:	60 91 34 07 	lds	r22, 0x0734	; 0x800734 <enabledClocksMask>
    4018:	60 95       	com	r22
    401a:	83 e0       	ldi	r24, 0x03	; 3
    401c:	37 dd       	rcall	.-1426   	; 0x3a8c <si5351_write>

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	98 12       	cpse	r9, r24
    4022:	05 c0       	rjmp	.+10     	; 0x402e <si5351_set_freq+0x1c6>
		{
			si5351_write(clock_ctrl_addr, 0x4C);    /* power up only clock being set, leaving that clock configured as follows: */
    4024:	6c e4       	ldi	r22, 0x4C	; 76
    4026:	83 2d       	mov	r24, r3
    4028:	31 dd       	rcall	.-1438   	; 0x3a8c <si5351_write>
    402a:	80 e0       	ldi	r24, 0x00	; 0
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    402c:	2b c0       	rjmp	.+86     	; 0x4084 <si5351_set_freq+0x21c>
    402e:	8d 85       	ldd	r24, Y+13	; 0x0d
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    4030:	88 23       	and	r24, r24
    4032:	21 f0       	breq	.+8      	; 0x403c <si5351_set_freq+0x1d4>
    4034:	6c e6       	ldi	r22, 0x6C	; 108
			{
				si5351_write(clock_ctrl_addr, 0x6C);    /* power up only clock being set, leaving that clock configured as follows: */
    4036:	83 2d       	mov	r24, r3
    4038:	29 dd       	rcall	.-1454   	; 0x3a8c <si5351_write>
    403a:	03 c0       	rjmp	.+6      	; 0x4042 <si5351_set_freq+0x1da>
    403c:	6c e2       	ldi	r22, 0x2C	; 44
    403e:	83 2d       	mov	r24, r3
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
				si5351_write(clock_ctrl_addr, 0x2C);    /* power up only clock being set, leaving that clock configured as follows: */
    4040:	25 dd       	rcall	.-1462   	; 0x3a8c <si5351_write>
    4042:	41 14       	cp	r4, r1
    4044:	51 04       	cpc	r5, r1
    4046:	61 04       	cpc	r6, r1
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    4048:	71 04       	cpc	r7, r1
    404a:	61 f0       	breq	.+24     	; 0x4064 <si5351_set_freq+0x1fc>
    404c:	40 92 35 07 	sts	0x0735, r4	; 0x800735 <freqVCOB>
    4050:	50 92 36 07 	sts	0x0736, r5	; 0x800736 <freqVCOB+0x1>
			{
				freqVCOB = freq_VCO;
    4054:	60 92 37 07 	sts	0x0737, r6	; 0x800737 <freqVCOB+0x2>
    4058:	70 92 38 07 	sts	0x0738, r7	; 0x800738 <freqVCOB+0x3>
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	12 c0       	rjmp	.+36     	; 0x4084 <si5351_set_freq+0x21c>
    4060:	81 e0       	ldi	r24, 0x01	; 1
			}
		}

		return(FALSE);
    4062:	10 c0       	rjmp	.+32     	; 0x4084 <si5351_set_freq+0x21c>
    4064:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;

			default:
			{
				return(TRUE);
    4066:	0e c0       	rjmp	.+28     	; 0x4084 <si5351_set_freq+0x21c>
    4068:	80 91 35 07 	lds	r24, 0x0735	; 0x800735 <freqVCOB>
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    406c:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <freqVCOB+0x1>
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    4070:	a0 91 37 07 	lds	r26, 0x0737	; 0x800737 <freqVCOB+0x2>
    4074:	b0 91 38 07 	lds	r27, 0x0738	; 0x800738 <freqVCOB+0x3>
    4078:	89 2b       	or	r24, r25
    407a:	8a 2b       	or	r24, r26
    407c:	8b 2b       	or	r24, r27
    407e:	09 f4       	brne	.+2      	; 0x4082 <si5351_set_freq+0x21a>
    4080:	6d cf       	rjmp	.-294    	; 0x3f5c <si5351_set_freq+0xf4>
    4082:	99 cf       	rjmp	.-206    	; 0x3fb6 <si5351_set_freq+0x14e>
    4084:	2e 96       	adiw	r28, 0x0e	; 14
    4086:	0f b6       	in	r0, 0x3f	; 63
    4088:	f8 94       	cli
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
	}
    408a:	de bf       	out	0x3e, r29	; 62
    408c:	0f be       	out	0x3f, r0	; 63
    408e:	cd bf       	out	0x3d, r28	; 61
    4090:	df 91       	pop	r29
    4092:	cf 91       	pop	r28
    4094:	1f 91       	pop	r17
    4096:	0f 91       	pop	r16
    4098:	ff 90       	pop	r15
    409a:	ef 90       	pop	r14
    409c:	df 90       	pop	r13
    409e:	cf 90       	pop	r12
    40a0:	bf 90       	pop	r11
    40a2:	af 90       	pop	r10
    40a4:	9f 90       	pop	r9
    40a6:	8f 90       	pop	r8
    40a8:	7f 90       	pop	r7
    40aa:	6f 90       	pop	r6
    40ac:	5f 90       	pop	r5
    40ae:	4f 90       	pop	r4
    40b0:	3f 90       	pop	r3
    40b2:	08 95       	ret

000040b4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    40b4:	08 95       	ret

000040b6 <__mulsi3>:
    40b6:	db 01       	movw	r26, r22
    40b8:	8f 93       	push	r24
    40ba:	9f 93       	push	r25
    40bc:	58 d0       	rcall	.+176    	; 0x416e <__muluhisi3>
    40be:	bf 91       	pop	r27
    40c0:	af 91       	pop	r26
    40c2:	a2 9f       	mul	r26, r18
    40c4:	80 0d       	add	r24, r0
    40c6:	91 1d       	adc	r25, r1
    40c8:	a3 9f       	mul	r26, r19
    40ca:	90 0d       	add	r25, r0
    40cc:	b2 9f       	mul	r27, r18
    40ce:	90 0d       	add	r25, r0
    40d0:	11 24       	eor	r1, r1
    40d2:	08 95       	ret

000040d4 <__udivmodsi4>:
    40d4:	a1 e2       	ldi	r26, 0x21	; 33
    40d6:	1a 2e       	mov	r1, r26
    40d8:	aa 1b       	sub	r26, r26
    40da:	bb 1b       	sub	r27, r27
    40dc:	fd 01       	movw	r30, r26
    40de:	0d c0       	rjmp	.+26     	; 0x40fa <__udivmodsi4_ep>

000040e0 <__udivmodsi4_loop>:
    40e0:	aa 1f       	adc	r26, r26
    40e2:	bb 1f       	adc	r27, r27
    40e4:	ee 1f       	adc	r30, r30
    40e6:	ff 1f       	adc	r31, r31
    40e8:	a2 17       	cp	r26, r18
    40ea:	b3 07       	cpc	r27, r19
    40ec:	e4 07       	cpc	r30, r20
    40ee:	f5 07       	cpc	r31, r21
    40f0:	20 f0       	brcs	.+8      	; 0x40fa <__udivmodsi4_ep>
    40f2:	a2 1b       	sub	r26, r18
    40f4:	b3 0b       	sbc	r27, r19
    40f6:	e4 0b       	sbc	r30, r20
    40f8:	f5 0b       	sbc	r31, r21

000040fa <__udivmodsi4_ep>:
    40fa:	66 1f       	adc	r22, r22
    40fc:	77 1f       	adc	r23, r23
    40fe:	88 1f       	adc	r24, r24
    4100:	99 1f       	adc	r25, r25
    4102:	1a 94       	dec	r1
    4104:	69 f7       	brne	.-38     	; 0x40e0 <__udivmodsi4_loop>
    4106:	60 95       	com	r22
    4108:	70 95       	com	r23
    410a:	80 95       	com	r24
    410c:	90 95       	com	r25
    410e:	9b 01       	movw	r18, r22
    4110:	ac 01       	movw	r20, r24
    4112:	bd 01       	movw	r22, r26
    4114:	cf 01       	movw	r24, r30
    4116:	08 95       	ret

00004118 <__divmodsi4>:
    4118:	05 2e       	mov	r0, r21
    411a:	97 fb       	bst	r25, 7
    411c:	16 f4       	brtc	.+4      	; 0x4122 <__divmodsi4+0xa>
    411e:	00 94       	com	r0
    4120:	0f d0       	rcall	.+30     	; 0x4140 <__negsi2>
    4122:	57 fd       	sbrc	r21, 7
    4124:	05 d0       	rcall	.+10     	; 0x4130 <__divmodsi4_neg2>
    4126:	d6 df       	rcall	.-84     	; 0x40d4 <__udivmodsi4>
    4128:	07 fc       	sbrc	r0, 7
    412a:	02 d0       	rcall	.+4      	; 0x4130 <__divmodsi4_neg2>
    412c:	46 f4       	brtc	.+16     	; 0x413e <__divmodsi4_exit>
    412e:	08 c0       	rjmp	.+16     	; 0x4140 <__negsi2>

00004130 <__divmodsi4_neg2>:
    4130:	50 95       	com	r21
    4132:	40 95       	com	r20
    4134:	30 95       	com	r19
    4136:	21 95       	neg	r18
    4138:	3f 4f       	sbci	r19, 0xFF	; 255
    413a:	4f 4f       	sbci	r20, 0xFF	; 255
    413c:	5f 4f       	sbci	r21, 0xFF	; 255

0000413e <__divmodsi4_exit>:
    413e:	08 95       	ret

00004140 <__negsi2>:
    4140:	90 95       	com	r25
    4142:	80 95       	com	r24
    4144:	70 95       	com	r23
    4146:	61 95       	neg	r22
    4148:	7f 4f       	sbci	r23, 0xFF	; 255
    414a:	8f 4f       	sbci	r24, 0xFF	; 255
    414c:	9f 4f       	sbci	r25, 0xFF	; 255
    414e:	08 95       	ret

00004150 <__umulhisi3>:
    4150:	a2 9f       	mul	r26, r18
    4152:	b0 01       	movw	r22, r0
    4154:	b3 9f       	mul	r27, r19
    4156:	c0 01       	movw	r24, r0
    4158:	a3 9f       	mul	r26, r19
    415a:	70 0d       	add	r23, r0
    415c:	81 1d       	adc	r24, r1
    415e:	11 24       	eor	r1, r1
    4160:	91 1d       	adc	r25, r1
    4162:	b2 9f       	mul	r27, r18
    4164:	70 0d       	add	r23, r0
    4166:	81 1d       	adc	r24, r1
    4168:	11 24       	eor	r1, r1
    416a:	91 1d       	adc	r25, r1
    416c:	08 95       	ret

0000416e <__muluhisi3>:
    416e:	f0 df       	rcall	.-32     	; 0x4150 <__umulhisi3>
    4170:	a5 9f       	mul	r26, r21
    4172:	90 0d       	add	r25, r0
    4174:	b4 9f       	mul	r27, r20
    4176:	90 0d       	add	r25, r0
    4178:	a4 9f       	mul	r26, r20
    417a:	80 0d       	add	r24, r0
    417c:	91 1d       	adc	r25, r1
    417e:	11 24       	eor	r1, r1
    4180:	08 95       	ret

00004182 <__umulsidi3>:
    4182:	e8 94       	clt

00004184 <__umulsidi3_helper>:
    4184:	df 93       	push	r29
    4186:	cf 93       	push	r28
    4188:	fc 01       	movw	r30, r24
    418a:	db 01       	movw	r26, r22
    418c:	e1 df       	rcall	.-62     	; 0x4150 <__umulhisi3>
    418e:	7f 93       	push	r23
    4190:	6f 93       	push	r22
    4192:	e9 01       	movw	r28, r18
    4194:	9a 01       	movw	r18, r20
    4196:	ac 01       	movw	r20, r24
    4198:	bf 93       	push	r27
    419a:	af 93       	push	r26
    419c:	3f 93       	push	r19
    419e:	2f 93       	push	r18
    41a0:	df 01       	movw	r26, r30
    41a2:	d6 df       	rcall	.-84     	; 0x4150 <__umulhisi3>
    41a4:	26 f4       	brtc	.+8      	; 0x41ae <__umulsidi3_helper+0x2a>
    41a6:	6c 1b       	sub	r22, r28
    41a8:	7d 0b       	sbc	r23, r29
    41aa:	82 0b       	sbc	r24, r18
    41ac:	93 0b       	sbc	r25, r19
    41ae:	9e 01       	movw	r18, r28
    41b0:	eb 01       	movw	r28, r22
    41b2:	fc 01       	movw	r30, r24
    41b4:	2b d0       	rcall	.+86     	; 0x420c <__muldi3_6>
    41b6:	af 91       	pop	r26
    41b8:	bf 91       	pop	r27
    41ba:	2f 91       	pop	r18
    41bc:	3f 91       	pop	r19
    41be:	26 d0       	rcall	.+76     	; 0x420c <__muldi3_6>
    41c0:	be 01       	movw	r22, r28
    41c2:	cf 01       	movw	r24, r30
    41c4:	f9 01       	movw	r30, r18
    41c6:	2f 91       	pop	r18
    41c8:	3f 91       	pop	r19
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	08 95       	ret

000041d0 <__ashrdi3>:
    41d0:	97 fb       	bst	r25, 7
    41d2:	10 f8       	bld	r1, 0

000041d4 <__lshrdi3>:
    41d4:	16 94       	lsr	r1
    41d6:	00 08       	sbc	r0, r0
    41d8:	0f 93       	push	r16
    41da:	08 30       	cpi	r16, 0x08	; 8
    41dc:	98 f0       	brcs	.+38     	; 0x4204 <__lshrdi3+0x30>
    41de:	08 50       	subi	r16, 0x08	; 8
    41e0:	23 2f       	mov	r18, r19
    41e2:	34 2f       	mov	r19, r20
    41e4:	45 2f       	mov	r20, r21
    41e6:	56 2f       	mov	r21, r22
    41e8:	67 2f       	mov	r22, r23
    41ea:	78 2f       	mov	r23, r24
    41ec:	89 2f       	mov	r24, r25
    41ee:	90 2d       	mov	r25, r0
    41f0:	f4 cf       	rjmp	.-24     	; 0x41da <__lshrdi3+0x6>
    41f2:	05 94       	asr	r0
    41f4:	97 95       	ror	r25
    41f6:	87 95       	ror	r24
    41f8:	77 95       	ror	r23
    41fa:	67 95       	ror	r22
    41fc:	57 95       	ror	r21
    41fe:	47 95       	ror	r20
    4200:	37 95       	ror	r19
    4202:	27 95       	ror	r18
    4204:	0a 95       	dec	r16
    4206:	aa f7       	brpl	.-22     	; 0x41f2 <__lshrdi3+0x1e>
    4208:	0f 91       	pop	r16
    420a:	08 95       	ret

0000420c <__muldi3_6>:
    420c:	a1 df       	rcall	.-190    	; 0x4150 <__umulhisi3>
    420e:	46 0f       	add	r20, r22
    4210:	57 1f       	adc	r21, r23
    4212:	c8 1f       	adc	r28, r24
    4214:	d9 1f       	adc	r29, r25
    4216:	08 f4       	brcc	.+2      	; 0x421a <__muldi3_6+0xe>
    4218:	31 96       	adiw	r30, 0x01	; 1
    421a:	08 95       	ret

0000421c <atoi>:
    421c:	fc 01       	movw	r30, r24
    421e:	88 27       	eor	r24, r24
    4220:	99 27       	eor	r25, r25
    4222:	e8 94       	clt
    4224:	21 91       	ld	r18, Z+
    4226:	20 32       	cpi	r18, 0x20	; 32
    4228:	e9 f3       	breq	.-6      	; 0x4224 <atoi+0x8>
    422a:	29 30       	cpi	r18, 0x09	; 9
    422c:	10 f0       	brcs	.+4      	; 0x4232 <atoi+0x16>
    422e:	2e 30       	cpi	r18, 0x0E	; 14
    4230:	c8 f3       	brcs	.-14     	; 0x4224 <atoi+0x8>
    4232:	2b 32       	cpi	r18, 0x2B	; 43
    4234:	39 f0       	breq	.+14     	; 0x4244 <atoi+0x28>
    4236:	2d 32       	cpi	r18, 0x2D	; 45
    4238:	31 f4       	brne	.+12     	; 0x4246 <atoi+0x2a>
    423a:	68 94       	set
    423c:	03 c0       	rjmp	.+6      	; 0x4244 <atoi+0x28>
    423e:	55 d0       	rcall	.+170    	; 0x42ea <__mulhi_const_10>
    4240:	82 0f       	add	r24, r18
    4242:	91 1d       	adc	r25, r1
    4244:	21 91       	ld	r18, Z+
    4246:	20 53       	subi	r18, 0x30	; 48
    4248:	2a 30       	cpi	r18, 0x0A	; 10
    424a:	c8 f3       	brcs	.-14     	; 0x423e <atoi+0x22>
    424c:	1e f4       	brtc	.+6      	; 0x4254 <atoi+0x38>
    424e:	90 95       	com	r25
    4250:	81 95       	neg	r24
    4252:	9f 4f       	sbci	r25, 0xFF	; 255
    4254:	08 95       	ret

00004256 <atol>:
    4256:	1f 93       	push	r17
    4258:	fc 01       	movw	r30, r24
    425a:	99 27       	eor	r25, r25
    425c:	88 27       	eor	r24, r24
    425e:	bc 01       	movw	r22, r24
    4260:	e8 94       	clt
    4262:	11 91       	ld	r17, Z+
    4264:	10 32       	cpi	r17, 0x20	; 32
    4266:	e9 f3       	breq	.-6      	; 0x4262 <atol+0xc>
    4268:	19 30       	cpi	r17, 0x09	; 9
    426a:	10 f0       	brcs	.+4      	; 0x4270 <atol+0x1a>
    426c:	1e 30       	cpi	r17, 0x0E	; 14
    426e:	c8 f3       	brcs	.-14     	; 0x4262 <atol+0xc>
    4270:	1b 32       	cpi	r17, 0x2B	; 43
    4272:	49 f0       	breq	.+18     	; 0x4286 <atol+0x30>
    4274:	1d 32       	cpi	r17, 0x2D	; 45
    4276:	41 f4       	brne	.+16     	; 0x4288 <atol+0x32>
    4278:	68 94       	set
    427a:	05 c0       	rjmp	.+10     	; 0x4286 <atol+0x30>
    427c:	21 d0       	rcall	.+66     	; 0x42c0 <__mulsi_const_10>
    427e:	61 0f       	add	r22, r17
    4280:	71 1d       	adc	r23, r1
    4282:	81 1d       	adc	r24, r1
    4284:	91 1d       	adc	r25, r1
    4286:	11 91       	ld	r17, Z+
    4288:	10 53       	subi	r17, 0x30	; 48
    428a:	1a 30       	cpi	r17, 0x0A	; 10
    428c:	b8 f3       	brcs	.-18     	; 0x427c <atol+0x26>
    428e:	3e f4       	brtc	.+14     	; 0x429e <atol+0x48>
    4290:	90 95       	com	r25
    4292:	80 95       	com	r24
    4294:	70 95       	com	r23
    4296:	61 95       	neg	r22
    4298:	7f 4f       	sbci	r23, 0xFF	; 255
    429a:	8f 4f       	sbci	r24, 0xFF	; 255
    429c:	9f 4f       	sbci	r25, 0xFF	; 255
    429e:	1f 91       	pop	r17
    42a0:	08 95       	ret

000042a2 <toupper>:
    42a2:	91 11       	cpse	r25, r1
    42a4:	08 95       	ret
    42a6:	81 56       	subi	r24, 0x61	; 97
    42a8:	8a 51       	subi	r24, 0x1A	; 26
    42aa:	08 f4       	brcc	.+2      	; 0x42ae <toupper+0xc>
    42ac:	80 52       	subi	r24, 0x20	; 32
    42ae:	85 58       	subi	r24, 0x85	; 133
    42b0:	08 95       	ret

000042b2 <strcpy>:
    42b2:	fb 01       	movw	r30, r22
    42b4:	dc 01       	movw	r26, r24
    42b6:	01 90       	ld	r0, Z+
    42b8:	0d 92       	st	X+, r0
    42ba:	00 20       	and	r0, r0
    42bc:	e1 f7       	brne	.-8      	; 0x42b6 <strcpy+0x4>
    42be:	08 95       	ret

000042c0 <__mulsi_const_10>:
    42c0:	59 2f       	mov	r21, r25
    42c2:	48 2f       	mov	r20, r24
    42c4:	37 2f       	mov	r19, r23
    42c6:	26 2f       	mov	r18, r22
    42c8:	66 0f       	add	r22, r22
    42ca:	77 1f       	adc	r23, r23
    42cc:	88 1f       	adc	r24, r24
    42ce:	99 1f       	adc	r25, r25
    42d0:	66 0f       	add	r22, r22
    42d2:	77 1f       	adc	r23, r23
    42d4:	88 1f       	adc	r24, r24
    42d6:	99 1f       	adc	r25, r25
    42d8:	62 0f       	add	r22, r18
    42da:	73 1f       	adc	r23, r19
    42dc:	84 1f       	adc	r24, r20
    42de:	95 1f       	adc	r25, r21
    42e0:	66 0f       	add	r22, r22
    42e2:	77 1f       	adc	r23, r23
    42e4:	88 1f       	adc	r24, r24
    42e6:	99 1f       	adc	r25, r25
    42e8:	08 95       	ret

000042ea <__mulhi_const_10>:
    42ea:	7a e0       	ldi	r23, 0x0A	; 10
    42ec:	97 9f       	mul	r25, r23
    42ee:	90 2d       	mov	r25, r0
    42f0:	87 9f       	mul	r24, r23
    42f2:	80 2d       	mov	r24, r0
    42f4:	91 0d       	add	r25, r1
    42f6:	11 24       	eor	r1, r1
    42f8:	08 95       	ret

000042fa <sprintf>:
    42fa:	ae e0       	ldi	r26, 0x0E	; 14
    42fc:	b0 e0       	ldi	r27, 0x00	; 0
    42fe:	e2 e8       	ldi	r30, 0x82	; 130
    4300:	f1 e2       	ldi	r31, 0x21	; 33
    4302:	dd c2       	rjmp	.+1466   	; 0x48be <__prologue_saves__+0x1c>
    4304:	0d 89       	ldd	r16, Y+21	; 0x15
    4306:	1e 89       	ldd	r17, Y+22	; 0x16
    4308:	86 e0       	ldi	r24, 0x06	; 6
    430a:	8c 83       	std	Y+4, r24	; 0x04
    430c:	1a 83       	std	Y+2, r17	; 0x02
    430e:	09 83       	std	Y+1, r16	; 0x01
    4310:	8f ef       	ldi	r24, 0xFF	; 255
    4312:	9f e7       	ldi	r25, 0x7F	; 127
    4314:	9e 83       	std	Y+6, r25	; 0x06
    4316:	8d 83       	std	Y+5, r24	; 0x05
    4318:	ae 01       	movw	r20, r28
    431a:	47 5e       	subi	r20, 0xE7	; 231
    431c:	5f 4f       	sbci	r21, 0xFF	; 255
    431e:	6f 89       	ldd	r22, Y+23	; 0x17
    4320:	78 8d       	ldd	r23, Y+24	; 0x18
    4322:	ce 01       	movw	r24, r28
    4324:	01 96       	adiw	r24, 0x01	; 1
    4326:	08 d0       	rcall	.+16     	; 0x4338 <vfprintf>
    4328:	ef 81       	ldd	r30, Y+7	; 0x07
    432a:	f8 85       	ldd	r31, Y+8	; 0x08
    432c:	e0 0f       	add	r30, r16
    432e:	f1 1f       	adc	r31, r17
    4330:	10 82       	st	Z, r1
    4332:	2e 96       	adiw	r28, 0x0e	; 14
    4334:	e4 e0       	ldi	r30, 0x04	; 4
    4336:	df c2       	rjmp	.+1470   	; 0x48f6 <__epilogue_restores__+0x1c>

00004338 <vfprintf>:
    4338:	ab e0       	ldi	r26, 0x0B	; 11
    433a:	b0 e0       	ldi	r27, 0x00	; 0
    433c:	e1 ea       	ldi	r30, 0xA1	; 161
    433e:	f1 e2       	ldi	r31, 0x21	; 33
    4340:	b0 c2       	rjmp	.+1376   	; 0x48a2 <__prologue_saves__>
    4342:	6c 01       	movw	r12, r24
    4344:	7b 01       	movw	r14, r22
    4346:	8a 01       	movw	r16, r20
    4348:	fc 01       	movw	r30, r24
    434a:	17 82       	std	Z+7, r1	; 0x07
    434c:	16 82       	std	Z+6, r1	; 0x06
    434e:	83 81       	ldd	r24, Z+3	; 0x03
    4350:	81 ff       	sbrs	r24, 1
    4352:	bf c1       	rjmp	.+894    	; 0x46d2 <vfprintf+0x39a>
    4354:	ce 01       	movw	r24, r28
    4356:	01 96       	adiw	r24, 0x01	; 1
    4358:	3c 01       	movw	r6, r24
    435a:	f6 01       	movw	r30, r12
    435c:	93 81       	ldd	r25, Z+3	; 0x03
    435e:	f7 01       	movw	r30, r14
    4360:	93 fd       	sbrc	r25, 3
    4362:	85 91       	lpm	r24, Z+
    4364:	93 ff       	sbrs	r25, 3
    4366:	81 91       	ld	r24, Z+
    4368:	7f 01       	movw	r14, r30
    436a:	88 23       	and	r24, r24
    436c:	09 f4       	brne	.+2      	; 0x4370 <vfprintf+0x38>
    436e:	ad c1       	rjmp	.+858    	; 0x46ca <vfprintf+0x392>
    4370:	85 32       	cpi	r24, 0x25	; 37
    4372:	39 f4       	brne	.+14     	; 0x4382 <vfprintf+0x4a>
    4374:	93 fd       	sbrc	r25, 3
    4376:	85 91       	lpm	r24, Z+
    4378:	93 ff       	sbrs	r25, 3
    437a:	81 91       	ld	r24, Z+
    437c:	7f 01       	movw	r14, r30
    437e:	85 32       	cpi	r24, 0x25	; 37
    4380:	21 f4       	brne	.+8      	; 0x438a <vfprintf+0x52>
    4382:	b6 01       	movw	r22, r12
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	c0 d1       	rcall	.+896    	; 0x4708 <fputc>
    4388:	e8 cf       	rjmp	.-48     	; 0x435a <vfprintf+0x22>
    438a:	91 2c       	mov	r9, r1
    438c:	21 2c       	mov	r2, r1
    438e:	31 2c       	mov	r3, r1
    4390:	ff e1       	ldi	r31, 0x1F	; 31
    4392:	f3 15       	cp	r31, r3
    4394:	d8 f0       	brcs	.+54     	; 0x43cc <vfprintf+0x94>
    4396:	8b 32       	cpi	r24, 0x2B	; 43
    4398:	79 f0       	breq	.+30     	; 0x43b8 <vfprintf+0x80>
    439a:	38 f4       	brcc	.+14     	; 0x43aa <vfprintf+0x72>
    439c:	80 32       	cpi	r24, 0x20	; 32
    439e:	79 f0       	breq	.+30     	; 0x43be <vfprintf+0x86>
    43a0:	83 32       	cpi	r24, 0x23	; 35
    43a2:	a1 f4       	brne	.+40     	; 0x43cc <vfprintf+0x94>
    43a4:	23 2d       	mov	r18, r3
    43a6:	20 61       	ori	r18, 0x10	; 16
    43a8:	1d c0       	rjmp	.+58     	; 0x43e4 <vfprintf+0xac>
    43aa:	8d 32       	cpi	r24, 0x2D	; 45
    43ac:	61 f0       	breq	.+24     	; 0x43c6 <vfprintf+0x8e>
    43ae:	80 33       	cpi	r24, 0x30	; 48
    43b0:	69 f4       	brne	.+26     	; 0x43cc <vfprintf+0x94>
    43b2:	23 2d       	mov	r18, r3
    43b4:	21 60       	ori	r18, 0x01	; 1
    43b6:	16 c0       	rjmp	.+44     	; 0x43e4 <vfprintf+0xac>
    43b8:	83 2d       	mov	r24, r3
    43ba:	82 60       	ori	r24, 0x02	; 2
    43bc:	38 2e       	mov	r3, r24
    43be:	e3 2d       	mov	r30, r3
    43c0:	e4 60       	ori	r30, 0x04	; 4
    43c2:	3e 2e       	mov	r3, r30
    43c4:	2a c0       	rjmp	.+84     	; 0x441a <vfprintf+0xe2>
    43c6:	f3 2d       	mov	r31, r3
    43c8:	f8 60       	ori	r31, 0x08	; 8
    43ca:	1d c0       	rjmp	.+58     	; 0x4406 <vfprintf+0xce>
    43cc:	37 fc       	sbrc	r3, 7
    43ce:	2d c0       	rjmp	.+90     	; 0x442a <vfprintf+0xf2>
    43d0:	20 ed       	ldi	r18, 0xD0	; 208
    43d2:	28 0f       	add	r18, r24
    43d4:	2a 30       	cpi	r18, 0x0A	; 10
    43d6:	40 f0       	brcs	.+16     	; 0x43e8 <vfprintf+0xb0>
    43d8:	8e 32       	cpi	r24, 0x2E	; 46
    43da:	b9 f4       	brne	.+46     	; 0x440a <vfprintf+0xd2>
    43dc:	36 fc       	sbrc	r3, 6
    43de:	75 c1       	rjmp	.+746    	; 0x46ca <vfprintf+0x392>
    43e0:	23 2d       	mov	r18, r3
    43e2:	20 64       	ori	r18, 0x40	; 64
    43e4:	32 2e       	mov	r3, r18
    43e6:	19 c0       	rjmp	.+50     	; 0x441a <vfprintf+0xe2>
    43e8:	36 fe       	sbrs	r3, 6
    43ea:	06 c0       	rjmp	.+12     	; 0x43f8 <vfprintf+0xc0>
    43ec:	8a e0       	ldi	r24, 0x0A	; 10
    43ee:	98 9e       	mul	r9, r24
    43f0:	20 0d       	add	r18, r0
    43f2:	11 24       	eor	r1, r1
    43f4:	92 2e       	mov	r9, r18
    43f6:	11 c0       	rjmp	.+34     	; 0x441a <vfprintf+0xe2>
    43f8:	ea e0       	ldi	r30, 0x0A	; 10
    43fa:	2e 9e       	mul	r2, r30
    43fc:	20 0d       	add	r18, r0
    43fe:	11 24       	eor	r1, r1
    4400:	22 2e       	mov	r2, r18
    4402:	f3 2d       	mov	r31, r3
    4404:	f0 62       	ori	r31, 0x20	; 32
    4406:	3f 2e       	mov	r3, r31
    4408:	08 c0       	rjmp	.+16     	; 0x441a <vfprintf+0xe2>
    440a:	8c 36       	cpi	r24, 0x6C	; 108
    440c:	21 f4       	brne	.+8      	; 0x4416 <vfprintf+0xde>
    440e:	83 2d       	mov	r24, r3
    4410:	80 68       	ori	r24, 0x80	; 128
    4412:	38 2e       	mov	r3, r24
    4414:	02 c0       	rjmp	.+4      	; 0x441a <vfprintf+0xe2>
    4416:	88 36       	cpi	r24, 0x68	; 104
    4418:	41 f4       	brne	.+16     	; 0x442a <vfprintf+0xf2>
    441a:	f7 01       	movw	r30, r14
    441c:	93 fd       	sbrc	r25, 3
    441e:	85 91       	lpm	r24, Z+
    4420:	93 ff       	sbrs	r25, 3
    4422:	81 91       	ld	r24, Z+
    4424:	7f 01       	movw	r14, r30
    4426:	81 11       	cpse	r24, r1
    4428:	b3 cf       	rjmp	.-154    	; 0x4390 <vfprintf+0x58>
    442a:	98 2f       	mov	r25, r24
    442c:	9f 7d       	andi	r25, 0xDF	; 223
    442e:	95 54       	subi	r25, 0x45	; 69
    4430:	93 30       	cpi	r25, 0x03	; 3
    4432:	28 f4       	brcc	.+10     	; 0x443e <vfprintf+0x106>
    4434:	0c 5f       	subi	r16, 0xFC	; 252
    4436:	1f 4f       	sbci	r17, 0xFF	; 255
    4438:	9f e3       	ldi	r25, 0x3F	; 63
    443a:	99 83       	std	Y+1, r25	; 0x01
    443c:	0d c0       	rjmp	.+26     	; 0x4458 <vfprintf+0x120>
    443e:	83 36       	cpi	r24, 0x63	; 99
    4440:	31 f0       	breq	.+12     	; 0x444e <vfprintf+0x116>
    4442:	83 37       	cpi	r24, 0x73	; 115
    4444:	71 f0       	breq	.+28     	; 0x4462 <vfprintf+0x12a>
    4446:	83 35       	cpi	r24, 0x53	; 83
    4448:	09 f0       	breq	.+2      	; 0x444c <vfprintf+0x114>
    444a:	55 c0       	rjmp	.+170    	; 0x44f6 <vfprintf+0x1be>
    444c:	20 c0       	rjmp	.+64     	; 0x448e <vfprintf+0x156>
    444e:	f8 01       	movw	r30, r16
    4450:	80 81       	ld	r24, Z
    4452:	89 83       	std	Y+1, r24	; 0x01
    4454:	0e 5f       	subi	r16, 0xFE	; 254
    4456:	1f 4f       	sbci	r17, 0xFF	; 255
    4458:	88 24       	eor	r8, r8
    445a:	83 94       	inc	r8
    445c:	91 2c       	mov	r9, r1
    445e:	53 01       	movw	r10, r6
    4460:	12 c0       	rjmp	.+36     	; 0x4486 <vfprintf+0x14e>
    4462:	28 01       	movw	r4, r16
    4464:	f2 e0       	ldi	r31, 0x02	; 2
    4466:	4f 0e       	add	r4, r31
    4468:	51 1c       	adc	r5, r1
    446a:	f8 01       	movw	r30, r16
    446c:	a0 80       	ld	r10, Z
    446e:	b1 80       	ldd	r11, Z+1	; 0x01
    4470:	36 fe       	sbrs	r3, 6
    4472:	03 c0       	rjmp	.+6      	; 0x447a <vfprintf+0x142>
    4474:	69 2d       	mov	r22, r9
    4476:	70 e0       	ldi	r23, 0x00	; 0
    4478:	02 c0       	rjmp	.+4      	; 0x447e <vfprintf+0x146>
    447a:	6f ef       	ldi	r22, 0xFF	; 255
    447c:	7f ef       	ldi	r23, 0xFF	; 255
    447e:	c5 01       	movw	r24, r10
    4480:	38 d1       	rcall	.+624    	; 0x46f2 <strnlen>
    4482:	4c 01       	movw	r8, r24
    4484:	82 01       	movw	r16, r4
    4486:	f3 2d       	mov	r31, r3
    4488:	ff 77       	andi	r31, 0x7F	; 127
    448a:	3f 2e       	mov	r3, r31
    448c:	15 c0       	rjmp	.+42     	; 0x44b8 <vfprintf+0x180>
    448e:	28 01       	movw	r4, r16
    4490:	22 e0       	ldi	r18, 0x02	; 2
    4492:	42 0e       	add	r4, r18
    4494:	51 1c       	adc	r5, r1
    4496:	f8 01       	movw	r30, r16
    4498:	a0 80       	ld	r10, Z
    449a:	b1 80       	ldd	r11, Z+1	; 0x01
    449c:	36 fe       	sbrs	r3, 6
    449e:	03 c0       	rjmp	.+6      	; 0x44a6 <vfprintf+0x16e>
    44a0:	69 2d       	mov	r22, r9
    44a2:	70 e0       	ldi	r23, 0x00	; 0
    44a4:	02 c0       	rjmp	.+4      	; 0x44aa <vfprintf+0x172>
    44a6:	6f ef       	ldi	r22, 0xFF	; 255
    44a8:	7f ef       	ldi	r23, 0xFF	; 255
    44aa:	c5 01       	movw	r24, r10
    44ac:	17 d1       	rcall	.+558    	; 0x46dc <strnlen_P>
    44ae:	4c 01       	movw	r8, r24
    44b0:	f3 2d       	mov	r31, r3
    44b2:	f0 68       	ori	r31, 0x80	; 128
    44b4:	3f 2e       	mov	r3, r31
    44b6:	82 01       	movw	r16, r4
    44b8:	33 fc       	sbrc	r3, 3
    44ba:	19 c0       	rjmp	.+50     	; 0x44ee <vfprintf+0x1b6>
    44bc:	82 2d       	mov	r24, r2
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	88 16       	cp	r8, r24
    44c2:	99 06       	cpc	r9, r25
    44c4:	a0 f4       	brcc	.+40     	; 0x44ee <vfprintf+0x1b6>
    44c6:	b6 01       	movw	r22, r12
    44c8:	80 e2       	ldi	r24, 0x20	; 32
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	1d d1       	rcall	.+570    	; 0x4708 <fputc>
    44ce:	2a 94       	dec	r2
    44d0:	f5 cf       	rjmp	.-22     	; 0x44bc <vfprintf+0x184>
    44d2:	f5 01       	movw	r30, r10
    44d4:	37 fc       	sbrc	r3, 7
    44d6:	85 91       	lpm	r24, Z+
    44d8:	37 fe       	sbrs	r3, 7
    44da:	81 91       	ld	r24, Z+
    44dc:	5f 01       	movw	r10, r30
    44de:	b6 01       	movw	r22, r12
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	12 d1       	rcall	.+548    	; 0x4708 <fputc>
    44e4:	21 10       	cpse	r2, r1
    44e6:	2a 94       	dec	r2
    44e8:	21 e0       	ldi	r18, 0x01	; 1
    44ea:	82 1a       	sub	r8, r18
    44ec:	91 08       	sbc	r9, r1
    44ee:	81 14       	cp	r8, r1
    44f0:	91 04       	cpc	r9, r1
    44f2:	79 f7       	brne	.-34     	; 0x44d2 <vfprintf+0x19a>
    44f4:	e1 c0       	rjmp	.+450    	; 0x46b8 <vfprintf+0x380>
    44f6:	84 36       	cpi	r24, 0x64	; 100
    44f8:	11 f0       	breq	.+4      	; 0x44fe <vfprintf+0x1c6>
    44fa:	89 36       	cpi	r24, 0x69	; 105
    44fc:	39 f5       	brne	.+78     	; 0x454c <vfprintf+0x214>
    44fe:	f8 01       	movw	r30, r16
    4500:	37 fe       	sbrs	r3, 7
    4502:	07 c0       	rjmp	.+14     	; 0x4512 <vfprintf+0x1da>
    4504:	60 81       	ld	r22, Z
    4506:	71 81       	ldd	r23, Z+1	; 0x01
    4508:	82 81       	ldd	r24, Z+2	; 0x02
    450a:	93 81       	ldd	r25, Z+3	; 0x03
    450c:	0c 5f       	subi	r16, 0xFC	; 252
    450e:	1f 4f       	sbci	r17, 0xFF	; 255
    4510:	08 c0       	rjmp	.+16     	; 0x4522 <vfprintf+0x1ea>
    4512:	60 81       	ld	r22, Z
    4514:	71 81       	ldd	r23, Z+1	; 0x01
    4516:	07 2e       	mov	r0, r23
    4518:	00 0c       	add	r0, r0
    451a:	88 0b       	sbc	r24, r24
    451c:	99 0b       	sbc	r25, r25
    451e:	0e 5f       	subi	r16, 0xFE	; 254
    4520:	1f 4f       	sbci	r17, 0xFF	; 255
    4522:	f3 2d       	mov	r31, r3
    4524:	ff 76       	andi	r31, 0x6F	; 111
    4526:	3f 2e       	mov	r3, r31
    4528:	97 ff       	sbrs	r25, 7
    452a:	09 c0       	rjmp	.+18     	; 0x453e <vfprintf+0x206>
    452c:	90 95       	com	r25
    452e:	80 95       	com	r24
    4530:	70 95       	com	r23
    4532:	61 95       	neg	r22
    4534:	7f 4f       	sbci	r23, 0xFF	; 255
    4536:	8f 4f       	sbci	r24, 0xFF	; 255
    4538:	9f 4f       	sbci	r25, 0xFF	; 255
    453a:	f0 68       	ori	r31, 0x80	; 128
    453c:	3f 2e       	mov	r3, r31
    453e:	2a e0       	ldi	r18, 0x0A	; 10
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	a3 01       	movw	r20, r6
    4544:	1d d1       	rcall	.+570    	; 0x4780 <__ultoa_invert>
    4546:	88 2e       	mov	r8, r24
    4548:	86 18       	sub	r8, r6
    454a:	44 c0       	rjmp	.+136    	; 0x45d4 <vfprintf+0x29c>
    454c:	85 37       	cpi	r24, 0x75	; 117
    454e:	31 f4       	brne	.+12     	; 0x455c <vfprintf+0x224>
    4550:	23 2d       	mov	r18, r3
    4552:	2f 7e       	andi	r18, 0xEF	; 239
    4554:	b2 2e       	mov	r11, r18
    4556:	2a e0       	ldi	r18, 0x0A	; 10
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	25 c0       	rjmp	.+74     	; 0x45a6 <vfprintf+0x26e>
    455c:	93 2d       	mov	r25, r3
    455e:	99 7f       	andi	r25, 0xF9	; 249
    4560:	b9 2e       	mov	r11, r25
    4562:	8f 36       	cpi	r24, 0x6F	; 111
    4564:	c1 f0       	breq	.+48     	; 0x4596 <vfprintf+0x25e>
    4566:	18 f4       	brcc	.+6      	; 0x456e <vfprintf+0x236>
    4568:	88 35       	cpi	r24, 0x58	; 88
    456a:	79 f0       	breq	.+30     	; 0x458a <vfprintf+0x252>
    456c:	ae c0       	rjmp	.+348    	; 0x46ca <vfprintf+0x392>
    456e:	80 37       	cpi	r24, 0x70	; 112
    4570:	19 f0       	breq	.+6      	; 0x4578 <vfprintf+0x240>
    4572:	88 37       	cpi	r24, 0x78	; 120
    4574:	21 f0       	breq	.+8      	; 0x457e <vfprintf+0x246>
    4576:	a9 c0       	rjmp	.+338    	; 0x46ca <vfprintf+0x392>
    4578:	e9 2f       	mov	r30, r25
    457a:	e0 61       	ori	r30, 0x10	; 16
    457c:	be 2e       	mov	r11, r30
    457e:	b4 fe       	sbrs	r11, 4
    4580:	0d c0       	rjmp	.+26     	; 0x459c <vfprintf+0x264>
    4582:	fb 2d       	mov	r31, r11
    4584:	f4 60       	ori	r31, 0x04	; 4
    4586:	bf 2e       	mov	r11, r31
    4588:	09 c0       	rjmp	.+18     	; 0x459c <vfprintf+0x264>
    458a:	34 fe       	sbrs	r3, 4
    458c:	0a c0       	rjmp	.+20     	; 0x45a2 <vfprintf+0x26a>
    458e:	29 2f       	mov	r18, r25
    4590:	26 60       	ori	r18, 0x06	; 6
    4592:	b2 2e       	mov	r11, r18
    4594:	06 c0       	rjmp	.+12     	; 0x45a2 <vfprintf+0x26a>
    4596:	28 e0       	ldi	r18, 0x08	; 8
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	05 c0       	rjmp	.+10     	; 0x45a6 <vfprintf+0x26e>
    459c:	20 e1       	ldi	r18, 0x10	; 16
    459e:	30 e0       	ldi	r19, 0x00	; 0
    45a0:	02 c0       	rjmp	.+4      	; 0x45a6 <vfprintf+0x26e>
    45a2:	20 e1       	ldi	r18, 0x10	; 16
    45a4:	32 e0       	ldi	r19, 0x02	; 2
    45a6:	f8 01       	movw	r30, r16
    45a8:	b7 fe       	sbrs	r11, 7
    45aa:	07 c0       	rjmp	.+14     	; 0x45ba <vfprintf+0x282>
    45ac:	60 81       	ld	r22, Z
    45ae:	71 81       	ldd	r23, Z+1	; 0x01
    45b0:	82 81       	ldd	r24, Z+2	; 0x02
    45b2:	93 81       	ldd	r25, Z+3	; 0x03
    45b4:	0c 5f       	subi	r16, 0xFC	; 252
    45b6:	1f 4f       	sbci	r17, 0xFF	; 255
    45b8:	06 c0       	rjmp	.+12     	; 0x45c6 <vfprintf+0x28e>
    45ba:	60 81       	ld	r22, Z
    45bc:	71 81       	ldd	r23, Z+1	; 0x01
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	0e 5f       	subi	r16, 0xFE	; 254
    45c4:	1f 4f       	sbci	r17, 0xFF	; 255
    45c6:	a3 01       	movw	r20, r6
    45c8:	db d0       	rcall	.+438    	; 0x4780 <__ultoa_invert>
    45ca:	88 2e       	mov	r8, r24
    45cc:	86 18       	sub	r8, r6
    45ce:	fb 2d       	mov	r31, r11
    45d0:	ff 77       	andi	r31, 0x7F	; 127
    45d2:	3f 2e       	mov	r3, r31
    45d4:	36 fe       	sbrs	r3, 6
    45d6:	0d c0       	rjmp	.+26     	; 0x45f2 <vfprintf+0x2ba>
    45d8:	23 2d       	mov	r18, r3
    45da:	2e 7f       	andi	r18, 0xFE	; 254
    45dc:	a2 2e       	mov	r10, r18
    45de:	89 14       	cp	r8, r9
    45e0:	58 f4       	brcc	.+22     	; 0x45f8 <vfprintf+0x2c0>
    45e2:	34 fe       	sbrs	r3, 4
    45e4:	0b c0       	rjmp	.+22     	; 0x45fc <vfprintf+0x2c4>
    45e6:	32 fc       	sbrc	r3, 2
    45e8:	09 c0       	rjmp	.+18     	; 0x45fc <vfprintf+0x2c4>
    45ea:	83 2d       	mov	r24, r3
    45ec:	8e 7e       	andi	r24, 0xEE	; 238
    45ee:	a8 2e       	mov	r10, r24
    45f0:	05 c0       	rjmp	.+10     	; 0x45fc <vfprintf+0x2c4>
    45f2:	b8 2c       	mov	r11, r8
    45f4:	a3 2c       	mov	r10, r3
    45f6:	03 c0       	rjmp	.+6      	; 0x45fe <vfprintf+0x2c6>
    45f8:	b8 2c       	mov	r11, r8
    45fa:	01 c0       	rjmp	.+2      	; 0x45fe <vfprintf+0x2c6>
    45fc:	b9 2c       	mov	r11, r9
    45fe:	a4 fe       	sbrs	r10, 4
    4600:	0f c0       	rjmp	.+30     	; 0x4620 <vfprintf+0x2e8>
    4602:	fe 01       	movw	r30, r28
    4604:	e8 0d       	add	r30, r8
    4606:	f1 1d       	adc	r31, r1
    4608:	80 81       	ld	r24, Z
    460a:	80 33       	cpi	r24, 0x30	; 48
    460c:	21 f4       	brne	.+8      	; 0x4616 <vfprintf+0x2de>
    460e:	9a 2d       	mov	r25, r10
    4610:	99 7e       	andi	r25, 0xE9	; 233
    4612:	a9 2e       	mov	r10, r25
    4614:	09 c0       	rjmp	.+18     	; 0x4628 <vfprintf+0x2f0>
    4616:	a2 fe       	sbrs	r10, 2
    4618:	06 c0       	rjmp	.+12     	; 0x4626 <vfprintf+0x2ee>
    461a:	b3 94       	inc	r11
    461c:	b3 94       	inc	r11
    461e:	04 c0       	rjmp	.+8      	; 0x4628 <vfprintf+0x2f0>
    4620:	8a 2d       	mov	r24, r10
    4622:	86 78       	andi	r24, 0x86	; 134
    4624:	09 f0       	breq	.+2      	; 0x4628 <vfprintf+0x2f0>
    4626:	b3 94       	inc	r11
    4628:	a3 fc       	sbrc	r10, 3
    462a:	10 c0       	rjmp	.+32     	; 0x464c <vfprintf+0x314>
    462c:	a0 fe       	sbrs	r10, 0
    462e:	06 c0       	rjmp	.+12     	; 0x463c <vfprintf+0x304>
    4630:	b2 14       	cp	r11, r2
    4632:	80 f4       	brcc	.+32     	; 0x4654 <vfprintf+0x31c>
    4634:	28 0c       	add	r2, r8
    4636:	92 2c       	mov	r9, r2
    4638:	9b 18       	sub	r9, r11
    463a:	0d c0       	rjmp	.+26     	; 0x4656 <vfprintf+0x31e>
    463c:	b2 14       	cp	r11, r2
    463e:	58 f4       	brcc	.+22     	; 0x4656 <vfprintf+0x31e>
    4640:	b6 01       	movw	r22, r12
    4642:	80 e2       	ldi	r24, 0x20	; 32
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	60 d0       	rcall	.+192    	; 0x4708 <fputc>
    4648:	b3 94       	inc	r11
    464a:	f8 cf       	rjmp	.-16     	; 0x463c <vfprintf+0x304>
    464c:	b2 14       	cp	r11, r2
    464e:	18 f4       	brcc	.+6      	; 0x4656 <vfprintf+0x31e>
    4650:	2b 18       	sub	r2, r11
    4652:	02 c0       	rjmp	.+4      	; 0x4658 <vfprintf+0x320>
    4654:	98 2c       	mov	r9, r8
    4656:	21 2c       	mov	r2, r1
    4658:	a4 fe       	sbrs	r10, 4
    465a:	0f c0       	rjmp	.+30     	; 0x467a <vfprintf+0x342>
    465c:	b6 01       	movw	r22, r12
    465e:	80 e3       	ldi	r24, 0x30	; 48
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	52 d0       	rcall	.+164    	; 0x4708 <fputc>
    4664:	a2 fe       	sbrs	r10, 2
    4666:	16 c0       	rjmp	.+44     	; 0x4694 <vfprintf+0x35c>
    4668:	a1 fc       	sbrc	r10, 1
    466a:	03 c0       	rjmp	.+6      	; 0x4672 <vfprintf+0x33a>
    466c:	88 e7       	ldi	r24, 0x78	; 120
    466e:	90 e0       	ldi	r25, 0x00	; 0
    4670:	02 c0       	rjmp	.+4      	; 0x4676 <vfprintf+0x33e>
    4672:	88 e5       	ldi	r24, 0x58	; 88
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	b6 01       	movw	r22, r12
    4678:	0c c0       	rjmp	.+24     	; 0x4692 <vfprintf+0x35a>
    467a:	8a 2d       	mov	r24, r10
    467c:	86 78       	andi	r24, 0x86	; 134
    467e:	51 f0       	breq	.+20     	; 0x4694 <vfprintf+0x35c>
    4680:	a1 fe       	sbrs	r10, 1
    4682:	02 c0       	rjmp	.+4      	; 0x4688 <vfprintf+0x350>
    4684:	8b e2       	ldi	r24, 0x2B	; 43
    4686:	01 c0       	rjmp	.+2      	; 0x468a <vfprintf+0x352>
    4688:	80 e2       	ldi	r24, 0x20	; 32
    468a:	a7 fc       	sbrc	r10, 7
    468c:	8d e2       	ldi	r24, 0x2D	; 45
    468e:	b6 01       	movw	r22, r12
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	3a d0       	rcall	.+116    	; 0x4708 <fputc>
    4694:	89 14       	cp	r8, r9
    4696:	30 f4       	brcc	.+12     	; 0x46a4 <vfprintf+0x36c>
    4698:	b6 01       	movw	r22, r12
    469a:	80 e3       	ldi	r24, 0x30	; 48
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	34 d0       	rcall	.+104    	; 0x4708 <fputc>
    46a0:	9a 94       	dec	r9
    46a2:	f8 cf       	rjmp	.-16     	; 0x4694 <vfprintf+0x35c>
    46a4:	8a 94       	dec	r8
    46a6:	f3 01       	movw	r30, r6
    46a8:	e8 0d       	add	r30, r8
    46aa:	f1 1d       	adc	r31, r1
    46ac:	80 81       	ld	r24, Z
    46ae:	b6 01       	movw	r22, r12
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	2a d0       	rcall	.+84     	; 0x4708 <fputc>
    46b4:	81 10       	cpse	r8, r1
    46b6:	f6 cf       	rjmp	.-20     	; 0x46a4 <vfprintf+0x36c>
    46b8:	22 20       	and	r2, r2
    46ba:	09 f4       	brne	.+2      	; 0x46be <vfprintf+0x386>
    46bc:	4e ce       	rjmp	.-868    	; 0x435a <vfprintf+0x22>
    46be:	b6 01       	movw	r22, r12
    46c0:	80 e2       	ldi	r24, 0x20	; 32
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	21 d0       	rcall	.+66     	; 0x4708 <fputc>
    46c6:	2a 94       	dec	r2
    46c8:	f7 cf       	rjmp	.-18     	; 0x46b8 <vfprintf+0x380>
    46ca:	f6 01       	movw	r30, r12
    46cc:	86 81       	ldd	r24, Z+6	; 0x06
    46ce:	97 81       	ldd	r25, Z+7	; 0x07
    46d0:	02 c0       	rjmp	.+4      	; 0x46d6 <vfprintf+0x39e>
    46d2:	8f ef       	ldi	r24, 0xFF	; 255
    46d4:	9f ef       	ldi	r25, 0xFF	; 255
    46d6:	2b 96       	adiw	r28, 0x0b	; 11
    46d8:	e2 e1       	ldi	r30, 0x12	; 18
    46da:	ff c0       	rjmp	.+510    	; 0x48da <__epilogue_restores__>

000046dc <strnlen_P>:
    46dc:	fc 01       	movw	r30, r24
    46de:	05 90       	lpm	r0, Z+
    46e0:	61 50       	subi	r22, 0x01	; 1
    46e2:	70 40       	sbci	r23, 0x00	; 0
    46e4:	01 10       	cpse	r0, r1
    46e6:	d8 f7       	brcc	.-10     	; 0x46de <strnlen_P+0x2>
    46e8:	80 95       	com	r24
    46ea:	90 95       	com	r25
    46ec:	8e 0f       	add	r24, r30
    46ee:	9f 1f       	adc	r25, r31
    46f0:	08 95       	ret

000046f2 <strnlen>:
    46f2:	fc 01       	movw	r30, r24
    46f4:	61 50       	subi	r22, 0x01	; 1
    46f6:	70 40       	sbci	r23, 0x00	; 0
    46f8:	01 90       	ld	r0, Z+
    46fa:	01 10       	cpse	r0, r1
    46fc:	d8 f7       	brcc	.-10     	; 0x46f4 <strnlen+0x2>
    46fe:	80 95       	com	r24
    4700:	90 95       	com	r25
    4702:	8e 0f       	add	r24, r30
    4704:	9f 1f       	adc	r25, r31
    4706:	08 95       	ret

00004708 <fputc>:
    4708:	0f 93       	push	r16
    470a:	1f 93       	push	r17
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	fb 01       	movw	r30, r22
    4712:	23 81       	ldd	r18, Z+3	; 0x03
    4714:	21 fd       	sbrc	r18, 1
    4716:	03 c0       	rjmp	.+6      	; 0x471e <fputc+0x16>
    4718:	8f ef       	ldi	r24, 0xFF	; 255
    471a:	9f ef       	ldi	r25, 0xFF	; 255
    471c:	2c c0       	rjmp	.+88     	; 0x4776 <fputc+0x6e>
    471e:	22 ff       	sbrs	r18, 2
    4720:	16 c0       	rjmp	.+44     	; 0x474e <fputc+0x46>
    4722:	46 81       	ldd	r20, Z+6	; 0x06
    4724:	57 81       	ldd	r21, Z+7	; 0x07
    4726:	24 81       	ldd	r18, Z+4	; 0x04
    4728:	35 81       	ldd	r19, Z+5	; 0x05
    472a:	42 17       	cp	r20, r18
    472c:	53 07       	cpc	r21, r19
    472e:	44 f4       	brge	.+16     	; 0x4740 <fputc+0x38>
    4730:	a0 81       	ld	r26, Z
    4732:	b1 81       	ldd	r27, Z+1	; 0x01
    4734:	9d 01       	movw	r18, r26
    4736:	2f 5f       	subi	r18, 0xFF	; 255
    4738:	3f 4f       	sbci	r19, 0xFF	; 255
    473a:	31 83       	std	Z+1, r19	; 0x01
    473c:	20 83       	st	Z, r18
    473e:	8c 93       	st	X, r24
    4740:	26 81       	ldd	r18, Z+6	; 0x06
    4742:	37 81       	ldd	r19, Z+7	; 0x07
    4744:	2f 5f       	subi	r18, 0xFF	; 255
    4746:	3f 4f       	sbci	r19, 0xFF	; 255
    4748:	37 83       	std	Z+7, r19	; 0x07
    474a:	26 83       	std	Z+6, r18	; 0x06
    474c:	14 c0       	rjmp	.+40     	; 0x4776 <fputc+0x6e>
    474e:	8b 01       	movw	r16, r22
    4750:	ec 01       	movw	r28, r24
    4752:	fb 01       	movw	r30, r22
    4754:	00 84       	ldd	r0, Z+8	; 0x08
    4756:	f1 85       	ldd	r31, Z+9	; 0x09
    4758:	e0 2d       	mov	r30, r0
    475a:	09 95       	icall
    475c:	89 2b       	or	r24, r25
    475e:	e1 f6       	brne	.-72     	; 0x4718 <fputc+0x10>
    4760:	d8 01       	movw	r26, r16
    4762:	16 96       	adiw	r26, 0x06	; 6
    4764:	8d 91       	ld	r24, X+
    4766:	9c 91       	ld	r25, X
    4768:	17 97       	sbiw	r26, 0x07	; 7
    476a:	01 96       	adiw	r24, 0x01	; 1
    476c:	17 96       	adiw	r26, 0x07	; 7
    476e:	9c 93       	st	X, r25
    4770:	8e 93       	st	-X, r24
    4772:	16 97       	sbiw	r26, 0x06	; 6
    4774:	ce 01       	movw	r24, r28
    4776:	df 91       	pop	r29
    4778:	cf 91       	pop	r28
    477a:	1f 91       	pop	r17
    477c:	0f 91       	pop	r16
    477e:	08 95       	ret

00004780 <__ultoa_invert>:
    4780:	fa 01       	movw	r30, r20
    4782:	aa 27       	eor	r26, r26
    4784:	28 30       	cpi	r18, 0x08	; 8
    4786:	51 f1       	breq	.+84     	; 0x47dc <__ultoa_invert+0x5c>
    4788:	20 31       	cpi	r18, 0x10	; 16
    478a:	81 f1       	breq	.+96     	; 0x47ec <__ultoa_invert+0x6c>
    478c:	e8 94       	clt
    478e:	6f 93       	push	r22
    4790:	6e 7f       	andi	r22, 0xFE	; 254
    4792:	6e 5f       	subi	r22, 0xFE	; 254
    4794:	7f 4f       	sbci	r23, 0xFF	; 255
    4796:	8f 4f       	sbci	r24, 0xFF	; 255
    4798:	9f 4f       	sbci	r25, 0xFF	; 255
    479a:	af 4f       	sbci	r26, 0xFF	; 255
    479c:	b1 e0       	ldi	r27, 0x01	; 1
    479e:	3e d0       	rcall	.+124    	; 0x481c <__ultoa_invert+0x9c>
    47a0:	b4 e0       	ldi	r27, 0x04	; 4
    47a2:	3c d0       	rcall	.+120    	; 0x481c <__ultoa_invert+0x9c>
    47a4:	67 0f       	add	r22, r23
    47a6:	78 1f       	adc	r23, r24
    47a8:	89 1f       	adc	r24, r25
    47aa:	9a 1f       	adc	r25, r26
    47ac:	a1 1d       	adc	r26, r1
    47ae:	68 0f       	add	r22, r24
    47b0:	79 1f       	adc	r23, r25
    47b2:	8a 1f       	adc	r24, r26
    47b4:	91 1d       	adc	r25, r1
    47b6:	a1 1d       	adc	r26, r1
    47b8:	6a 0f       	add	r22, r26
    47ba:	71 1d       	adc	r23, r1
    47bc:	81 1d       	adc	r24, r1
    47be:	91 1d       	adc	r25, r1
    47c0:	a1 1d       	adc	r26, r1
    47c2:	20 d0       	rcall	.+64     	; 0x4804 <__ultoa_invert+0x84>
    47c4:	09 f4       	brne	.+2      	; 0x47c8 <__ultoa_invert+0x48>
    47c6:	68 94       	set
    47c8:	3f 91       	pop	r19
    47ca:	2a e0       	ldi	r18, 0x0A	; 10
    47cc:	26 9f       	mul	r18, r22
    47ce:	11 24       	eor	r1, r1
    47d0:	30 19       	sub	r19, r0
    47d2:	30 5d       	subi	r19, 0xD0	; 208
    47d4:	31 93       	st	Z+, r19
    47d6:	de f6       	brtc	.-74     	; 0x478e <__ultoa_invert+0xe>
    47d8:	cf 01       	movw	r24, r30
    47da:	08 95       	ret
    47dc:	46 2f       	mov	r20, r22
    47de:	47 70       	andi	r20, 0x07	; 7
    47e0:	40 5d       	subi	r20, 0xD0	; 208
    47e2:	41 93       	st	Z+, r20
    47e4:	b3 e0       	ldi	r27, 0x03	; 3
    47e6:	0f d0       	rcall	.+30     	; 0x4806 <__ultoa_invert+0x86>
    47e8:	c9 f7       	brne	.-14     	; 0x47dc <__ultoa_invert+0x5c>
    47ea:	f6 cf       	rjmp	.-20     	; 0x47d8 <__ultoa_invert+0x58>
    47ec:	46 2f       	mov	r20, r22
    47ee:	4f 70       	andi	r20, 0x0F	; 15
    47f0:	40 5d       	subi	r20, 0xD0	; 208
    47f2:	4a 33       	cpi	r20, 0x3A	; 58
    47f4:	18 f0       	brcs	.+6      	; 0x47fc <__ultoa_invert+0x7c>
    47f6:	49 5d       	subi	r20, 0xD9	; 217
    47f8:	31 fd       	sbrc	r19, 1
    47fa:	40 52       	subi	r20, 0x20	; 32
    47fc:	41 93       	st	Z+, r20
    47fe:	02 d0       	rcall	.+4      	; 0x4804 <__ultoa_invert+0x84>
    4800:	a9 f7       	brne	.-22     	; 0x47ec <__ultoa_invert+0x6c>
    4802:	ea cf       	rjmp	.-44     	; 0x47d8 <__ultoa_invert+0x58>
    4804:	b4 e0       	ldi	r27, 0x04	; 4
    4806:	a6 95       	lsr	r26
    4808:	97 95       	ror	r25
    480a:	87 95       	ror	r24
    480c:	77 95       	ror	r23
    480e:	67 95       	ror	r22
    4810:	ba 95       	dec	r27
    4812:	c9 f7       	brne	.-14     	; 0x4806 <__ultoa_invert+0x86>
    4814:	00 97       	sbiw	r24, 0x00	; 0
    4816:	61 05       	cpc	r22, r1
    4818:	71 05       	cpc	r23, r1
    481a:	08 95       	ret
    481c:	9b 01       	movw	r18, r22
    481e:	ac 01       	movw	r20, r24
    4820:	0a 2e       	mov	r0, r26
    4822:	06 94       	lsr	r0
    4824:	57 95       	ror	r21
    4826:	47 95       	ror	r20
    4828:	37 95       	ror	r19
    482a:	27 95       	ror	r18
    482c:	ba 95       	dec	r27
    482e:	c9 f7       	brne	.-14     	; 0x4822 <__ultoa_invert+0xa2>
    4830:	62 0f       	add	r22, r18
    4832:	73 1f       	adc	r23, r19
    4834:	84 1f       	adc	r24, r20
    4836:	95 1f       	adc	r25, r21
    4838:	a0 1d       	adc	r26, r0
    483a:	08 95       	ret

0000483c <eeprom_read_byte>:
    483c:	f9 99       	sbic	0x1f, 1	; 31
    483e:	fe cf       	rjmp	.-4      	; 0x483c <eeprom_read_byte>
    4840:	92 bd       	out	0x22, r25	; 34
    4842:	81 bd       	out	0x21, r24	; 33
    4844:	f8 9a       	sbi	0x1f, 0	; 31
    4846:	99 27       	eor	r25, r25
    4848:	80 b5       	in	r24, 0x20	; 32
    484a:	08 95       	ret

0000484c <eeprom_read_dword>:
    484c:	a6 e1       	ldi	r26, 0x16	; 22
    484e:	b0 e0       	ldi	r27, 0x00	; 0
    4850:	44 e0       	ldi	r20, 0x04	; 4
    4852:	50 e0       	ldi	r21, 0x00	; 0
    4854:	18 c0       	rjmp	.+48     	; 0x4886 <eeprom_read_blraw>

00004856 <eeprom_write_byte>:
    4856:	26 2f       	mov	r18, r22

00004858 <eeprom_write_r18>:
    4858:	f9 99       	sbic	0x1f, 1	; 31
    485a:	fe cf       	rjmp	.-4      	; 0x4858 <eeprom_write_r18>
    485c:	1f ba       	out	0x1f, r1	; 31
    485e:	92 bd       	out	0x22, r25	; 34
    4860:	81 bd       	out	0x21, r24	; 33
    4862:	20 bd       	out	0x20, r18	; 32
    4864:	0f b6       	in	r0, 0x3f	; 63
    4866:	f8 94       	cli
    4868:	fa 9a       	sbi	0x1f, 2	; 31
    486a:	f9 9a       	sbi	0x1f, 1	; 31
    486c:	0f be       	out	0x3f, r0	; 63
    486e:	01 96       	adiw	r24, 0x01	; 1
    4870:	08 95       	ret

00004872 <eeprom_write_dword>:
    4872:	24 2f       	mov	r18, r20
    4874:	f1 df       	rcall	.-30     	; 0x4858 <eeprom_write_r18>
    4876:	25 2f       	mov	r18, r21
    4878:	ef df       	rcall	.-34     	; 0x4858 <eeprom_write_r18>
    487a:	00 c0       	rjmp	.+0      	; 0x487c <eeprom_write_word>

0000487c <eeprom_write_word>:
    487c:	ec df       	rcall	.-40     	; 0x4856 <eeprom_write_byte>
    487e:	27 2f       	mov	r18, r23
    4880:	eb cf       	rjmp	.-42     	; 0x4858 <eeprom_write_r18>

00004882 <eeprom_read_block>:
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22

00004886 <eeprom_read_blraw>:
    4886:	fc 01       	movw	r30, r24
    4888:	f9 99       	sbic	0x1f, 1	; 31
    488a:	fe cf       	rjmp	.-4      	; 0x4888 <eeprom_read_blraw+0x2>
    488c:	06 c0       	rjmp	.+12     	; 0x489a <eeprom_read_blraw+0x14>
    488e:	f2 bd       	out	0x22, r31	; 34
    4890:	e1 bd       	out	0x21, r30	; 33
    4892:	f8 9a       	sbi	0x1f, 0	; 31
    4894:	31 96       	adiw	r30, 0x01	; 1
    4896:	00 b4       	in	r0, 0x20	; 32
    4898:	0d 92       	st	X+, r0
    489a:	41 50       	subi	r20, 0x01	; 1
    489c:	50 40       	sbci	r21, 0x00	; 0
    489e:	b8 f7       	brcc	.-18     	; 0x488e <eeprom_read_blraw+0x8>
    48a0:	08 95       	ret

000048a2 <__prologue_saves__>:
    48a2:	2f 92       	push	r2
    48a4:	3f 92       	push	r3
    48a6:	4f 92       	push	r4
    48a8:	5f 92       	push	r5
    48aa:	6f 92       	push	r6
    48ac:	7f 92       	push	r7
    48ae:	8f 92       	push	r8
    48b0:	9f 92       	push	r9
    48b2:	af 92       	push	r10
    48b4:	bf 92       	push	r11
    48b6:	cf 92       	push	r12
    48b8:	df 92       	push	r13
    48ba:	ef 92       	push	r14
    48bc:	ff 92       	push	r15
    48be:	0f 93       	push	r16
    48c0:	1f 93       	push	r17
    48c2:	cf 93       	push	r28
    48c4:	df 93       	push	r29
    48c6:	cd b7       	in	r28, 0x3d	; 61
    48c8:	de b7       	in	r29, 0x3e	; 62
    48ca:	ca 1b       	sub	r28, r26
    48cc:	db 0b       	sbc	r29, r27
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	f8 94       	cli
    48d2:	de bf       	out	0x3e, r29	; 62
    48d4:	0f be       	out	0x3f, r0	; 63
    48d6:	cd bf       	out	0x3d, r28	; 61
    48d8:	09 94       	ijmp

000048da <__epilogue_restores__>:
    48da:	2a 88       	ldd	r2, Y+18	; 0x12
    48dc:	39 88       	ldd	r3, Y+17	; 0x11
    48de:	48 88       	ldd	r4, Y+16	; 0x10
    48e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    48e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    48e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    48e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    48e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    48ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    48ec:	b9 84       	ldd	r11, Y+9	; 0x09
    48ee:	c8 84       	ldd	r12, Y+8	; 0x08
    48f0:	df 80       	ldd	r13, Y+7	; 0x07
    48f2:	ee 80       	ldd	r14, Y+6	; 0x06
    48f4:	fd 80       	ldd	r15, Y+5	; 0x05
    48f6:	0c 81       	ldd	r16, Y+4	; 0x04
    48f8:	1b 81       	ldd	r17, Y+3	; 0x03
    48fa:	aa 81       	ldd	r26, Y+2	; 0x02
    48fc:	b9 81       	ldd	r27, Y+1	; 0x01
    48fe:	ce 0f       	add	r28, r30
    4900:	d1 1d       	adc	r29, r1
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	f8 94       	cli
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	cd bf       	out	0x3d, r28	; 61
    490c:	ed 01       	movw	r28, r26
    490e:	08 95       	ret

00004910 <_exit>:
    4910:	f8 94       	cli

00004912 <__stop_program>:
    4912:	ff cf       	rjmp	.-2      	; 0x4912 <__stop_program>
