
RDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000460  00800100  00004ef8  00004fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004ef8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000224  00800560  00800560  0000540c  2**0
                  ALLOC
  3 .eeprom       0000004d  00810000  00810000  0000540c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00005459  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000054b8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001a0  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000646d  00000000  00000000  00005698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000130f  00000000  00000000  0000bb05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000056c2  00000000  00000000  0000ce14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010ec  00000000  00000000  000124d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000144cb  00000000  00000000  000135c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005338  00000000  00000000  00027a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0002cdc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00005696  00000000  00000000  0002cdf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__vector_1>
       8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__vector_3>
      10:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_4>
      14:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__vector_5>
      18:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__vector_6>
      1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
      1e:	00 00       	nop
      20:	bc c6       	rjmp	.+3448   	; 0xd9a <__vector_8>
      22:	00 00       	nop
      24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
      26:	00 00       	nop
      28:	99 c0       	rjmp	.+306    	; 0x15c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
      2e:	00 00       	nop
      30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
      32:	00 00       	nop
      34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
      36:	00 00       	nop
      38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
      3e:	00 00       	nop
      40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
      42:	00 00       	nop
      44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_18>
      4c:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <__vector_19>
      50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
      52:	00 00       	nop
      54:	83 c0       	rjmp	.+262    	; 0x15c <__bad_interrupt>
      56:	00 00       	nop
      58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
      5e:	00 00       	nop
      60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
      62:	00 00       	nop
      64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
      66:	00 00       	nop
      68:	5c 13       	cpse	r21, r28
      6a:	20 13       	cpse	r18, r16
      6c:	4c 13       	cpse	r20, r28
      6e:	64 13       	cpse	r22, r20
      70:	50 13       	cpse	r21, r16
      72:	64 13       	cpse	r22, r20
      74:	30 13       	cpse	r19, r16
      76:	1c 13       	cpse	r17, r28
      78:	28 13       	cpse	r18, r24
      7a:	2c 13       	cpse	r18, r28
      7c:	64 13       	cpse	r22, r20
      7e:	40 13       	cpse	r20, r16
      80:	14 13       	cpse	r17, r20
      82:	44 13       	cpse	r20, r20
      84:	10 13       	cpse	r17, r16
      86:	24 13       	cpse	r18, r20
      88:	e8 12       	cpse	r14, r24
      8a:	ec 12       	cpse	r14, r28
      8c:	f0 12       	cpse	r15, r16
      8e:	f4 12       	cpse	r15, r20
      90:	f8 12       	cpse	r15, r24
      92:	fc 12       	cpse	r15, r28
      94:	00 13       	cpse	r16, r16
      96:	04 13       	cpse	r16, r20
      98:	08 13       	cpse	r16, r24
      9a:	0c 13       	cpse	r16, r28
      9c:	34 13       	cpse	r19, r20
      9e:	38 13       	cpse	r19, r24
      a0:	60 13       	cpse	r22, r16
      a2:	3c 13       	cpse	r19, r28
      a4:	64 13       	cpse	r22, r20
      a6:	18 13       	cpse	r17, r24
      a8:	54 13       	cpse	r21, r20
      aa:	80 12       	cpse	r8, r16
      ac:	84 12       	cpse	r8, r20
      ae:	88 12       	cpse	r8, r24
      b0:	8c 12       	cpse	r8, r28
      b2:	90 12       	cpse	r9, r16
      b4:	94 12       	cpse	r9, r20
      b6:	98 12       	cpse	r9, r24
      b8:	9c 12       	cpse	r9, r28
      ba:	a0 12       	cpse	r10, r16
      bc:	a4 12       	cpse	r10, r20
      be:	a8 12       	cpse	r10, r24
      c0:	ac 12       	cpse	r10, r28
      c2:	b0 12       	cpse	r11, r16
      c4:	b4 12       	cpse	r11, r20
      c6:	b8 12       	cpse	r11, r24
      c8:	bc 12       	cpse	r11, r28
      ca:	c0 12       	cpse	r12, r16
      cc:	c4 12       	cpse	r12, r20
      ce:	c8 12       	cpse	r12, r24
      d0:	cc 12       	cpse	r12, r28
      d2:	d0 12       	cpse	r13, r16
      d4:	d4 12       	cpse	r13, r20
      d6:	d8 12       	cpse	r13, r24
      d8:	dc 12       	cpse	r13, r28
      da:	e0 12       	cpse	r14, r16
      dc:	e4 12       	cpse	r14, r20
      de:	64 13       	cpse	r22, r20
      e0:	64 13       	cpse	r22, r20
      e2:	64 13       	cpse	r22, r20
      e4:	64 13       	cpse	r22, r20
      e6:	48 13       	cpse	r20, r24
      e8:	64 13       	cpse	r22, r20
      ea:	64 13       	cpse	r22, r20
      ec:	64 13       	cpse	r22, r20
      ee:	64 13       	cpse	r22, r20
      f0:	64 13       	cpse	r22, r20
      f2:	64 13       	cpse	r22, r20
      f4:	64 13       	cpse	r22, r20
      f6:	64 13       	cpse	r22, r20
      f8:	64 13       	cpse	r22, r20
      fa:	64 13       	cpse	r22, r20
      fc:	64 13       	cpse	r22, r20
      fe:	64 13       	cpse	r22, r20
     100:	64 13       	cpse	r22, r20
     102:	64 13       	cpse	r22, r20
     104:	64 13       	cpse	r22, r20
     106:	64 13       	cpse	r22, r20
     108:	64 13       	cpse	r22, r20
     10a:	64 13       	cpse	r22, r20
     10c:	64 13       	cpse	r22, r20
     10e:	64 13       	cpse	r22, r20
     110:	64 13       	cpse	r22, r20
     112:	64 13       	cpse	r22, r20
     114:	64 13       	cpse	r22, r20
     116:	64 13       	cpse	r22, r20
     118:	64 13       	cpse	r22, r20
     11a:	64 13       	cpse	r22, r20
     11c:	64 13       	cpse	r22, r20
     11e:	64 13       	cpse	r22, r20
     120:	58 13       	cpse	r21, r24

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf ef       	ldi	r28, 0xFF	; 255
     128:	d8 e0       	ldi	r29, 0x08	; 8
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	15 e0       	ldi	r17, 0x05	; 5
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	e8 ef       	ldi	r30, 0xF8	; 248
     136:	fe e4       	ldi	r31, 0x4E	; 78
     138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x10>
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	a0 36       	cpi	r26, 0x60	; 96
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0xc>

00000144 <__do_clear_bss>:
     144:	27 e0       	ldi	r18, 0x07	; 7
     146:	a0 e6       	ldi	r26, 0x60	; 96
     148:	b5 e0       	ldi	r27, 0x05	; 5
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	a4 38       	cpi	r26, 0x84	; 132
     150:	b2 07       	cpc	r27, r18
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <main>
     158:	0c 94 7a 27 	jmp	0x4ef4	; 0x4ef4 <_exit>

0000015c <__bad_interrupt>:
     15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <nextFullTxBuffer>:

LinkbusTxBuffer* nextFullTxBuffer(void)
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;
     15e:	90 e0       	ldi	r25, 0x00	; 0

	while(tx_buffer[bufferIndex][0] == '\0')
     160:	0a c0       	rjmp	.+20     	; 0x176 <nextFullTxBuffer+0x18>
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     162:	9f 5f       	subi	r25, 0xFF	; 255
     164:	94 30       	cpi	r25, 0x04	; 4
     166:	c0 f4       	brcc	.+48     	; 0x198 <nextFullTxBuffer+0x3a>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     168:	8f 5f       	subi	r24, 0xFF	; 255
     16a:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <bufferIndex.2571>
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     16e:	84 30       	cpi	r24, 0x04	; 4
     170:	10 f0       	brcs	.+4      	; 0x176 <nextFullTxBuffer+0x18>
		{
			bufferIndex = 0;
     172:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <bufferIndex.2571>
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] == '\0')
     176:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <bufferIndex.2571>
     17a:	28 2f       	mov	r18, r24
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	42 e3       	ldi	r20, 0x32	; 50
     180:	42 9f       	mul	r20, r18
     182:	f0 01       	movw	r30, r0
     184:	43 9f       	mul	r20, r19
     186:	f0 0d       	add	r31, r0
     188:	11 24       	eor	r1, r1
     18a:	e8 51       	subi	r30, 0x18	; 24
     18c:	fa 4f       	sbci	r31, 0xFA	; 250
     18e:	40 81       	ld	r20, Z
     190:	44 23       	and	r20, r20
     192:	39 f3       	breq	.-50     	; 0x162 <nextFullTxBuffer+0x4>
static LinkbusTxBuffer tx_buffer[LINKBUS_NUMBER_OF_TX_MSG_BUFFERS];
static LinkbusRxBuffer rx_buffer[LINKBUS_NUMBER_OF_RX_MSG_BUFFERS];

LinkbusTxBuffer* nextFullTxBuffer(void)
{
	BOOL found = TRUE;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	01 c0       	rjmp	.+2      	; 0x19a <nextFullTxBuffer+0x3c>

	while(tx_buffer[bufferIndex][0] == '\0')
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
		{
			found = FALSE;
     198:	80 e0       	ldi	r24, 0x00	; 0
		{
			bufferIndex = 0;
		}
	}

	if(found)
     19a:	88 23       	and	r24, r24
     19c:	49 f0       	breq	.+18     	; 0x1b0 <nextFullTxBuffer+0x52>
	{
		return( &tx_buffer[bufferIndex]);
     19e:	42 e3       	ldi	r20, 0x32	; 50
     1a0:	42 9f       	mul	r20, r18
     1a2:	c0 01       	movw	r24, r0
     1a4:	43 9f       	mul	r20, r19
     1a6:	90 0d       	add	r25, r0
     1a8:	11 24       	eor	r1, r1
     1aa:	88 51       	subi	r24, 0x18	; 24
     1ac:	9a 4f       	sbci	r25, 0xFA	; 250
     1ae:	08 95       	ret
	}

	return(NULL);
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
}
     1b4:	08 95       	ret

000001b6 <nextEmptyTxBuffer>:

LinkbusTxBuffer* nextEmptyTxBuffer(void)
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;
     1b6:	90 e0       	ldi	r25, 0x00	; 0

	while(tx_buffer[bufferIndex][0] != '\0')
     1b8:	0a c0       	rjmp	.+20     	; 0x1ce <nextEmptyTxBuffer+0x18>
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     1ba:	9f 5f       	subi	r25, 0xFF	; 255
     1bc:	94 30       	cpi	r25, 0x04	; 4
     1be:	c0 f4       	brcc	.+48     	; 0x1f0 <nextEmptyTxBuffer+0x3a>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     1c0:	8f 5f       	subi	r24, 0xFF	; 255
     1c2:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <bufferIndex.2580>
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     1c6:	84 30       	cpi	r24, 0x04	; 4
     1c8:	10 f0       	brcs	.+4      	; 0x1ce <nextEmptyTxBuffer+0x18>
		{
			bufferIndex = 0;
     1ca:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <bufferIndex.2580>
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] != '\0')
     1ce:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <bufferIndex.2580>
     1d2:	28 2f       	mov	r18, r24
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	42 e3       	ldi	r20, 0x32	; 50
     1d8:	42 9f       	mul	r20, r18
     1da:	f0 01       	movw	r30, r0
     1dc:	43 9f       	mul	r20, r19
     1de:	f0 0d       	add	r31, r0
     1e0:	11 24       	eor	r1, r1
     1e2:	e8 51       	subi	r30, 0x18	; 24
     1e4:	fa 4f       	sbci	r31, 0xFA	; 250
     1e6:	40 81       	ld	r20, Z
     1e8:	41 11       	cpse	r20, r1
     1ea:	e7 cf       	rjmp	.-50     	; 0x1ba <nextEmptyTxBuffer+0x4>
	return(NULL);
}

LinkbusTxBuffer* nextEmptyTxBuffer(void)
{
	BOOL found = TRUE;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <nextEmptyTxBuffer+0x3c>

	while(tx_buffer[bufferIndex][0] != '\0')
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
		{
			found = FALSE;
     1f0:	80 e0       	ldi	r24, 0x00	; 0
		{
			bufferIndex = 0;
		}
	}

	if(found)
     1f2:	88 23       	and	r24, r24
     1f4:	49 f0       	breq	.+18     	; 0x208 <nextEmptyTxBuffer+0x52>
	{
		return( &tx_buffer[bufferIndex]);
     1f6:	42 e3       	ldi	r20, 0x32	; 50
     1f8:	42 9f       	mul	r20, r18
     1fa:	c0 01       	movw	r24, r0
     1fc:	43 9f       	mul	r20, r19
     1fe:	90 0d       	add	r25, r0
     200:	11 24       	eor	r1, r1
     202:	88 51       	subi	r24, 0x18	; 24
     204:	9a 4f       	sbci	r25, 0xFA	; 250
     206:	08 95       	ret
	}

	return(NULL);
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
}
     20c:	08 95       	ret

0000020e <nextEmptyRxBuffer>:

LinkbusRxBuffer* nextEmptyRxBuffer(void)
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;
     20e:	90 e0       	ldi	r25, 0x00	; 0

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     210:	0a c0       	rjmp	.+20     	; 0x226 <nextEmptyRxBuffer+0x18>
	{
		if(++count >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     212:	9f 5f       	subi	r25, 0xFF	; 255
     214:	92 30       	cpi	r25, 0x02	; 2
     216:	c8 f4       	brcc	.+50     	; 0x24a <nextEmptyRxBuffer+0x3c>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     218:	8f 5f       	subi	r24, 0xFF	; 255
     21a:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <bufferIndex.2589>
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     21e:	82 30       	cpi	r24, 0x02	; 2
     220:	10 f0       	brcs	.+4      	; 0x226 <nextEmptyRxBuffer+0x18>
		{
			bufferIndex = 0;
     222:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <bufferIndex.2589>
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     226:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <bufferIndex.2589>
     22a:	28 2f       	mov	r18, r24
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	42 e4       	ldi	r20, 0x42	; 66
     230:	42 9f       	mul	r20, r18
     232:	f0 01       	movw	r30, r0
     234:	43 9f       	mul	r20, r19
     236:	f0 0d       	add	r31, r0
     238:	11 24       	eor	r1, r1
     23a:	ec 59       	subi	r30, 0x9C	; 156
     23c:	fa 4f       	sbci	r31, 0xFA	; 250
     23e:	41 81       	ldd	r20, Z+1	; 0x01
     240:	52 81       	ldd	r21, Z+2	; 0x02
     242:	45 2b       	or	r20, r21
     244:	31 f7       	brne	.-52     	; 0x212 <nextEmptyRxBuffer+0x4>
	return(NULL);
}

LinkbusRxBuffer* nextEmptyRxBuffer(void)
{
	BOOL found = TRUE;
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	01 c0       	rjmp	.+2      	; 0x24c <nextEmptyRxBuffer+0x3e>

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
	{
		if(++count >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
		{
			found = FALSE;
     24a:	80 e0       	ldi	r24, 0x00	; 0
		{
			bufferIndex = 0;
		}
	}

	if(found)
     24c:	88 23       	and	r24, r24
     24e:	49 f0       	breq	.+18     	; 0x262 <nextEmptyRxBuffer+0x54>
	{
		return( &rx_buffer[bufferIndex]);
     250:	42 e4       	ldi	r20, 0x42	; 66
     252:	42 9f       	mul	r20, r18
     254:	c0 01       	movw	r24, r0
     256:	43 9f       	mul	r20, r19
     258:	90 0d       	add	r25, r0
     25a:	11 24       	eor	r1, r1
     25c:	8c 59       	subi	r24, 0x9C	; 156
     25e:	9a 4f       	sbci	r25, 0xFA	; 250
     260:	08 95       	ret
	}

	return(NULL);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
}
     266:	08 95       	ret

00000268 <nextFullRxBuffer>:

LinkbusRxBuffer* nextFullRxBuffer(void)
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;
     268:	90 e0       	ldi	r25, 0x00	; 0

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     26a:	0a c0       	rjmp	.+20     	; 0x280 <nextFullRxBuffer+0x18>
	{
		if(++count >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     26c:	9f 5f       	subi	r25, 0xFF	; 255
     26e:	92 30       	cpi	r25, 0x02	; 2
     270:	c8 f4       	brcc	.+50     	; 0x2a4 <nextFullRxBuffer+0x3c>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     272:	8f 5f       	subi	r24, 0xFF	; 255
     274:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <__data_end>
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     278:	82 30       	cpi	r24, 0x02	; 2
     27a:	10 f0       	brcs	.+4      	; 0x280 <nextFullRxBuffer+0x18>
		{
			bufferIndex = 0;
     27c:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <__data_end>
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     280:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <__data_end>
     284:	28 2f       	mov	r18, r24
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	42 e4       	ldi	r20, 0x42	; 66
     28a:	42 9f       	mul	r20, r18
     28c:	f0 01       	movw	r30, r0
     28e:	43 9f       	mul	r20, r19
     290:	f0 0d       	add	r31, r0
     292:	11 24       	eor	r1, r1
     294:	ec 59       	subi	r30, 0x9C	; 156
     296:	fa 4f       	sbci	r31, 0xFA	; 250
     298:	41 81       	ldd	r20, Z+1	; 0x01
     29a:	52 81       	ldd	r21, Z+2	; 0x02
     29c:	45 2b       	or	r20, r21
     29e:	31 f3       	breq	.-52     	; 0x26c <nextFullRxBuffer+0x4>
	return(NULL);
}

LinkbusRxBuffer* nextFullRxBuffer(void)
{
	BOOL found = TRUE;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <nextFullRxBuffer+0x3e>

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
	{
		if(++count >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
		{
			found = FALSE;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
		{
			bufferIndex = 0;
		}
	}

	if(found)
     2a6:	88 23       	and	r24, r24
     2a8:	49 f0       	breq	.+18     	; 0x2bc <nextFullRxBuffer+0x54>
	{
		return( &rx_buffer[bufferIndex]);
     2aa:	42 e4       	ldi	r20, 0x42	; 66
     2ac:	42 9f       	mul	r20, r18
     2ae:	c0 01       	movw	r24, r0
     2b0:	43 9f       	mul	r20, r19
     2b2:	90 0d       	add	r25, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	8c 59       	subi	r24, 0x9C	; 156
     2b8:	9a 4f       	sbci	r25, 0xFA	; 250
     2ba:	08 95       	ret
	}

	return(NULL);
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
}
     2c0:	08 95       	ret

000002c2 <linkbusTxInProgress>:
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     2c2:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <linkbus_tx_active>
}
     2c6:	08 95       	ret

000002c8 <linkbus_start_tx>:

BOOL linkbus_start_tx(void)
{
	BOOL success = !linkbus_tx_active;
     2c8:	90 91 b0 06 	lds	r25, 0x06B0	; 0x8006b0 <linkbus_tx_active>
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	91 11       	cpse	r25, r1
     2d0:	80 e0       	ldi	r24, 0x00	; 0

	if(success) /* message will be lost if transmit is busy */
     2d2:	91 11       	cpse	r25, r1
     2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <linkbus_start_tx+0x1e>
	{
		linkbus_tx_active = TRUE;
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	90 93 b0 06 	sts	0x06B0, r25	; 0x8006b0 <linkbus_tx_active>
		UCSR0B |= (1 << UDRIE0);
     2dc:	e1 ec       	ldi	r30, 0xC1	; 193
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	90 81       	ld	r25, Z
     2e2:	90 62       	ori	r25, 0x20	; 32
     2e4:	90 83       	st	Z, r25
	}

	return(success);
}
     2e6:	08 95       	ret

000002e8 <linkbus_end_tx>:

void linkbus_end_tx(void)
{
	if(linkbus_tx_active)
     2e8:	80 91 b0 06 	lds	r24, 0x06B0	; 0x8006b0 <linkbus_tx_active>
     2ec:	88 23       	and	r24, r24
     2ee:	39 f0       	breq	.+14     	; 0x2fe <linkbus_end_tx+0x16>
	{
		UCSR0B &= ~(1 << UDRIE0);
     2f0:	e1 ec       	ldi	r30, 0xC1	; 193
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	80 83       	st	Z, r24
		linkbus_tx_active = FALSE;
     2fa:	10 92 b0 06 	sts	0x06B0, r1	; 0x8006b0 <linkbus_tx_active>
     2fe:	08 95       	ret

00000300 <linkbus_reset_rx>:
	}
}

void linkbus_reset_rx(void)
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	if(UCSR0B & (1 << RXEN0))   /* perform only if rx is currently enabled */
     304:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     308:	84 ff       	sbrs	r24, 4
     30a:	0f c0       	rjmp	.+30     	; 0x32a <linkbus_reset_rx+0x2a>
	{
		UCSR0B &= ~(1 << RXEN0);
     30c:	e1 ec       	ldi	r30, 0xC1	; 193
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	8f 7e       	andi	r24, 0xEF	; 239
     314:	80 83       	st	Z, r24
/*		uint16_t s = sizeof(rx_buffer); // test */
		memset(rx_buffer, 0, sizeof(rx_buffer));
     316:	84 e8       	ldi	r24, 0x84	; 132
     318:	a4 e6       	ldi	r26, 0x64	; 100
     31a:	b5 e0       	ldi	r27, 0x05	; 5
     31c:	ed 01       	movw	r28, r26
     31e:	19 92       	st	Y+, r1
     320:	8a 95       	dec	r24
     322:	e9 f7       	brne	.-6      	; 0x31e <linkbus_reset_rx+0x1e>
/*		if(s) s = 0; // test */
		UCSR0B |= (1 << RXEN0);
     324:	80 81       	ld	r24, Z
     326:	80 61       	ori	r24, 0x10	; 16
     328:	80 83       	st	Z, r24
	}
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <linkbus_init>:

void linkbus_init(uint32_t baud)
{
     330:	9b 01       	movw	r18, r22
     332:	ac 01       	movw	r20, r24
	memset(rx_buffer, 0, sizeof(rx_buffer));
     334:	84 e8       	ldi	r24, 0x84	; 132
     336:	e4 e6       	ldi	r30, 0x64	; 100
     338:	f5 e0       	ldi	r31, 0x05	; 5
     33a:	df 01       	movw	r26, r30
     33c:	1d 92       	st	X+, r1
     33e:	8a 95       	dec	r24
     340:	e9 f7       	brne	.-6      	; 0x33c <linkbus_init+0xc>
	/*Set baud rate */
	uint16_t myubrr = MYUBRR(baud);
     342:	60 e2       	ldi	r22, 0x20	; 32
     344:	71 ea       	ldi	r23, 0xA1	; 161
     346:	87 e0       	ldi	r24, 0x07	; 7
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 89 23 	call	0x4712	; 0x4712 <__udivmodsi4>
     34e:	21 50       	subi	r18, 0x01	; 1
     350:	31 09       	sbc	r19, r1
	UBRR0H = (uint8_t)(myubrr >> 8);
     352:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)myubrr;
     356:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter and related interrupts */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     35a:	88 e9       	ldi	r24, 0x98	; 152
     35c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/*	UCSR0B = (1<<RXEN0) | (1<<TXEN0); */
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     360:	8e e0       	ldi	r24, 0x0E	; 14
     362:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	g_bus_disabled = FALSE;
     366:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_bus_disabled>
     36a:	08 95       	ret

0000036c <linkbus_disable>:

void linkbus_disable(void)
{
	uint8_t bufferIndex;
	
	g_bus_disabled = TRUE;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_bus_disabled>
	UCSR0B = 0;
     372:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	linkbus_end_tx();
     376:	b8 df       	rcall	.-144    	; 0x2e8 <linkbus_end_tx>
	memset(rx_buffer, 0, sizeof(rx_buffer));
     378:	84 e8       	ldi	r24, 0x84	; 132
     37a:	e4 e6       	ldi	r30, 0x64	; 100
     37c:	f5 e0       	ldi	r31, 0x05	; 5
     37e:	df 01       	movw	r26, r30
     380:	1d 92       	st	X+, r1
     382:	8a 95       	dec	r24
     384:	e9 f7       	brne	.-6      	; 0x380 <linkbus_disable+0x14>
	
	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	08 c0       	rjmp	.+16     	; 0x39a <linkbus_disable+0x2e>
	{
		tx_buffer[bufferIndex][0] = '\0';
     38a:	b2 e3       	ldi	r27, 0x32	; 50
     38c:	8b 9f       	mul	r24, r27
     38e:	f0 01       	movw	r30, r0
     390:	11 24       	eor	r1, r1
     392:	e8 51       	subi	r30, 0x18	; 24
     394:	fa 4f       	sbci	r31, 0xFA	; 250
     396:	10 82       	st	Z, r1
	g_bus_disabled = TRUE;
	UCSR0B = 0;
	linkbus_end_tx();
	memset(rx_buffer, 0, sizeof(rx_buffer));
	
	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	84 30       	cpi	r24, 0x04	; 4
     39c:	b0 f3       	brcs	.-20     	; 0x38a <linkbus_disable+0x1e>
	{
		tx_buffer[bufferIndex][0] = '\0';
	}
}
     39e:	08 95       	ret

000003a0 <linkbus_send_text>:
		linkbus_send_text((char*)crlf);
	}
}

BOOL linkbus_send_text(char* text)
{
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
	BOOL err = TRUE;
	
	if(g_bus_disabled) return err;
     3a4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <g_bus_disabled>
     3a8:	21 11       	cpse	r18, r1
     3aa:	19 c0       	rjmp	.+50     	; 0x3de <linkbus_send_text+0x3e>

	if(text)
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	c9 f0       	breq	.+50     	; 0x3e2 <linkbus_send_text+0x42>
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     3b0:	ec 01       	movw	r28, r24

		while(!buff)
     3b2:	01 df       	rcall	.-510    	; 0x1b6 <nextEmptyTxBuffer>
		{
			while(linkbusTxInProgress())
     3b4:	04 c0       	rjmp	.+8      	; 0x3be <linkbus_send_text+0x1e>
     3b6:	85 df       	rcall	.-246    	; 0x2c2 <linkbusTxInProgress>
     3b8:	81 11       	cpse	r24, r1
			{
				;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
     3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <linkbus_send_text+0x16>
     3bc:	fc de       	rcall	.-520    	; 0x1b6 <nextEmptyTxBuffer>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff)
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	d1 f3       	breq	.-12     	; 0x3b6 <linkbus_send_text+0x16>
				;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
		}

		if(buff)
     3c2:	89 f0       	breq	.+34     	; 0x3e6 <linkbus_send_text+0x46>
		{
			sprintf(*buff, text);
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	9f 93       	push	r25
     3ca:	8f 93       	push	r24
     3cc:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>

			linkbus_start_tx();
     3d0:	7b df       	rcall	.-266    	; 0x2c8 <linkbus_start_tx>
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
			err = FALSE;
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <linkbus_send_text+0x48>

BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
	
	if(g_bus_disabled) return err;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <linkbus_send_text+0x48>
	}
}

BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <linkbus_send_text+0x48>
     3e6:	81 e0       	ldi	r24, 0x01	; 1
			err = FALSE;
		}
	}

	return(err);
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28

void lb_send_WDTError(void)
{
	linkbus_send_text((char*)textWDT);
     3ec:	08 95       	ret

000003ee <lb_send_WDTError>:
     3ee:	8a e7       	ldi	r24, 0x7A	; 122
     3f0:	93 e0       	ldi	r25, 0x03	; 3
     3f2:	d6 cf       	rjmp	.-84     	; 0x3a0 <linkbus_send_text>
     3f4:	08 95       	ret

000003f6 <lb_send_NewPrompt>:
 *  Support for creating and sending various Terminal Mode Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_NewPrompt(void)
{
	if(g_lb_terminal_mode)
     3f6:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>
     3fa:	88 23       	and	r24, r24
	{
		linkbus_send_text((char*)textPrompt);
     3fc:	21 f0       	breq	.+8      	; 0x406 <STACK_SIZE+0x6>
     3fe:	8e e8       	ldi	r24, 0x8E	; 142
     400:	93 e0       	ldi	r25, 0x03	; 3
     402:	ce cf       	rjmp	.-100    	; 0x3a0 <linkbus_send_text>
	}
	else
	{
		linkbus_send_text((char*)crlf);
     404:	08 95       	ret
     406:	83 e9       	ldi	r24, 0x93	; 147
     408:	93 e0       	ldi	r25, 0x03	; 3
     40a:	ca cf       	rjmp	.-108    	; 0x3a0 <linkbus_send_text>
     40c:	08 95       	ret

0000040e <lb_send_NewLine>:
	}
}

void lb_send_NewLine(void)
{
	linkbus_send_text((char*)crlf);
     40e:	83 e9       	ldi	r24, 0x93	; 147
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	c6 cf       	rjmp	.-116    	; 0x3a0 <linkbus_send_text>
     414:	08 95       	ret

00000416 <lb_send_Help>:
     416:	cf 93       	push	r28

/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
     418:	df 93       	push	r29
     41a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_bus_disabled>
	if(g_bus_disabled) return;
     41e:	81 11       	cpse	r24, r1
     420:	3c c0       	rjmp	.+120    	; 0x49a <lb_send_Help+0x84>
     422:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>
	if(!g_lb_terminal_mode) return;
     426:	88 23       	and	r24, r24
     428:	c1 f1       	breq	.+112    	; 0x49a <lb_send_Help+0x84>
     42a:	8f e9       	ldi	r24, 0x9F	; 159

#ifdef DEBUG_FUNCTIONS_ENABLE
	sprintf(g_tempMsgBuff, "\n*** %s Debug Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
#else
	sprintf(g_tempMsgBuff, "\n*** %s Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
     42c:	93 e0       	ldi	r25, 0x03	; 3
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	86 ea       	ldi	r24, 0xA6	; 166
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	9f 93       	push	r25
     438:	8f 93       	push	r24
     43a:	81 ec       	ldi	r24, 0xC1	; 193
     43c:	93 e0       	ldi	r25, 0x03	; 3
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	81 eb       	ldi	r24, 0xB1	; 177
     444:	96 e0       	ldi	r25, 0x06	; 6
     446:	9f 93       	push	r25
     448:	8f 93       	push	r24
     44a:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     44e:	8d b7       	in	r24, 0x3d	; 61
#endif
	
	while(linkbus_send_text(g_tempMsgBuff));
     450:	9e b7       	in	r25, 0x3e	; 62
     452:	08 96       	adiw	r24, 0x08	; 8
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	9e bf       	out	0x3e, r25	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	8d bf       	out	0x3d, r24	; 61
     45e:	81 eb       	ldi	r24, 0xB1	; 177
     460:	96 e0       	ldi	r25, 0x06	; 6
     462:	9e df       	rcall	.-196    	; 0x3a0 <linkbus_send_text>
     464:	81 11       	cpse	r24, r1
     466:	fb cf       	rjmp	.-10     	; 0x45e <lb_send_Help+0x48>
	while(linkbusTxInProgress());
     468:	2c df       	rcall	.-424    	; 0x2c2 <linkbusTxInProgress>
     46a:	81 11       	cpse	r24, r1
     46c:	fd cf       	rjmp	.-6      	; 0x468 <lb_send_Help+0x52>
     46e:	c0 e0       	ldi	r28, 0x00	; 0
     470:	d0 e0       	ldi	r29, 0x00	; 0
     472:	0f c0       	rjmp	.+30     	; 0x492 <lb_send_Help+0x7c>
#endif // TRANQUILIZE_WATCHDOG
	
	int rows = sizeof(textHelp)/sizeof(textHelp[0]);
	for(int i=0; i<rows; i++)
	{
		while(linkbus_send_text((char*)textHelp[i])); 
     474:	22 e2       	ldi	r18, 0x22	; 34
     476:	2c 9f       	mul	r18, r28
     478:	c0 01       	movw	r24, r0
     47a:	2d 9f       	mul	r18, r29
     47c:	90 0d       	add	r25, r0
     47e:	11 24       	eor	r1, r1
     480:	86 5a       	subi	r24, 0xA6	; 166
     482:	9e 4f       	sbci	r25, 0xFE	; 254
     484:	8d df       	rcall	.-230    	; 0x3a0 <linkbus_send_text>
     486:	81 11       	cpse	r24, r1
		while(linkbusTxInProgress());
     488:	f5 cf       	rjmp	.-22     	; 0x474 <lb_send_Help+0x5e>
     48a:	1b df       	rcall	.-458    	; 0x2c2 <linkbusTxInProgress>
     48c:	81 11       	cpse	r24, r1
     48e:	fd cf       	rjmp	.-6      	; 0x48a <lb_send_Help+0x74>
	while(linkbus_send_text(g_tempMsgBuff)); 
	while(linkbusTxInProgress());
#endif // TRANQUILIZE_WATCHDOG
	
	int rows = sizeof(textHelp)/sizeof(textHelp[0]);
	for(int i=0; i<rows; i++)
     490:	21 96       	adiw	r28, 0x01	; 1
     492:	c0 31       	cpi	r28, 0x10	; 16
     494:	d1 05       	cpc	r29, r1
     496:	74 f3       	brlt	.-36     	; 0x474 <lb_send_Help+0x5e>
	{
		while(linkbus_send_text((char*)textHelp[i])); 
		while(linkbusTxInProgress());
	}
	
	lb_send_NewLine();
     498:	ba df       	rcall	.-140    	; 0x40e <lb_send_NewLine>
     49a:	df 91       	pop	r29
}
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <linkbus_setLineTerm>:
     4a0:	9f 93       	push	r25
	linkbus_send_text((char*)crlf);
}

void linkbus_setLineTerm(char* term)
{
	sprintf(lineTerm, term);
     4a2:	8f 93       	push	r24
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
}
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
	}
}

void linkbus_setTerminalMode(BOOL on)
{
	g_lb_terminal_mode = on;
     4b8:	08 95       	ret

000004ba <linkbus_setTerminalMode>:

	if(g_lb_terminal_mode)
     4ba:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <g_lb_terminal_mode>
     4be:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>
	{
		linkbus_setLineTerm("\n");
     4c2:	88 23       	and	r24, r24
     4c4:	39 f0       	breq	.+14     	; 0x4d4 <linkbus_setTerminalMode+0x1a>
     4c6:	80 e1       	ldi	r24, 0x10	; 16
		linkbus_send_text(lineTerm);
     4c8:	95 e0       	ldi	r25, 0x05	; 5
     4ca:	ea df       	rcall	.-44     	; 0x4a0 <linkbus_setLineTerm>
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	67 cf       	rjmp	.-306    	; 0x3a0 <linkbus_send_text>
	}
	else
	{
		linkbus_send_text((char*)crlf);
     4d2:	08 95       	ret
     4d4:	83 e9       	ldi	r24, 0x93	; 147
     4d6:	93 e0       	ldi	r25, 0x03	; 3
     4d8:	63 cf       	rjmp	.-314    	; 0x3a0 <linkbus_send_text>
     4da:	08 95       	ret

000004dc <lb_echo_char>:
	sprintf(lineTerm, term);
}

void lb_echo_char(uint8_t c)
{
	g_tempMsgBuff[0] = c;
     4dc:	e1 eb       	ldi	r30, 0xB1	; 177
     4de:	f6 e0       	ldi	r31, 0x06	; 6
     4e0:	80 83       	st	Z, r24
	g_tempMsgBuff[1] = '\0';
     4e2:	11 82       	std	Z+1, r1	; 0x01
	linkbus_send_text(g_tempMsgBuff);
     4e4:	cf 01       	movw	r24, r30
     4e6:	5c cf       	rjmp	.-328    	; 0x3a0 <linkbus_send_text>
     4e8:	08 95       	ret

000004ea <lb_send_string>:
     4ea:	00 97       	sbiw	r24, 0x00	; 0
}

BOOL lb_send_string(char* str)
{
	if(str == NULL) return TRUE;
     4ec:	a9 f0       	breq	.+42     	; 0x518 <lb_send_string+0x2e>
     4ee:	fc 01       	movw	r30, r24
	if(strlen(str) > LINKBUS_MAX_MSG_LENGTH) return TRUE;
     4f0:	01 90       	ld	r0, Z+
     4f2:	00 20       	and	r0, r0
     4f4:	e9 f7       	brne	.-6      	; 0x4f0 <lb_send_string+0x6>
     4f6:	31 97       	sbiw	r30, 0x01	; 1
     4f8:	e8 1b       	sub	r30, r24
     4fa:	f9 0b       	sbc	r31, r25
     4fc:	f3 97       	sbiw	r30, 0x33	; 51
     4fe:	70 f4       	brcc	.+28     	; 0x51c <lb_send_string+0x32>
     500:	bc 01       	movw	r22, r24
	strncpy(g_tempMsgBuff, str, LINKBUS_MAX_MSG_LENGTH);
     502:	42 e3       	ldi	r20, 0x32	; 50
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	81 eb       	ldi	r24, 0xB1	; 177
     508:	96 e0       	ldi	r25, 0x06	; 6
     50a:	0e 94 43 24 	call	0x4886	; 0x4886 <strncpy>
	linkbus_send_text(g_tempMsgBuff);
     50e:	81 eb       	ldi	r24, 0xB1	; 177
     510:	96 e0       	ldi	r25, 0x06	; 6
     512:	46 df       	rcall	.-372    	; 0x3a0 <linkbus_send_text>
     514:	80 e0       	ldi	r24, 0x00	; 0
	return FALSE;
     516:	08 95       	ret
	linkbus_send_text(g_tempMsgBuff);
}

BOOL lb_send_string(char* str)
{
	if(str == NULL) return TRUE;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	08 95       	ret
	if(strlen(str) > LINKBUS_MAX_MSG_LENGTH) return TRUE;
     51c:	81 e0       	ldi	r24, 0x01	; 1
	strncpy(g_tempMsgBuff, str, LINKBUS_MAX_MSG_LENGTH);
	linkbus_send_text(g_tempMsgBuff);
	return FALSE;
}
     51e:	08 95       	ret

00000520 <lb_poweroff_msg>:

void lb_poweroff_msg(uint8_t sec)
{
	sprintf(g_tempMsgBuff, "Power off in %d sec\n", sec);
     520:	1f 92       	push	r1
     522:	8f 93       	push	r24
     524:	85 ed       	ldi	r24, 0xD5	; 213
     526:	93 e0       	ldi	r25, 0x03	; 3
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	81 eb       	ldi	r24, 0xB1	; 177
     52e:	96 e0       	ldi	r25, 0x06	; 6
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     538:	81 eb       	ldi	r24, 0xB1	; 177
     53a:	96 e0       	ldi	r25, 0x06	; 6
     53c:	31 df       	rcall	.-414    	; 0x3a0 <linkbus_send_text>
     53e:	0f 90       	pop	r0
}
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	08 95       	ret

0000054c <lb_send_value>:
     54c:	20 e0       	ldi	r18, 0x00	; 0

void lb_send_value(uint16_t value, char* label)
{
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
     54e:	31 e0       	ldi	r19, 0x01	; 1
     550:	3f 93       	push	r19
     552:	2f 93       	push	r18
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	7f 93       	push	r23
     55a:	6f 93       	push	r22
     55c:	8a ee       	ldi	r24, 0xEA	; 234
     55e:	93 e0       	ldi	r25, 0x03	; 3
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	81 eb       	ldi	r24, 0xB1	; 177
     566:	96 e0       	ldi	r25, 0x06	; 6
     568:	9f 93       	push	r25
     56a:	8f 93       	push	r24
     56c:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     570:	81 eb       	ldi	r24, 0xB1	; 177
     572:	96 e0       	ldi	r25, 0x06	; 6
     574:	15 df       	rcall	.-470    	; 0x3a0 <linkbus_send_text>
     576:	8d b7       	in	r24, 0x3d	; 61
}
     578:	9e b7       	in	r25, 0x3e	; 62
     57a:	0a 96       	adiw	r24, 0x0a	; 10
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	9e bf       	out	0x3e, r25	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	8d bf       	out	0x3d, r24	; 61
     586:	08 95       	ret

00000588 <lb_send_FRE>:
     588:	0f 93       	push	r16
/***********************************************************************************
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	2a 97       	sbiw	r28, 0x0a	; 10
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	18 2f       	mov	r17, r24
     5a2:	02 2f       	mov	r16, r18
     5a4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <xtal_freq+0x4>
	BOOL valid = TRUE;
	char f[10] = "\0";
     5a8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <xtal_freq+0x5>
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	fe 01       	movw	r30, r28
     5b2:	33 96       	adiw	r30, 0x03	; 3
     5b4:	88 e0       	ldi	r24, 0x08	; 8
     5b6:	df 01       	movw	r26, r30
     5b8:	1d 92       	st	X+, r1
     5ba:	8a 95       	dec	r24
     5bc:	e9 f7       	brne	.-6      	; 0x5b8 <lb_send_FRE+0x30>
     5be:	41 15       	cp	r20, r1
	char prefix = '$';
	char terminus = ';';

	if(freq != FREQUENCY_NOT_SPECIFIED)
     5c0:	51 05       	cpc	r21, r1
     5c2:	61 05       	cpc	r22, r1
     5c4:	71 05       	cpc	r23, r1
     5c6:	59 f1       	breq	.+86     	; 0x61e <lb_send_FRE+0x96>
     5c8:	46 30       	cpi	r20, 0x06	; 6
	{
		if(freq < ILLEGAL_MEMORY)   /* Memory locations are MEM1, MEM2, MEM3, ... ILLEGAL_MEMORY-1 */
     5ca:	51 05       	cpc	r21, r1
     5cc:	61 05       	cpc	r22, r1
     5ce:	71 05       	cpc	r23, r1
     5d0:	98 f4       	brcc	.+38     	; 0x5f8 <lb_send_FRE+0x70>
     5d2:	5f 93       	push	r21
		{
			sprintf(f, "M%d", (int)freq);
     5d4:	4f 93       	push	r20
     5d6:	84 ef       	ldi	r24, 0xF4	; 244
     5d8:	93 e0       	ldi	r25, 0x03	; 3
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	13 c0       	rjmp	.+38     	; 0x61e <lb_send_FRE+0x96>
     5f8:	7f 93       	push	r23
		}
		else
		{
			sprintf(f, "%ld", freq);
     5fa:	6f 93       	push	r22
     5fc:	5f 93       	push	r21
     5fe:	4f 93       	push	r20
     600:	88 ef       	ldi	r24, 0xF8	; 248
     602:	93 e0       	ldi	r25, 0x03	; 3
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	ce 01       	movw	r24, r28
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
     61e:	13 30       	cpi	r17, 0x03	; 3
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
     620:	41 f0       	breq	.+16     	; 0x632 <lb_send_FRE+0xaa>
     622:	12 30       	cpi	r17, 0x02	; 2
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     624:	51 f0       	breq	.+20     	; 0x63a <lb_send_FRE+0xb2>
     626:	11 30       	cpi	r17, 0x01	; 1
	{
		terminus = '?';
	}
	else if(msgType != LINKBUS_MSG_COMMAND)
     628:	61 f4       	brne	.+24     	; 0x642 <lb_send_FRE+0xba>
     62a:	8b e3       	ldi	r24, 0x3B	; 59
void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     62c:	24 e2       	ldi	r18, 0x24	; 36

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
     62e:	91 e0       	ldi	r25, 0x01	; 1
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
     630:	0b c0       	rjmp	.+22     	; 0x648 <lb_send_FRE+0xc0>
     632:	8b e3       	ldi	r24, 0x3B	; 59
	char f[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     634:	21 e2       	ldi	r18, 0x21	; 33
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     636:	91 e0       	ldi	r25, 0x01	; 1
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
     638:	07 c0       	rjmp	.+14     	; 0x648 <lb_send_FRE+0xc0>
     63a:	8f e3       	ldi	r24, 0x3F	; 63
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     63c:	24 e2       	ldi	r18, 0x24	; 36

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
     63e:	91 e0       	ldi	r25, 0x01	; 1
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
     640:	03 c0       	rjmp	.+6      	; 0x648 <lb_send_FRE+0xc0>
     642:	8b e3       	ldi	r24, 0x3B	; 59
	char f[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     644:	24 e2       	ldi	r18, 0x24	; 36

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
     646:	90 e0       	ldi	r25, 0x00	; 0
	{
		terminus = '?';
	}
	else if(msgType != LINKBUS_MSG_COMMAND)
	{
		valid = FALSE;
     648:	99 23       	and	r25, r25
	}

	if(valid)
     64a:	09 f4       	brne	.+2      	; 0x64e <lb_send_FRE+0xc6>
     64c:	5a c0       	rjmp	.+180    	; 0x702 <lb_send_FRE+0x17a>
     64e:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>
	{
		if(g_lb_terminal_mode)
     652:	99 23       	and	r25, r25
     654:	91 f1       	breq	.+100    	; 0x6ba <lb_send_FRE+0x132>
     656:	00 23       	and	r16, r16
		{
			if(isMemoryValue)
     658:	c1 f0       	breq	.+48     	; 0x68a <lb_send_FRE+0x102>
     65a:	80 e0       	ldi	r24, 0x00	; 0
			{
				sprintf(g_tempMsgBuff, "> %s (MEM)%s", f, lineTerm);
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	ce 01       	movw	r24, r28
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	9f 93       	push	r25
     668:	8f 93       	push	r24
     66a:	8c ef       	ldi	r24, 0xFC	; 252
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	9f 93       	push	r25
     670:	8f 93       	push	r24
     672:	81 eb       	ldi	r24, 0xB1	; 177
     674:	96 e0       	ldi	r25, 0x06	; 6
     676:	9f 93       	push	r25
     678:	8f 93       	push	r24
     67a:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	39 c0       	rjmp	.+114    	; 0x6fc <lb_send_FRE+0x174>
     68a:	80 e0       	ldi	r24, 0x00	; 0
			}
			else
			{
				sprintf(g_tempMsgBuff, "> %s%s", f, lineTerm);
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	89 e0       	ldi	r24, 0x09	; 9
     69c:	94 e0       	ldi	r25, 0x04	; 4
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	81 eb       	ldi	r24, 0xB1	; 177
     6a4:	96 e0       	ldi	r25, 0x06	; 6
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	21 c0       	rjmp	.+66     	; 0x6fc <lb_send_FRE+0x174>
     6ba:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cFRE,%s,%s%c", prefix, f, isMemoryValue ? "M" : NULL, terminus);
     6bc:	00 23       	and	r16, r16
     6be:	19 f0       	breq	.+6      	; 0x6c6 <lb_send_FRE+0x13e>
     6c0:	41 e2       	ldi	r20, 0x21	; 33
     6c2:	55 e0       	ldi	r21, 0x05	; 5
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <lb_send_FRE+0x142>
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	9f 93       	push	r25
     6cc:	8f 93       	push	r24
     6ce:	5f 93       	push	r21
     6d0:	4f 93       	push	r20
     6d2:	ce 01       	movw	r24, r28
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	1f 92       	push	r1
     6dc:	2f 93       	push	r18
     6de:	80 e1       	ldi	r24, 0x10	; 16
     6e0:	94 e0       	ldi	r25, 0x04	; 4
     6e2:	9f 93       	push	r25
     6e4:	8f 93       	push	r24
     6e6:	81 eb       	ldi	r24, 0xB1	; 177
     6e8:	96 e0       	ldi	r25, 0x06	; 6
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
		}

		linkbus_send_text(g_tempMsgBuff);
     6fc:	81 eb       	ldi	r24, 0xB1	; 177
     6fe:	96 e0       	ldi	r25, 0x06	; 6
     700:	4f de       	rcall	.-866    	; 0x3a0 <linkbus_send_text>
     702:	2a 96       	adiw	r28, 0x0a	; 10
	}
}
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <lb_send_msg>:
     718:	83 30       	cpi	r24, 0x03	; 3
void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
	char prefix = '$';
	char terminus = ';';

	if(msgType == LINKBUS_MSG_REPLY)
     71a:	29 f0       	breq	.+10     	; 0x726 <lb_send_msg+0xe>
     71c:	82 30       	cpi	r24, 0x02	; 2
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     71e:	31 f0       	breq	.+12     	; 0x72c <lb_send_msg+0x14>
     720:	2b e3       	ldi	r18, 0x3B	; 59


void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
	char prefix = '$';
	char terminus = ';';
     722:	94 e2       	ldi	r25, 0x24	; 36
}


void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
	char prefix = '$';
     724:	05 c0       	rjmp	.+10     	; 0x730 <lb_send_msg+0x18>
     726:	2b e3       	ldi	r18, 0x3B	; 59
	char terminus = ';';
     728:	91 e2       	ldi	r25, 0x21	; 33

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     72a:	02 c0       	rjmp	.+4      	; 0x730 <lb_send_msg+0x18>
     72c:	2f e3       	ldi	r18, 0x3F	; 63
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     72e:	94 e2       	ldi	r25, 0x24	; 36
}


void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
	char prefix = '$';
     730:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
	}

	if(g_lb_terminal_mode)
     734:	88 23       	and	r24, r24
     736:	d9 f0       	breq	.+54     	; 0x76e <lb_send_msg+0x56>
     738:	80 e0       	ldi	r24, 0x00	; 0
	{
		sprintf(g_tempMsgBuff, "> %s=%s%s", msgLabel, msgStr, lineTerm);
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	5f 93       	push	r21
     742:	4f 93       	push	r20
     744:	7f 93       	push	r23
     746:	6f 93       	push	r22
     748:	8e e1       	ldi	r24, 0x1E	; 30
     74a:	94 e0       	ldi	r25, 0x04	; 4
     74c:	9f 93       	push	r25
     74e:	8f 93       	push	r24
     750:	81 eb       	ldi	r24, 0xB1	; 177
     752:	96 e0       	ldi	r25, 0x06	; 6
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     75c:	8d b7       	in	r24, 0x3d	; 61
     75e:	9e b7       	in	r25, 0x3e	; 62
     760:	0a 96       	adiw	r24, 0x0a	; 10
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	9e bf       	out	0x3e, r25	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	8d bf       	out	0x3d, r24	; 61
     76c:	1a c0       	rjmp	.+52     	; 0x7a2 <lb_send_msg+0x8a>
     76e:	1f 92       	push	r1
	}
	else
	{
		sprintf(g_tempMsgBuff, "%c%s,%s%c", prefix, msgLabel, msgStr, terminus);
     770:	2f 93       	push	r18
     772:	5f 93       	push	r21
     774:	4f 93       	push	r20
     776:	7f 93       	push	r23
     778:	6f 93       	push	r22
     77a:	1f 92       	push	r1
     77c:	9f 93       	push	r25
     77e:	88 e2       	ldi	r24, 0x28	; 40
     780:	94 e0       	ldi	r25, 0x04	; 4
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	81 eb       	ldi	r24, 0xB1	; 177
     788:	96 e0       	ldi	r25, 0x06	; 6
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     792:	8d b7       	in	r24, 0x3d	; 61
     794:	9e b7       	in	r25, 0x3e	; 62
     796:	0c 96       	adiw	r24, 0x0c	; 12
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	9e bf       	out	0x3e, r25	; 62
     79e:	0f be       	out	0x3f, r0	; 63
	}

	linkbus_send_text(g_tempMsgBuff);
     7a0:	8d bf       	out	0x3d, r24	; 61
     7a2:	81 eb       	ldi	r24, 0xB1	; 177
     7a4:	96 e0       	ldi	r25, 0x06	; 6
     7a6:	fc cd       	rjmp	.-1032   	; 0x3a0 <linkbus_send_text>

000007a8 <lb_send_VOL>:
     7a8:	0f 93       	push	r16
}


void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <lb_send_VOL+0xa>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <lb_send_VOL+0xc>
     7b4:	00 d0       	rcall	.+0      	; 0x7b6 <lb_send_VOL+0xe>
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <xtal_freq+0xe>
	BOOL valid = TRUE;
	char t[2] = "\0";
     7be:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <xtal_freq+0xf>
     7c2:	3a 83       	std	Y+2, r19	; 0x02
     7c4:	29 83       	std	Y+1, r18	; 0x01
     7c6:	00 91 56 01 	lds	r16, 0x0156	; 0x800156 <xtal_freq+0x10>
	char v[4] = "\0";
     7ca:	10 91 57 01 	lds	r17, 0x0157	; 0x800157 <xtal_freq+0x11>
     7ce:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <xtal_freq+0x12>
     7d2:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <xtal_freq+0x13>
     7d6:	0b 83       	std	Y+3, r16	; 0x03
     7d8:	1c 83       	std	Y+4, r17	; 0x04
     7da:	2d 83       	std	Y+5, r18	; 0x05
     7dc:	3e 83       	std	Y+6, r19	; 0x06
     7de:	61 11       	cpse	r22, r1
	char prefix = '$';
	char terminus = ';';

	if(type == TONE_VOLUME)
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <lb_send_VOL+0x42>
     7e2:	94 e5       	ldi	r25, 0x54	; 84
	{
		t[0] = 'T';
     7e4:	99 83       	std	Y+1, r25	; 0x01
     7e6:	01 e0       	ldi	r16, 0x01	; 1
}


void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
     7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <lb_send_VOL+0x50>
     7ea:	61 30       	cpi	r22, 0x01	; 1

	if(type == TONE_VOLUME)
	{
		t[0] = 'T';
	}
	else if(type == MAIN_VOLUME)
     7ec:	21 f4       	brne	.+8      	; 0x7f6 <lb_send_VOL+0x4e>
     7ee:	9d e4       	ldi	r25, 0x4D	; 77
	{
		t[0] = 'M';
     7f0:	99 83       	std	Y+1, r25	; 0x01
     7f2:	01 e0       	ldi	r16, 0x01	; 1
}


void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <lb_send_VOL+0x50>
     7f6:	00 e0       	ldi	r16, 0x00	; 0
	{
		t[0] = 'M';
	}
	else
	{
		valid = FALSE;
     7f8:	00 23       	and	r16, r16
	}

	if(valid)
     7fa:	09 f4       	brne	.+2      	; 0x7fe <lb_send_VOL+0x56>
     7fc:	5f c0       	rjmp	.+190    	; 0x8bc <lb_send_VOL+0x114>
     7fe:	18 2f       	mov	r17, r24
     800:	4b 30       	cpi	r20, 0x0B	; 11
	{
		if(volume < DECREMENT_VOL)
     802:	00 f5       	brcc	.+64     	; 0x844 <lb_send_VOL+0x9c>
     804:	24 2f       	mov	r18, r20
		{
			sprintf(v, "%d", volume * 10);
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	a9 01       	movw	r20, r18
     80a:	44 0f       	add	r20, r20
     80c:	55 1f       	adc	r21, r21
     80e:	22 0f       	add	r18, r18
     810:	33 1f       	adc	r19, r19
     812:	22 0f       	add	r18, r18
     814:	33 1f       	adc	r19, r19
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
     81a:	42 0f       	add	r20, r18
     81c:	53 1f       	adc	r21, r19
     81e:	5f 93       	push	r21
     820:	4f 93       	push	r20
     822:	85 ef       	ldi	r24, 0xF5	; 245
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	ce 01       	movw	r24, r28
     82c:	03 96       	adiw	r24, 0x03	; 3
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	09 c0       	rjmp	.+18     	; 0x856 <lb_send_VOL+0xae>
     844:	4d 30       	cpi	r20, 0x0D	; 13
		}
		else if(volume < VOL_NOT_SPECIFIED)
     846:	38 f4       	brcc	.+14     	; 0x856 <lb_send_VOL+0xae>
     848:	4c 30       	cpi	r20, 0x0C	; 12
		{
			if(volume == INCREMENT_VOL)
     84a:	19 f4       	brne	.+6      	; 0x852 <lb_send_VOL+0xaa>
     84c:	8b e2       	ldi	r24, 0x2B	; 43
			{
				v[0] = '+';
     84e:	8b 83       	std	Y+3, r24	; 0x03
     850:	02 c0       	rjmp	.+4      	; 0x856 <lb_send_VOL+0xae>
     852:	8d e2       	ldi	r24, 0x2D	; 45
			}
			else
			{
				v[0] = '-';
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	13 30       	cpi	r17, 0x03	; 3
			}
		}

		if(msgType == LINKBUS_MSG_REPLY)
     858:	39 f0       	breq	.+14     	; 0x868 <lb_send_VOL+0xc0>
     85a:	12 30       	cpi	r17, 0x02	; 2
		{
			prefix = '!';
		}
		else if(msgType == LINKBUS_MSG_QUERY)
     85c:	41 f0       	breq	.+16     	; 0x86e <lb_send_VOL+0xc6>
     85e:	11 30       	cpi	r17, 0x01	; 1
		{
			terminus = '?';
		}
		else if(msgType != LINKBUS_MSG_COMMAND)
     860:	49 f4       	brne	.+18     	; 0x874 <lb_send_VOL+0xcc>
     862:	9b e3       	ldi	r25, 0x3B	; 59
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
	char terminus = ';';
     864:	84 e2       	ldi	r24, 0x24	; 36
void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
     866:	09 c0       	rjmp	.+18     	; 0x87a <lb_send_VOL+0xd2>
     868:	9b e3       	ldi	r25, 0x3B	; 59
	char terminus = ';';
     86a:	81 e2       	ldi	r24, 0x21	; 33
			}
		}

		if(msgType == LINKBUS_MSG_REPLY)
		{
			prefix = '!';
     86c:	06 c0       	rjmp	.+12     	; 0x87a <lb_send_VOL+0xd2>
     86e:	9f e3       	ldi	r25, 0x3F	; 63
		}
		else if(msgType == LINKBUS_MSG_QUERY)
		{
			terminus = '?';
     870:	84 e2       	ldi	r24, 0x24	; 36
void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
     872:	03 c0       	rjmp	.+6      	; 0x87a <lb_send_VOL+0xd2>
     874:	9b e3       	ldi	r25, 0x3B	; 59
	char terminus = ';';
     876:	84 e2       	ldi	r24, 0x24	; 36
void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
     878:	00 e0       	ldi	r16, 0x00	; 0
		{
			terminus = '?';
		}
		else if(msgType != LINKBUS_MSG_COMMAND)
		{
			valid = FALSE;
     87a:	00 23       	and	r16, r16
		}

		if(valid)
     87c:	f9 f0       	breq	.+62     	; 0x8bc <lb_send_VOL+0x114>
     87e:	1f 92       	push	r1
		{
			sprintf(g_tempMsgBuff, "%cVOL,%s,%s%c", prefix, t, v, terminus);
     880:	9f 93       	push	r25
     882:	9e 01       	movw	r18, r28
     884:	2d 5f       	subi	r18, 0xFD	; 253
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	3f 93       	push	r19
     88a:	2f 93       	push	r18
     88c:	22 50       	subi	r18, 0x02	; 2
     88e:	31 09       	sbc	r19, r1
     890:	3f 93       	push	r19
     892:	2f 93       	push	r18
     894:	1f 92       	push	r1
     896:	8f 93       	push	r24
     898:	82 e3       	ldi	r24, 0x32	; 50
     89a:	94 e0       	ldi	r25, 0x04	; 4
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	81 eb       	ldi	r24, 0xB1	; 177
     8a2:	96 e0       	ldi	r25, 0x06	; 6
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
			linkbus_send_text(g_tempMsgBuff);
     8ac:	81 eb       	ldi	r24, 0xB1	; 177
     8ae:	96 e0       	ldi	r25, 0x06	; 6
     8b0:	77 dd       	rcall	.-1298   	; 0x3a0 <linkbus_send_text>
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	26 96       	adiw	r28, 0x06	; 6
		}
	}
}
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <lb_send_BND>:
     8d2:	ff 92       	push	r15

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
     8d4:	0f 93       	push	r16
     8d6:	1f 93       	push	r17
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	00 d0       	rcall	.+0      	; 0x8de <lb_send_BND+0xc>
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <lb_send_BND+0xe>
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	83 30       	cpi	r24, 0x03	; 3
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
	char terminus = ';';

	if(msgType == LINKBUS_MSG_REPLY)
     8e6:	59 f0       	breq	.+22     	; 0x8fe <lb_send_BND+0x2c>
     8e8:	82 30       	cpi	r24, 0x02	; 2
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     8ea:	81 f0       	breq	.+32     	; 0x90c <__stack+0xd>
     8ec:	81 30       	cpi	r24, 0x01	; 1
	{
		terminus = '?';
	}
	else if(msgType != LINKBUS_MSG_COMMAND)
     8ee:	a9 f4       	brne	.+42     	; 0x91a <__stack+0x1b>
     8f0:	0f 2e       	mov	r0, r31
void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
	char terminus = ';';
     8f2:	fb e3       	ldi	r31, 0x3B	; 59
     8f4:	ff 2e       	mov	r15, r31
     8f6:	f0 2d       	mov	r31, r0
     8f8:	04 e2       	ldi	r16, 0x24	; 36

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
     8fa:	11 e0       	ldi	r17, 0x01	; 1
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     8fc:	14 c0       	rjmp	.+40     	; 0x926 <__stack+0x27>
     8fe:	0f 2e       	mov	r0, r31
	char prefix = '$';
	char terminus = ';';
     900:	fb e3       	ldi	r31, 0x3B	; 59
     902:	ff 2e       	mov	r15, r31
     904:	f0 2d       	mov	r31, r0
     906:	01 e2       	ldi	r16, 0x21	; 33

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     908:	11 e0       	ldi	r17, 0x01	; 1
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     90a:	0d c0       	rjmp	.+26     	; 0x926 <__stack+0x27>
     90c:	0f 2e       	mov	r0, r31
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     90e:	ff e3       	ldi	r31, 0x3F	; 63
     910:	ff 2e       	mov	r15, r31
     912:	f0 2d       	mov	r31, r0
     914:	04 e2       	ldi	r16, 0x24	; 36

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
     916:	11 e0       	ldi	r17, 0x01	; 1
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     918:	06 c0       	rjmp	.+12     	; 0x926 <__stack+0x27>
     91a:	0f 2e       	mov	r0, r31
	char prefix = '$';
	char terminus = ';';
     91c:	fb e3       	ldi	r31, 0x3B	; 59
     91e:	ff 2e       	mov	r15, r31
     920:	f0 2d       	mov	r31, r0
     922:	04 e2       	ldi	r16, 0x24	; 36

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
     924:	10 e0       	ldi	r17, 0x00	; 0
	{
		terminus = '?';
	}
	else if(msgType != LINKBUS_MSG_COMMAND)
	{
		valid = FALSE;
     926:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>
	}

	if(g_lb_terminal_mode)
     92a:	88 23       	and	r24, r24
     92c:	61 f0       	breq	.+24     	; 0x946 <__stack+0x47>
     92e:	61 11       	cpse	r22, r1
	{
		sprintf(b, "%s", band == BAND_2M ? "2m" : "80m");
     930:	03 c0       	rjmp	.+6      	; 0x938 <__stack+0x39>
     932:	60 e4       	ldi	r22, 0x40	; 64
     934:	74 e0       	ldi	r23, 0x04	; 4
     936:	02 c0       	rjmp	.+4      	; 0x93c <__stack+0x3d>
     938:	63 e4       	ldi	r22, 0x43	; 67
     93a:	74 e0       	ldi	r23, 0x04	; 4
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 3c 24 	call	0x4878	; 0x4878 <strcpy>
     944:	12 c0       	rjmp	.+36     	; 0x96a <__stack+0x6b>
     946:	1f 92       	push	r1
	}
	else
	{
		sprintf(b, "%d", band);
     948:	6f 93       	push	r22
     94a:	85 ef       	ldi	r24, 0xF5	; 245
     94c:	93 e0       	ldi	r25, 0x03	; 3
     94e:	9f 93       	push	r25
     950:	8f 93       	push	r24
     952:	ce 01       	movw	r24, r28
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	11 23       	and	r17, r17
	}

	if(valid)
     96c:	b1 f1       	breq	.+108    	; 0x9da <__stack+0xdb>
     96e:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>
	{
		if(g_lb_terminal_mode)
     972:	88 23       	and	r24, r24
     974:	c1 f0       	breq	.+48     	; 0x9a6 <__stack+0xa7>
     976:	80 e0       	ldi	r24, 0x00	; 0
		{
			sprintf(g_tempMsgBuff, "> BND=%s%s", b, lineTerm);
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	9f 93       	push	r25
     97c:	8f 93       	push	r24
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	9f 93       	push	r25
     984:	8f 93       	push	r24
     986:	87 e4       	ldi	r24, 0x47	; 71
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	81 eb       	ldi	r24, 0xB1	; 177
     990:	96 e0       	ldi	r25, 0x06	; 6
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	17 c0       	rjmp	.+46     	; 0x9d4 <__stack+0xd5>
     9a6:	1f 92       	push	r1
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cBND,%s%c", prefix, b, terminus);
     9a8:	ff 92       	push	r15
     9aa:	ce 01       	movw	r24, r28
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	9f 93       	push	r25
     9b0:	8f 93       	push	r24
     9b2:	1f 92       	push	r1
     9b4:	0f 93       	push	r16
     9b6:	82 e5       	ldi	r24, 0x52	; 82
     9b8:	94 e0       	ldi	r25, 0x04	; 4
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	81 eb       	ldi	r24, 0xB1	; 177
     9c0:	96 e0       	ldi	r25, 0x06	; 6
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
		}

		linkbus_send_text(g_tempMsgBuff);
     9d4:	81 eb       	ldi	r24, 0xB1	; 177
     9d6:	96 e0       	ldi	r25, 0x06	; 6
     9d8:	e3 dc       	rcall	.-1594   	; 0x3a0 <linkbus_send_text>
     9da:	0f 90       	pop	r0
	}
}
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	08 95       	ret

000009ee <lb_send_BCR>:
     9ee:	1f 93       	push	r17

void lb_send_BCR(LBbroadcastType bcType, BOOL start)
{
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <lb_send_BCR+0x8>
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <lb_send_BCR+0xa>
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	16 2f       	mov	r17, r22
     9fe:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <xtal_freq+0x10>
	char t[4] = "\0";
     a02:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <xtal_freq+0x11>
     a06:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <xtal_freq+0x12>
     a0a:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <xtal_freq+0x13>
     a0e:	49 83       	std	Y+1, r20	; 0x01
     a10:	5a 83       	std	Y+2, r21	; 0x02
     a12:	6b 83       	std	Y+3, r22	; 0x03
     a14:	7c 83       	std	Y+4, r23	; 0x04
     a16:	1f 92       	push	r1
	char prefix = '$';
	char terminus = ';';

	sprintf(t, "%d", bcType);
     a18:	8f 93       	push	r24
     a1a:	85 ef       	ldi	r24, 0xF5	; 245
     a1c:	93 e0       	ldi	r25, 0x03	; 3
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	ce 01       	movw	r24, r28
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     a2e:	0f 90       	pop	r0

	if(start)
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	11 11       	cpse	r17, r1
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <lb_send_BCR+0x54>

void lb_send_BCR(LBbroadcastType bcType, BOOL start)
{
	char t[4] = "\0";
	char prefix = '$';
	char terminus = ';';
     a3e:	8b e3       	ldi	r24, 0x3B	; 59
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <lb_send_BCR+0x56>

	sprintf(t, "%d", bcType);

	if(start)
	{
		terminus = '?';
     a42:	8f e3       	ldi	r24, 0x3F	; 63
	}

	sprintf(g_tempMsgBuff, "%cBCR,%s%c", prefix, t, terminus);
     a44:	1f 92       	push	r1
     a46:	8f 93       	push	r24
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	9f 93       	push	r25
     a4e:	8f 93       	push	r24
     a50:	1f 92       	push	r1
     a52:	84 e2       	ldi	r24, 0x24	; 36
     a54:	8f 93       	push	r24
     a56:	8d e5       	ldi	r24, 0x5D	; 93
     a58:	94 e0       	ldi	r25, 0x04	; 4
     a5a:	9f 93       	push	r25
     a5c:	8f 93       	push	r24
     a5e:	81 eb       	ldi	r24, 0xB1	; 177
     a60:	96 e0       	ldi	r25, 0x06	; 6
     a62:	9f 93       	push	r25
     a64:	8f 93       	push	r24
     a66:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     a6a:	81 eb       	ldi	r24, 0xB1	; 177
     a6c:	96 e0       	ldi	r25, 0x06	; 6
     a6e:	98 dc       	rcall	.-1744   	; 0x3a0 <linkbus_send_text>
}
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	08 95       	ret

00000a8a <lb_send_sync>:

void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
     a8a:	86 e0       	ldi	r24, 0x06	; 6
     a8c:	e8 e6       	ldi	r30, 0x68	; 104
     a8e:	f4 e0       	ldi	r31, 0x04	; 4
     a90:	a1 eb       	ldi	r26, 0xB1	; 177
     a92:	b6 e0       	ldi	r27, 0x06	; 6
     a94:	01 90       	ld	r0, Z+
     a96:	0d 92       	st	X+, r0
     a98:	8a 95       	dec	r24
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <lb_send_sync+0xa>
	linkbus_send_text(g_tempMsgBuff);
     a9c:	81 eb       	ldi	r24, 0xB1	; 177
     a9e:	96 e0       	ldi	r25, 0x06	; 6
     aa0:	7f cc       	rjmp	.-1794   	; 0x3a0 <linkbus_send_text>
     aa2:	08 95       	ret

00000aa4 <lb_broadcast_rssi>:
     aa4:	cf 93       	push	r28
}

void lb_broadcast_rssi(uint16_t data)
{
     aa6:	df 93       	push	r29
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <lb_broadcast_rssi+0x6>
     aaa:	00 d0       	rcall	.+0      	; 0xaac <lb_broadcast_rssi+0x8>
     aac:	00 d0       	rcall	.+0      	; 0xaae <lb_broadcast_rssi+0xa>
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
     ab2:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <xtal_freq+0x4>
	char t[6] = "\0";
     ab6:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <xtal_freq+0x5>
     aba:	3a 83       	std	Y+2, r19	; 0x02
     abc:	29 83       	std	Y+1, r18	; 0x01
     abe:	fe 01       	movw	r30, r28
     ac0:	33 96       	adiw	r30, 0x03	; 3
     ac2:	24 e0       	ldi	r18, 0x04	; 4
     ac4:	df 01       	movw	r26, r30
     ac6:	1d 92       	st	X+, r1
     ac8:	2a 95       	dec	r18
     aca:	e9 f7       	brne	.-6      	; 0xac6 <lb_broadcast_rssi+0x22>
     acc:	9f 93       	push	r25

	sprintf(t, "%d", data);
     ace:	8f 93       	push	r24
     ad0:	85 ef       	ldi	r24, 0xF5	; 245
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	ce 01       	movw	r24, r28
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     ae4:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>

	if(g_lb_terminal_mode)
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	88 23       	and	r24, r24
     af6:	c1 f0       	breq	.+48     	; 0xb28 <lb_broadcast_rssi+0x84>
     af8:	80 e0       	ldi	r24, 0x00	; 0
	{
		sprintf(g_tempMsgBuff, "> RSSI=%s%s", t, lineTerm);
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	8e e6       	ldi	r24, 0x6E	; 110
     b0a:	94 e0       	ldi	r25, 0x04	; 4
     b0c:	9f 93       	push	r25
     b0e:	8f 93       	push	r24
     b10:	81 eb       	ldi	r24, 0xB1	; 177
     b12:	96 e0       	ldi	r25, 0x06	; 6
     b14:	9f 93       	push	r25
     b16:	8f 93       	push	r24
     b18:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	14 c0       	rjmp	.+40     	; 0xb50 <lb_broadcast_rssi+0xac>
	}
	else
	{
		sprintf(g_tempMsgBuff, "!S,%s;", t);
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	9f 93       	push	r25
     b2e:	8f 93       	push	r24
     b30:	8a e7       	ldi	r24, 0x7A	; 122
     b32:	94 e0       	ldi	r25, 0x04	; 4
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	81 eb       	ldi	r24, 0xB1	; 177
     b3a:	96 e0       	ldi	r25, 0x06	; 6
     b3c:	9f 93       	push	r25
     b3e:	8f 93       	push	r24
     b40:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
	}

	linkbus_send_text(g_tempMsgBuff);
     b50:	81 eb       	ldi	r24, 0xB1	; 177
     b52:	96 e0       	ldi	r25, 0x06	; 6
     b54:	25 dc       	rcall	.-1974   	; 0x3a0 <linkbus_send_text>
     b56:	26 96       	adiw	r28, 0x06	; 6
}
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <lb_broadcast_rf>:
     b68:	cf 93       	push	r28

void lb_broadcast_rf(uint16_t data)
{
     b6a:	df 93       	push	r29
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <lb_broadcast_rf+0x6>
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <lb_broadcast_rf+0x8>
     b70:	00 d0       	rcall	.+0      	; 0xb72 <lb_broadcast_rf+0xa>
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <xtal_freq+0x4>
	char t[6] = "\0";
     b7a:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <xtal_freq+0x5>
     b7e:	3a 83       	std	Y+2, r19	; 0x02
     b80:	29 83       	std	Y+1, r18	; 0x01
     b82:	fe 01       	movw	r30, r28
     b84:	33 96       	adiw	r30, 0x03	; 3
     b86:	24 e0       	ldi	r18, 0x04	; 4
     b88:	df 01       	movw	r26, r30
     b8a:	1d 92       	st	X+, r1
     b8c:	2a 95       	dec	r18
     b8e:	e9 f7       	brne	.-6      	; 0xb8a <lb_broadcast_rf+0x22>
     b90:	9f 93       	push	r25

	sprintf(t, "%d", data);
     b92:	8f 93       	push	r24
     b94:	85 ef       	ldi	r24, 0xF5	; 245
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	9f 93       	push	r25
     ba2:	8f 93       	push	r24
     ba4:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     ba8:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>

	if(g_lb_terminal_mode)
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	88 23       	and	r24, r24
     bba:	c1 f0       	breq	.+48     	; 0xbec <lb_broadcast_rf+0x84>
     bbc:	80 e0       	ldi	r24, 0x00	; 0
	{
		sprintf(g_tempMsgBuff, "> RF=%s%s", t, lineTerm);
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	9f 93       	push	r25
     bca:	8f 93       	push	r24
     bcc:	81 e8       	ldi	r24, 0x81	; 129
     bce:	94 e0       	ldi	r25, 0x04	; 4
     bd0:	9f 93       	push	r25
     bd2:	8f 93       	push	r24
     bd4:	81 eb       	ldi	r24, 0xB1	; 177
     bd6:	96 e0       	ldi	r25, 0x06	; 6
     bd8:	9f 93       	push	r25
     bda:	8f 93       	push	r24
     bdc:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	f8 94       	cli
     be4:	de bf       	out	0x3e, r29	; 62
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	14 c0       	rjmp	.+40     	; 0xc14 <lb_broadcast_rf+0xac>
	}
	else
	{
		sprintf(g_tempMsgBuff, "!R,%s;", t);
     bec:	ce 01       	movw	r24, r28
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	9f 93       	push	r25
     bf2:	8f 93       	push	r24
     bf4:	8b e8       	ldi	r24, 0x8B	; 139
     bf6:	94 e0       	ldi	r25, 0x04	; 4
     bf8:	9f 93       	push	r25
     bfa:	8f 93       	push	r24
     bfc:	81 eb       	ldi	r24, 0xB1	; 177
     bfe:	96 e0       	ldi	r25, 0x06	; 6
     c00:	9f 93       	push	r25
     c02:	8f 93       	push	r24
     c04:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
	}
	linkbus_send_text(g_tempMsgBuff);
     c14:	81 eb       	ldi	r24, 0xB1	; 177
     c16:	96 e0       	ldi	r25, 0x06	; 6
     c18:	c3 db       	rcall	.-2170   	; 0x3a0 <linkbus_send_text>
     c1a:	26 96       	adiw	r28, 0x06	; 6
}
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	df 91       	pop	r29
     c28:	cf 91       	pop	r28
     c2a:	08 95       	ret

00000c2c <lb_broadcast_num>:
     c2c:	0f 93       	push	r16

void lb_broadcast_num(uint16_t data, char* str)
{
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	00 d0       	rcall	.+0      	; 0xc36 <lb_broadcast_num+0xa>
     c36:	00 d0       	rcall	.+0      	; 0xc38 <lb_broadcast_num+0xc>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <lb_broadcast_num+0xe>
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	8b 01       	movw	r16, r22
     c40:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <xtal_freq+0x4>
	char t[6] = "\0";
     c44:	30 91 4b 01 	lds	r19, 0x014B	; 0x80014b <xtal_freq+0x5>
     c48:	3a 83       	std	Y+2, r19	; 0x02
     c4a:	29 83       	std	Y+1, r18	; 0x01
     c4c:	fe 01       	movw	r30, r28
     c4e:	33 96       	adiw	r30, 0x03	; 3
     c50:	24 e0       	ldi	r18, 0x04	; 4
     c52:	df 01       	movw	r26, r30
     c54:	1d 92       	st	X+, r1
     c56:	2a 95       	dec	r18
     c58:	e9 f7       	brne	.-6      	; 0xc54 <lb_broadcast_num+0x28>
     c5a:	9f 93       	push	r25

	sprintf(t, "%u", data);
     c5c:	8f 93       	push	r24
     c5e:	82 e9       	ldi	r24, 0x92	; 146
     c60:	94 e0       	ldi	r25, 0x04	; 4
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     c72:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <g_tempMsgBuff>
	g_tempMsgBuff[0] = '\0';
     c76:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_lb_terminal_mode>

	if(g_lb_terminal_mode)
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	88 23       	and	r24, r24
     c88:	a9 f1       	breq	.+106    	; 0xcf4 <lb_broadcast_num+0xc8>
     c8a:	01 15       	cp	r16, r1
	{
		if(str)
     c8c:	11 05       	cpc	r17, r1
     c8e:	d1 f0       	breq	.+52     	; 0xcc4 <lb_broadcast_num+0x98>
     c90:	80 e0       	ldi	r24, 0x00	; 0
		{
			sprintf(g_tempMsgBuff, "> %s=%s%s", str, t, lineTerm);
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	1f 93       	push	r17
     ca2:	0f 93       	push	r16
     ca4:	8e e1       	ldi	r24, 0x1E	; 30
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	81 eb       	ldi	r24, 0xB1	; 177
     cae:	96 e0       	ldi	r25, 0x06	; 6
     cb0:	9f 93       	push	r25
     cb2:	8f 93       	push	r24
     cb4:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	f8 94       	cli
     cbc:	de bf       	out	0x3e, r29	; 62
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	cd bf       	out	0x3d, r28	; 61
     cc2:	30 c0       	rjmp	.+96     	; 0xd24 <lb_broadcast_num+0xf8>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
		}
		else
		{
			sprintf(g_tempMsgBuff, "> %s%s", t, lineTerm);
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	9f 93       	push	r25
     cd2:	8f 93       	push	r24
     cd4:	89 e0       	ldi	r24, 0x09	; 9
     cd6:	94 e0       	ldi	r25, 0x04	; 4
     cd8:	9f 93       	push	r25
     cda:	8f 93       	push	r24
     cdc:	81 eb       	ldi	r24, 0xB1	; 177
     cde:	96 e0       	ldi	r25, 0x06	; 6
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
     ce4:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	18 c0       	rjmp	.+48     	; 0xd24 <lb_broadcast_num+0xf8>
     cf4:	01 15       	cp	r16, r1
		}
	}
	else
	{
		if(str)
     cf6:	11 05       	cpc	r17, r1
     cf8:	a9 f0       	breq	.+42     	; 0xd24 <lb_broadcast_num+0xf8>
		{
			sprintf(g_tempMsgBuff, "%s,%s;", str, t);
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	1f 93       	push	r17
     d04:	0f 93       	push	r16
     d06:	85 e9       	ldi	r24, 0x95	; 149
     d08:	94 e0       	ldi	r25, 0x04	; 4
     d0a:	9f 93       	push	r25
     d0c:	8f 93       	push	r24
     d0e:	81 eb       	ldi	r24, 0xB1	; 177
     d10:	96 e0       	ldi	r25, 0x06	; 6
     d12:	9f 93       	push	r25
     d14:	8f 93       	push	r24
     d16:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
		}
	}

	if(g_tempMsgBuff[0]) linkbus_send_text(g_tempMsgBuff);
     d24:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <g_tempMsgBuff>
     d28:	88 23       	and	r24, r24
     d2a:	19 f0       	breq	.+6      	; 0xd32 <lb_broadcast_num+0x106>
     d2c:	81 eb       	ldi	r24, 0xB1	; 177
     d2e:	96 e0       	ldi	r25, 0x06	; 6
     d30:	37 db       	rcall	.-2450   	; 0x3a0 <linkbus_send_text>
     d32:	26 96       	adiw	r28, 0x06	; 6
}
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	df 91       	pop	r29
     d40:	cf 91       	pop	r28
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	08 95       	ret

00000d48 <wdt_init>:
     d48:	a8 95       	wdr
 ************************************************************************/
void __attribute__((optimize("O1"))) wdt_init(WDReset resetType)
{
	wdt_reset();

	if(MCUSR & (1 << WDRF))     /* If a reset was caused by the Watchdog Timer perform any special operations */
     d4a:	04 b6       	in	r0, 0x34	; 52
     d4c:	03 fe       	sbrs	r0, 3
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <wdt_init+0xe>
	{
		MCUSR &= (1 << WDRF);   /* Clear the WDT reset flag */
     d50:	94 b7       	in	r25, 0x34	; 52
     d52:	98 70       	andi	r25, 0x08	; 8
     d54:	94 bf       	out	0x34, r25	; 52
	}

	if(resetType == WD_HW_RESETS)
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	41 f4       	brne	.+16     	; 0xd6a <wdt_init+0x22>
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     d5a:	e0 e6       	ldi	r30, 0x60	; 96
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	90 81       	ld	r25, Z
     d60:	98 61       	ori	r25, 0x18	; 24
     d62:	90 83       	st	Z, r25
		WDTCSR = (1 << WDP3) | (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt every 4 seconds, and hardware resets */
     d64:	98 e6       	ldi	r25, 0x68	; 104
     d66:	90 83       	st	Z, r25
     d68:	11 c0       	rjmp	.+34     	; 0xd8c <wdt_init+0x44>
		/*	WDTCSR = (1 << WDP3) | (1 << WDP0) | (1 << WDIE) | (1 << WDE); // Enable WD interrupt every 8 seconds, and hardware resets */
	}
	else if(resetType == WD_SW_RESETS)
     d6a:	81 11       	cpse	r24, r1
     d6c:	08 c0       	rjmp	.+16     	; 0xd7e <wdt_init+0x36>
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     d6e:	e0 e6       	ldi	r30, 0x60	; 96
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	90 81       	ld	r25, Z
     d74:	98 61       	ori	r25, 0x18	; 24
     d76:	90 83       	st	Z, r25
		/*	WDTCSR = (1 << WDP3) | (1 << WDIE); // Enable WD interrupt every 4 seconds (no HW reset)
		 *	WDTCSR = (1 << WDP3) | (1 << WDP0)  | (1 << WDIE); // Enable WD interrupt every 8 seconds (no HW reset) */
		WDTCSR = (1 << WDP1) | (1 << WDP2)  | (1 << WDIE);  /* Enable WD interrupt every 1 seconds (no HW reset) */
     d78:	96 e4       	ldi	r25, 0x46	; 70
     d7a:	90 83       	st	Z, r25
     d7c:	07 c0       	rjmp	.+14     	; 0xd8c <wdt_init+0x44>
	}
	else
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     d7e:	e0 e6       	ldi	r30, 0x60	; 96
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	90 81       	ld	r25, Z
     d84:	98 61       	ori	r25, 0x18	; 24
     d86:	90 83       	st	Z, r25
		WDTCSR = (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt in 16ms, and hardware reset */
     d88:	98 e4       	ldi	r25, 0x48	; 72
     d8a:	90 83       	st	Z, r25
	}
	
	g_enableHardwareWDResets = (resetType != WD_SW_RESETS);
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	81 11       	cpse	r24, r1
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <wdt_init+0x4c>
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	90 93 10 07 	sts	0x0710, r25	; 0x800710 <g_enableHardwareWDResets>
     d98:	08 95       	ret

00000d9a <__vector_8>:
 * Timer/Counter2 Compare Match A ISR
 *
 * Handles periodic tasks not requiring precise timing.
 ************************************************************************/
ISR( TIMER2_COMPB_vect )
{
     d9a:	1f 92       	push	r1
     d9c:	0f 92       	push	r0
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	0f 92       	push	r0
     da2:	11 24       	eor	r1, r1
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	static BOOL conversionInProcess = FALSE;
	static int8_t indexConversionInProcess;
	static uint16_t codeInc = 0;

	g_tick_count++;
     dd2:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <g_tick_count>
     dd6:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <g_tick_count+0x1>
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <g_tick_count+0x1>
     de0:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <g_tick_count>

	static BOOL key = FALSE;
	
	if(g_on_the_air)
     de4:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <g_on_the_air>
     de8:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <g_on_the_air+0x1>
     dec:	89 2b       	or	r24, r25
     dee:	51 f1       	breq	.+84     	; 0xe44 <__vector_8+0xaa>
	{
		if(codeInc)
     df0:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <codeInc.3071>
     df4:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <codeInc.3071+0x1>
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	c1 f0       	breq	.+48     	; 0xe2c <__vector_8+0x92>
		{
			if(codeInc == 10)
     dfc:	0a 97       	sbiw	r24, 0x0a	; 10
     dfe:	61 f4       	brne	.+24     	; 0xe18 <__vector_8+0x7e>
			{
				key = makeMorse(NULL, FALSE);
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 68 13 	call	0x26d0	; 0x26d0 <makeMorse>
     e0a:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <key.3072>
				if(key) powerToTransmitter(ON);
     e0e:	88 23       	and	r24, r24
     e10:	19 f0       	breq	.+6      	; 0xe18 <__vector_8+0x7e>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <powerToTransmitter>
			else if(codeInc == g_code_throttle)
			{
//				if(!key) powerToTransmitter(OFF);	
			}
			
			codeInc--;
     e18:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <codeInc.3071>
     e1c:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <codeInc.3071+0x1>
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <codeInc.3071+0x1>
     e26:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <codeInc.3071>
     e2a:	0c c0       	rjmp	.+24     	; 0xe44 <__vector_8+0xaa>
		}
		else
		{
			keyTransmitter(key);
     e2c:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <key.3072>
     e30:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <keyTransmitter>
			codeInc = g_code_throttle;
     e34:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_code_throttle>
     e38:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_code_throttle+0x1>
     e3c:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <codeInc.3071+0x1>
     e40:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <codeInc.3071>
	}

	/**
	 * Handle Periodic ADC Readings
	 * The following algorithm allows multipe ADC channel readings to be performed at different polling intervals. */
	if(!conversionInProcess)
     e44:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <conversionInProcess.3069>
     e48:	81 11       	cpse	r24, r1
     e4a:	56 c0       	rjmp	.+172    	; 0xef8 <__vector_8+0x15e>
	{
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <indexConversionInProcess.3070>

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
     e52:	19 82       	std	Y+1, r1	; 0x01
     e54:	25 c0       	rjmp	.+74     	; 0xea0 <__vector_8+0x106>
		{
			if(g_tickCountdownADCFlag[i])
     e56:	e9 81       	ldd	r30, Y+1	; 0x01
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	ee 0f       	add	r30, r30
     e5c:	ff 1f       	adc	r31, r31
     e5e:	e5 5f       	subi	r30, 0xF5	; 245
     e60:	fe 4f       	sbci	r31, 0xFE	; 254
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	89 2b       	or	r24, r25
     e68:	59 f0       	breq	.+22     	; 0xe80 <__vector_8+0xe6>
			{
				g_tickCountdownADCFlag[i]--;
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	e5 5f       	subi	r30, 0xF5	; 245
     e74:	fe 4f       	sbci	r31, 0xFE	; 254
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	80 83       	st	Z, r24
			}

			if(g_tickCountdownADCFlag[i] == 0)
     e80:	e9 81       	ldd	r30, Y+1	; 0x01
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	e5 5f       	subi	r30, 0xF5	; 245
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	80 81       	ld	r24, Z
     e8e:	91 81       	ldd	r25, Z+1	; 0x01
     e90:	89 2b       	or	r24, r25
     e92:	19 f4       	brne	.+6      	; 0xe9a <__vector_8+0x100>
			{
				indexConversionInProcess = (int8_t)i;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <indexConversionInProcess.3070>
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	8f 5f       	subi	r24, 0xFF	; 255
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	c0 f2       	brcs	.-80     	; 0xe56 <__vector_8+0xbc>
			{
				indexConversionInProcess = (int8_t)i;
			}
		}

		if(indexConversionInProcess >= 0)
     ea6:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <indexConversionInProcess.3070>
     eaa:	88 23       	and	r24, r24
     eac:	0c f4       	brge	.+2      	; 0xeb0 <__vector_8+0x116>
     eae:	aa c0       	rjmp	.+340    	; 0x1004 <__vector_8+0x26a>
		{
			g_tickCountdownADCFlag[indexConversionInProcess] = g_adcChannelConversionPeriod_ticks[indexConversionInProcess];    /* reset the tick countdown */
     eb0:	08 2e       	mov	r0, r24
     eb2:	00 0c       	add	r0, r0
     eb4:	99 0b       	sbc	r25, r25
     eb6:	9c 01       	movw	r18, r24
     eb8:	22 0f       	add	r18, r18
     eba:	33 1f       	adc	r19, r19
     ebc:	f9 01       	movw	r30, r18
     ebe:	e7 56       	subi	r30, 0x67	; 103
     ec0:	fc 4f       	sbci	r31, 0xFC	; 252
     ec2:	40 81       	ld	r20, Z
     ec4:	51 81       	ldd	r21, Z+1	; 0x01
     ec6:	f9 01       	movw	r30, r18
     ec8:	e5 5f       	subi	r30, 0xF5	; 245
     eca:	fe 4f       	sbci	r31, 0xFE	; 254
     ecc:	51 83       	std	Z+1, r21	; 0x01
     ece:	40 83       	st	Z, r20
			ADMUX = (ADMUX & 0xF0) | activeADC[indexConversionInProcess];                                                       /* index through all active channels */
     ed0:	ec e7       	ldi	r30, 0x7C	; 124
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	20 81       	ld	r18, Z
     ed6:	dc 01       	movw	r26, r24
     ed8:	a3 56       	subi	r26, 0x63	; 99
     eda:	bc 4f       	sbci	r27, 0xFC	; 252
     edc:	9c 91       	ld	r25, X
     ede:	82 2f       	mov	r24, r18
     ee0:	80 7f       	andi	r24, 0xF0	; 240
     ee2:	89 2b       	or	r24, r25
     ee4:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);                                                                                              /*single conversion mode */
     ee6:	ea e7       	ldi	r30, 0x7A	; 122
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	80 64       	ori	r24, 0x40	; 64
     eee:	80 83       	st	Z, r24
			conversionInProcess = TRUE;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <conversionInProcess.3069>
     ef6:	86 c0       	rjmp	.+268    	; 0x1004 <__vector_8+0x26a>
		}
	}
	else if(!( ADCSRA & (1 << ADSC) ))                                                                                          /* wait for conversion to complete */
     ef8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     efc:	86 fd       	sbrc	r24, 6
     efe:	82 c0       	rjmp	.+260    	; 0x1004 <__vector_8+0x26a>
	{
		uint16_t hold = ADC;
     f00:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     f04:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		uint16_t holdConversionResult = (uint16_t)(((uint32_t)hold * ADC_REF_VOLTAGE_mV) >> 10);                                /* millivolts at ADC pin */
     f08:	a4 ee       	ldi	r26, 0xE4	; 228
     f0a:	bc e0       	ldi	r27, 0x0C	; 12
     f0c:	0e 94 cd 23 	call	0x479a	; 0x479a <__umulhisi3>
     f10:	6b 01       	movw	r12, r22
     f12:	7c 01       	movw	r14, r24
     f14:	0b 2e       	mov	r0, r27
     f16:	ba e0       	ldi	r27, 0x0A	; 10
     f18:	f6 94       	lsr	r15
     f1a:	e7 94       	ror	r14
     f1c:	d7 94       	ror	r13
     f1e:	c7 94       	ror	r12
     f20:	ba 95       	dec	r27
     f22:	d1 f7       	brne	.-12     	; 0xf18 <__vector_8+0x17e>
     f24:	b0 2d       	mov	r27, r0
     f26:	a6 01       	movw	r20, r12
		uint16_t lastResult = g_lastConversionResult[indexConversionInProcess];
     f28:	20 91 0b 07 	lds	r18, 0x070B	; 0x80070b <indexConversionInProcess.3070>
     f2c:	02 2f       	mov	r16, r18
     f2e:	02 2e       	mov	r0, r18
     f30:	00 0c       	add	r0, r0
     f32:	11 0b       	sbc	r17, r17
     f34:	f8 01       	movw	r30, r16
     f36:	ee 0f       	add	r30, r30
     f38:	ff 1f       	adc	r31, r31
     f3a:	ea 5e       	subi	r30, 0xEA	; 234
     f3c:	f8 4f       	sbci	r31, 0xF8	; 248
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
		BOOL directionUP = holdConversionResult > lastResult;
		uint16_t delta = directionUP ? holdConversionResult - lastResult : lastResult - holdConversionResult;
     f42:	8c 15       	cp	r24, r12
     f44:	9d 05       	cpc	r25, r13
     f46:	20 f4       	brcc	.+8      	; 0xf50 <__vector_8+0x1b6>
     f48:	b6 01       	movw	r22, r12
     f4a:	68 1b       	sub	r22, r24
     f4c:	79 0b       	sbc	r23, r25
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <__vector_8+0x1bc>
     f50:	bc 01       	movw	r22, r24
     f52:	6c 19       	sub	r22, r12
     f54:	7d 09       	sbc	r23, r13

		g_adcUpdated[indexConversionInProcess] = TRUE;
     f56:	31 e0       	ldi	r19, 0x01	; 1
     f58:	f8 01       	movw	r30, r16
     f5a:	e6 5e       	subi	r30, 0xE6	; 230
     f5c:	f8 4f       	sbci	r31, 0xF8	; 248
     f5e:	30 83       	st	Z, r19

		if(indexConversionInProcess == BATTERY_READING)
     f60:	21 11       	cpse	r18, r1
     f62:	2f c0       	rjmp	.+94     	; 0xfc2 <__vector_8+0x228>
		{
			if(delta > g_filterADCValue[indexConversionInProcess])
     f64:	f8 01       	movw	r30, r16
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	eb 56       	subi	r30, 0x6B	; 107
     f6c:	fc 4f       	sbci	r31, 0xFC	; 252
     f6e:	20 81       	ld	r18, Z
     f70:	31 81       	ldd	r19, Z+1	; 0x01
     f72:	26 17       	cp	r18, r22
     f74:	37 07       	cpc	r19, r23
     f76:	58 f4       	brcc	.+22     	; 0xf8e <__vector_8+0x1f4>
			{
				lastResult = holdConversionResult;
				g_tickCountdownADCFlag[indexConversionInProcess] = 100; /* speed up next conversion */
     f78:	f8 01       	movw	r30, r16
     f7a:	ee 0f       	add	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	e5 5f       	subi	r30, 0xF5	; 245
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	84 e6       	ldi	r24, 0x64	; 100
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	80 83       	st	Z, r24

		if(indexConversionInProcess == BATTERY_READING)
		{
			if(delta > g_filterADCValue[indexConversionInProcess])
			{
				lastResult = holdConversionResult;
     f8a:	c6 01       	movw	r24, r12
     f8c:	32 c0       	rjmp	.+100    	; 0xff2 <__vector_8+0x258>
				g_tickCountdownADCFlag[indexConversionInProcess] = 100; /* speed up next conversion */
			}
			else
			{
				if(directionUP)
     f8e:	84 17       	cp	r24, r20
     f90:	95 07       	cpc	r25, r21
     f92:	10 f4       	brcc	.+4      	; 0xf98 <__vector_8+0x1fe>
				{
					lastResult++;
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	03 c0       	rjmp	.+6      	; 0xf9e <__vector_8+0x204>
				}
				else if(delta)
     f98:	67 2b       	or	r22, r23
     f9a:	09 f0       	breq	.+2      	; 0xf9e <__vector_8+0x204>
				{
					lastResult--;
     f9c:	01 97       	sbiw	r24, 0x01	; 1
				}

				g_battery_measurements_active = TRUE;
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	20 93 45 07 	sts	0x0745, r18	; 0x800745 <g_battery_measurements_active>
	
				if(lastResult > VOLTS_5)
     fa4:	82 38       	cpi	r24, 0x82	; 130
     fa6:	23 e0       	ldi	r18, 0x03	; 3
     fa8:	92 07       	cpc	r25, r18
     faa:	18 f0       	brcs	.+6      	; 0xfb2 <__vector_8+0x218>
				{
					g_battery_type = BATTERY_9V;
     fac:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <g_battery_type>
     fb0:	20 c0       	rjmp	.+64     	; 0xff2 <__vector_8+0x258>
				}
				else if(lastResult > VOLTS_3_0)
     fb2:	84 3c       	cpi	r24, 0xC4	; 196
     fb4:	21 e0       	ldi	r18, 0x01	; 1
     fb6:	92 07       	cpc	r25, r18
     fb8:	e0 f0       	brcs	.+56     	; 0xff2 <__vector_8+0x258>
				{
					g_battery_type = BATTERY_4r2V;
     fba:	21 e0       	ldi	r18, 0x01	; 1
     fbc:	20 93 32 01 	sts	0x0132, r18	; 0x800132 <g_battery_type>
     fc0:	18 c0       	rjmp	.+48     	; 0xff2 <__vector_8+0x258>
				}
			}
		}
		else if(indexConversionInProcess == PA_VOLTAGE_READING)
     fc2:	21 30       	cpi	r18, 0x01	; 1
     fc4:	b1 f4       	brne	.+44     	; 0xff2 <__vector_8+0x258>
		{
			lastResult = holdConversionResult;
			g_PA_voltage = holdConversionResult * PA_VOLTAGE_SCALE_FACTOR;
     fc6:	b6 01       	movw	r22, r12
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 62 22 	call	0x44c4	; 0x44c4 <__floatunsisf>
     fd0:	26 e6       	ldi	r18, 0x66	; 102
     fd2:	36 e6       	ldi	r19, 0x66	; 102
     fd4:	46 e7       	ldi	r20, 0x76	; 118
     fd6:	50 e4       	ldi	r21, 0x40	; 64
     fd8:	0e 94 c8 22 	call	0x4590	; 0x4590 <__mulsf3>
     fdc:	0e 94 36 22 	call	0x446c	; 0x446c <__fixunssfsi>
     fe0:	60 93 12 07 	sts	0x0712, r22	; 0x800712 <g_PA_voltage>
     fe4:	70 93 13 07 	sts	0x0713, r23	; 0x800713 <g_PA_voltage+0x1>
     fe8:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <g_PA_voltage+0x2>
     fec:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <g_PA_voltage+0x3>
				}
			}
		}
		else if(indexConversionInProcess == PA_VOLTAGE_READING)
		{
			lastResult = holdConversionResult;
     ff0:	c6 01       	movw	r24, r12
			g_PA_voltage = holdConversionResult * PA_VOLTAGE_SCALE_FACTOR;
		}

		g_lastConversionResult[indexConversionInProcess] = lastResult;
     ff2:	00 0f       	add	r16, r16
     ff4:	11 1f       	adc	r17, r17
     ff6:	f8 01       	movw	r30, r16
     ff8:	ea 5e       	subi	r30, 0xEA	; 234
     ffa:	f8 4f       	sbci	r31, 0xF8	; 248
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24

		conversionInProcess = FALSE;
    1000:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <conversionInProcess.3069>
	}
}/* ISR */
    1004:	0f 90       	pop	r0
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_3>:
 *
 * Note: For quadrature reading the interrupt is set for "Any logical
 * change on INT0 generates an interrupt request."
 ************************************************************************/
ISR( PCINT0_vect )
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	2f 93       	push	r18
    1044:	3f 93       	push	r19
    1046:	4f 93       	push	r20
    1048:	5f 93       	push	r21
    104a:	6f 93       	push	r22
    104c:	7f 93       	push	r23
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
    1052:	af 93       	push	r26
    1054:	bf 93       	push	r27
    1056:	ef 93       	push	r30
    1058:	ff 93       	push	r31
	if(g_terminal_mode)
    105a:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
    105e:	88 23       	and	r24, r24
    1060:	19 f0       	breq	.+6      	; 0x1068 <__vector_3+0x30>
	{
		lb_send_string("\nError: PCINT0 occurred!\n");
    1062:	8c e9       	ldi	r24, 0x9C	; 156
    1064:	94 e0       	ldi	r25, 0x04	; 4
    1066:	41 da       	rcall	.-2942   	; 0x4ea <lb_send_string>
	}
}
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_4>:
 * interrupts. Pin change interrupts on PCINT23...0 are detected
 * asynchronously. This implies that these interrupts can be used for
 * waking the part from sleep modes other than Idle mode.
 ************************************************************************/
	ISR( PCINT1_vect )
	{
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
		static uint8_t portChistory = 0xFF; /* default is high because the pull-up */

		uint8_t changedbits;

		if(!g_initialization_complete)
    1098:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <g_initialization_complete>
    109c:	88 23       	and	r24, r24
    109e:	81 f0       	breq	.+32     	; 0x10c0 <__vector_4+0x36>
		{
			return; /* ignore keypresses before initialization completes */

		}
		changedbits = PINC ^ portChistory;
    10a0:	96 b1       	in	r25, 0x06	; 6
    10a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <portChistory.3092>
    10a6:	89 27       	eor	r24, r25
		portChistory = PINC;
    10a8:	96 b1       	in	r25, 0x06	; 6
    10aa:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <portChistory.3092>

		if(!changedbits)    /* noise? */
    10ae:	88 23       	and	r24, r24
    10b0:	39 f0       	breq	.+14     	; 0x10c0 <__vector_4+0x36>
		{
			return;
		}

		if(changedbits & (1 << PORTC2)) /* Receiver port changed */
    10b2:	82 ff       	sbrs	r24, 2
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <__vector_4+0x36>
		{
			if(PINC & (1 << PORTC2))    /* rising edge */
    10b6:	32 99       	sbic	0x06, 2	; 6
    10b8:	03 c0       	rjmp	.+6      	; 0x10c0 <__vector_4+0x36>
			{
			}
			else
			{
				g_radio_port_changed = TRUE;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <g_radio_port_changed>
			}
		}
	}
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__vector_18>:
 *                      id = Linkbus MessageID
 *                      fn = variable length fields
 *                      ; = end of message flag
 ************************************************************************/
ISR(USART_RX_vect)
{
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	1f 93       	push	r17
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = UDR0;
    10fe:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	if(!buff)
    1102:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <buff.3106>
    1106:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <buff.3106+0x1>
    110a:	89 2b       	or	r24, r25
	{
		buff = nextEmptyRxBuffer();
    110c:	29 f4       	brne	.+10     	; 0x1118 <__vector_18+0x4a>
    110e:	7f d8       	rcall	.-3842   	; 0x20e <nextEmptyRxBuffer>
    1110:	90 93 0a 07 	sts	0x070A, r25	; 0x80070a <buff.3106+0x1>
    1114:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <buff.3106>
	}

	if(buff)
    1118:	c0 91 09 07 	lds	r28, 0x0709	; 0x800709 <buff.3106>
    111c:	d0 91 0a 07 	lds	r29, 0x070A	; 0x80070a <buff.3106+0x1>
    1120:	20 97       	sbiw	r28, 0x00	; 0
    1122:	09 f4       	brne	.+2      	; 0x1126 <__vector_18+0x58>
    1124:	2e c2       	rjmp	.+1116   	; 0x1582 <__vector_18+0x4b4>
	{
		if(g_terminal_mode)
    1126:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
    112a:	88 23       	and	r24, r24
    112c:	09 f4       	brne	.+2      	; 0x1130 <__vector_18+0x62>
    112e:	4d c1       	rjmp	.+666    	; 0x13ca <__vector_18+0x2fc>
		{
			static uint8_t ignoreCount = 0;

			rx_char = toupper(rx_char);
    1130:	81 2f       	mov	r24, r17
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 29 24 	call	0x4852	; 0x4852 <toupper>
    1138:	18 2f       	mov	r17, r24

			if(ignoreCount)
    113a:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <ignoreCount.3113>
    113e:	88 23       	and	r24, r24
    1140:	29 f0       	breq	.+10     	; 0x114c <__vector_18+0x7e>
			{
				rx_char = '\0';
				ignoreCount--;
    1142:	81 50       	subi	r24, 0x01	; 1
    1144:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <ignoreCount.3113>

			rx_char = toupper(rx_char);

			if(ignoreCount)
			{
				rx_char = '\0';
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	0f c0       	rjmp	.+30     	; 0x116a <__vector_18+0x9c>
				ignoreCount--;
			}
			else if(rx_char == 0x1B)    /* ESC sequence start */
    114c:	1b 31       	cpi	r17, 0x1B	; 27
    114e:	69 f4       	brne	.+26     	; 0x116a <__vector_18+0x9c>
			{
				rx_char = '\0';

				if(charIndex < LINKBUS_MAX_MSG_FIELD_LENGTH)
    1150:	e0 91 07 07 	lds	r30, 0x0707	; 0x800707 <charIndex.3107>
    1154:	e5 31       	cpi	r30, 0x15	; 21
    1156:	28 f4       	brcc	.+10     	; 0x1162 <__vector_18+0x94>
				{
					rx_char = textBuff[charIndex];
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	ee 50       	subi	r30, 0x0E	; 14
    115c:	f9 4f       	sbci	r31, 0xF9	; 249
    115e:	10 81       	ld	r17, Z
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <__vector_18+0x96>
				rx_char = '\0';
				ignoreCount--;
			}
			else if(rx_char == 0x1B)    /* ESC sequence start */
			{
				rx_char = '\0';
    1162:	10 e0       	ldi	r17, 0x00	; 0
				if(charIndex < LINKBUS_MAX_MSG_FIELD_LENGTH)
				{
					rx_char = textBuff[charIndex];
				}

				ignoreCount = 2;                            /* throw out the next two characters */
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <ignoreCount.3113>
			}

			if(rx_char == 0x0D)                             /* Handle carriage return */
    116a:	1d 30       	cpi	r17, 0x0D	; 13
    116c:	09 f0       	breq	.+2      	; 0x1170 <__vector_18+0xa2>
    116e:	42 c0       	rjmp	.+132    	; 0x11f4 <__vector_18+0x126>
			{
				if(receiving_msg)
    1170:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <receiving_msg.3111>
    1174:	88 23       	and	r24, r24
    1176:	29 f1       	breq	.+74     	; 0x11c2 <__vector_18+0xf4>
				{
					if(charIndex > 0)
    1178:	e0 91 07 07 	lds	r30, 0x0707	; 0x800707 <charIndex.3107>
    117c:	ee 23       	and	r30, r30
    117e:	f9 f0       	breq	.+62     	; 0x11be <__vector_18+0xf0>
					{
						buff->type = LINKBUS_MSG_QUERY;
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	88 83       	st	Y, r24
						buff->id = msg_ID;
    1184:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <msg_ID.3110>
    1188:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <msg_ID.3110+0x1>
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01

						if(field_index > 0) /* terminate the last field */
    1190:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <field_index.3108>
    1194:	88 23       	and	r24, r24
    1196:	79 f0       	breq	.+30     	; 0x11b6 <__vector_18+0xe8>
						{
							buff->fields[field_index - 1][field_len] = 0;
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	40 91 eb 06 	lds	r20, 0x06EB	; 0x8006eb <field_len.3109>
    11a0:	55 e1       	ldi	r21, 0x15	; 21
    11a2:	58 9f       	mul	r21, r24
    11a4:	90 01       	movw	r18, r0
    11a6:	59 9f       	mul	r21, r25
    11a8:	30 0d       	add	r19, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	c2 0f       	add	r28, r18
    11ae:	d3 1f       	adc	r29, r19
    11b0:	c4 0f       	add	r28, r20
    11b2:	d1 1d       	adc	r29, r1
    11b4:	1b 82       	std	Y+3, r1	; 0x03
						}

						textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	ee 50       	subi	r30, 0x0E	; 14
    11ba:	f9 4f       	sbci	r31, 0xF9	; 249
					}

					lb_send_NewLine();
    11bc:	10 82       	st	Z, r1
    11be:	27 d9       	rcall	.-3506   	; 0x40e <lb_send_NewLine>
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <__vector_18+0xfc>
				}
				else
				{
					buff->id = INVALID_MESSAGE; /* print help message */
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	9f ef       	ldi	r25, 0xFF	; 255
    11c6:	9a 83       	std	Y+2, r25	; 0x02
    11c8:	89 83       	std	Y+1, r24	; 0x01
				}

				charIndex = 0;
    11ca:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <charIndex.3107>
				field_len = 0;
    11ce:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <field_len.3109>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    11d2:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <msg_ID.3110>
    11d6:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <msg_ID.3110+0x1>
    11da:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <msg_ID.3110+0x2>
    11de:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <msg_ID.3110+0x3>

				field_index = 0;
    11e2:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <field_index.3108>
				buff = NULL;
    11e6:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <buff.3106+0x1>
    11ea:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <buff.3106>

				receiving_msg = FALSE;
    11ee:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <receiving_msg.3111>
    11f2:	c7 c1       	rjmp	.+910    	; 0x1582 <__vector_18+0x4b4>
			}
			else if(rx_char)
    11f4:	11 23       	and	r17, r17
    11f6:	09 f4       	brne	.+2      	; 0x11fa <__vector_18+0x12c>
    11f8:	c4 c1       	rjmp	.+904    	; 0x1582 <__vector_18+0x4b4>
			{
				textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    11fa:	e0 91 07 07 	lds	r30, 0x0707	; 0x800707 <charIndex.3107>
    11fe:	8e 2f       	mov	r24, r30
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	dc 01       	movw	r26, r24
    1204:	ae 50       	subi	r26, 0x0E	; 14
    1206:	b9 4f       	sbci	r27, 0xF9	; 249
    1208:	1c 93       	st	X, r17

				if(charIndex)
    120a:	ee 23       	and	r30, r30
    120c:	09 f4       	brne	.+2      	; 0x1210 <__vector_18+0x142>
    120e:	aa c0       	rjmp	.+340    	; 0x1364 <__vector_18+0x296>
				{
					if(rx_char == 0x7F)         /* Handle backspace */
    1210:	1f 37       	cpi	r17, 0x7F	; 127
    1212:	d1 f5       	brne	.+116    	; 0x1288 <__vector_18+0x1ba>
					{
						charIndex--;
    1214:	e1 50       	subi	r30, 0x01	; 1
    1216:	e0 93 07 07 	sts	0x0707, r30	; 0x800707 <charIndex.3107>
						if(field_index == 0)
    121a:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <field_index.3108>
    121e:	81 11       	cpse	r24, r1
    1220:	21 c0       	rjmp	.+66     	; 0x1264 <__vector_18+0x196>
						{
							msg_ID -= textBuff[charIndex];
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	ee 50       	subi	r30, 0x0E	; 14
    1226:	f9 4f       	sbci	r31, 0xF9	; 249
    1228:	20 81       	ld	r18, Z
    122a:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <msg_ID.3110>
    122e:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <msg_ID.3110+0x1>
    1232:	a0 91 ef 06 	lds	r26, 0x06EF	; 0x8006ef <msg_ID.3110+0x2>
    1236:	b0 91 f0 06 	lds	r27, 0x06F0	; 0x8006f0 <msg_ID.3110+0x3>
    123a:	bc 01       	movw	r22, r24
    123c:	cd 01       	movw	r24, r26
    123e:	62 1b       	sub	r22, r18
    1240:	71 09       	sbc	r23, r1
    1242:	81 09       	sbc	r24, r1
    1244:	91 09       	sbc	r25, r1
							msg_ID /= 10;
    1246:	2a e0       	ldi	r18, 0x0A	; 10
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	50 e0       	ldi	r21, 0x00	; 0
    124e:	0e 94 89 23 	call	0x4712	; 0x4712 <__udivmodsi4>
    1252:	20 93 ed 06 	sts	0x06ED, r18	; 0x8006ed <msg_ID.3110>
    1256:	30 93 ee 06 	sts	0x06EE, r19	; 0x8006ee <msg_ID.3110+0x1>
    125a:	40 93 ef 06 	sts	0x06EF, r20	; 0x8006ef <msg_ID.3110+0x2>
    125e:	50 93 f0 06 	sts	0x06F0, r21	; 0x8006f0 <msg_ID.3110+0x3>
    1262:	ad c0       	rjmp	.+346    	; 0x13be <__vector_18+0x2f0>
						}
						else if(field_len)
    1264:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <field_len.3109>
    1268:	99 23       	and	r25, r25
    126a:	21 f0       	breq	.+8      	; 0x1274 <__vector_18+0x1a6>
						{
							field_len--;
    126c:	91 50       	subi	r25, 0x01	; 1
    126e:	90 93 eb 06 	sts	0x06EB, r25	; 0x8006eb <field_len.3109>
    1272:	a5 c0       	rjmp	.+330    	; 0x13be <__vector_18+0x2f0>
						}
						else
						{
							buff->fields[field_index][0] = '\0';
    1274:	35 e1       	ldi	r19, 0x15	; 21
    1276:	83 9f       	mul	r24, r19
    1278:	c0 0d       	add	r28, r0
    127a:	d1 1d       	adc	r29, r1
    127c:	11 24       	eor	r1, r1
    127e:	1b 82       	std	Y+3, r1	; 0x03
							field_index--;
    1280:	81 50       	subi	r24, 0x01	; 1
    1282:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <field_index.3108>
    1286:	9b c0       	rjmp	.+310    	; 0x13be <__vector_18+0x2f0>
						}
					}
					else
					{
						if(rx_char == ' ')
    1288:	10 32       	cpi	r17, 0x20	; 32
    128a:	11 f5       	brne	.+68     	; 0x12d0 <__vector_18+0x202>
						{
							if(textBuff[charIndex - 1] == ' ')
    128c:	fc 01       	movw	r30, r24
    128e:	ef 50       	subi	r30, 0x0F	; 15
    1290:	f9 4f       	sbci	r31, 0xF9	; 249
    1292:	20 81       	ld	r18, Z
    1294:	20 32       	cpi	r18, 0x20	; 32
    1296:	09 f4       	brne	.+2      	; 0x129a <__vector_18+0x1cc>
    1298:	5b c0       	rjmp	.+182    	; 0x1350 <__vector_18+0x282>
								rx_char = '\0';
							}
							else
							{
								/* if(field_index == 0) // message ID received */
								if(field_index > 0)
    129a:	20 91 ec 06 	lds	r18, 0x06EC	; 0x8006ec <field_index.3108>
    129e:	22 23       	and	r18, r18
    12a0:	89 f0       	breq	.+34     	; 0x12c4 <__vector_18+0x1f6>
								{
									buff->fields[field_index - 1][field_len] = 0;
    12a2:	62 2f       	mov	r22, r18
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	61 50       	subi	r22, 0x01	; 1
    12a8:	71 09       	sbc	r23, r1
    12aa:	30 91 eb 06 	lds	r19, 0x06EB	; 0x8006eb <field_len.3109>
    12ae:	e5 e1       	ldi	r30, 0x15	; 21
    12b0:	e6 9f       	mul	r30, r22
    12b2:	a0 01       	movw	r20, r0
    12b4:	e7 9f       	mul	r30, r23
    12b6:	50 0d       	add	r21, r0
    12b8:	11 24       	eor	r1, r1
    12ba:	c4 0f       	add	r28, r20
    12bc:	d5 1f       	adc	r29, r21
    12be:	c3 0f       	add	r28, r19
    12c0:	d1 1d       	adc	r29, r1
    12c2:	1b 82       	std	Y+3, r1	; 0x03
								}

								field_index++;
    12c4:	2f 5f       	subi	r18, 0xFF	; 255
    12c6:	20 93 ec 06 	sts	0x06EC, r18	; 0x8006ec <field_index.3108>
								field_len = 0;
    12ca:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <field_len.3109>
    12ce:	41 c0       	rjmp	.+130    	; 0x1352 <__vector_18+0x284>
							}
						}
						else
						{
							if(field_index == 0)    /* message ID received */
    12d0:	20 91 ec 06 	lds	r18, 0x06EC	; 0x8006ec <field_index.3108>
    12d4:	21 11       	cpse	r18, r1
    12d6:	27 c0       	rjmp	.+78     	; 0x1326 <__vector_18+0x258>
							{
								msg_ID = msg_ID * 10 + rx_char;
    12d8:	40 91 ed 06 	lds	r20, 0x06ED	; 0x8006ed <msg_ID.3110>
    12dc:	50 91 ee 06 	lds	r21, 0x06EE	; 0x8006ee <msg_ID.3110+0x1>
    12e0:	60 91 ef 06 	lds	r22, 0x06EF	; 0x8006ef <msg_ID.3110+0x2>
    12e4:	70 91 f0 06 	lds	r23, 0x06F0	; 0x8006f0 <msg_ID.3110+0x3>
    12e8:	44 0f       	add	r20, r20
    12ea:	55 1f       	adc	r21, r21
    12ec:	66 1f       	adc	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	6a 01       	movw	r12, r20
    12f2:	7b 01       	movw	r14, r22
    12f4:	cc 0c       	add	r12, r12
    12f6:	dd 1c       	adc	r13, r13
    12f8:	ee 1c       	adc	r14, r14
    12fa:	ff 1c       	adc	r15, r15
    12fc:	cc 0c       	add	r12, r12
    12fe:	dd 1c       	adc	r13, r13
    1300:	ee 1c       	adc	r14, r14
    1302:	ff 1c       	adc	r15, r15
    1304:	4c 0d       	add	r20, r12
    1306:	5d 1d       	adc	r21, r13
    1308:	6e 1d       	adc	r22, r14
    130a:	7f 1d       	adc	r23, r15
    130c:	41 0f       	add	r20, r17
    130e:	51 1d       	adc	r21, r1
    1310:	61 1d       	adc	r22, r1
    1312:	71 1d       	adc	r23, r1
    1314:	40 93 ed 06 	sts	0x06ED, r20	; 0x8006ed <msg_ID.3110>
    1318:	50 93 ee 06 	sts	0x06EE, r21	; 0x8006ee <msg_ID.3110+0x1>
    131c:	60 93 ef 06 	sts	0x06EF, r22	; 0x8006ef <msg_ID.3110+0x2>
    1320:	70 93 f0 06 	sts	0x06F0, r23	; 0x8006f0 <msg_ID.3110+0x3>
    1324:	16 c0       	rjmp	.+44     	; 0x1352 <__vector_18+0x284>
							}
							else
							{
								buff->fields[field_index - 1][field_len++] = rx_char;
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	31 09       	sbc	r19, r1
    132c:	60 91 eb 06 	lds	r22, 0x06EB	; 0x8006eb <field_len.3109>
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	46 0f       	add	r20, r22
    1334:	40 93 eb 06 	sts	0x06EB, r20	; 0x8006eb <field_len.3109>
    1338:	75 e1       	ldi	r23, 0x15	; 21
    133a:	72 9f       	mul	r23, r18
    133c:	a0 01       	movw	r20, r0
    133e:	73 9f       	mul	r23, r19
    1340:	50 0d       	add	r21, r0
    1342:	11 24       	eor	r1, r1
    1344:	c4 0f       	add	r28, r20
    1346:	d5 1f       	adc	r29, r21
    1348:	c6 0f       	add	r28, r22
    134a:	d1 1d       	adc	r29, r1
    134c:	1b 83       	std	Y+3, r17	; 0x03
    134e:	01 c0       	rjmp	.+2      	; 0x1352 <__vector_18+0x284>
					{
						if(rx_char == ' ')
						{
							if(textBuff[charIndex - 1] == ' ')
							{
								rx_char = '\0';
    1350:	10 e0       	ldi	r17, 0x00	; 0
							{
								buff->fields[field_index - 1][field_len++] = rx_char;
							}
						}

						charIndex = MIN(charIndex+1, LINKBUS_MAX_MSG_FIELD_LENGTH);
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	86 31       	cpi	r24, 0x16	; 22
    1356:	91 05       	cpc	r25, r1
    1358:	14 f0       	brlt	.+4      	; 0x135e <__vector_18+0x290>
    135a:	85 e1       	ldi	r24, 0x15	; 21
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <charIndex.3107>
    1362:	2d c0       	rjmp	.+90     	; 0x13be <__vector_18+0x2f0>
					}
				}
				else
				{
					if((rx_char == 0x7F) || (rx_char == ' '))   /* Handle backspace and Space */
    1364:	1f 37       	cpi	r17, 0x7F	; 127
    1366:	41 f1       	breq	.+80     	; 0x13b8 <__vector_18+0x2ea>
    1368:	10 32       	cpi	r17, 0x20	; 32
    136a:	41 f1       	breq	.+80     	; 0x13bc <__vector_18+0x2ee>
						rx_char = '\0';
					}
					else                                        /* start of new message */
					{
						uint8_t i;
						field_index = 0;
    136c:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <field_index.3108>
						msg_ID = 0;

						msg_ID = msg_ID * 10 + rx_char;
    1370:	41 2f       	mov	r20, r17
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	40 93 ed 06 	sts	0x06ED, r20	; 0x8006ed <msg_ID.3110>
    137c:	50 93 ee 06 	sts	0x06EE, r21	; 0x8006ee <msg_ID.3110+0x1>
    1380:	60 93 ef 06 	sts	0x06EF, r22	; 0x8006ef <msg_ID.3110+0x2>
    1384:	70 93 f0 06 	sts	0x06F0, r23	; 0x8006f0 <msg_ID.3110+0x3>

						/* Empty the field buffers */
						for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	08 c0       	rjmp	.+16     	; 0x139c <__vector_18+0x2ce>
						{
							buff->fields[i][0] = '\0';
    138c:	fe 01       	movw	r30, r28
    138e:	35 e1       	ldi	r19, 0x15	; 21
    1390:	23 9f       	mul	r18, r19
    1392:	e0 0d       	add	r30, r0
    1394:	f1 1d       	adc	r31, r1
    1396:	11 24       	eor	r1, r1
    1398:	13 82       	std	Z+3, r1	; 0x03
						msg_ID = 0;

						msg_ID = msg_ID * 10 + rx_char;

						/* Empty the field buffers */
						for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    139a:	2f 5f       	subi	r18, 0xFF	; 255
    139c:	23 30       	cpi	r18, 0x03	; 3
    139e:	b0 f3       	brcs	.-20     	; 0x138c <__vector_18+0x2be>
						{
							buff->fields[i][0] = '\0';
						}

						receiving_msg = TRUE;
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	20 93 f1 06 	sts	0x06F1, r18	; 0x8006f1 <receiving_msg.3111>
						charIndex = MIN(charIndex+1, LINKBUS_MAX_MSG_FIELD_LENGTH);
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	86 31       	cpi	r24, 0x16	; 22
    13aa:	91 05       	cpc	r25, r1
    13ac:	14 f0       	brlt	.+4      	; 0x13b2 <__vector_18+0x2e4>
    13ae:	85 e1       	ldi	r24, 0x15	; 21
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <charIndex.3107>
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <__vector_18+0x2f0>
				}
				else
				{
					if((rx_char == 0x7F) || (rx_char == ' '))   /* Handle backspace and Space */
					{
						rx_char = '\0';
    13b8:	10 e0       	ldi	r17, 0x00	; 0
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <__vector_18+0x2f0>
    13bc:	10 e0       	ldi	r17, 0x00	; 0
						receiving_msg = TRUE;
						charIndex = MIN(charIndex+1, LINKBUS_MAX_MSG_FIELD_LENGTH);
					}
				}

				if(rx_char)
    13be:	11 23       	and	r17, r17
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <__vector_18+0x2f6>
				{
					lb_echo_char(rx_char);
    13c2:	df c0       	rjmp	.+446    	; 0x1582 <__vector_18+0x4b4>
    13c4:	81 2f       	mov	r24, r17
    13c6:	8a d8       	rcall	.-3820   	; 0x4dc <lb_echo_char>
    13c8:	dc c0       	rjmp	.+440    	; 0x1582 <__vector_18+0x4b4>
				}
			}
		}
		else
		{
			if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    13ca:	14 32       	cpi	r17, 0x24	; 36
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <__vector_18+0x304>
    13ce:	11 32       	cpi	r17, 0x21	; 33
    13d0:	49 f5       	brne	.+82     	; 0x1424 <__vector_18+0x356>
			{
				charIndex = 0;
    13d2:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <charIndex.3107>
				buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    13d6:	11 32       	cpi	r17, 0x21	; 33
    13d8:	11 f4       	brne	.+4      	; 0x13de <__vector_18+0x310>
    13da:	83 e0       	ldi	r24, 0x03	; 3
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <__vector_18+0x312>
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	88 83       	st	Y, r24
				field_len = 0;
    13e2:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <field_len.3109>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    13e6:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <msg_ID.3110>
    13ea:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <msg_ID.3110+0x1>
    13ee:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <msg_ID.3110+0x2>
    13f2:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <msg_ID.3110+0x3>
				receiving_msg = TRUE;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <receiving_msg.3111>

				/* Empty the field buffers */
				for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    13fc:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <field_index.3108>
    1400:	0a c0       	rjmp	.+20     	; 0x1416 <__vector_18+0x348>
				{
					buff->fields[field_index][0] = '\0';
    1402:	fe 01       	movw	r30, r28
    1404:	95 e1       	ldi	r25, 0x15	; 21
    1406:	89 9f       	mul	r24, r25
    1408:	e0 0d       	add	r30, r0
    140a:	f1 1d       	adc	r31, r1
    140c:	11 24       	eor	r1, r1
    140e:	13 82       	std	Z+3, r1	; 0x03
				field_len = 0;
				msg_ID = LINKBUS_MSG_UNKNOWN;
				receiving_msg = TRUE;

				/* Empty the field buffers */
				for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1410:	8f 5f       	subi	r24, 0xFF	; 255
    1412:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <field_index.3108>
    1416:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <field_index.3108>
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	90 f3       	brcs	.-28     	; 0x1402 <__vector_18+0x334>
				{
					buff->fields[field_index][0] = '\0';
				}

				field_index = 0;
    141e:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <field_index.3108>
    1422:	a4 c0       	rjmp	.+328    	; 0x156c <__vector_18+0x49e>
			}
			else if(receiving_msg)
    1424:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <receiving_msg.3111>
    1428:	88 23       	and	r24, r24
    142a:	09 f4       	brne	.+2      	; 0x142e <__vector_18+0x360>
    142c:	88 c0       	rjmp	.+272    	; 0x153e <__vector_18+0x470>
			{
				if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    142e:	1c 32       	cpi	r17, 0x2C	; 44
    1430:	29 f0       	breq	.+10     	; 0x143c <__vector_18+0x36e>
    1432:	1b 33       	cpi	r17, 0x3B	; 59
    1434:	19 f0       	breq	.+6      	; 0x143c <__vector_18+0x36e>
    1436:	1f 33       	cpi	r17, 0x3F	; 63
    1438:	09 f0       	breq	.+2      	; 0x143c <__vector_18+0x36e>
    143a:	42 c0       	rjmp	.+132    	; 0x14c0 <__vector_18+0x3f2>
				{
					/* if(field_index == 0) // message ID received */
					if(field_index > 0)
    143c:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <field_index.3108>
    1440:	88 23       	and	r24, r24
    1442:	89 f0       	breq	.+34     	; 0x1466 <__vector_18+0x398>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	21 50       	subi	r18, 0x01	; 1
    144a:	31 09       	sbc	r19, r1
    144c:	90 91 eb 06 	lds	r25, 0x06EB	; 0x8006eb <field_len.3109>
    1450:	45 e1       	ldi	r20, 0x15	; 21
    1452:	42 9f       	mul	r20, r18
    1454:	f0 01       	movw	r30, r0
    1456:	43 9f       	mul	r20, r19
    1458:	f0 0d       	add	r31, r0
    145a:	11 24       	eor	r1, r1
    145c:	ec 0f       	add	r30, r28
    145e:	fd 1f       	adc	r31, r29
    1460:	e9 0f       	add	r30, r25
    1462:	f1 1d       	adc	r31, r1
    1464:	13 82       	std	Z+3, r1	; 0x03
					}

					field_index++;
    1466:	8f 5f       	subi	r24, 0xFF	; 255
    1468:	80 93 ec 06 	sts	0x06EC, r24	; 0x8006ec <field_index.3108>
					field_len = 0;
    146c:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <field_len.3109>

					if(rx_char == ';')
    1470:	1b 33       	cpi	r17, 0x3B	; 59
    1472:	69 f4       	brne	.+26     	; 0x148e <__vector_18+0x3c0>
					{
						if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    1474:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <charIndex.3107>
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	30 f0       	brcs	.+12     	; 0x1488 <__vector_18+0x3ba>
						{
							buff->id = msg_ID;
    147c:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <msg_ID.3110>
    1480:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <msg_ID.3110+0x1>
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
						}
						receiving_msg = FALSE;
    1488:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <receiving_msg.3111>
    148c:	10 c0       	rjmp	.+32     	; 0x14ae <__vector_18+0x3e0>
					}
					else if(rx_char == '?')
    148e:	1f 33       	cpi	r17, 0x3F	; 63
    1490:	71 f4       	brne	.+28     	; 0x14ae <__vector_18+0x3e0>
					{
						buff->type = LINKBUS_MSG_QUERY;
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	88 83       	st	Y, r24
						if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    1496:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <charIndex.3107>
    149a:	84 30       	cpi	r24, 0x04	; 4
    149c:	30 f0       	brcs	.+12     	; 0x14aa <__vector_18+0x3dc>
						{
							buff->id = msg_ID;
    149e:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <msg_ID.3110>
    14a2:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <msg_ID.3110+0x1>
    14a6:	9a 83       	std	Y+2, r25	; 0x02
    14a8:	89 83       	std	Y+1, r24	; 0x01
						}
						receiving_msg = FALSE;
    14aa:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <receiving_msg.3111>
					}

					if(!receiving_msg)
    14ae:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <receiving_msg.3111>
    14b2:	81 11       	cpse	r24, r1
    14b4:	5b c0       	rjmp	.+182    	; 0x156c <__vector_18+0x49e>
					{
						buff = 0;
    14b6:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <buff.3106+0x1>
    14ba:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <buff.3106>
    14be:	56 c0       	rjmp	.+172    	; 0x156c <__vector_18+0x49e>
					}
				}
				else
				{
					if(field_index == 0)    /* message ID received */
    14c0:	80 91 ec 06 	lds	r24, 0x06EC	; 0x8006ec <field_index.3108>
    14c4:	81 11       	cpse	r24, r1
    14c6:	27 c0       	rjmp	.+78     	; 0x1516 <__vector_18+0x448>
					{
						msg_ID = msg_ID * 10 + rx_char;
    14c8:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <msg_ID.3110>
    14cc:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <msg_ID.3110+0x1>
    14d0:	a0 91 ef 06 	lds	r26, 0x06EF	; 0x8006ef <msg_ID.3110+0x2>
    14d4:	b0 91 f0 06 	lds	r27, 0x06F0	; 0x8006f0 <msg_ID.3110+0x3>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	aa 1f       	adc	r26, r26
    14de:	bb 1f       	adc	r27, r27
    14e0:	ac 01       	movw	r20, r24
    14e2:	bd 01       	movw	r22, r26
    14e4:	44 0f       	add	r20, r20
    14e6:	55 1f       	adc	r21, r21
    14e8:	66 1f       	adc	r22, r22
    14ea:	77 1f       	adc	r23, r23
    14ec:	44 0f       	add	r20, r20
    14ee:	55 1f       	adc	r21, r21
    14f0:	66 1f       	adc	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	84 0f       	add	r24, r20
    14f6:	95 1f       	adc	r25, r21
    14f8:	a6 1f       	adc	r26, r22
    14fa:	b7 1f       	adc	r27, r23
    14fc:	81 0f       	add	r24, r17
    14fe:	91 1d       	adc	r25, r1
    1500:	a1 1d       	adc	r26, r1
    1502:	b1 1d       	adc	r27, r1
    1504:	80 93 ed 06 	sts	0x06ED, r24	; 0x8006ed <msg_ID.3110>
    1508:	90 93 ee 06 	sts	0x06EE, r25	; 0x8006ee <msg_ID.3110+0x1>
    150c:	a0 93 ef 06 	sts	0x06EF, r26	; 0x8006ef <msg_ID.3110+0x2>
    1510:	b0 93 f0 06 	sts	0x06F0, r27	; 0x8006f0 <msg_ID.3110+0x3>
    1514:	2b c0       	rjmp	.+86     	; 0x156c <__vector_18+0x49e>
					}
					else
					{
						buff->fields[field_index - 1][field_len++] = rx_char;
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	40 91 eb 06 	lds	r20, 0x06EB	; 0x8006eb <field_len.3109>
    151e:	21 e0       	ldi	r18, 0x01	; 1
    1520:	24 0f       	add	r18, r20
    1522:	20 93 eb 06 	sts	0x06EB, r18	; 0x8006eb <field_len.3109>
    1526:	55 e1       	ldi	r21, 0x15	; 21
    1528:	58 9f       	mul	r21, r24
    152a:	90 01       	movw	r18, r0
    152c:	59 9f       	mul	r21, r25
    152e:	30 0d       	add	r19, r0
    1530:	11 24       	eor	r1, r1
    1532:	c2 0f       	add	r28, r18
    1534:	d3 1f       	adc	r29, r19
    1536:	c4 0f       	add	r28, r20
    1538:	d1 1d       	adc	r29, r1
    153a:	1b 83       	std	Y+3, r17	; 0x03
    153c:	17 c0       	rjmp	.+46     	; 0x156c <__vector_18+0x49e>
					}
				}
			}
			else if(rx_char == 0x0D)    /* Handle carriage return */
    153e:	1d 30       	cpi	r17, 0x0D	; 13
    1540:	a9 f4       	brne	.+42     	; 0x156c <__vector_18+0x49e>
			{
				buff->id = LINKBUS_MSG_UNKNOWN;
    1542:	1a 82       	std	Y+2, r1	; 0x02
    1544:	19 82       	std	Y+1, r1	; 0x01
				charIndex = LINKBUS_MAX_MSG_LENGTH;
    1546:	82 e3       	ldi	r24, 0x32	; 50
    1548:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <charIndex.3107>
				field_len = 0;
    154c:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <field_len.3109>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    1550:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <msg_ID.3110>
    1554:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <msg_ID.3110+0x1>
    1558:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <msg_ID.3110+0x2>
    155c:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <msg_ID.3110+0x3>
				field_index = 0;
    1560:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <field_index.3108>
				buff = NULL;
    1564:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <buff.3106+0x1>
    1568:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <buff.3106>
			}

			if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    156c:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <charIndex.3107>
    1570:	8f 5f       	subi	r24, 0xFF	; 255
    1572:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <charIndex.3107>
    1576:	82 33       	cpi	r24, 0x32	; 50
    1578:	20 f0       	brcs	.+8      	; 0x1582 <__vector_18+0x4b4>
			{
				receiving_msg = FALSE;
    157a:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <receiving_msg.3111>
				charIndex = 0;
    157e:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <charIndex.3107>
			}
		}
	}
}
    1582:	ff 91       	pop	r31
    1584:	ef 91       	pop	r30
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	bf 91       	pop	r27
    158c:	af 91       	pop	r26
    158e:	9f 91       	pop	r25
    1590:	8f 91       	pop	r24
    1592:	7f 91       	pop	r23
    1594:	6f 91       	pop	r22
    1596:	5f 91       	pop	r21
    1598:	4f 91       	pop	r20
    159a:	3f 91       	pop	r19
    159c:	2f 91       	pop	r18
    159e:	1f 91       	pop	r17
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	df 90       	pop	r13
    15a6:	cf 90       	pop	r12
    15a8:	0f 90       	pop	r0
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	0f 90       	pop	r0
    15ae:	1f 90       	pop	r1
    15b0:	18 95       	reti

000015b2 <__vector_19>:
 *
 * This ISR is responsible for filling the USART transmit buffer. It
 * implements the transmit function of the Linkbus.
 ************************************************************************/
ISR(USART_UDRE_vect)
{
    15b2:	1f 92       	push	r1
    15b4:	0f 92       	push	r0
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	0f 92       	push	r0
    15ba:	11 24       	eor	r1, r1
    15bc:	2f 93       	push	r18
    15be:	3f 93       	push	r19
    15c0:	4f 93       	push	r20
    15c2:	5f 93       	push	r21
    15c4:	6f 93       	push	r22
    15c6:	7f 93       	push	r23
    15c8:	8f 93       	push	r24
    15ca:	9f 93       	push	r25
    15cc:	af 93       	push	r26
    15ce:	bf 93       	push	r27
    15d0:	ef 93       	push	r30
    15d2:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
    15d4:	80 91 e9 06 	lds	r24, 0x06E9	; 0x8006e9 <buff.3132>
    15d8:	90 91 ea 06 	lds	r25, 0x06EA	; 0x8006ea <buff.3132+0x1>
    15dc:	89 2b       	or	r24, r25
    15de:	31 f4       	brne	.+12     	; 0x15ec <__vector_19+0x3a>
	{
		buff = nextFullTxBuffer();
    15e0:	0e 94 af 00 	call	0x15e	; 0x15e <nextFullTxBuffer>
    15e4:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <buff.3132+0x1>
    15e8:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <buff.3132>
	}

	if((*buff)[charIndex])
    15ec:	e0 91 e9 06 	lds	r30, 0x06E9	; 0x8006e9 <buff.3132>
    15f0:	f0 91 ea 06 	lds	r31, 0x06EA	; 0x8006ea <buff.3132+0x1>
    15f4:	80 91 e8 06 	lds	r24, 0x06E8	; 0x8006e8 <charIndex.3133>
    15f8:	df 01       	movw	r26, r30
    15fa:	a8 0f       	add	r26, r24
    15fc:	b1 1d       	adc	r27, r1
    15fe:	9c 91       	ld	r25, X
    1600:	99 23       	and	r25, r25
    1602:	31 f0       	breq	.+12     	; 0x1610 <__vector_19+0x5e>
	{
		/* Put data into buffer, sends the data */
		UDR0 = (*buff)[charIndex++];
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	80 93 e8 06 	sts	0x06E8, r24	; 0x8006e8 <charIndex.3133>
    160a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    160e:	0d c0       	rjmp	.+26     	; 0x162a <__vector_19+0x78>
	}
	else
	{
		charIndex = 0;
    1610:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <charIndex.3133>
		(*buff)[0] = '\0';
    1614:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
    1616:	0e 94 af 00 	call	0x15e	; 0x15e <nextFullTxBuffer>
    161a:	90 93 ea 06 	sts	0x06EA, r25	; 0x8006ea <buff.3132+0x1>
    161e:	80 93 e9 06 	sts	0x06E9, r24	; 0x8006e9 <buff.3132>
		if(!buff)
    1622:	89 2b       	or	r24, r25
    1624:	11 f4       	brne	.+4      	; 0x162a <__vector_19+0x78>
		{
			linkbus_end_tx();
    1626:	0e 94 74 01 	call	0x2e8	; 0x2e8 <linkbus_end_tx>
		}
	}
}
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	0f 90       	pop	r0
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	0f 90       	pop	r0
    1648:	1f 90       	pop	r1
    164a:	18 95       	reti

0000164c <__vector_5>:
 * PCINT23...0 are detected asynchronously. This implies that these
 * interrupts can be used for waking the part from sleep modes other
 * than Idle mode.
 ************************************************************************/
ISR( PCINT2_vect )
{
    164c:	1f 92       	push	r1
    164e:	0f 92       	push	r0
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	0f 92       	push	r0
    1654:	11 24       	eor	r1, r1
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
	if(g_terminal_mode)
    166e:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
    1672:	88 23       	and	r24, r24
    1674:	21 f0       	breq	.+8      	; 0x167e <__vector_5+0x32>
	{
		lb_send_string("\nError: PCINT2 occurred!\n");
    1676:	86 eb       	ldi	r24, 0xB6	; 182
    1678:	94 e0       	ldi	r25, 0x04	; 4
    167a:	0e 94 75 02 	call	0x4ea	; 0x4ea <lb_send_string>
	}
}
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0f 90       	pop	r0
    169c:	1f 90       	pop	r1
    169e:	18 95       	reti

000016a0 <saveAllEEPROM>:
		wdt_reset();                                    /* HW watchdog */
	}
}

void saveAllEEPROM()
{
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
	int i;
	wdt_reset();                                    /* HW watchdog */
    16a4:	a8 95       	wdr
	
	storeEEdwordIfChanged((uint32_t*)&ee_start_time, g_event_start_time);
    16a6:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <g_event_start_time>
    16aa:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <g_event_start_time+0x1>
    16ae:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <g_event_start_time+0x2>
    16b2:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <g_event_start_time+0x3>
    16b6:	84 e0       	ldi	r24, 0x04	; 4
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <storeEEdwordIfChanged>
	storeEEdwordIfChanged((uint32_t*)&ee_finish_time, g_event_finish_time);
    16be:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <g_event_finish_time>
    16c2:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <g_event_finish_time+0x1>
    16c6:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <g_event_finish_time+0x2>
    16ca:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <g_event_finish_time+0x3>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <storeEEdwordIfChanged>
	
	storeEEbyteIfChanged(&ee_id_codespeed, g_id_codespeed);
    16d6:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <g_id_codespeed>
    16da:	8b e0       	ldi	r24, 0x0B	; 11
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_pattern_codespeed, g_pattern_codespeed);
    16e2:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <g_pattern_codespeed>
    16e6:	8c e0       	ldi	r24, 0x0C	; 12
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_on_air_time, g_on_air_time);
    16ee:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <g_on_air_time>
    16f2:	8a e0       	ldi	r24, 0x0A	; 10
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_off_air_time, g_off_air_time);
    16fa:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <g_off_air_time>
    16fe:	89 e0       	ldi	r24, 0x09	; 9
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_intra_cycle_delay_time, g_intra_cycle_delay_time);
    1706:	60 91 28 07 	lds	r22, 0x0728	; 0x800728 <g_intra_cycle_delay_time>
    170a:	88 e0       	ldi	r24, 0x08	; 8
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>

	for(i=0; i<strlen(g_station_ID); i++)
    1712:	c0 e0       	ldi	r28, 0x00	; 0
    1714:	d0 e0       	ldi	r29, 0x00	; 0
    1716:	0a c0       	rjmp	.+20     	; 0x172c <saveAllEEPROM+0x8c>
	{
		storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], (uint8_t)g_station_ID[i]);
    1718:	fe 01       	movw	r30, r28
    171a:	e2 5e       	subi	r30, 0xE2	; 226
    171c:	fe 4f       	sbci	r31, 0xFE	; 254
    171e:	60 81       	ld	r22, Z
    1720:	ce 01       	movw	r24, r28
    1722:	8f 5d       	subi	r24, 0xDF	; 223
    1724:	9f 4f       	sbci	r25, 0xFF	; 255
    1726:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_pattern_codespeed, g_pattern_codespeed);
	storeEEbyteIfChanged(&ee_on_air_time, g_on_air_time);
	storeEEbyteIfChanged(&ee_off_air_time, g_off_air_time);
	storeEEbyteIfChanged(&ee_intra_cycle_delay_time, g_intra_cycle_delay_time);

	for(i=0; i<strlen(g_station_ID); i++)
    172a:	21 96       	adiw	r28, 0x01	; 1
    172c:	ee e1       	ldi	r30, 0x1E	; 30
    172e:	f1 e0       	ldi	r31, 0x01	; 1
    1730:	01 90       	ld	r0, Z+
    1732:	00 20       	and	r0, r0
    1734:	e9 f7       	brne	.-6      	; 0x1730 <saveAllEEPROM+0x90>
    1736:	31 97       	sbiw	r30, 0x01	; 1
    1738:	ee 51       	subi	r30, 0x1E	; 30
    173a:	f1 40       	sbci	r31, 0x01	; 1
    173c:	ce 17       	cp	r28, r30
    173e:	df 07       	cpc	r29, r31
    1740:	58 f3       	brcs	.-42     	; 0x1718 <saveAllEEPROM+0x78>
	{
		storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], (uint8_t)g_station_ID[i]);
	}

	storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], 0);
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	ce 01       	movw	r24, r28
    1746:	8f 5d       	subi	r24, 0xDF	; 223
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>
	
	for(i=0; i<strlen(g_pattern_text); i++)
    174e:	c0 e0       	ldi	r28, 0x00	; 0
    1750:	d0 e0       	ldi	r29, 0x00	; 0
    1752:	0a c0       	rjmp	.+20     	; 0x1768 <saveAllEEPROM+0xc8>
	{
		storeEEbyteIfChanged((uint8_t*)&ee_pattern_text[i], (uint8_t)g_pattern_text[i]);
    1754:	fe 01       	movw	r30, r28
    1756:	e7 5d       	subi	r30, 0xD7	; 215
    1758:	f8 4f       	sbci	r31, 0xF8	; 248
    175a:	60 81       	ld	r22, Z
    175c:	ce 01       	movw	r24, r28
    175e:	83 5f       	subi	r24, 0xF3	; 243
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>
		storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], (uint8_t)g_station_ID[i]);
	}

	storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], 0);
	
	for(i=0; i<strlen(g_pattern_text); i++)
    1766:	21 96       	adiw	r28, 0x01	; 1
    1768:	e9 e2       	ldi	r30, 0x29	; 41
    176a:	f7 e0       	ldi	r31, 0x07	; 7
    176c:	01 90       	ld	r0, Z+
    176e:	00 20       	and	r0, r0
    1770:	e9 f7       	brne	.-6      	; 0x176c <saveAllEEPROM+0xcc>
    1772:	31 97       	sbiw	r30, 0x01	; 1
    1774:	e9 52       	subi	r30, 0x29	; 41
    1776:	f7 40       	sbci	r31, 0x07	; 7
    1778:	ce 17       	cp	r28, r30
    177a:	df 07       	cpc	r29, r31
    177c:	58 f3       	brcs	.-42     	; 0x1754 <saveAllEEPROM+0xb4>
	{
		storeEEbyteIfChanged((uint8_t*)&ee_pattern_text[i], (uint8_t)g_pattern_text[i]);
	}
	
	storeEEbyteIfChanged((uint8_t*)&ee_pattern_text[i], 0);
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	ce 01       	movw	r24, r28
    1782:	83 5f       	subi	r24, 0xF3	; 243
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <storeEEbyteIfChanged>
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <__vector_6>:
 * The Watchdog timer helps prevent lockups due to hardware problems.
 * It is especially helpful in this application for preventing I2C bus
 * errors from locking up the foreground process.
 ************************************************************************/
ISR(WDT_vect)
{
    1790:	1f 92       	push	r1
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	0f 92       	push	r0
    1798:	11 24       	eor	r1, r1
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	ef 93       	push	r30
	static uint8_t limit = 10;

	g_i2c_not_timed_out = FALSE;    /* unstick I2C */
    17b0:	ff 93       	push	r31
    17b2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <g_i2c_not_timed_out>
	saveAllEEPROM();                /* Make sure changed values get saved */
    17b6:	74 df       	rcall	.-280    	; 0x16a0 <saveAllEEPROM>

	/* Don't allow an unlimited number of WD interrupts to occur without enabling
	 * hardware resets. But a limited number might be required during hardware
	 * initialization. */
	if(!g_enableHardwareWDResets && limit)
    17b8:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <g_enableHardwareWDResets>
    17bc:	81 11       	cpse	r24, r1
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <__vector_6+0x42>
    17c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <limit.3099>
    17c4:	88 23       	and	r24, r24
    17c6:	29 f0       	breq	.+10     	; 0x17d2 <__vector_6+0x42>
	{
		WDTCSR |= (1 << WDIE);  /* this prevents hardware resets from occurring */
    17c8:	e0 e6       	ldi	r30, 0x60	; 96
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 64       	ori	r24, 0x40	; 64
    17d0:	80 83       	st	Z, r24
	}

	if(limit)
    17d2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <limit.3099>
    17d6:	88 23       	and	r24, r24
    17d8:	41 f0       	breq	.+16     	; 0x17ea <__vector_6+0x5a>
	{
		limit--;
    17da:	81 50       	subi	r24, 0x01	; 1
    17dc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <limit.3099>

		if(g_terminal_mode)
    17e0:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
    17e4:	81 11       	cpse	r24, r1
		{
			lb_send_WDTError();
    17e6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <lb_send_WDTError>
		}
	}
}
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <initializeEEPROMVars>:

/**********************
**********************/

void initializeEEPROMVars(void)
{
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
	uint8_t i;
	
	if(eeprom_read_byte(&ee_interface_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    1812:	85 e3       	ldi	r24, 0x35	; 53
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    181a:	89 3a       	cpi	r24, 0xA9	; 169
    181c:	09 f0       	breq	.+2      	; 0x1820 <initializeEEPROMVars+0x14>
    181e:	59 c0       	rjmp	.+178    	; 0x18d2 <initializeEEPROMVars+0xc6>
	{
		g_event_start_time = eeprom_read_dword((uint32_t*)(&ee_start_time));
    1820:	84 e0       	ldi	r24, 0x04	; 4
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 18 27 	call	0x4e30	; 0x4e30 <eeprom_read_dword>
    1828:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <g_event_start_time>
    182c:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <g_event_start_time+0x1>
    1830:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <g_event_start_time+0x2>
    1834:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <g_event_start_time+0x3>
		g_event_finish_time = eeprom_read_dword((uint32_t*)(&ee_finish_time));
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 18 27 	call	0x4e30	; 0x4e30 <eeprom_read_dword>
    1840:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <g_event_finish_time>
    1844:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <g_event_finish_time+0x1>
    1848:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_event_finish_time+0x2>
    184c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_event_finish_time+0x3>
		
		g_pattern_codespeed = eeprom_read_byte(&ee_pattern_codespeed);
    1850:	8c e0       	ldi	r24, 0x0C	; 12
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    1858:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_pattern_codespeed>
		g_id_codespeed = eeprom_read_byte(&ee_id_codespeed);
    185c:	8b e0       	ldi	r24, 0x0B	; 11
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    1864:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_id_codespeed>
		g_on_air_time = eeprom_read_byte(&ee_on_air_time);
    1868:	8a e0       	ldi	r24, 0x0A	; 10
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    1870:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_on_air_time>
		g_off_air_time = eeprom_read_byte(&ee_off_air_time);
    1874:	89 e0       	ldi	r24, 0x09	; 9
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    187c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_off_air_time>
		g_intra_cycle_delay_time = eeprom_read_byte(&ee_intra_cycle_delay_time);
    1880:	88 e0       	ldi	r24, 0x08	; 8
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    1888:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <g_intra_cycle_delay_time>
		
		for(i=0; i<20; i++)
    188c:	10 e0       	ldi	r17, 0x00	; 0
    188e:	0d c0       	rjmp	.+26     	; 0x18aa <initializeEEPROMVars+0x9e>
		{
			g_station_ID[i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    1890:	c1 2f       	mov	r28, r17
    1892:	d0 e0       	ldi	r29, 0x00	; 0
    1894:	ce 01       	movw	r24, r28
    1896:	8f 5d       	subi	r24, 0xDF	; 223
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    189e:	c2 5e       	subi	r28, 0xE2	; 226
    18a0:	de 4f       	sbci	r29, 0xFE	; 254
    18a2:	88 83       	st	Y, r24
			if(!g_station_ID[i]) break;
    18a4:	88 23       	and	r24, r24
    18a6:	19 f0       	breq	.+6      	; 0x18ae <initializeEEPROMVars+0xa2>
		g_id_codespeed = eeprom_read_byte(&ee_id_codespeed);
		g_on_air_time = eeprom_read_byte(&ee_on_air_time);
		g_off_air_time = eeprom_read_byte(&ee_off_air_time);
		g_intra_cycle_delay_time = eeprom_read_byte(&ee_intra_cycle_delay_time);
		
		for(i=0; i<20; i++)
    18a8:	1f 5f       	subi	r17, 0xFF	; 255
    18aa:	14 31       	cpi	r17, 0x14	; 20
    18ac:	88 f3       	brcs	.-30     	; 0x1890 <initializeEEPROMVars+0x84>
    18ae:	10 e0       	ldi	r17, 0x00	; 0
    18b0:	0d c0       	rjmp	.+26     	; 0x18cc <initializeEEPROMVars+0xc0>
			if(!g_station_ID[i]) break;
		}
		
		for(i=0; i<20; i++)
		{
			g_pattern_text[i] = (char)eeprom_read_byte((uint8_t*)(&ee_pattern_text[i]));
    18b2:	c1 2f       	mov	r28, r17
    18b4:	d0 e0       	ldi	r29, 0x00	; 0
    18b6:	ce 01       	movw	r24, r28
    18b8:	83 5f       	subi	r24, 0xF3	; 243
    18ba:	9f 4f       	sbci	r25, 0xFF	; 255
    18bc:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    18c0:	c7 5d       	subi	r28, 0xD7	; 215
    18c2:	d8 4f       	sbci	r29, 0xF8	; 248
    18c4:	88 83       	st	Y, r24
			if(!g_pattern_text[i]) break;
    18c6:	88 23       	and	r24, r24
    18c8:	e1 f1       	breq	.+120    	; 0x1942 <initializeEEPROMVars+0x136>
		{
			g_station_ID[i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
			if(!g_station_ID[i]) break;
		}
		
		for(i=0; i<20; i++)
    18ca:	1f 5f       	subi	r17, 0xFF	; 255
    18cc:	14 31       	cpi	r17, 0x14	; 20
    18ce:	88 f3       	brcs	.-30     	; 0x18b2 <initializeEEPROMVars+0xa6>
    18d0:	38 c0       	rjmp	.+112    	; 0x1942 <initializeEEPROMVars+0x136>
			if(!g_pattern_text[i]) break;
		}
	}
	else
	{
		g_event_start_time = EEPROM_START_TIME_DEFAULT;
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	9f ef       	ldi	r25, 0xFF	; 255
    18d6:	dc 01       	movw	r26, r24
    18d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_event_start_time>
    18dc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_event_start_time+0x1>
    18e0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <g_event_start_time+0x2>
    18e4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <g_event_start_time+0x3>
		g_event_finish_time = EEPROM_FINISH_TIME_DEFAULT;
    18e8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_event_finish_time>
    18ec:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_event_finish_time+0x1>
    18f0:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <g_event_finish_time+0x2>
    18f4:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <g_event_finish_time+0x3>
		
		g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    18f8:	84 e1       	ldi	r24, 0x14	; 20
    18fa:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <g_id_codespeed>
		g_pattern_codespeed = EEPROM_PATTERN_CODE_SPEED_DEFAULT;
    18fe:	88 e0       	ldi	r24, 0x08	; 8
    1900:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_pattern_codespeed>
		g_on_air_time = EEPROM_ON_AIR_TIME_DEFAULT;
    1904:	8c e3       	ldi	r24, 0x3C	; 60
    1906:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_on_air_time>
		g_off_air_time = EEPROM_OFF_AIR_TIME_DEFAULT;
    190a:	80 ef       	ldi	r24, 0xF0	; 240
    190c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_off_air_time>
		g_intra_cycle_delay_time = EEPROM_INTRA_CYCLE_DELAY_TIME_DEFAULT;
    1910:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <g_intra_cycle_delay_time>
		
		strncpy(g_station_ID, EEPROM_STATION_ID_DEFAULT, MAX_STATION_ID_LENGTH);
    1914:	44 e1       	ldi	r20, 0x14	; 20
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	60 ed       	ldi	r22, 0xD0	; 208
    191a:	74 e0       	ldi	r23, 0x04	; 4
    191c:	8e e1       	ldi	r24, 0x1E	; 30
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 43 24 	call	0x4886	; 0x4886 <strncpy>
		strncpy(g_pattern_text, EEPROM_PATTERN_TEXT_DEFAULT, MAX_PATTERN_TEXT_LENGTH);
    1924:	44 e1       	ldi	r20, 0x14	; 20
    1926:	50 e0       	ldi	r21, 0x00	; 0
    1928:	67 ed       	ldi	r22, 0xD7	; 215
    192a:	74 e0       	ldi	r23, 0x04	; 4
    192c:	89 e2       	ldi	r24, 0x29	; 41
    192e:	97 e0       	ldi	r25, 0x07	; 7
    1930:	0e 94 43 24 	call	0x4886	; 0x4886 <strncpy>

		saveAllEEPROM();
    1934:	b5 de       	rcall	.-662    	; 0x16a0 <saveAllEEPROM>
		eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    1936:	69 ea       	ldi	r22, 0xA9	; 169
    1938:	85 e3       	ldi	r24, 0x35	; 53
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <eeprom_write_byte>
		wdt_reset();                                    /* HW watchdog */
    1940:	a8 95       	wdr
	}
}
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	08 95       	ret

0000194a <throttleValue>:
	storeEEbyteIfChanged((uint8_t*)&ee_pattern_text[i], 0);
}

uint16_t throttleValue(uint8_t speed)
{
	uint16_t temp = (7042L / (uint16_t)speed) / 10L;
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	62 e8       	ldi	r22, 0x82	; 130
    1954:	7b e1       	ldi	r23, 0x1B	; 27
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 ab 23 	call	0x4756	; 0x4756 <__divmodsi4>
    195e:	ca 01       	movw	r24, r20
    1960:	b9 01       	movw	r22, r18
    1962:	2a e0       	ldi	r18, 0x0A	; 10
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	0e 94 ab 23 	call	0x4756	; 0x4756 <__divmodsi4>
	return temp;
}
    196e:	c9 01       	movw	r24, r18
    1970:	08 95       	ret

00001972 <__vector_1>:
	g_enableHardwareWDResets = (resetType != WD_SW_RESETS);
}


ISR( INT0_vect )
{
    1972:	1f 92       	push	r1
    1974:	0f 92       	push	r0
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	0f 92       	push	r0
    197a:	11 24       	eor	r1, r1
    197c:	2f 93       	push	r18
    197e:	3f 93       	push	r19
    1980:	4f 93       	push	r20
    1982:	5f 93       	push	r21
    1984:	6f 93       	push	r22
    1986:	7f 93       	push	r23
    1988:	8f 93       	push	r24
    198a:	9f 93       	push	r25
    198c:	af 93       	push	r26
    198e:	bf 93       	push	r27
    1990:	ef 93       	push	r30
    1992:	ff 93       	push	r31
#ifdef ENABLE_1_SEC_INTERRUPTS
	g_seconds_count++;
    1994:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <g_seconds_count>
    1998:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <g_seconds_count+0x1>
    199c:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <g_seconds_count+0x2>
    19a0:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <g_seconds_count+0x3>
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	a1 1d       	adc	r26, r1
    19a8:	b1 1d       	adc	r27, r1
    19aa:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <g_seconds_count>
    19ae:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <g_seconds_count+0x1>
    19b2:	a0 93 1e 07 	sts	0x071E, r26	; 0x80071e <g_seconds_count+0x2>
    19b6:	b0 93 1f 07 	sts	0x071F, r27	; 0x80071f <g_seconds_count+0x3>

	if(g_on_the_air)
    19ba:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <g_on_the_air>
    19be:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <g_on_the_air+0x1>
    19c2:	89 2b       	or	r24, r25
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <__vector_1+0x56>
    19c6:	a1 c0       	rjmp	.+322    	; 0x1b0a <__vector_1+0x198>
	{
		if(g_event_finish_time > 0)
    19c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_event_finish_time>
    19cc:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_event_finish_time+0x1>
    19d0:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <g_event_finish_time+0x2>
    19d4:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <g_event_finish_time+0x3>
    19d8:	18 16       	cp	r1, r24
    19da:	19 06       	cpc	r1, r25
    19dc:	1a 06       	cpc	r1, r26
    19de:	1b 06       	cpc	r1, r27
    19e0:	6c f5       	brge	.+90     	; 0x1a3c <__vector_1+0xca>
		{
			ds3231_read_date_time(&g_seconds_count, NULL, Time_Format_Not_Specified);
    19e2:	44 e0       	ldi	r20, 0x04	; 4
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	8c e1       	ldi	r24, 0x1C	; 28
    19ea:	97 e0       	ldi	r25, 0x07	; 7
    19ec:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <ds3231_read_date_time>
		
			if(g_seconds_count >= g_event_finish_time)
    19f0:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <g_seconds_count>
    19f4:	50 91 1d 07 	lds	r21, 0x071D	; 0x80071d <g_seconds_count+0x1>
    19f8:	60 91 1e 07 	lds	r22, 0x071E	; 0x80071e <g_seconds_count+0x2>
    19fc:	70 91 1f 07 	lds	r23, 0x071F	; 0x80071f <g_seconds_count+0x3>
    1a00:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_event_finish_time>
    1a04:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_event_finish_time+0x1>
    1a08:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <g_event_finish_time+0x2>
    1a0c:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <g_event_finish_time+0x3>
    1a10:	48 17       	cp	r20, r24
    1a12:	59 07       	cpc	r21, r25
    1a14:	6a 07       	cpc	r22, r26
    1a16:	7b 07       	cpc	r23, r27
    1a18:	8c f0       	brlt	.+34     	; 0x1a3c <__vector_1+0xca>
			{
				g_on_the_air = 0;
    1a1a:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <g_on_the_air+0x1>
    1a1e:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <g_on_the_air>
				g_event_finish_time = EVENT_TIME_PASSED;
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	9f ef       	ldi	r25, 0xFF	; 255
    1a26:	dc 01       	movw	r26, r24
    1a28:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_event_finish_time>
    1a2c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_event_finish_time+0x1>
    1a30:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <g_event_finish_time+0x2>
    1a34:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <g_event_finish_time+0x3>
				keyTransmitter(OFF);
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	f7 d7       	rcall	.+4078   	; 0x2a2a <keyTransmitter>
			}
		}

		if(g_on_the_air > 0) /* on the air */
    1a3c:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <g_on_the_air>
    1a40:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <g_on_the_air+0x1>
    1a44:	18 16       	cp	r1, r24
    1a46:	19 06       	cpc	r1, r25
    1a48:	0c f0       	brlt	.+2      	; 0x1a4c <__vector_1+0xda>
    1a4a:	41 c0       	rjmp	.+130    	; 0x1ace <__vector_1+0x15c>
		{
			g_on_the_air--;
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <g_on_the_air+0x1>
    1a52:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <g_on_the_air>
		
			if(!g_on_the_air)
    1a56:	00 97       	sbiw	r24, 0x00	; 0
			{
				if(g_off_air_time)
    1a58:	31 f5       	brne	.+76     	; 0x1aa6 <__vector_1+0x134>
    1a5a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_off_air_time>
    1a5e:	88 23       	and	r24, r24
				{
					keyTransmitter(OFF);
    1a60:	79 f0       	breq	.+30     	; 0x1a80 <__vector_1+0x10e>
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	e2 d7       	rcall	.+4036   	; 0x2a2a <keyTransmitter>
					g_on_the_air -= g_off_air_time;
    1a66:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <g_off_air_time>
    1a6a:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <g_on_the_air>
    1a6e:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <g_on_the_air+0x1>
    1a72:	82 1b       	sub	r24, r18
    1a74:	91 09       	sbc	r25, r1
    1a76:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <g_on_the_air+0x1>
    1a7a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <g_on_the_air>
    1a7e:	99 c0       	rjmp	.+306    	; 0x1bb2 <__vector_1+0x240>
				}
				else
				{
					g_on_the_air = g_on_air_time;
    1a80:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_on_air_time>
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <g_on_the_air+0x1>
    1a8a:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <g_on_the_air>
					g_code_throttle = throttleValue(g_pattern_codespeed);
    1a8e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_pattern_codespeed>
    1a92:	5b df       	rcall	.-330    	; 0x194a <throttleValue>
    1a94:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_code_throttle+0x1>
    1a98:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_code_throttle>
					makeMorse(g_pattern_text, TRUE);
    1a9c:	61 e0       	ldi	r22, 0x01	; 1
    1a9e:	89 e2       	ldi	r24, 0x29	; 41
    1aa0:	97 e0       	ldi	r25, 0x07	; 7
    1aa2:	16 d6       	rcall	.+3116   	; 0x26d0 <makeMorse>
    1aa4:	86 c0       	rjmp	.+268    	; 0x1bb2 <__vector_1+0x240>
				}
			}
			else if(g_on_the_air == g_time_to_send_ID)
    1aa6:	20 91 24 07 	lds	r18, 0x0724	; 0x800724 <g_time_to_send_ID>
    1aaa:	30 91 25 07 	lds	r19, 0x0725	; 0x800725 <g_time_to_send_ID+0x1>
    1aae:	82 17       	cp	r24, r18
    1ab0:	93 07       	cpc	r25, r19
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <__vector_1+0x144>
			{
				g_code_throttle = throttleValue(g_id_codespeed);
    1ab4:	7e c0       	rjmp	.+252    	; 0x1bb2 <__vector_1+0x240>
    1ab6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_id_codespeed>
    1aba:	47 df       	rcall	.-370    	; 0x194a <throttleValue>
    1abc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_code_throttle+0x1>
    1ac0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_code_throttle>
				makeMorse(g_station_ID, FALSE); /* Send only once */
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	8e e1       	ldi	r24, 0x1E	; 30
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	02 d6       	rcall	.+3076   	; 0x26d0 <makeMorse>
    1acc:	72 c0       	rjmp	.+228    	; 0x1bb2 <__vector_1+0x240>
			}
		}
		else if(g_on_the_air < 0) /* off the air - g_on_the_air = 0 means all transmissions are disabled */
    1ace:	99 23       	and	r25, r25
    1ad0:	0c f0       	brlt	.+2      	; 0x1ad4 <__vector_1+0x162>
    1ad2:	6f c0       	rjmp	.+222    	; 0x1bb2 <__vector_1+0x240>
		{
			g_on_the_air++;
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <g_on_the_air+0x1>
    1ada:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <g_on_the_air>
		
			if(!g_on_the_air)
    1ade:	89 2b       	or	r24, r25
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <__vector_1+0x172>
			{
				g_on_the_air = g_on_air_time;
    1ae2:	67 c0       	rjmp	.+206    	; 0x1bb2 <__vector_1+0x240>
    1ae4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_on_air_time>
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <g_on_the_air+0x1>
    1aee:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <g_on_the_air>
				g_code_throttle = throttleValue(g_pattern_codespeed);
    1af2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_pattern_codespeed>
    1af6:	29 df       	rcall	.-430    	; 0x194a <throttleValue>
    1af8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_code_throttle+0x1>
    1afc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_code_throttle>
				makeMorse(g_pattern_text, TRUE);
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	89 e2       	ldi	r24, 0x29	; 41
    1b04:	97 e0       	ldi	r25, 0x07	; 7
    1b06:	e4 d5       	rcall	.+3016   	; 0x26d0 <makeMorse>
    1b08:	54 c0       	rjmp	.+168    	; 0x1bb2 <__vector_1+0x240>
			}
		}
	}
	else if(g_event_start_time > 0) /* off the air - waiting for the start time to arrive */
    1b0a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_event_start_time>
    1b0e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <g_event_start_time+0x1>
    1b12:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <g_event_start_time+0x2>
    1b16:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <g_event_start_time+0x3>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	19 06       	cpc	r1, r25
    1b1e:	1a 06       	cpc	r1, r26
    1b20:	1b 06       	cpc	r1, r27
    1b22:	0c f0       	brlt	.+2      	; 0x1b26 <__vector_1+0x1b4>
    1b24:	46 c0       	rjmp	.+140    	; 0x1bb2 <__vector_1+0x240>
	{
		ds3231_read_date_time(&g_seconds_count, NULL, Time_Format_Not_Specified); 
    1b26:	44 e0       	ldi	r20, 0x04	; 4
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	8c e1       	ldi	r24, 0x1C	; 28
    1b2e:	97 e0       	ldi	r25, 0x07	; 7
    1b30:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <ds3231_read_date_time>
		
		if(g_seconds_count >= g_event_start_time)
    1b34:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <g_seconds_count>
    1b38:	50 91 1d 07 	lds	r21, 0x071D	; 0x80071d <g_seconds_count+0x1>
    1b3c:	60 91 1e 07 	lds	r22, 0x071E	; 0x80071e <g_seconds_count+0x2>
    1b40:	70 91 1f 07 	lds	r23, 0x071F	; 0x80071f <g_seconds_count+0x3>
    1b44:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_event_start_time>
    1b48:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <g_event_start_time+0x1>
    1b4c:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <g_event_start_time+0x2>
    1b50:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <g_event_start_time+0x3>
    1b54:	48 17       	cp	r20, r24
    1b56:	59 07       	cpc	r21, r25
    1b58:	6a 07       	cpc	r22, r26
    1b5a:	7b 07       	cpc	r23, r27
    1b5c:	54 f1       	brlt	.+84     	; 0x1bb2 <__vector_1+0x240>
		{
			if(g_intra_cycle_delay_time)
    1b5e:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <g_intra_cycle_delay_time>
    1b62:	88 23       	and	r24, r24
    1b64:	49 f0       	breq	.+18     	; 0x1b78 <__vector_1+0x206>
			{
				g_on_the_air = -g_intra_cycle_delay_time;
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	91 95       	neg	r25
    1b6a:	81 95       	neg	r24
    1b6c:	91 09       	sbc	r25, r1
    1b6e:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <g_on_the_air+0x1>
    1b72:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <g_on_the_air>
			}
			else
			{
				g_on_the_air = g_on_air_time;
    1b76:	12 c0       	rjmp	.+36     	; 0x1b9c <__vector_1+0x22a>
    1b78:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_on_air_time>
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <g_on_the_air+0x1>
				g_code_throttle = throttleValue(g_pattern_codespeed);
    1b82:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <g_on_the_air>
    1b86:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_pattern_codespeed>
    1b8a:	df de       	rcall	.-578    	; 0x194a <throttleValue>
    1b8c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_code_throttle+0x1>
    1b90:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_code_throttle>
				makeMorse(g_pattern_text, TRUE);
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	89 e2       	ldi	r24, 0x29	; 41
    1b98:	97 e0       	ldi	r25, 0x07	; 7
    1b9a:	9a d5       	rcall	.+2868   	; 0x26d0 <makeMorse>
			}
			
			g_event_start_time = EVENT_TIME_PASSED;
    1b9c:	8f ef       	ldi	r24, 0xFF	; 255
    1b9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_event_start_time>
    1ba6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <g_event_start_time+0x1>
    1baa:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <g_event_start_time+0x2>
    1bae:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <g_event_start_time+0x3>
	}
	
	/**************************************
	 * Delay before re-enabling linkbus receive
	 ***************************************/
	if(g_wifi_enable_delay)
    1bb2:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <g_wifi_enable_delay>
    1bb6:	88 23       	and	r24, r24
    1bb8:	81 f0       	breq	.+32     	; 0x1bda <__vector_1+0x268>
	{
		g_wifi_enable_delay--;
    1bba:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <g_wifi_enable_delay>
    1bbe:	81 50       	subi	r24, 0x01	; 1
    1bc0:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <g_wifi_enable_delay>

		if(!g_wifi_enable_delay)
    1bc4:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <g_wifi_enable_delay>
    1bc8:	81 11       	cpse	r24, r1
    1bca:	16 c0       	rjmp	.+44     	; 0x1bf8 <__vector_1+0x286>
		{
			wifi_power(ON); // power on WiFi
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	0e 94 ed 19 	call	0x33da	; 0x33da <wifi_power>
			wifi_reset(OFF); // bring WiFi out of reset
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <wifi_reset>
    1bd8:	0f c0       	rjmp	.+30     	; 0x1bf8 <__vector_1+0x286>
		}
	}
	else
	{
		if(g_WiFi_shutdown_seconds) 
    1bda:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <g_WiFi_shutdown_seconds>
    1bde:	88 23       	and	r24, r24
    1be0:	59 f0       	breq	.+22     	; 0x1bf8 <__vector_1+0x286>
		{
			g_WiFi_shutdown_seconds--;
    1be2:	81 50       	subi	r24, 0x01	; 1
    1be4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_WiFi_shutdown_seconds>
			
			if(!g_WiFi_shutdown_seconds)
    1be8:	81 11       	cpse	r24, r1
    1bea:	06 c0       	rjmp	.+12     	; 0x1bf8 <__vector_1+0x286>
			{
				wifi_reset(ON); // put WiFi into reset
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <wifi_reset>
				wifi_power(OFF); // power off WiFi
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	0e 94 ed 19 	call	0x33da	; 0x33da <wifi_power>
	if(g_terminal_mode)
	{
		lb_send_string("\nError: INT0 occurred!\n");
	}
#endif
}
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
 * need to be handled in the foreground, not in ISRs. This includes
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
    1c18:	18 95       	reti

00001c1a <main>:
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <main+0x6>
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <main+0x8>
    1c22:	cd b7       	in	r28, 0x3d	; 61
	BOOL err = FALSE;
	LinkbusRxBuffer* lb_buff = 0;

	/**
	 * Initialize internal EEPROM if needed */
	initializeEEPROMVars();
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	f2 dd       	rcall	.-1052   	; 0x180c <initializeEEPROMVars>
	// PB4 = MISO
	// PB5 = SCK
	// PB6 = Tx Power Enable
	// PB7 = Main Power Enable

	DDRB |= (1 << PORTB0) | (1 << PORTB2) | (1 << PORTB6) | (1 << PORTB7);       /* PB0 is Radio Enable output; */
    1c28:	84 b1       	in	r24, 0x04	; 4
    1c2a:	85 6c       	ori	r24, 0xC5	; 197
    1c2c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB7); /* Turn on main power */
    1c2e:	85 b1       	in	r24, 0x05	; 5
    1c30:	80 68       	ori	r24, 0x80	; 128
    1c32:	85 b9       	out	0x05, r24	; 5
	// PD5 = AM modulation tone output
	// PD6 = Antenna connected interrupt PCINT22
	// PD7 =  Port expander interrupt B

//	DDRD  = 0b00000010;     /* Set PORTD pin data directions */
	DDRD  |= (1 << PORTD4) | (1 << PORTD5);     /* Set PORTD pin data directions */
    1c34:	8a b1       	in	r24, 0x0a	; 10
    1c36:	80 63       	ori	r24, 0x30	; 48
    1c38:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD6) | (1 << PORTD7);     /* Enable pull-ups on input pins, and set output levels on all outputs */
    1c3a:	8c ec       	ldi	r24, 0xCC	; 204
    1c3c:	8b b9       	out	0x0b, r24	; 11
	// PC4 = SDA
	// PC5 = SCL
	// PC6 = Reset
	// PC7 = N/A

	DDRC = 0b00000000;        
    1c3e:	17 b8       	out	0x07, r1	; 7
	PORTC = I2C_PINS | (1 << PORTC3);     
    1c40:	88 e3       	ldi	r24, 0x38	; 56
    1c42:	88 b9       	out	0x08, r24	; 8

	/**
	 * PD5 (OC0B) is tone output for AM modulation generation
	 * TIMER0 */
//	OCR0A = 0x0C;                                       /* set compare value */
	OCR0A = 0x04;                                       /* set compare value */
    1c44:	84 e0       	ldi	r24, 0x04	; 4
    1c46:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= (1 << WGM01);                             /* set CTC (MODE 2) with OCRA */
    1c48:	84 b5       	in	r24, 0x24	; 36
    1c4a:	82 60       	ori	r24, 0x02	; 2
    1c4c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B0);							/* Toggle OC0B on Compare Match */
    1c4e:	84 b5       	in	r24, 0x24	; 36
    1c50:	80 61       	ori	r24, 0x10	; 16
    1c52:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);                /* 1024 Prescaler */
    1c54:	85 b5       	in	r24, 0x25	; 37
    1c56:	85 60       	ori	r24, 0x05	; 5
    1c58:	85 bd       	out	0x25, r24	; 37
/*	TIMSK0 &= ~(1 << OCIE0B); // disable compare interrupt - disabled by default */

	/** 
	* PB2 (OC1B) is PWM for output power level
	* TIMER1 is for transmit power PWM */
	OCR1B = DEFAULT_AM_DRIVE_LEVEL; /* Set initial duty cycle */
    1c5a:	84 eb       	ldi	r24, 0xB4	; 180
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1c62:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR1A |= (1 << WGM10); /* 8-bit Phase Correct PWM mode */
    1c66:	e0 e8       	ldi	r30, 0x80	; 128
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	81 60       	ori	r24, 0x01	; 1
    1c6e:	80 83       	st	Z, r24
	TCCR1A |= (1 << COM1B1); /* Non-inverting mode */
    1c70:	80 81       	ld	r24, Z
    1c72:	80 62       	ori	r24, 0x20	; 32
    1c74:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11) | (1 << CS10); /* Prescaler */
    1c76:	e1 e8       	ldi	r30, 0x81	; 129
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	83 60       	ori	r24, 0x03	; 3
    1c7e:	80 83       	st	Z, r24

	/**
	 * TIMER2 is for periodic interrupts */
	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    1c80:	8c e0       	ldi	r24, 0x0C	; 12
    1c82:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2A |= (1 << WGM01);                             /* set CTC with OCRA */
    1c86:	e0 eb       	ldi	r30, 0xB0	; 176
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	82 60       	ori	r24, 0x02	; 2
    1c8e:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler - why are we setting CS21?? */
    1c90:	e1 eb       	ldi	r30, 0xB1	; 177
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	87 60       	ori	r24, 0x07	; 7
    1c98:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE0B);                            /* enable compare interrupt */
    1c9a:	e0 e7       	ldi	r30, 0x70	; 112
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	84 60       	ori	r24, 0x04	; 4
    1ca2:	80 83       	st	Z, r24

	/**
	 * Set up ADC */
	ADMUX |= (1 << REFS0);
    1ca4:	ec e7       	ldi	r30, 0x7C	; 124
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 64       	ori	r24, 0x40	; 64
    1cac:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
    1cae:	ea e7       	ldi	r30, 0x7A	; 122
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	87 68       	ori	r24, 0x87	; 135
    1cb6:	80 83       	st	Z, r24

	/**
	 * Set up pin interrupts */
	PCICR |= (1 << PCIE2) | (1 << PCIE1) | (1 << PCIE0);    /* Enable pin change interrupts PCI2, PCI1 and PCI0 */
    1cb8:	e8 e6       	ldi	r30, 0x68	; 104
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	87 60       	ori	r24, 0x07	; 7
    1cc0:	80 83       	st	Z, r24
	PCMSK2 |= 0b10001000;                                   /* Enable port D pin change interrupts */
    1cc2:	ed e6       	ldi	r30, 0x6D	; 109
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	88 68       	ori	r24, 0x88	; 136
//	PCMSK1 |= (1 << PCINT10);                               /* Enable port C pin change interrupts on pin PC2 */
//	PCMSK0 |= (1 << PORTB2);                                /* Do not enable interrupts until HW is ready */

	EICRA  |= ((1 << ISC01) | (1 << ISC00));	/* Configure INT0 for RTC 1-second interrupts */
    1cca:	80 83       	st	Z, r24
    1ccc:	e9 e6       	ldi	r30, 0x69	; 105
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	83 60       	ori	r24, 0x03	; 3
	EIMSK |= (1 << INT0);		
    1cd4:	80 83       	st	Z, r24
    1cd6:	8d b3       	in	r24, 0x1d	; 29
    1cd8:	81 60       	ori	r24, 0x01	; 1

	cpu_irq_enable();                                           /* same as sei(); */
    1cda:	8d bb       	out	0x1d, r24	; 29

	/**
	 * Enable watchdog interrupts before performing I2C calls that might cause a lockup */
#ifndef TRANQUILIZE_WATCHDOG
	wdt_init(WD_SW_RESETS);
    1cdc:	78 94       	sei
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	33 d8       	rcall	.-3994   	; 0xd48 <wdt_init>
	wdt_reset();                                    /* HW watchdog */
    1ce2:	a8 95       	wdr
#endif // TRANQUILIZE_WATCHDOG

	mcp23017_init();
    1ce4:	0e 94 18 1b 	call	0x3630	; 0x3630 <mcp23017_init>

	/**
	 * Initialize the transmitter */
	err = init_transmitter();
    1ce8:	15 d7       	rcall	.+3626   	; 0x2b14 <init_transmitter>
    1cea:	18 2f       	mov	r17, r24
    1cec:	a8 95       	wdr

	/**
	 * The watchdog must be petted periodically to keep it from barking */
	wdt_reset();                /* HW watchdog */
    1cee:	60 e8       	ldi	r22, 0x80	; 128

//	wifi_power(ON); // power on WiFi
//	wifi_reset(OFF); // bring WiFi out of reset
	// Uncomment the two lines above and set a breakpoint after this line to permit serial access to ESP8266 serial lines for programming
	// You can then set a breakpoint on the line below to keep the serial port from being initialized
	linkbus_init(BAUD);
    1cf0:	75 e2       	ldi	r23, 0x25	; 37
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	0e 94 98 01 	call	0x330	; 0x330 <linkbus_init>
    1cfa:	a8 95       	wdr

	wdt_reset();                                    /* HW watchdog */
    1cfc:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>

	if(g_terminal_mode)
    1d00:	88 23       	and	r24, r24
    1d02:	91 f0       	breq	.+36     	; 0x1d28 <main+0x10e>
    1d04:	11 23       	and	r17, r17
	{
		if(err)
    1d06:	49 f0       	breq	.+18     	; 0x1d1a <main+0x100>
    1d08:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_NewLine>
		{
			lb_send_NewLine();
    1d0c:	8e ed       	ldi	r24, 0xDE	; 222
			lb_send_string("Init error!");
    1d0e:	94 e0       	ldi	r25, 0x04	; 4
    1d10:	0e 94 75 02 	call	0x4ea	; 0x4ea <lb_send_string>
    1d14:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lb_send_NewPrompt>
			lb_send_NewPrompt();		
    1d18:	0e c0       	rjmp	.+28     	; 0x1d36 <main+0x11c>
    1d1a:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_NewLine>
			
		}
		else
		{
			lb_send_NewLine();
    1d1e:	0e 94 0b 02 	call	0x416	; 0x416 <lb_send_Help>
			lb_send_Help();
    1d22:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lb_send_NewPrompt>
			lb_send_NewPrompt();		
    1d26:	07 c0       	rjmp	.+14     	; 0x1d36 <main+0x11c>
    1d28:	0e 94 45 05 	call	0xa8a	; 0xa8a <lb_send_sync>
		}
	}
	else 
	{
		lb_send_sync();                                 /* send test pattern to help synchronize baud rate with any attached device */
    1d2c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <linkbusTxInProgress>
		while(linkbusTxInProgress())
    1d30:	81 11       	cpse	r24, r1
    1d32:	fc cf       	rjmp	.-8      	; 0x1d2c <main+0x112>
    1d34:	a8 95       	wdr
		{
			;                                           /* wait until transmit finishes */
		}
		wdt_reset();
    1d36:	a8 95       	wdr
	}
	
	wdt_reset();
    1d38:	44 e0       	ldi	r20, 0x04	; 4
		
	#ifdef INCLUDE_DS3231_SUPPORT
		ds3231_read_date_time(&g_startup_time, NULL, Time_Format_Not_Specified);
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	8e e3       	ldi	r24, 0x3E	; 62
    1d40:	97 e0       	ldi	r25, 0x07	; 7
    1d42:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <ds3231_read_date_time>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
	   #ifdef ENABLE_1_SEC_INTERRUPTS
			ds3231_1s_sqw(ON);
    1d48:	0e 94 b5 19 	call	0x336a	; 0x336a <ds3231_1s_sqw>
    1d4c:	84 e0       	ldi	r24, 0x04	; 4
	   #endif    /* #ifdef ENABLE_1_SEC_INTERRUPTS */
		g_wifi_enable_delay = 4;
    1d4e:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <g_wifi_enable_delay>
    1d52:	0e 94 61 01 	call	0x2c2	; 0x2c2 <linkbusTxInProgress>
	#endif

	while(linkbusTxInProgress())
    1d56:	81 11       	cpse	r24, r1
    1d58:	fc cf       	rjmp	.-8      	; 0x1d52 <main+0x138>
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
	{
	}               /* wait until transmit finishes */

#ifndef TRANQUILIZE_WATCHDOG
	wdt_init(WD_HW_RESETS); /* enable hardware interrupts */
    1d5c:	0e 94 a4 06 	call	0xd48	; 0xd48 <wdt_init>
    1d60:	f8 94       	cli
	while(1)
	{
		/**************************************
		* The watchdog must be petted periodically to keep it from barking
		**************************************/
		cli(); wdt_reset(); /* HW watchdog */ sei();
    1d62:	a8 95       	wdr
    1d64:	78 94       	sei
    1d66:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <g_battery_measurements_active>

		/***************************************
		* Check for Power 
		***************************************/
		if(g_battery_measurements_active)                                                                           /* if ADC battery measurements have stabilized */
    1d6a:	88 23       	and	r24, r24
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <main+0x156>
    1d6e:	af c3       	rjmp	.+1886   	; 0x24ce <main+0x8b4>
    1d70:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <g_lastConversionResult>
		{
			if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)  /* Battery measurement indicates sufficient voltage */
    1d74:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <g_lastConversionResult+0x1>
    1d78:	84 3c       	cpi	r24, 0xC4	; 196
    1d7a:	91 40       	sbci	r25, 0x01	; 1
    1d7c:	08 f4       	brcc	.+2      	; 0x1d80 <main+0x166>
    1d7e:	a7 c3       	rjmp	.+1870   	; 0x24ce <main+0x8b4>
    1d80:	81 e0       	ldi	r24, 0x01	; 1
			{
				g_sufficient_power_detected = TRUE;
    1d82:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <g_sufficient_power_detected>
    1d86:	a3 c3       	rjmp	.+1862   	; 0x24ce <main+0x8b4>
    1d88:	f8 01       	movw	r30, r16
		/***********************************************************************
		 *  Handle arriving Linkbus messages
		 ************************************************************************/
		while((lb_buff = nextFullRxBuffer()))
		{
			LBMessageID msg_id = lb_buff->id;
    1d8a:	81 81       	ldd	r24, Z+1	; 0x01
    1d8c:	92 81       	ldd	r25, Z+2	; 0x02
    1d8e:	88 31       	cpi	r24, 0x18	; 24

			switch(msg_id)
    1d90:	fd e1       	ldi	r31, 0x1D	; 29
    1d92:	9f 07       	cpc	r25, r31
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <main+0x17e>
    1d96:	fe c2       	rjmp	.+1532   	; 0x2394 <main+0x77a>
    1d98:	38 f5       	brcc	.+78     	; 0x1de8 <main+0x1ce>
    1d9a:	8e 31       	cpi	r24, 0x1E	; 30
    1d9c:	e3 e0       	ldi	r30, 0x03	; 3
    1d9e:	9e 07       	cpc	r25, r30
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <main+0x18a>
    1da2:	c9 c1       	rjmp	.+914    	; 0x2136 <main+0x51c>
    1da4:	60 f4       	brcc	.+24     	; 0x1dbe <main+0x1a4>
    1da6:	80 35       	cpi	r24, 0x50	; 80
    1da8:	91 05       	cpc	r25, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <main+0x194>
    1dac:	e7 c0       	rjmp	.+462    	; 0x1f7c <main+0x362>
    1dae:	84 35       	cpi	r24, 0x54	; 84
    1db0:	91 05       	cpc	r25, r1
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <main+0x19c>
    1db4:	47 c2       	rjmp	.+1166   	; 0x2244 <main+0x62a>
    1db6:	cf 97       	sbiw	r24, 0x3f	; 63
    1db8:	09 f0       	breq	.+2      	; 0x1dbc <main+0x1a2>
    1dba:	78 c3       	rjmp	.+1776   	; 0x24ac <main+0x892>
    1dbc:	35 c3       	rjmp	.+1642   	; 0x2428 <main+0x80e>
    1dbe:	84 38       	cpi	r24, 0x84	; 132
    1dc0:	23 e0       	ldi	r18, 0x03	; 3
    1dc2:	92 07       	cpc	r25, r18
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <main+0x1ae>
    1dc6:	dd c0       	rjmp	.+442    	; 0x1f82 <main+0x368>
    1dc8:	28 f4       	brcc	.+10     	; 0x1dd4 <main+0x1ba>
    1dca:	81 36       	cpi	r24, 0x61	; 97
    1dcc:	93 40       	sbci	r25, 0x03	; 3
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <main+0x1b8>
    1dd0:	76 c2       	rjmp	.+1260   	; 0x22be <main+0x6a4>
    1dd2:	6c c3       	rjmp	.+1752   	; 0x24ac <main+0x892>
    1dd4:	8f 3a       	cpi	r24, 0xAF	; 175
    1dd6:	23 e0       	ldi	r18, 0x03	; 3
    1dd8:	92 07       	cpc	r25, r18
    1dda:	09 f4       	brne	.+2      	; 0x1dde <main+0x1c4>
    1ddc:	5f c0       	rjmp	.+190    	; 0x1e9c <main+0x282>
    1dde:	86 3a       	cpi	r24, 0xA6	; 166
    1de0:	9c 41       	sbci	r25, 0x1C	; 28
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <main+0x1cc>
    1de4:	0c c3       	rjmp	.+1560   	; 0x23fe <main+0x7e4>
    1de6:	62 c3       	rjmp	.+1732   	; 0x24ac <main+0x892>
    1de8:	8a 39       	cpi	r24, 0x9A	; 154
    1dea:	f3 e2       	ldi	r31, 0x23	; 35
    1dec:	9f 07       	cpc	r25, r31
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <main+0x1d8>
    1df0:	8b c0       	rjmp	.+278    	; 0x1f08 <main+0x2ee>
    1df2:	a0 f4       	brcc	.+40     	; 0x1e1c <main+0x202>
    1df4:	82 38       	cpi	r24, 0x82	; 130
    1df6:	ee e1       	ldi	r30, 0x1E	; 30
    1df8:	9e 07       	cpc	r25, r30
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <main+0x1e4>
    1dfc:	89 c0       	rjmp	.+274    	; 0x1f10 <main+0x2f6>
    1dfe:	20 f4       	brcc	.+8      	; 0x1e08 <main+0x1ee>
    1e00:	8d 30       	cpi	r24, 0x0D	; 13
    1e02:	9e 41       	sbci	r25, 0x1E	; 30
    1e04:	01 f1       	breq	.+64     	; 0x1e46 <main+0x22c>
    1e06:	52 c3       	rjmp	.+1700   	; 0x24ac <main+0x892>
    1e08:	81 3d       	cpi	r24, 0xD1	; 209
    1e0a:	ee e1       	ldi	r30, 0x1E	; 30
    1e0c:	9e 07       	cpc	r25, r30
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <main+0x1f8>
    1e10:	80 c2       	rjmp	.+1280   	; 0x2312 <main+0x6f8>
    1e12:	8d 3a       	cpi	r24, 0xAD	; 173
    1e14:	92 42       	sbci	r25, 0x22	; 34
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <main+0x200>
    1e18:	9f c0       	rjmp	.+318    	; 0x1f58 <main+0x33e>
    1e1a:	48 c3       	rjmp	.+1680   	; 0x24ac <main+0x892>
    1e1c:	80 3d       	cpi	r24, 0xD0	; 208
    1e1e:	23 e2       	ldi	r18, 0x23	; 35
    1e20:	92 07       	cpc	r25, r18
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <main+0x20c>
    1e24:	cc c1       	rjmp	.+920    	; 0x21be <main+0x5a4>
    1e26:	28 f4       	brcc	.+10     	; 0x1e32 <main+0x218>
    1e28:	8f 3c       	cpi	r24, 0xCF	; 207
    1e2a:	93 42       	sbci	r25, 0x23	; 35
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <main+0x216>
    1e2e:	f0 c2       	rjmp	.+1504   	; 0x2410 <main+0x7f6>
    1e30:	3d c3       	rjmp	.+1658   	; 0x24ac <main+0x892>
    1e32:	87 3f       	cpi	r24, 0xF7	; 247
    1e34:	23 e2       	ldi	r18, 0x23	; 35
    1e36:	92 07       	cpc	r25, r18
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <main+0x222>
    1e3a:	f8 c0       	rjmp	.+496    	; 0x202c <main+0x412>
    1e3c:	81 37       	cpi	r24, 0x71	; 113
    1e3e:	94 42       	sbci	r25, 0x24	; 36
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <main+0x22a>
    1e42:	c5 c2       	rjmp	.+1418   	; 0x23ce <main+0x7b4>
    1e44:	33 c3       	rjmp	.+1638   	; 0x24ac <main+0x892>
    1e46:	c0 90 8a 00 	lds	r12, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
#endif //DEBUG_FUNCTIONS_ENABLE		

				case MESSAGE_DRIVE_LEVEL:
				{
					uint16_t result = OCR1B;
    1e4a:	d0 90 8b 00 	lds	r13, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1e4e:	f8 01       	movw	r30, r16
					
					if(lb_buff->fields[FIELD1][0])
    1e50:	83 81       	ldd	r24, Z+3	; 0x03
    1e52:	88 23       	and	r24, r24
    1e54:	e9 f0       	breq	.+58     	; 0x1e90 <main+0x276>
    1e56:	c8 01       	movw	r24, r16
					{
						uint16_t setting = atoi(lb_buff->fields[FIELD1]);
    1e58:	03 96       	adiw	r24, 0x03	; 3
    1e5a:	0e 94 e6 23 	call	0x47cc	; 0x47cc <atoi>
    1e5e:	e8 2e       	mov	r14, r24
    1e60:	f9 2e       	mov	r15, r25
    1e62:	f8 ee       	ldi	r31, 0xE8	; 232
						
						if(setting >= 1000)
    1e64:	ef 16       	cp	r14, r31
    1e66:	f3 e0       	ldi	r31, 0x03	; 3
    1e68:	ff 06       	cpc	r15, r31
    1e6a:	38 f0       	brcs	.+14     	; 0x1e7a <main+0x260>
						{
							DDRD  &= ~(1 << PORTD5); // set clock pin to an input
    1e6c:	8a b1       	in	r24, 0x0a	; 10
    1e6e:	8f 7d       	andi	r24, 0xDF	; 223
    1e70:	8a b9       	out	0x0a, r24	; 10
							PORTD |= (1 << PORTD5); // enable pull-up
    1e72:	8b b1       	in	r24, 0x0b	; 11
    1e74:	80 62       	ori	r24, 0x20	; 32
    1e76:	8b b9       	out	0x0b, r24	; 11
    1e78:	0b c0       	rjmp	.+22     	; 0x1e90 <main+0x276>
						}
						else if(setting > 255)
    1e7a:	2f ef       	ldi	r18, 0xFF	; 255
    1e7c:	e2 16       	cp	r14, r18
    1e7e:	f1 04       	cpc	r15, r1
    1e80:	29 f0       	breq	.+10     	; 0x1e8c <main+0x272>
    1e82:	20 f0       	brcs	.+8      	; 0x1e8c <main+0x272>
						{
							DDRD |= (1 << PORTD5); // set clock pin to an output
    1e84:	8a b1       	in	r24, 0x0a	; 10
    1e86:	80 62       	ori	r24, 0x20	; 32
    1e88:	8a b9       	out	0x0a, r24	; 10
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <main+0x276>
						}
						else
						{
							result = setting;
							txSetDrive(setting);
    1e8c:	ff d5       	rcall	.+3070   	; 0x2a8c <txSetDrive>
    1e8e:	67 01       	movw	r12, r14
						{
							DDRD |= (1 << PORTD5); // set clock pin to an output
						}
						else
						{
							result = setting;
    1e90:	6a ee       	ldi	r22, 0xEA	; 234
							txSetDrive(setting);
						}
					}
					
					lb_broadcast_num(result, "DRI");
    1e92:	74 e0       	ldi	r23, 0x04	; 4
    1e94:	c6 01       	movw	r24, r12
    1e96:	0e 94 16 06 	call	0xc2c	; 0xc2c <lb_broadcast_num>
    1e9a:	11 c3       	rjmp	.+1570   	; 0x24be <main+0x8a4>

				}
				break;
    1e9c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <wifi_enabled>
				
				case MESSAGE_WIFI:
				{
					BOOL result = wifi_enabled();
    1ea0:	f8 2e       	mov	r15, r24
    1ea2:	f8 01       	movw	r30, r16
					
					if(lb_buff->fields[FIELD1][0])
    1ea4:	83 81       	ldd	r24, Z+3	; 0x03
    1ea6:	88 23       	and	r24, r24
    1ea8:	19 f1       	breq	.+70     	; 0x1ef0 <main+0x2d6>
    1eaa:	c8 01       	movw	r24, r16
					{
						result = atoi(lb_buff->fields[FIELD1]);
    1eac:	03 96       	adiw	r24, 0x03	; 3
    1eae:	0e 94 e6 23 	call	0x47cc	; 0x47cc <atoi>
    1eb2:	f8 2e       	mov	r15, r24
    1eb4:	f8 94       	cli
						
						cli(); 
    1eb6:	0e 94 b6 01 	call	0x36c	; 0x36c <linkbus_disable>
						linkbus_disable();
    1eba:	78 94       	sei
						sei();	
    1ebc:	8f 2d       	mov	r24, r15
						wifi_power(result);
    1ebe:	0e 94 ed 19 	call	0x33da	; 0x33da <wifi_power>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
						g_terminal_mode = !result;
    1ec4:	f1 10       	cpse	r15, r1
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <g_terminal_mode>
    1ecc:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <wifi_reset>
						wifi_reset(g_terminal_mode);
    1ed0:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
						linkbus_setTerminalMode(g_terminal_mode);
    1ed4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <linkbus_setTerminalMode>
    1ed8:	f2 e0       	ldi	r31, 0x02	; 2

						if(result == 2)
    1eda:	ff 12       	cpse	r15, r31
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <main+0x2ca>
    1ede:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <g_WiFi_shutdown_seconds>
						{
							g_WiFi_shutdown_seconds = 0; // disable shutdown
    1ee2:	06 c0       	rjmp	.+12     	; 0x1ef0 <main+0x2d6>
    1ee4:	60 e8       	ldi	r22, 0x80	; 128
						}
						else
						{
							linkbus_init(BAUD);
    1ee6:	75 e2       	ldi	r23, 0x25	; 37
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 98 01 	call	0x330	; 0x330 <linkbus_init>
    1ef0:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
						}
					}
					
					if(g_terminal_mode) lb_broadcast_num((uint16_t)result, NULL);
    1ef4:	88 23       	and	r24, r24
    1ef6:	09 f4       	brne	.+2      	; 0x1efa <main+0x2e0>
    1ef8:	e2 c2       	rjmp	.+1476   	; 0x24be <main+0x8a4>
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	70 e0       	ldi	r23, 0x00	; 0
    1efe:	8f 2d       	mov	r24, r15
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	0e 94 16 06 	call	0xc2c	; 0xc2c <lb_broadcast_num>
    1f06:	db c2       	rjmp	.+1462   	; 0x24be <main+0x8a4>
    1f08:	82 e0       	ldi	r24, 0x02	; 2
				break;

				case MESSAGE_RESET:
				{
#ifndef TRANQUILIZE_WATCHDOG
					wdt_init(WD_FORCE_RESET);
    1f0a:	0e 94 a4 06 	call	0xd48	; 0xd48 <wdt_init>
    1f0e:	ff cf       	rjmp	.-2      	; 0x1f0e <main+0x2f4>
    1f10:	f8 01       	movw	r30, r16
				}
				break;
				
				case MESSAGE_ESP_COMM:
				{
					uint8_t f1 = lb_buff->fields[FIELD1][0];
    1f12:	83 81       	ldd	r24, Z+3	; 0x03
    1f14:	80 33       	cpi	r24, 0x30	; 48
					
					if(f1 == '0') /* I'm awake message */
    1f16:	79 f4       	brne	.+30     	; 0x1f36 <main+0x31c>
    1f18:	44 e0       	ldi	r20, 0x04	; 4
					{
						/* WiFi is awake. Send it the current time */
						#ifdef INCLUDE_DS3231_SUPPORT
						ds3231_read_date_time(NULL, g_tempStr, Time_Format_Not_Specified);
    1f1a:	6b e4       	ldi	r22, 0x4B	; 75
    1f1c:	77 e0       	ldi	r23, 0x07	; 7
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <ds3231_read_date_time>
    1f26:	4b e4       	ldi	r20, 0x4B	; 75
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    1f28:	57 e0       	ldi	r21, 0x07	; 7
    1f2a:	6e ee       	ldi	r22, 0xEE	; 238
    1f2c:	74 e0       	ldi	r23, 0x04	; 4
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	0e 94 8c 03 	call	0x718	; 0x718 <lb_send_msg>
    1f34:	c4 c2       	rjmp	.+1416   	; 0x24be <main+0x8a4>
    1f36:	81 33       	cpi	r24, 0x31	; 49
						#endif
					}
					else if(f1 == '1')
    1f38:	41 f4       	brne	.+16     	; 0x1f4a <main+0x330>
    1f3a:	42 ef       	ldi	r20, 0xF2	; 242
					{
						/* ESP8266 is ready with event data */
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_ESP_LABEL, "1");
    1f3c:	54 e0       	ldi	r21, 0x04	; 4
    1f3e:	64 ef       	ldi	r22, 0xF4	; 244
    1f40:	74 e0       	ldi	r23, 0x04	; 4
    1f42:	83 e0       	ldi	r24, 0x03	; 3
    1f44:	0e 94 8c 03 	call	0x718	; 0x718 <lb_send_msg>
    1f48:	ba c2       	rjmp	.+1396   	; 0x24be <main+0x8a4>
					}
					else if(f1 == 'Z') /* No scheduled events - keep alive */
    1f4a:	8a 35       	cpi	r24, 0x5A	; 90
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <main+0x336>
					{
						/* shut down WiFi after 2 minutes of inactivity */
						g_WiFi_shutdown_seconds = 120; // wait 2 more minutes before shutting down WiFi
    1f4e:	b7 c2       	rjmp	.+1390   	; 0x24be <main+0x8a4>
    1f50:	88 e7       	ldi	r24, 0x78	; 120
    1f52:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <g_WiFi_shutdown_seconds>
				
				case MESSAGE_TX_POWER:
				{
					uint8_t pwr;
					
					if(lb_buff->fields[FIELD1][0])
    1f56:	b3 c2       	rjmp	.+1382   	; 0x24be <main+0x8a4>
    1f58:	f8 01       	movw	r30, r16
					{
						pwr = atol(lb_buff->fields[FIELD1]); 
    1f5a:	83 81       	ldd	r24, Z+3	; 0x03
    1f5c:	88 23       	and	r24, r24
    1f5e:	39 f0       	breq	.+14     	; 0x1f6e <main+0x354>
    1f60:	c8 01       	movw	r24, r16
    1f62:	03 96       	adiw	r24, 0x03	; 3
						txSetPowerLevel(pwr);
    1f64:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
						saveAllEEPROM(); 
    1f68:	86 2f       	mov	r24, r22
    1f6a:	a3 d5       	rcall	.+2886   	; 0x2ab2 <txSetPowerLevel>
					}
					
					pwr = txGetPowerLevel();
    1f6c:	99 db       	rcall	.-2254   	; 0x16a0 <saveAllEEPROM>
    1f6e:	b9 d5       	rcall	.+2930   	; 0x2ae2 <txGetPowerLevel>
					lb_send_value(pwr, "POW");
    1f70:	68 ef       	ldi	r22, 0xF8	; 248
    1f72:	74 e0       	ldi	r23, 0x04	; 4
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	0e 94 a6 02 	call	0x54c	; 0x54c <lb_send_value>
				}
				break;
				
				case MESSAGE_PERM:
				{
					storeTtransmitterValues();
    1f7a:	a1 c2       	rjmp	.+1346   	; 0x24be <main+0x8a4>
    1f7c:	f9 d5       	rcall	.+3058   	; 0x2b70 <storeTtransmitterValues>
					saveAllEEPROM();
    1f7e:	90 db       	rcall	.-2272   	; 0x16a0 <saveAllEEPROM>
    1f80:	9e c2       	rjmp	.+1340   	; 0x24be <main+0x8a4>
				}
				break;
    1f82:	f8 01       	movw	r30, r16
				case MESSAGE_TIME:
				{
					BOOL error = TRUE;
					int32_t time;
					
					if(lb_buff->fields[FIELD1][0] == 'S')
    1f84:	83 81       	ldd	r24, Z+3	; 0x03
    1f86:	83 35       	cpi	r24, 0x53	; 83
    1f88:	d1 f4       	brne	.+52     	; 0x1fbe <main+0x3a4>
    1f8a:	80 8d       	ldd	r24, Z+24	; 0x18
					{
						if(lb_buff->fields[FIELD2][0])
    1f8c:	88 23       	and	r24, r24
    1f8e:	39 f0       	breq	.+14     	; 0x1f9e <main+0x384>
    1f90:	be 01       	movw	r22, r28
						{
							error = stringToSecondsSinceMidnight(lb_buff->fields[FIELD2], &time);
    1f92:	6f 5f       	subi	r22, 0xFF	; 255
    1f94:	7f 4f       	sbci	r23, 0xFF	; 255
    1f96:	c8 01       	movw	r24, r16
    1f98:	48 96       	adiw	r24, 0x18	; 24
    1f9a:	08 d7       	rcall	.+3600   	; 0x2dac <stringToSecondsSinceMidnight>
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <main+0x386>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	81 11       	cpse	r24, r1
				}
				break;
				
				case MESSAGE_TIME:
				{
					BOOL error = TRUE;
    1fa2:	2b c0       	rjmp	.+86     	; 0x1ffa <main+0x3e0>
						if(lb_buff->fields[FIELD2][0])
						{
							error = stringToSecondsSinceMidnight(lb_buff->fields[FIELD2], &time);
						}
		
						if(!error) g_event_start_time = time;
    1fa4:	49 81       	ldd	r20, Y+1	; 0x01
    1fa6:	5a 81       	ldd	r21, Y+2	; 0x02
    1fa8:	6b 81       	ldd	r22, Y+3	; 0x03
    1faa:	7c 81       	ldd	r23, Y+4	; 0x04
    1fac:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <g_event_start_time>
    1fb0:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <g_event_start_time+0x1>
    1fb4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <g_event_start_time+0x2>
    1fb8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <g_event_start_time+0x3>
    1fbc:	1e c0       	rjmp	.+60     	; 0x1ffa <main+0x3e0>
    1fbe:	86 34       	cpi	r24, 0x46	; 70
					}
					else if(lb_buff->fields[FIELD1][0] == 'F')
    1fc0:	d9 f4       	brne	.+54     	; 0x1ff8 <main+0x3de>
    1fc2:	f8 01       	movw	r30, r16
					{
						if(lb_buff->fields[FIELD2][0])
    1fc4:	80 8d       	ldd	r24, Z+24	; 0x18
    1fc6:	88 23       	and	r24, r24
    1fc8:	39 f0       	breq	.+14     	; 0x1fd8 <main+0x3be>
    1fca:	be 01       	movw	r22, r28
						{
							error = stringToSecondsSinceMidnight(lb_buff->fields[FIELD2], &time);
    1fcc:	6f 5f       	subi	r22, 0xFF	; 255
    1fce:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	48 96       	adiw	r24, 0x18	; 24
    1fd4:	eb d6       	rcall	.+3542   	; 0x2dac <stringToSecondsSinceMidnight>
    1fd6:	01 c0       	rjmp	.+2      	; 0x1fda <main+0x3c0>
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
				}
				break;
				
				case MESSAGE_TIME:
				{
					BOOL error = TRUE;
    1fda:	81 11       	cpse	r24, r1
						if(lb_buff->fields[FIELD2][0])
						{
							error = stringToSecondsSinceMidnight(lb_buff->fields[FIELD2], &time);
						}
						
						if(!error) g_event_finish_time = time;
    1fdc:	0e c0       	rjmp	.+28     	; 0x1ffa <main+0x3e0>
    1fde:	49 81       	ldd	r20, Y+1	; 0x01
    1fe0:	5a 81       	ldd	r21, Y+2	; 0x02
    1fe2:	6b 81       	ldd	r22, Y+3	; 0x03
    1fe4:	7c 81       	ldd	r23, Y+4	; 0x04
    1fe6:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <g_event_finish_time>
    1fea:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <g_event_finish_time+0x1>
    1fee:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <g_event_finish_time+0x2>
    1ff2:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <g_event_finish_time+0x3>
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <main+0x3e0>
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
				}
				break;
				
				case MESSAGE_TIME:
				{
					BOOL error = TRUE;
    1ffa:	81 11       	cpse	r24, r1
						}
						
						if(!error) g_event_finish_time = time;
					}
						
					if(!error)
    1ffc:	0d c0       	rjmp	.+26     	; 0x2018 <main+0x3fe>
    1ffe:	50 db       	rcall	.-2400   	; 0x16a0 <saveAllEEPROM>
					{
						saveAllEEPROM(); 
    2000:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
						if(g_terminal_mode) lb_send_value((int16_t)time, "sec=");
    2004:	88 23       	and	r24, r24
    2006:	09 f4       	brne	.+2      	; 0x200a <main+0x3f0>
    2008:	5a c2       	rjmp	.+1204   	; 0x24be <main+0x8a4>
    200a:	6c ef       	ldi	r22, 0xFC	; 252
    200c:	74 e0       	ldi	r23, 0x04	; 4
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	0e 94 a6 02 	call	0x54c	; 0x54c <lb_send_value>
    2016:	53 c2       	rjmp	.+1190   	; 0x24be <main+0x8a4>
    2018:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
					}
					else if(g_terminal_mode)
    201c:	88 23       	and	r24, r24
    201e:	09 f4       	brne	.+2      	; 0x2022 <main+0x408>
    2020:	4e c2       	rjmp	.+1180   	; 0x24be <main+0x8a4>
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	95 e0       	ldi	r25, 0x05	; 5
					{
						lb_send_string("err\n");
    2026:	0e 94 75 02 	call	0x4ea	; 0x4ea <lb_send_string>
    202a:	49 c2       	rjmp	.+1170   	; 0x24be <main+0x8a4>
    202c:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
				}
				break;
				
				case MESSAGE_CLOCK:
				{
					if(g_terminal_mode)
    2030:	88 23       	and	r24, r24
    2032:	31 f1       	breq	.+76     	; 0x2080 <main+0x466>
    2034:	f8 01       	movw	r30, r16
    2036:	83 81       	ldd	r24, Z+3	; 0x03
					{
						if(lb_buff->fields[FIELD1][0])
    2038:	88 23       	and	r24, r24
    203a:	a1 f0       	breq	.+40     	; 0x2064 <main+0x44a>
    203c:	80 89       	ldd	r24, Z+16	; 0x10
						{ /* Expected format:  2018-03-23T18:00:00 */
							if((lb_buff->fields[FIELD1][13] == ':') && (lb_buff->fields[FIELD1][16] == ':'))
    203e:	8a 33       	cpi	r24, 0x3A	; 58
    2040:	89 f4       	brne	.+34     	; 0x2064 <main+0x44a>
    2042:	83 89       	ldd	r24, Z+19	; 0x13
    2044:	8a 33       	cpi	r24, 0x3A	; 58
    2046:	71 f4       	brne	.+28     	; 0x2064 <main+0x44a>
    2048:	44 e1       	ldi	r20, 0x14	; 20
							{
								strncpy(g_tempStr, lb_buff->fields[FIELD1], 20);
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	b8 01       	movw	r22, r16
    204e:	6d 5f       	subi	r22, 0xFD	; 253
    2050:	7f 4f       	sbci	r23, 0xFF	; 255
    2052:	8b e4       	ldi	r24, 0x4B	; 75
    2054:	97 e0       	ldi	r25, 0x07	; 7
    2056:	0e 94 43 24 	call	0x4886	; 0x4886 <strncpy>
    205a:	60 e0       	ldi	r22, 0x00	; 0
								#ifdef INCLUDE_DS3231_SUPPORT
								ds3231_set_date_time(g_tempStr, RTC_CLOCK);
    205c:	8b e4       	ldi	r24, 0x4B	; 75
    205e:	97 e0       	ldi	r25, 0x07	; 7
    2060:	0e 94 39 19 	call	0x3272	; 0x3272 <ds3231_set_date_time>
    2064:	44 e0       	ldi	r20, 0x04	; 4
								#endif
							}
						}
						
						ds3231_read_date_time(NULL, g_tempStr, Time_Format_Not_Specified);
    2066:	6b e4       	ldi	r22, 0x4B	; 75
    2068:	77 e0       	ldi	r23, 0x07	; 7
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	88 d7       	rcall	.+3856   	; 0x2f80 <ds3231_read_date_time>
    2070:	4b e4       	ldi	r20, 0x4B	; 75
    2072:	57 e0       	ldi	r21, 0x07	; 7
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    2074:	6e ee       	ldi	r22, 0xEE	; 238
    2076:	74 e0       	ldi	r23, 0x04	; 4
    2078:	83 e0       	ldi	r24, 0x03	; 3
    207a:	0e 94 8c 03 	call	0x718	; 0x718 <lb_send_msg>
    207e:	1f c2       	rjmp	.+1086   	; 0x24be <main+0x8a4>
    2080:	f8 01       	movw	r30, r16
    2082:	80 81       	ld	r24, Z
					}
					else if(lb_buff->type == LINKBUS_MSG_COMMAND) // ignore replies since, as the time source, we should never be sending queries anyway
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	01 f5       	brne	.+64     	; 0x20c8 <main+0x4ae>
    2088:	83 81       	ldd	r24, Z+3	; 0x03
					{
						if(lb_buff->fields[FIELD1][0])
    208a:	88 23       	and	r24, r24
    208c:	79 f0       	breq	.+30     	; 0x20ac <main+0x492>
    208e:	44 e1       	ldi	r20, 0x14	; 20
						{
							strncpy(g_tempStr, lb_buff->fields[FIELD1], 20);
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	b8 01       	movw	r22, r16
    2094:	6d 5f       	subi	r22, 0xFD	; 253
    2096:	7f 4f       	sbci	r23, 0xFF	; 255
    2098:	8b e4       	ldi	r24, 0x4B	; 75
    209a:	97 e0       	ldi	r25, 0x07	; 7
    209c:	0e 94 43 24 	call	0x4886	; 0x4886 <strncpy>
    20a0:	60 e0       	ldi	r22, 0x00	; 0
							#ifdef INCLUDE_DS3231_SUPPORT
								ds3231_set_date_time(g_tempStr, RTC_CLOCK);
    20a2:	8b e4       	ldi	r24, 0x4B	; 75
    20a4:	97 e0       	ldi	r25, 0x07	; 7
    20a6:	0e 94 39 19 	call	0x3272	; 0x3272 <ds3231_set_date_time>
    20aa:	09 c2       	rjmp	.+1042   	; 0x24be <main+0x8a4>
    20ac:	44 e0       	ldi	r20, 0x04	; 4
							#endif
						}
						else
						{
							#ifdef INCLUDE_DS3231_SUPPORT
							ds3231_read_date_time(NULL, g_tempStr, Time_Format_Not_Specified);
    20ae:	6b e4       	ldi	r22, 0x4B	; 75
    20b0:	77 e0       	ldi	r23, 0x07	; 7
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	64 d7       	rcall	.+3784   	; 0x2f80 <ds3231_read_date_time>
    20b8:	4b e4       	ldi	r20, 0x4B	; 75
    20ba:	57 e0       	ldi	r21, 0x07	; 7
							lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    20bc:	6e ee       	ldi	r22, 0xEE	; 238
    20be:	74 e0       	ldi	r23, 0x04	; 4
    20c0:	83 e0       	ldi	r24, 0x03	; 3
    20c2:	0e 94 8c 03 	call	0x718	; 0x718 <lb_send_msg>
    20c6:	fb c1       	rjmp	.+1014   	; 0x24be <main+0x8a4>
    20c8:	82 30       	cpi	r24, 0x02	; 2
    20ca:	09 f0       	breq	.+2      	; 0x20ce <main+0x4b4>
							#endif
						}
					}
					else if(lb_buff->type == LINKBUS_MSG_QUERY)
    20cc:	f8 c1       	rjmp	.+1008   	; 0x24be <main+0x8a4>
    20ce:	40 91 1c 07 	lds	r20, 0x071C	; 0x80071c <g_seconds_count>
					{
						static int32_t lastTime = 0;
						
						#ifdef INCLUDE_DS3231_SUPPORT							
						if(g_seconds_count != lastTime)
    20d2:	50 91 1d 07 	lds	r21, 0x071D	; 0x80071d <g_seconds_count+0x1>
    20d6:	60 91 1e 07 	lds	r22, 0x071E	; 0x80071e <g_seconds_count+0x2>
    20da:	70 91 1f 07 	lds	r23, 0x071F	; 0x80071f <g_seconds_count+0x3>
    20de:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <lastTime.3168>
    20e2:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <lastTime.3168+0x1>
    20e6:	a0 91 e6 06 	lds	r26, 0x06E6	; 0x8006e6 <lastTime.3168+0x2>
    20ea:	b0 91 e7 06 	lds	r27, 0x06E7	; 0x8006e7 <lastTime.3168+0x3>
    20ee:	48 17       	cp	r20, r24
    20f0:	59 07       	cpc	r21, r25
    20f2:	6a 07       	cpc	r22, r26
    20f4:	7b 07       	cpc	r23, r27
    20f6:	09 f4       	brne	.+2      	; 0x20fa <main+0x4e0>
    20f8:	e2 c1       	rjmp	.+964    	; 0x24be <main+0x8a4>
    20fa:	44 e0       	ldi	r20, 0x04	; 4
						{
							ds3231_read_date_time(NULL, g_tempStr, Time_Format_Not_Specified);
    20fc:	6b e4       	ldi	r22, 0x4B	; 75
    20fe:	77 e0       	ldi	r23, 0x07	; 7
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	3d d7       	rcall	.+3706   	; 0x2f80 <ds3231_read_date_time>
    2106:	4b e4       	ldi	r20, 0x4B	; 75
    2108:	57 e0       	ldi	r21, 0x07	; 7
							lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    210a:	6e ee       	ldi	r22, 0xEE	; 238
    210c:	74 e0       	ldi	r23, 0x04	; 4
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	0e 94 8c 03 	call	0x718	; 0x718 <lb_send_msg>
    2114:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <g_seconds_count>
							lastTime = g_seconds_count;
    2118:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <g_seconds_count+0x1>
    211c:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <g_seconds_count+0x2>
    2120:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <g_seconds_count+0x3>
    2124:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <lastTime.3168>
    2128:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <lastTime.3168+0x1>
    212c:	a0 93 e6 06 	sts	0x06E6, r26	; 0x8006e6 <lastTime.3168+0x2>
    2130:	b0 93 e7 06 	sts	0x06E7, r27	; 0x8006e7 <lastTime.3168+0x3>
    2134:	c4 c1       	rjmp	.+904    	; 0x24be <main+0x8a4>
				}
				break;
				
				case MESSAGE_SET_STATION_ID:
				{
					if(lb_buff->fields[FIELD1][0])
    2136:	f8 01       	movw	r30, r16
    2138:	83 81       	ldd	r24, Z+3	; 0x03
    213a:	88 23       	and	r24, r24
    213c:	39 f1       	breq	.+78     	; 0x218c <main+0x572>
					{
						strncpy(g_station_ID, lb_buff->fields[FIELD1], MAX_STATION_ID_LENGTH);
    213e:	44 e1       	ldi	r20, 0x14	; 20
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	b8 01       	movw	r22, r16
    2144:	6d 5f       	subi	r22, 0xFD	; 253
    2146:	7f 4f       	sbci	r23, 0xFF	; 255
    2148:	8e e1       	ldi	r24, 0x1E	; 30
    214a:	91 e0       	ldi	r25, 0x01	; 1
    214c:	0e 94 43 24 	call	0x4886	; 0x4886 <strncpy>
						saveAllEEPROM(); 
    2150:	a7 da       	rcall	.-2738   	; 0x16a0 <saveAllEEPROM>
    2152:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <g_id_codespeed>
						g_time_to_send_ID = (stringTimeRequiredToSend(g_station_ID, g_id_codespeed) + 999) / 1000;
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	8e e1       	ldi	r24, 0x1E	; 30
    215a:	91 e0       	ldi	r25, 0x01	; 1
    215c:	53 d3       	rcall	.+1702   	; 0x2804 <stringTimeRequiredToSend>
    215e:	89 51       	subi	r24, 0x19	; 25
    2160:	9c 4f       	sbci	r25, 0xFC	; 252
    2162:	9c 01       	movw	r18, r24
    2164:	36 95       	lsr	r19
    2166:	27 95       	ror	r18
    2168:	36 95       	lsr	r19
    216a:	27 95       	ror	r18
    216c:	36 95       	lsr	r19
    216e:	27 95       	ror	r18
    2170:	a5 ec       	ldi	r26, 0xC5	; 197
    2172:	b0 e2       	ldi	r27, 0x20	; 32
    2174:	0e 94 cd 23 	call	0x479a	; 0x479a <__umulhisi3>
    2178:	92 95       	swap	r25
    217a:	82 95       	swap	r24
    217c:	8f 70       	andi	r24, 0x0F	; 15
    217e:	89 27       	eor	r24, r25
    2180:	9f 70       	andi	r25, 0x0F	; 15
    2182:	89 27       	eor	r24, r25
    2184:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <g_time_to_send_ID+0x1>
    2188:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <g_time_to_send_ID>
    218c:	8e e1       	ldi	r24, 0x1E	; 30
					}
					
					lb_send_string(g_station_ID);
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	0e 94 75 02 	call	0x4ea	; 0x4ea <lb_send_string>
    2194:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <g_id_codespeed>
					lb_send_value(stringTimeRequiredToSend(g_station_ID, g_id_codespeed), "ms");
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	8e e1       	ldi	r24, 0x1E	; 30
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	32 d3       	rcall	.+1636   	; 0x2804 <stringTimeRequiredToSend>
    21a0:	66 e0       	ldi	r22, 0x06	; 6
    21a2:	75 e0       	ldi	r23, 0x05	; 5
    21a4:	0e 94 a6 02 	call	0x54c	; 0x54c <lb_send_value>
    21a8:	67 e0       	ldi	r22, 0x07	; 7
    21aa:	74 e0       	ldi	r23, 0x04	; 4
					lb_send_value(g_time_to_send_ID, "s");
    21ac:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <g_time_to_send_ID>
    21b0:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <g_time_to_send_ID+0x1>
    21b4:	0e 94 a6 02 	call	0x54c	; 0x54c <lb_send_value>
    21b8:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_NewLine>
					lb_send_NewLine();
    21bc:	80 c1       	rjmp	.+768    	; 0x24be <main+0x8a4>
				}
				break;
    21be:	f0 90 1c 01 	lds	r15, 0x011C	; 0x80011c <g_pattern_codespeed>
				
				case MESSAGE_CODE_SPEED:
				{
					uint8_t speed = g_pattern_codespeed;
    21c2:	f8 01       	movw	r30, r16
					
					if(lb_buff->fields[FIELD1][0] == 'I')
    21c4:	83 81       	ldd	r24, Z+3	; 0x03
    21c6:	89 34       	cpi	r24, 0x49	; 73
    21c8:	91 f4       	brne	.+36     	; 0x21ee <main+0x5d4>
    21ca:	f0 90 1d 01 	lds	r15, 0x011D	; 0x80011d <g_id_codespeed>
					{
						speed = g_id_codespeed;
    21ce:	80 8d       	ldd	r24, Z+24	; 0x18
						if(lb_buff->fields[FIELD2][0]) speed = atol(lb_buff->fields[FIELD2]);
    21d0:	88 23       	and	r24, r24
    21d2:	29 f0       	breq	.+10     	; 0x21de <main+0x5c4>
    21d4:	c8 01       	movw	r24, r16
    21d6:	48 96       	adiw	r24, 0x18	; 24
    21d8:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
    21dc:	f6 2e       	mov	r15, r22
						if((speed > 4) && (speed < 21)) g_id_codespeed = speed;
    21de:	8b ef       	ldi	r24, 0xFB	; 251
    21e0:	8f 0d       	add	r24, r15
    21e2:	80 31       	cpi	r24, 0x10	; 16
    21e4:	10 f4       	brcc	.+4      	; 0x21ea <main+0x5d0>
    21e6:	f0 92 1d 01 	sts	0x011D, r15	; 0x80011d <g_id_codespeed>
						saveAllEEPROM(); 
    21ea:	5a da       	rcall	.-2892   	; 0x16a0 <saveAllEEPROM>
    21ec:	22 c0       	rjmp	.+68     	; 0x2232 <main+0x618>
    21ee:	80 35       	cpi	r24, 0x50	; 80
					}
					else if(lb_buff->fields[FIELD1][0] == 'P')
    21f0:	01 f5       	brne	.+64     	; 0x2232 <main+0x618>
    21f2:	f8 01       	movw	r30, r16
					{
						if(lb_buff->fields[FIELD2][0]) speed = atol(lb_buff->fields[FIELD2]);
    21f4:	80 8d       	ldd	r24, Z+24	; 0x18
    21f6:	88 23       	and	r24, r24
    21f8:	29 f0       	breq	.+10     	; 0x2204 <main+0x5ea>
    21fa:	c8 01       	movw	r24, r16
    21fc:	48 96       	adiw	r24, 0x18	; 24
    21fe:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
    2202:	f6 2e       	mov	r15, r22
    2204:	8b ef       	ldi	r24, 0xFB	; 251
						if((speed > 4) && (speed < 21)) g_pattern_codespeed = speed;
    2206:	8f 0d       	add	r24, r15
    2208:	80 31       	cpi	r24, 0x10	; 16
    220a:	10 f4       	brcc	.+4      	; 0x2210 <main+0x5f6>
    220c:	f0 92 1c 01 	sts	0x011C, r15	; 0x80011c <g_pattern_codespeed>
    2210:	47 da       	rcall	.-2930   	; 0x16a0 <saveAllEEPROM>
						saveAllEEPROM();
    2212:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <g_pattern_codespeed>
						g_code_throttle = (7042 / g_pattern_codespeed) / 10;
    2216:	70 e0       	ldi	r23, 0x00	; 0
    2218:	82 e8       	ldi	r24, 0x82	; 130
    221a:	9b e1       	ldi	r25, 0x1B	; 27
    221c:	0e 94 76 23 	call	0x46ec	; 0x46ec <__divmodhi4>
    2220:	cb 01       	movw	r24, r22
    2222:	6a e0       	ldi	r22, 0x0A	; 10
    2224:	70 e0       	ldi	r23, 0x00	; 0
    2226:	0e 94 76 23 	call	0x46ec	; 0x46ec <__divmodhi4>
    222a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <g_code_throttle+0x1>
    222e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <g_code_throttle>
    2232:	69 e0       	ldi	r22, 0x09	; 9
					}
					
					lb_send_value(speed, "spd");
    2234:	75 e0       	ldi	r23, 0x05	; 5
    2236:	8f 2d       	mov	r24, r15
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 a6 02 	call	0x54c	; 0x54c <lb_send_value>
    223e:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_NewLine>
					lb_send_NewLine();
    2242:	3d c1       	rjmp	.+634    	; 0x24be <main+0x8a4>
				}
				break;
    2244:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <g_on_air_time>
				
				case MESSAGE_TIME_INTERVAL:
				{
					uint16_t time = g_on_air_time;
    2248:	e6 2e       	mov	r14, r22
    224a:	f1 2c       	mov	r15, r1
					
					if(lb_buff->fields[FIELD1][0] == '0')
    224c:	f8 01       	movw	r30, r16
    224e:	83 81       	ldd	r24, Z+3	; 0x03
    2250:	80 33       	cpi	r24, 0x30	; 48
    2252:	81 f4       	brne	.+32     	; 0x2274 <main+0x65a>
					{
						time = g_off_air_time;
    2254:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <g_off_air_time>
    2258:	e6 2e       	mov	r14, r22
    225a:	f1 2c       	mov	r15, r1
						if(lb_buff->fields[FIELD2][0]) time = atol(lb_buff->fields[FIELD2]);
    225c:	80 8d       	ldd	r24, Z+24	; 0x18
    225e:	88 23       	and	r24, r24
    2260:	29 f0       	breq	.+10     	; 0x226c <main+0x652>
    2262:	c8 01       	movw	r24, r16
    2264:	48 96       	adiw	r24, 0x18	; 24
    2266:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
						g_off_air_time = time;
    226a:	7b 01       	movw	r14, r22
    226c:	e0 92 1a 01 	sts	0x011A, r14	; 0x80011a <g_off_air_time>
						saveAllEEPROM(); 
    2270:	17 da       	rcall	.-3026   	; 0x16a0 <saveAllEEPROM>
    2272:	1d c0       	rjmp	.+58     	; 0x22ae <main+0x694>
					}
					else if(lb_buff->fields[FIELD1][0] == '1')
    2274:	81 33       	cpi	r24, 0x31	; 49
    2276:	69 f4       	brne	.+26     	; 0x2292 <main+0x678>
					{
						if(lb_buff->fields[FIELD2][0]) time = atol(lb_buff->fields[FIELD2]);
    2278:	f8 01       	movw	r30, r16
    227a:	80 8d       	ldd	r24, Z+24	; 0x18
    227c:	88 23       	and	r24, r24
    227e:	29 f0       	breq	.+10     	; 0x228a <main+0x670>
    2280:	c8 01       	movw	r24, r16
    2282:	48 96       	adiw	r24, 0x18	; 24
    2284:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
    2288:	7b 01       	movw	r14, r22
						g_on_air_time = time;
    228a:	e0 92 1b 01 	sts	0x011B, r14	; 0x80011b <g_on_air_time>
						saveAllEEPROM();
    228e:	08 da       	rcall	.-3056   	; 0x16a0 <saveAllEEPROM>
    2290:	0e c0       	rjmp	.+28     	; 0x22ae <main+0x694>
					}
					else if(lb_buff->fields[FIELD1][0] == 'D')
    2292:	84 34       	cpi	r24, 0x44	; 68
    2294:	61 f4       	brne	.+24     	; 0x22ae <main+0x694>
					{
						if(lb_buff->fields[FIELD2][0]) time = atol(lb_buff->fields[FIELD2]);
    2296:	f8 01       	movw	r30, r16
    2298:	80 8d       	ldd	r24, Z+24	; 0x18
    229a:	88 23       	and	r24, r24
    229c:	29 f0       	breq	.+10     	; 0x22a8 <main+0x68e>
    229e:	c8 01       	movw	r24, r16
    22a0:	48 96       	adiw	r24, 0x18	; 24
    22a2:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
						g_intra_cycle_delay_time = time;
    22a6:	7b 01       	movw	r14, r22
						saveAllEEPROM();
    22a8:	e0 92 28 07 	sts	0x0728, r14	; 0x800728 <g_intra_cycle_delay_time>
					}
					
					lb_send_value(time, "t");
    22ac:	f9 d9       	rcall	.-3086   	; 0x16a0 <saveAllEEPROM>
    22ae:	6d e0       	ldi	r22, 0x0D	; 13
    22b0:	75 e0       	ldi	r23, 0x05	; 5
    22b2:	c7 01       	movw	r24, r14
    22b4:	0e 94 a6 02 	call	0x54c	; 0x54c <lb_send_value>
					lb_send_NewLine();
				}
				break;
    22b8:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_NewLine>
				
				case MESSAGE_SET_PATTERN:
				{
					if(lb_buff->fields[FIELD1][0])
    22bc:	00 c1       	rjmp	.+512    	; 0x24be <main+0x8a4>
    22be:	f8 01       	movw	r30, r16
    22c0:	83 81       	ldd	r24, Z+3	; 0x03
					{
						strncpy(g_pattern_text, lb_buff->fields[FIELD1], MAX_PATTERN_TEXT_LENGTH);
    22c2:	88 23       	and	r24, r24
    22c4:	a9 f0       	breq	.+42     	; 0x22f0 <main+0x6d6>
    22c6:	44 e1       	ldi	r20, 0x14	; 20
    22c8:	50 e0       	ldi	r21, 0x00	; 0
    22ca:	b8 01       	movw	r22, r16
    22cc:	6d 5f       	subi	r22, 0xFD	; 253
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	89 e2       	ldi	r24, 0x29	; 41
    22d2:	97 e0       	ldi	r25, 0x07	; 7
						saveAllEEPROM(); 
    22d4:	0e 94 43 24 	call	0x4886	; 0x4886 <strncpy>
						g_code_throttle = throttleValue(g_pattern_codespeed);
    22d8:	e3 d9       	rcall	.-3130   	; 0x16a0 <saveAllEEPROM>
    22da:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_pattern_codespeed>
    22de:	35 db       	rcall	.-2454   	; 0x194a <throttleValue>
    22e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_code_throttle+0x1>
    22e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_code_throttle>
						makeMorse(g_pattern_text, TRUE);
    22e8:	61 e0       	ldi	r22, 0x01	; 1
    22ea:	89 e2       	ldi	r24, 0x29	; 41
    22ec:	97 e0       	ldi	r25, 0x07	; 7
    22ee:	f0 d1       	rcall	.+992    	; 0x26d0 <makeMorse>
					}
					
					lb_send_string(g_pattern_text);
    22f0:	89 e2       	ldi	r24, 0x29	; 41
    22f2:	97 e0       	ldi	r25, 0x07	; 7
    22f4:	0e 94 75 02 	call	0x4ea	; 0x4ea <lb_send_string>
					lb_send_value(stringTimeRequiredToSend(g_pattern_text, g_pattern_codespeed), "t");
    22f8:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <g_pattern_codespeed>
    22fc:	70 e0       	ldi	r23, 0x00	; 0
    22fe:	89 e2       	ldi	r24, 0x29	; 41
    2300:	97 e0       	ldi	r25, 0x07	; 7
    2302:	80 d2       	rcall	.+1280   	; 0x2804 <stringTimeRequiredToSend>
    2304:	6d e0       	ldi	r22, 0x0D	; 13
    2306:	75 e0       	ldi	r23, 0x05	; 5
    2308:	0e 94 a6 02 	call	0x54c	; 0x54c <lb_send_value>
					lb_send_NewLine();
    230c:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_NewLine>
				}
				break;
    2310:	d6 c0       	rjmp	.+428    	; 0x24be <main+0x8a4>

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;

						if(lb_buff->fields[FIELD1][0])
    2312:	f8 01       	movw	r30, r16
    2314:	83 81       	ldd	r24, Z+3	; 0x03
    2316:	88 23       	and	r24, r24
    2318:	d1 f0       	breq	.+52     	; 0x234e <main+0x734>
						{
							Frequency_Hz f = atol(lb_buff->fields[FIELD1]); // Prevent optimizer from breaking this							
    231a:	c8 01       	movw	r24, r16
    231c:	03 96       	adiw	r24, 0x03	; 3
    231e:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
								
							Frequency_Hz ff = f;
    2322:	69 83       	std	Y+1, r22	; 0x01
    2324:	7a 83       	std	Y+2, r23	; 0x02
    2326:	8b 83       	std	Y+3, r24	; 0x03
    2328:	9c 83       	std	Y+4, r25	; 0x04
							if(txSetFrequency(&ff))
    232a:	ce 01       	movw	r24, r28
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	98 d2       	rcall	.+1328   	; 0x2860 <txSetFrequency>
    2330:	88 23       	and	r24, r24
    2332:	b1 f0       	breq	.+44     	; 0x2360 <main+0x746>
    2334:	89 81       	ldd	r24, Y+1	; 0x01
							{
								g_transmitter_freq = ff;
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	ab 81       	ldd	r26, Y+3	; 0x03
    233a:	bc 81       	ldd	r27, Y+4	; 0x04
    233c:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <g_transmitter_freq>
    2340:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <g_transmitter_freq+0x1>
    2344:	a0 93 22 07 	sts	0x0722, r26	; 0x800722 <g_transmitter_freq+0x2>
    2348:	b0 93 23 07 	sts	0x0723, r27	; 0x800723 <g_transmitter_freq+0x3>
    234c:	09 c0       	rjmp	.+18     	; 0x2360 <main+0x746>
    234e:	d6 d2       	rcall	.+1452   	; 0x28fc <txGetFrequency>
							}
						}
						else
						{
							g_transmitter_freq = txGetFrequency();
    2350:	60 93 20 07 	sts	0x0720, r22	; 0x800720 <g_transmitter_freq>
    2354:	70 93 21 07 	sts	0x0721, r23	; 0x800721 <g_transmitter_freq+0x1>
    2358:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <g_transmitter_freq+0x2>
    235c:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <g_transmitter_freq+0x3>
    2360:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <g_transmitter_freq>
						}

						if(g_transmitter_freq)
    2364:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <g_transmitter_freq+0x1>
    2368:	a0 91 22 07 	lds	r26, 0x0722	; 0x800722 <g_transmitter_freq+0x2>
    236c:	b0 91 23 07 	lds	r27, 0x0723	; 0x800723 <g_transmitter_freq+0x3>
    2370:	89 2b       	or	r24, r25
    2372:	8a 2b       	or	r24, r26
    2374:	8b 2b       	or	r24, r27
    2376:	09 f4       	brne	.+2      	; 0x237a <main+0x760>
						{
							lb_send_FRE(LINKBUS_MSG_REPLY, g_transmitter_freq, isMem);
    2378:	a2 c0       	rjmp	.+324    	; 0x24be <main+0x8a4>
    237a:	40 91 20 07 	lds	r20, 0x0720	; 0x800720 <g_transmitter_freq>
    237e:	50 91 21 07 	lds	r21, 0x0721	; 0x800721 <g_transmitter_freq+0x1>
    2382:	60 91 22 07 	lds	r22, 0x0722	; 0x800722 <g_transmitter_freq+0x2>
    2386:	70 91 23 07 	lds	r23, 0x0723	; 0x800723 <g_transmitter_freq+0x3>
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	83 e0       	ldi	r24, 0x03	; 3

				case MESSAGE_BAND:
				{
					RadioBand band;

					if(lb_buff->fields[FIELD1][0])  /* band field */
    238e:	0e 94 c4 02 	call	0x588	; 0x588 <lb_send_FRE>
    2392:	95 c0       	rjmp	.+298    	; 0x24be <main+0x8a4>
    2394:	f8 01       	movw	r30, r16
					{
						int b = atoi(lb_buff->fields[FIELD1]);
    2396:	83 81       	ldd	r24, Z+3	; 0x03
    2398:	88 23       	and	r24, r24
    239a:	71 f0       	breq	.+28     	; 0x23b8 <main+0x79e>
    239c:	c8 01       	movw	r24, r16
							
						if(b == 80)
    239e:	03 96       	adiw	r24, 0x03	; 3
    23a0:	0e 94 e6 23 	call	0x47cc	; 0x47cc <atoi>
						{
							txSetBand(BAND_80M);
    23a4:	80 35       	cpi	r24, 0x50	; 80
    23a6:	91 05       	cpc	r25, r1
    23a8:	19 f4       	brne	.+6      	; 0x23b0 <main+0x796>
    23aa:	81 e0       	ldi	r24, 0x01	; 1
						}
						else if(b == 2)
    23ac:	cd d2       	rcall	.+1434   	; 0x2948 <txSetBand>
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <main+0x79e>
						{
							txSetBand(BAND_2M);
    23b0:	02 97       	sbiw	r24, 0x02	; 2
    23b2:	11 f4       	brne	.+4      	; 0x23b8 <main+0x79e>
    23b4:	80 e0       	ldi	r24, 0x00	; 0
						}
					}

					band = txGetBand();
    23b6:	c8 d2       	rcall	.+1424   	; 0x2948 <txSetBand>
    23b8:	14 d3       	rcall	.+1576   	; 0x29e2 <txGetBand>

					if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    23ba:	f8 01       	movw	r30, r16
    23bc:	90 81       	ld	r25, Z
    23be:	92 30       	cpi	r25, 0x02	; 2
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <main+0x7aa>
					{
						/* Send a reply */
						lb_send_BND(LINKBUS_MSG_REPLY, band);
    23c2:	7d c0       	rjmp	.+250    	; 0x24be <main+0x8a4>
    23c4:	68 2f       	mov	r22, r24
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lb_send_BND>
				}
				break;

				case MESSAGE_TTY:
				{
					g_terminal_mode = TRUE;
    23cc:	78 c0       	rjmp	.+240    	; 0x24be <main+0x8a4>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <g_terminal_mode>
					linkbus_setTerminalMode(g_terminal_mode);
    23d4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <linkbus_setTerminalMode>
					
					cli(); 
					linkbus_disable();
    23d8:	f8 94       	cli
    23da:	0e 94 b6 01 	call	0x36c	; 0x36c <linkbus_disable>
					sei();	
					wifi_reset(ON);
    23de:	78 94       	sei
    23e0:	81 e0       	ldi	r24, 0x01	; 1
					wifi_power(OFF);
    23e2:	ef d7       	rcall	.+4062   	; 0x33c2 <wifi_reset>
    23e4:	80 e0       	ldi	r24, 0x00	; 0

					linkbus_setLineTerm("\n\n");
    23e6:	f9 d7       	rcall	.+4082   	; 0x33da <wifi_power>
    23e8:	8f e0       	ldi	r24, 0x0F	; 15
    23ea:	95 e0       	ldi	r25, 0x05	; 5
    23ec:	0e 94 50 02 	call	0x4a0	; 0x4a0 <linkbus_setLineTerm>
					
					linkbus_init(BAUD);
    23f0:	60 e8       	ldi	r22, 0x80	; 128
    23f2:	75 e2       	ldi	r23, 0x25	; 37
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0e 94 98 01 	call	0x330	; 0x330 <linkbus_init>
				}
				break;

				case MESSAGE_BAT:
				{
					lb_broadcast_num(g_lastConversionResult[BATTERY_READING], "!BAT");
    23fc:	60 c0       	rjmp	.+192    	; 0x24be <main+0x8a4>
    23fe:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <g_lastConversionResult>
    2402:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <g_lastConversionResult+0x1>
    2406:	62 e1       	ldi	r22, 0x12	; 18
    2408:	75 e0       	ldi	r23, 0x05	; 5
    240a:	0e 94 16 06 	call	0xc2c	; 0xc2c <lb_broadcast_num>
				break;

				case MESSAGE_TEMP:
				{
					int16_t v;
					if(!ds3231_get_temp(&v)) lb_broadcast_num(v, "!TEM");
    240e:	57 c0       	rjmp	.+174    	; 0x24be <main+0x8a4>
    2410:	ce 01       	movw	r24, r28
    2412:	01 96       	adiw	r24, 0x01	; 1
    2414:	0b d7       	rcall	.+3606   	; 0x322c <ds3231_get_temp>
    2416:	81 11       	cpse	r24, r1
    2418:	52 c0       	rjmp	.+164    	; 0x24be <main+0x8a4>
    241a:	67 e1       	ldi	r22, 0x17	; 23
    241c:	75 e0       	ldi	r23, 0x05	; 5
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	0e 94 16 06 	call	0xc2c	; 0xc2c <lb_broadcast_num>
				}
				break;
    2426:	4b c0       	rjmp	.+150    	; 0x24be <main+0x8a4>
				
				case MESSAGE_ALL_INFO:
				{
					cli(); wdt_reset(); /* HW watchdog */ sei();
    2428:	f8 94       	cli
    242a:	a8 95       	wdr
    242c:	78 94       	sei
					linkbus_setLineTerm("\n");
    242e:	80 e1       	ldi	r24, 0x10	; 16
    2430:	95 e0       	ldi	r25, 0x05	; 5
    2432:	0e 94 50 02 	call	0x4a0	; 0x4a0 <linkbus_setLineTerm>
					lb_send_BND(LINKBUS_MSG_REPLY, txGetBand());
    2436:	d5 d2       	rcall	.+1450   	; 0x29e2 <txGetBand>
    2438:	68 2f       	mov	r22, r24
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <lb_send_BND>
					lb_send_FRE(LINKBUS_MSG_REPLY, txGetFrequency(), FALSE);
    2440:	5d d2       	rcall	.+1210   	; 0x28fc <txGetFrequency>
    2442:	ab 01       	movw	r20, r22
    2444:	bc 01       	movw	r22, r24
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	0e 94 c4 02 	call	0x588	; 0x588 <lb_send_FRE>
    244e:	f8 94       	cli
					cli(); wdt_reset(); /* HW watchdog */ sei();
    2450:	a8 95       	wdr
    2452:	78 94       	sei
    2454:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <g_lastConversionResult>
					lb_broadcast_num(g_lastConversionResult[BATTERY_READING], "BAT");
    2458:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <g_lastConversionResult+0x1>
    245c:	63 e1       	ldi	r22, 0x13	; 19
    245e:	75 e0       	ldi	r23, 0x05	; 5
    2460:	0e 94 16 06 	call	0xc2c	; 0xc2c <lb_broadcast_num>
    2464:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <g_PA_voltage>
					lb_broadcast_num(g_PA_voltage, "Vpa");
    2468:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <g_PA_voltage+0x1>
    246c:	a0 91 14 07 	lds	r26, 0x0714	; 0x800714 <g_PA_voltage+0x2>
    2470:	b0 91 15 07 	lds	r27, 0x0715	; 0x800715 <g_PA_voltage+0x3>
    2474:	6c e1       	ldi	r22, 0x1C	; 28
    2476:	75 e0       	ldi	r23, 0x05	; 5
    2478:	0e 94 16 06 	call	0xc2c	; 0xc2c <lb_broadcast_num>
    247c:	8f e0       	ldi	r24, 0x0F	; 15
					linkbus_setLineTerm("\n\n");
    247e:	95 e0       	ldi	r25, 0x05	; 5
    2480:	0e 94 50 02 	call	0x4a0	; 0x4a0 <linkbus_setLineTerm>
    2484:	f8 94       	cli
					cli(); wdt_reset(); /* HW watchdog */ sei();
    2486:	a8 95       	wdr
    2488:	78 94       	sei
    248a:	44 e0       	ldi	r20, 0x04	; 4
					#ifdef INCLUDE_DS3231_SUPPORT
						ds3231_read_date_time(NULL, g_tempStr, Time_Format_Not_Specified);
    248c:	6b e4       	ldi	r22, 0x4B	; 75
    248e:	77 e0       	ldi	r23, 0x07	; 7
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	75 d5       	rcall	.+2794   	; 0x2f80 <ds3231_read_date_time>
    2496:	4b e4       	ldi	r20, 0x4B	; 75
    2498:	57 e0       	ldi	r21, 0x07	; 7
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    249a:	6e ee       	ldi	r22, 0xEE	; 238
    249c:	74 e0       	ldi	r23, 0x04	; 4
    249e:	83 e0       	ldi	r24, 0x03	; 3
    24a0:	0e 94 8c 03 	call	0x718	; 0x718 <lb_send_msg>
    24a4:	f8 94       	cli
    24a6:	a8 95       	wdr
						cli(); wdt_reset(); /* HW watchdog */ sei();
    24a8:	78 94       	sei
    24aa:	09 c0       	rjmp	.+18     	; 0x24be <main+0x8a4>
    24ac:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
				}
				break;

				default:
				{
					if(g_terminal_mode)
    24b0:	88 23       	and	r24, r24
    24b2:	19 f0       	breq	.+6      	; 0x24ba <main+0x8a0>
    24b4:	0e 94 0b 02 	call	0x416	; 0x416 <lb_send_Help>
					{
						lb_send_Help();
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <main+0x8a4>
    24ba:	0e 94 80 01 	call	0x300	; 0x300 <linkbus_reset_rx>
					}
					else
					{
						linkbus_reset_rx(); /* flush buffer */
    24be:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <g_terminal_mode>
					}
				}
				break;
			}

			if(g_terminal_mode)
    24c2:	81 11       	cpse	r24, r1
    24c4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <lb_send_NewPrompt>
			{
				lb_send_NewPrompt();
    24c8:	f8 01       	movw	r30, r16
    24ca:	12 82       	std	Z+2, r1	; 0x02
			}

			lb_buff->id = MESSAGE_EMPTY;
    24cc:	11 82       	std	Z+1, r1	; 0x01
    24ce:	0e 94 34 01 	call	0x268	; 0x268 <nextFullRxBuffer>
		}

		/***********************************************************************
		 *  Handle arriving Linkbus messages
		 ************************************************************************/
		while((lb_buff = nextFullRxBuffer()))
    24d2:	8c 01       	movw	r16, r24
    24d4:	89 2b       	or	r24, r25
    24d6:	09 f0       	breq	.+2      	; 0x24da <main+0x8c0>
    24d8:	57 cc       	rjmp	.-1874   	; 0x1d88 <main+0x16e>
    24da:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <g_radio_port_changed>
		}


			/* ////////////////////////////////////
			 * Handle Receiver interrupts (e.g., trigger button presses) */
			if(g_radio_port_changed)
    24de:	88 23       	and	r24, r24
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <main+0x8ca>
    24e2:	3e cc       	rjmp	.-1924   	; 0x1d60 <main+0x146>
    24e4:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <g_radio_port_changed>
			{
				g_radio_port_changed = FALSE;
    24e8:	3b cc       	rjmp	.-1930   	; 0x1d60 <main+0x146>

000024ea <getMorseChar>:
*/
MorseCharacter getMorseChar(char c)
{
	MorseCharacter morse;
	
	switch( c )
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	fc 01       	movw	r30, r24
    24ee:	b0 97       	sbiw	r30, 0x20	; 32
    24f0:	ed 35       	cpi	r30, 0x5D	; 93
    24f2:	f1 05       	cpc	r31, r1
    24f4:	08 f0       	brcs	.+2      	; 0x24f8 <getMorseChar+0xe>
    24f6:	e8 c0       	rjmp	.+464    	; 0x26c8 <getMorseChar+0x1de>
    24f8:	ec 5c       	subi	r30, 0xCC	; 204
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	0c 94 c7 23 	jmp	0x478e	; 0x478e <__tablejump2__>
	{
		case 'A':
		morse.pattern = 0x02; // 0000 0010;
    2500:	62 e0       	ldi	r22, 0x02	; 2
		morse.lengthInSymbols = 2;
    2502:	72 e0       	ldi	r23, 0x02	; 2
		morse.lengthInElements = 5;
    2504:	85 e0       	ldi	r24, 0x05	; 5
		break;
    2506:	08 95       	ret
		
		case 'B':
		morse.pattern = 0x01; // 0000 0001;
    2508:	61 e0       	ldi	r22, 0x01	; 1
		morse.lengthInSymbols = 4;
    250a:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 9;
    250c:	89 e0       	ldi	r24, 0x09	; 9
		break;
    250e:	08 95       	ret
		
		case 'C':
		morse.pattern = 0x05; // 0000 0101;
    2510:	65 e0       	ldi	r22, 0x05	; 5
		morse.lengthInSymbols = 4;
    2512:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 11;
    2514:	8b e0       	ldi	r24, 0x0B	; 11
		break;
    2516:	08 95       	ret
		
		case 'D':
		morse.pattern = 0x01; // 0000 0001;
    2518:	61 e0       	ldi	r22, 0x01	; 1
		morse.lengthInSymbols = 3;
    251a:	73 e0       	ldi	r23, 0x03	; 3
		morse.lengthInElements = 7;
    251c:	87 e0       	ldi	r24, 0x07	; 7
		break;
    251e:	08 95       	ret
		
		case 'E':
		morse.pattern = 0x00; // 0000 0000;
    2520:	60 e0       	ldi	r22, 0x00	; 0
		morse.lengthInSymbols = 1;
    2522:	71 e0       	ldi	r23, 0x01	; 1
		morse.lengthInElements = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
		break;
    2526:	08 95       	ret
		
		case 'F':
		morse.pattern = 0x04; // 0000 0100;
    2528:	64 e0       	ldi	r22, 0x04	; 4
		morse.lengthInSymbols = 4;
    252a:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 9;
    252c:	89 e0       	ldi	r24, 0x09	; 9
		break;
    252e:	08 95       	ret
		
		case 'G':
		morse.pattern = 0x03; // 0000 0011;
    2530:	63 e0       	ldi	r22, 0x03	; 3
		morse.lengthInSymbols = 3;
    2532:	73 e0       	ldi	r23, 0x03	; 3
		morse.lengthInElements = 9;
    2534:	89 e0       	ldi	r24, 0x09	; 9
		break;
    2536:	08 95       	ret
		
		case 'H':
		morse.pattern = 0x00; // 0000 0000;
    2538:	60 e0       	ldi	r22, 0x00	; 0
		morse.lengthInSymbols = 4;
    253a:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 7;
    253c:	87 e0       	ldi	r24, 0x07	; 7
		break;
    253e:	08 95       	ret
		
		case 'I':
		morse.pattern = 0x00; // 0000 0000;
    2540:	60 e0       	ldi	r22, 0x00	; 0
		morse.lengthInSymbols = 2;
    2542:	72 e0       	ldi	r23, 0x02	; 2
		morse.lengthInElements = 3;
    2544:	83 e0       	ldi	r24, 0x03	; 3
		break;
    2546:	08 95       	ret
		
		case 'J':
		morse.pattern = 0x0e; // 0000 1110;
    2548:	6e e0       	ldi	r22, 0x0E	; 14
		morse.lengthInSymbols = 4;
    254a:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 13;
    254c:	8d e0       	ldi	r24, 0x0D	; 13
		break;
    254e:	08 95       	ret
		
		case 'K':
		morse.pattern = 0x05; // 0000 0101;
    2550:	65 e0       	ldi	r22, 0x05	; 5
		morse.lengthInSymbols = 3;
    2552:	73 e0       	ldi	r23, 0x03	; 3
		morse.lengthInElements = 9;
    2554:	89 e0       	ldi	r24, 0x09	; 9
		break;
    2556:	08 95       	ret
		
		case 'L':
		morse.pattern = 0x02; // 0000 0010;
    2558:	62 e0       	ldi	r22, 0x02	; 2
		morse.lengthInSymbols = 4;
    255a:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 9;
    255c:	89 e0       	ldi	r24, 0x09	; 9
		break;
    255e:	08 95       	ret
		
		case 'M':
		morse.pattern = 0x03; // 0000 0011;
    2560:	63 e0       	ldi	r22, 0x03	; 3
		morse.lengthInSymbols = 2;
    2562:	72 e0       	ldi	r23, 0x02	; 2
		morse.lengthInElements = 7;
    2564:	87 e0       	ldi	r24, 0x07	; 7
		break;
    2566:	08 95       	ret
		
		case 'N':
		morse.pattern = 0x01; // 0000 0001;
    2568:	61 e0       	ldi	r22, 0x01	; 1
		morse.lengthInSymbols = 2;
    256a:	72 e0       	ldi	r23, 0x02	; 2
		morse.lengthInElements = 5;
    256c:	85 e0       	ldi	r24, 0x05	; 5
		break;
    256e:	08 95       	ret
		
		case 'O':
		morse.pattern = 0x07; // 0000 0111;
    2570:	67 e0       	ldi	r22, 0x07	; 7
		morse.lengthInSymbols = 3;
    2572:	73 e0       	ldi	r23, 0x03	; 3
		morse.lengthInElements = 11;
    2574:	8b e0       	ldi	r24, 0x0B	; 11
		break;
    2576:	08 95       	ret
		
		case 'P':
		morse.pattern = 0x06; // 0000 0110;
    2578:	66 e0       	ldi	r22, 0x06	; 6
		morse.lengthInSymbols = 4;
    257a:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 11;
    257c:	8b e0       	ldi	r24, 0x0B	; 11
		break;
    257e:	08 95       	ret
		
		case 'Q':
		morse.pattern = 0x0b; // 0000 1011;
    2580:	6b e0       	ldi	r22, 0x0B	; 11
		morse.lengthInSymbols = 4;
    2582:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 13;
    2584:	8d e0       	ldi	r24, 0x0D	; 13
		break;
    2586:	08 95       	ret
		
		case 'R':
		morse.pattern = 0x02; // 0000 0010;
    2588:	62 e0       	ldi	r22, 0x02	; 2
		morse.lengthInSymbols = 3;
    258a:	73 e0       	ldi	r23, 0x03	; 3
		morse.lengthInElements = 7;
    258c:	87 e0       	ldi	r24, 0x07	; 7
		break;
    258e:	08 95       	ret
		
		case 'S':
		morse.pattern = 0x00; // 0000 0000;
    2590:	60 e0       	ldi	r22, 0x00	; 0
		morse.lengthInSymbols = 3;
    2592:	73 e0       	ldi	r23, 0x03	; 3
		morse.lengthInElements = 5;
    2594:	85 e0       	ldi	r24, 0x05	; 5
		break;
    2596:	08 95       	ret
		
		case 'T':
		morse.pattern = 0x01; // 0000 0001;
    2598:	61 e0       	ldi	r22, 0x01	; 1
		morse.lengthInSymbols = 1;
    259a:	71 e0       	ldi	r23, 0x01	; 1
		morse.lengthInElements = 3;
    259c:	83 e0       	ldi	r24, 0x03	; 3
		break;
    259e:	08 95       	ret
		
		case 'U':
		morse.pattern = 0x04; // 0000 0100;
    25a0:	64 e0       	ldi	r22, 0x04	; 4
		morse.lengthInSymbols = 3;
    25a2:	73 e0       	ldi	r23, 0x03	; 3
		morse.lengthInElements = 7;
    25a4:	87 e0       	ldi	r24, 0x07	; 7
		break;
    25a6:	08 95       	ret
		
		case 'V':
		morse.pattern = 0x08; // 0000 1000;
    25a8:	68 e0       	ldi	r22, 0x08	; 8
		morse.lengthInSymbols = 4;
    25aa:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 9;
    25ac:	89 e0       	ldi	r24, 0x09	; 9
		break;
    25ae:	08 95       	ret
		
		case 'W':
		morse.pattern = 0x06; // 0000 0110;
    25b0:	66 e0       	ldi	r22, 0x06	; 6
		morse.lengthInSymbols = 3;
    25b2:	73 e0       	ldi	r23, 0x03	; 3
		morse.lengthInElements = 9;
    25b4:	89 e0       	ldi	r24, 0x09	; 9
		break;
    25b6:	08 95       	ret
		
		case 'X':
		morse.pattern = 0x09; // 0000 1001;
    25b8:	69 e0       	ldi	r22, 0x09	; 9
		morse.lengthInSymbols = 4;
    25ba:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 11;
    25bc:	8b e0       	ldi	r24, 0x0B	; 11
		break;
    25be:	08 95       	ret
		
		case 'Y':
		morse.pattern = 0x0d; // 0000 1101;
    25c0:	6d e0       	ldi	r22, 0x0D	; 13
		morse.lengthInSymbols = 4;
    25c2:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 13;
    25c4:	8d e0       	ldi	r24, 0x0D	; 13
		break;
    25c6:	08 95       	ret
		
		case 'Z':
		morse.pattern = 0x03; // 0000 0011;
    25c8:	63 e0       	ldi	r22, 0x03	; 3
		morse.lengthInSymbols = 4;
    25ca:	74 e0       	ldi	r23, 0x04	; 4
		morse.lengthInElements = 11;
    25cc:	8b e0       	ldi	r24, 0x0B	; 11
		break;
    25ce:	08 95       	ret
		
		case '0':
		morse.pattern = 0x1f; // 0001 1111;
    25d0:	6f e1       	ldi	r22, 0x1F	; 31
		morse.lengthInSymbols = 5;
    25d2:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 19;
    25d4:	83 e1       	ldi	r24, 0x13	; 19
		break;
    25d6:	08 95       	ret
		
		case '1':
		morse.pattern = 0x1e; // 0001 1110;
    25d8:	6e e1       	ldi	r22, 0x1E	; 30
		morse.lengthInSymbols = 5;
    25da:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 17;
    25dc:	81 e1       	ldi	r24, 0x11	; 17
		break;
    25de:	08 95       	ret
		
		case '2':
		morse.pattern = 0x1c; // 0001 1100;
    25e0:	6c e1       	ldi	r22, 0x1C	; 28
		morse.lengthInSymbols = 5;
    25e2:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 15;
    25e4:	8f e0       	ldi	r24, 0x0F	; 15
		break;
    25e6:	08 95       	ret
		
		case '3':
		morse.pattern = 0x18; // 0001 1000;
    25e8:	68 e1       	ldi	r22, 0x18	; 24
		morse.lengthInSymbols = 5;
    25ea:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 13;
    25ec:	8d e0       	ldi	r24, 0x0D	; 13
		break;
    25ee:	08 95       	ret
		
		case '4':
		morse.pattern = 0x10; // 0001 0000;
    25f0:	60 e1       	ldi	r22, 0x10	; 16
		morse.lengthInSymbols = 5;
    25f2:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 11;
    25f4:	8b e0       	ldi	r24, 0x0B	; 11
		break;
    25f6:	08 95       	ret
		
		case '5':
		morse.pattern = 0x00; // 0000 0000;
    25f8:	60 e0       	ldi	r22, 0x00	; 0
		morse.lengthInSymbols = 5;
    25fa:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 9;
    25fc:	89 e0       	ldi	r24, 0x09	; 9
		break;
    25fe:	08 95       	ret
		case '6':
		morse.pattern = 0x01; // 0000 0001;
    2600:	61 e0       	ldi	r22, 0x01	; 1
		morse.lengthInSymbols = 5;
    2602:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 11;
    2604:	8b e0       	ldi	r24, 0x0B	; 11
		break;
    2606:	08 95       	ret
		
		case '7':
		morse.pattern = 0x03; // 0000 0011;
    2608:	63 e0       	ldi	r22, 0x03	; 3
		morse.lengthInSymbols = 5;
    260a:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 13;
    260c:	8d e0       	ldi	r24, 0x0D	; 13
		break;
    260e:	08 95       	ret
		
		case '8':
		morse.pattern = 0x07; // 0000 0111;
    2610:	67 e0       	ldi	r22, 0x07	; 7
		morse.lengthInSymbols = 5;
    2612:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 15;
    2614:	8f e0       	ldi	r24, 0x0F	; 15
		break;
    2616:	08 95       	ret
		
		case '9':
		morse.pattern = 0x0f; // 0000 1111;
    2618:	6f e0       	ldi	r22, 0x0F	; 15
		morse.lengthInSymbols = 5;
    261a:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 17;
    261c:	81 e1       	ldi	r24, 0x11	; 17
		break;
    261e:	08 95       	ret
		
		case '.':
		morse.pattern = 0x2a; // 0010 1010;
    2620:	6a e2       	ldi	r22, 0x2A	; 42
		morse.lengthInSymbols = 6;
    2622:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 17;
    2624:	81 e1       	ldi	r24, 0x11	; 17
		break;
    2626:	08 95       	ret
		
		case ',':
		morse.pattern = 0x33; // 0011 0011;
    2628:	63 e3       	ldi	r22, 0x33	; 51
		morse.lengthInSymbols = 6;
    262a:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 19;
    262c:	83 e1       	ldi	r24, 0x13	; 19
		break;
    262e:	08 95       	ret
		
		case '?':
		morse.pattern = 0x0c; // 0000 1100;
    2630:	6c e0       	ldi	r22, 0x0C	; 12
		morse.lengthInSymbols = 6;
    2632:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 15;
    2634:	8f e0       	ldi	r24, 0x0F	; 15
		break;
    2636:	08 95       	ret
		
		case '\'':
		morse.pattern = 0x1e; // 0001 1110;
    2638:	6e e1       	ldi	r22, 0x1E	; 30
		morse.lengthInSymbols = 6;
    263a:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 19;
    263c:	83 e1       	ldi	r24, 0x13	; 19
		break;
    263e:	08 95       	ret
		
		case '!':
		morse.pattern = 0x35; // 0011 0101;
    2640:	65 e3       	ldi	r22, 0x35	; 53
		morse.lengthInSymbols = 6;
    2642:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 19;
    2644:	83 e1       	ldi	r24, 0x13	; 19
		break;
    2646:	08 95       	ret
		
		case '/':
		morse.pattern = 0x09; // 0000 1001;
    2648:	69 e0       	ldi	r22, 0x09	; 9
		morse.lengthInSymbols = 5;
    264a:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 13;
    264c:	8d e0       	ldi	r24, 0x0D	; 13
		break;
    264e:	08 95       	ret
		
		case '(':
		morse.pattern = 0x0d; // 0000 1101;
    2650:	6d e0       	ldi	r22, 0x0D	; 13
		morse.lengthInSymbols = 5;
    2652:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 15;
    2654:	8f e0       	ldi	r24, 0x0F	; 15
		break;
    2656:	08 95       	ret
		
		case ')':
		morse.pattern = 0x2d; // 0010 1101;
    2658:	6d e2       	ldi	r22, 0x2D	; 45
		morse.lengthInSymbols = 6;
    265a:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 19;
    265c:	83 e1       	ldi	r24, 0x13	; 19
		break;
    265e:	08 95       	ret
		
		case '&':
		morse.pattern = 0x02; // 0000 0010;
    2660:	62 e0       	ldi	r22, 0x02	; 2
		morse.lengthInSymbols = 5;
    2662:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 11;
    2664:	8b e0       	ldi	r24, 0x0B	; 11
		break;
    2666:	08 95       	ret
		
		case ':':
		morse.pattern = 0x07; // 0000 0111;
    2668:	67 e0       	ldi	r22, 0x07	; 7
		morse.lengthInSymbols = 6;
    266a:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 17;
    266c:	81 e1       	ldi	r24, 0x11	; 17
		break;
    266e:	08 95       	ret
		
		case ';':
		morse.pattern = 0x15; // 0001 0101;
    2670:	65 e1       	ldi	r22, 0x15	; 21
		morse.lengthInSymbols = 6;
    2672:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 12;
    2674:	8c e0       	ldi	r24, 0x0C	; 12
		break;
    2676:	08 95       	ret
		
		case '=':
		morse.pattern = 0x11; // 0001 0001;
    2678:	61 e1       	ldi	r22, 0x11	; 17
		morse.lengthInSymbols = 5;
    267a:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 13;
    267c:	8d e0       	ldi	r24, 0x0D	; 13
		break;
    267e:	08 95       	ret
		
		case '+':
		morse.pattern = 0x0a; // 0000 1010;
    2680:	6a e0       	ldi	r22, 0x0A	; 10
		morse.lengthInSymbols = 5;
    2682:	75 e0       	ldi	r23, 0x05	; 5
		morse.lengthInElements = 13;
    2684:	8d e0       	ldi	r24, 0x0D	; 13
		break;
    2686:	08 95       	ret
		
		case '-':
		morse.pattern = 0x21; // 0010 0001;
    2688:	61 e2       	ldi	r22, 0x21	; 33
		morse.lengthInSymbols = 6;
    268a:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 15;
    268c:	8f e0       	ldi	r24, 0x0F	; 15
		break;
    268e:	08 95       	ret
		
		case '_':
		morse.pattern = 0x2c; // 0010 1100;
    2690:	6c e2       	ldi	r22, 0x2C	; 44
		morse.lengthInSymbols = 6;
    2692:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 17;
    2694:	81 e1       	ldi	r24, 0x11	; 17
		break;
    2696:	08 95       	ret
		
		case '"':
		morse.pattern = 0x12; // 0001 0010;
    2698:	62 e1       	ldi	r22, 0x12	; 18
		morse.lengthInSymbols = 6;
    269a:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 15;
    269c:	8f e0       	ldi	r24, 0x0F	; 15
		break;
    269e:	08 95       	ret
		
		case '$':
		morse.pattern = 0x48; // 0100 1000;
    26a0:	68 e4       	ldi	r22, 0x48	; 72
		morse.lengthInSymbols = 7;
    26a2:	77 e0       	ldi	r23, 0x07	; 7
		morse.lengthInElements = 17;
    26a4:	81 e1       	ldi	r24, 0x11	; 17
		break;
    26a6:	08 95       	ret
		
		case '@':
		morse.pattern = 0x16; // 0001 0110;
    26a8:	66 e1       	ldi	r22, 0x16	; 22
		morse.lengthInSymbols = 6;
    26aa:	76 e0       	ldi	r23, 0x06	; 6
		morse.lengthInElements = 17;
    26ac:	81 e1       	ldi	r24, 0x11	; 17
		break;
    26ae:	08 95       	ret
		
		case '|': // inter-word space
		morse.pattern = 0xff; // 1000 0000;
    26b0:	6f ef       	ldi	r22, 0xFF	; 255
		morse.lengthInSymbols = 7;
    26b2:	77 e0       	ldi	r23, 0x07	; 7
		morse.lengthInElements = 4; /* adjusted by -3 to account for inter-character space */
    26b4:	84 e0       	ldi	r24, 0x04	; 4
		break;
    26b6:	08 95       	ret
		
		case ' ': // inter-word space
		morse.pattern = 0xfe; // 1000 0000;
    26b8:	6e ef       	ldi	r22, 0xFE	; 254
		morse.lengthInSymbols = 7;
    26ba:	77 e0       	ldi	r23, 0x07	; 7
		morse.lengthInElements = 7; // 4 + 3 (character space) = 7
    26bc:	87 e0       	ldi	r24, 0x07	; 7
		break;
    26be:	08 95       	ret
		
		case '<': // solid keydown until end of period
		morse.pattern = 0xfd; // 1111 1111;
    26c0:	6d ef       	ldi	r22, 0xFD	; 253
		morse.lengthInSymbols = 0;
    26c2:	70 e0       	ldi	r23, 0x00	; 0
		morse.lengthInElements = 0;
    26c4:	80 e0       	ldi	r24, 0x00	; 0
		break;
    26c6:	08 95       	ret
		
		default:
		morse.pattern = 0x0000; // 0000 0000;
    26c8:	60 e0       	ldi	r22, 0x00	; 0
		morse.lengthInSymbols = 0;
    26ca:	70 e0       	ldi	r23, 0x00	; 0
		morse.lengthInElements = 0;
    26cc:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	
	return morse;
}
    26ce:	08 95       	ret

000026d0 <makeMorse>:
Load a string to send by passing in a pointer via the argument.
Call this function with a NULL argument at intervals of 1 element of time to generate Morse code. 
Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
*/
BOOL makeMorse(char* s, BOOL repeating)
{
    26d0:	cf 93       	push	r28
    26d2:	c6 2f       	mov	r28, r22
	static uint8_t symbolIndex; /* dits and dahs */
	static uint8_t elementIndex; /* units of time: dit = 1, dah = 3, intersymbol = 1, intercharacter = 3, etc. */
	static uint8_t addedSpace; /* adds additional time to make an inter-character space */
	static BOOL carrierOn = FALSE;
	
	if(s) /* load a new NULL-terminated string to send */
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	e1 f0       	breq	.+56     	; 0x2710 <makeMorse+0x40>
	{
		if(*s)
    26d8:	fc 01       	movw	r30, r24
    26da:	20 81       	ld	r18, Z
    26dc:	22 23       	and	r18, r18
    26de:	99 f0       	breq	.+38     	; 0x2706 <makeMorse+0x36>
		{
			str = s;
    26e0:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <str.1837+0x1>
    26e4:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <str.1837>
			morseInProgress = getMorseChar(*str);
    26e8:	82 2f       	mov	r24, r18
    26ea:	ff de       	rcall	.-514    	; 0x24ea <getMorseChar>
    26ec:	60 93 65 07 	sts	0x0765, r22	; 0x800765 <morseInProgress.1839>
    26f0:	70 93 66 07 	sts	0x0766, r23	; 0x800766 <morseInProgress.1839+0x1>
    26f4:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <morseInProgress.1839+0x2>
			charIndex = 0;
    26f8:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <charIndex.1840>
			symbolIndex = 0;
    26fc:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <symbolIndex.1841>
			repeat = repeating;
    2700:	c0 93 33 01 	sts	0x0133, r28	; 0x800133 <repeat.1838>
    2704:	7b c0       	rjmp	.+246    	; 0x27fc <makeMorse+0x12c>
		}
		else /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    2706:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <str.1837+0x1>
    270a:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <str.1837>
    270e:	76 c0       	rjmp	.+236    	; 0x27fc <makeMorse+0x12c>
		}
	}
	else if(str)
    2710:	e0 91 68 07 	lds	r30, 0x0768	; 0x800768 <str.1837>
    2714:	f0 91 69 07 	lds	r31, 0x0769	; 0x800769 <str.1837+0x1>
    2718:	30 97       	sbiw	r30, 0x00	; 0
    271a:	09 f4       	brne	.+2      	; 0x271e <makeMorse+0x4e>
    271c:	6f c0       	rjmp	.+222    	; 0x27fc <makeMorse+0x12c>
	{
		if(elementIndex)
    271e:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <elementIndex.1842>
    2722:	88 23       	and	r24, r24
    2724:	21 f0       	breq	.+8      	; 0x272e <makeMorse+0x5e>
		{
			elementIndex--;
    2726:	81 50       	subi	r24, 0x01	; 1
    2728:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <elementIndex.1842>
    272c:	67 c0       	rjmp	.+206    	; 0x27fc <makeMorse+0x12c>
		}
		else if(carrierOn) /* carrier is on, so turn it off and wait appropriate amount of space */
    272e:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <carrierOn.1844>
    2732:	88 23       	and	r24, r24
    2734:	61 f0       	breq	.+24     	; 0x274e <makeMorse+0x7e>
		{
			carrierOn = FALSE;
    2736:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <carrierOn.1844>
			/* wait one element = inter-symbol space */
			if(addedSpace)
    273a:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <addedSpace.1843>
    273e:	88 23       	and	r24, r24
    2740:	09 f4       	brne	.+2      	; 0x2744 <makeMorse+0x74>
    2742:	5c c0       	rjmp	.+184    	; 0x27fc <makeMorse+0x12c>
			{
				elementIndex = addedSpace;
    2744:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <elementIndex.1842>
				addedSpace = 0;
    2748:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <addedSpace.1843>
    274c:	57 c0       	rjmp	.+174    	; 0x27fc <makeMorse+0x12c>
			}
			/* wait inter-character space */
		}
		else /* carrier is off, so turn it on and get next symbol */
		{
			if(symbolIndex >= morseInProgress.lengthInSymbols)
    274e:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <morseInProgress.1839+0x1>
    2752:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <symbolIndex.1841>
    2756:	89 17       	cp	r24, r25
    2758:	18 f1       	brcs	.+70     	; 0x27a0 <makeMorse+0xd0>
			{
				char c = (*(str + ++charIndex));
    275a:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <charIndex.1840>
    275e:	8f 5f       	subi	r24, 0xFF	; 255
    2760:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <charIndex.1840>
    2764:	df 01       	movw	r26, r30
    2766:	a8 0f       	add	r26, r24
    2768:	b1 1d       	adc	r27, r1
    276a:	8c 91       	ld	r24, X
			
				if(!c) /* wrap to beginning of text */
    276c:	81 11       	cpse	r24, r1
    276e:	0f c0       	rjmp	.+30     	; 0x278e <makeMorse+0xbe>
				{
					if(repeat)
    2770:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <repeat.1838>
    2774:	88 23       	and	r24, r24
    2776:	21 f0       	breq	.+8      	; 0x2780 <makeMorse+0xb0>
					{
						c = *str;
    2778:	80 81       	ld	r24, Z
						charIndex = 0;
    277a:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <charIndex.1840>
    277e:	07 c0       	rjmp	.+14     	; 0x278e <makeMorse+0xbe>
					}
					else
					{
						str = NULL;
    2780:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <str.1837+0x1>
    2784:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <str.1837>
						carrierOn = FALSE;
    2788:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <carrierOn.1844>
						return carrierOn;
					}
				}
			
				morseInProgress = getMorseChar(c);
    278c:	39 c0       	rjmp	.+114    	; 0x2800 <makeMorse+0x130>
    278e:	ad de       	rcall	.-678    	; 0x24ea <getMorseChar>
    2790:	60 93 65 07 	sts	0x0765, r22	; 0x800765 <morseInProgress.1839>
    2794:	70 93 66 07 	sts	0x0766, r23	; 0x800766 <morseInProgress.1839+0x1>
    2798:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <morseInProgress.1839+0x2>
				symbolIndex = 0;
    279c:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <symbolIndex.1841>
			}

			if(morseInProgress.pattern < INTER_WORD_SPACE)
    27a0:	20 91 65 07 	lds	r18, 0x0765	; 0x800765 <morseInProgress.1839>
    27a4:	2d 3f       	cpi	r18, 0xFD	; 253
    27a6:	00 f5       	brcc	.+64     	; 0x27e8 <makeMorse+0x118>
			{
				BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    27a8:	40 91 63 07 	lds	r20, 0x0763	; 0x800763 <symbolIndex.1841>
    27ac:	31 e0       	ldi	r19, 0x01	; 1
    27ae:	34 0f       	add	r19, r20
    27b0:	30 93 63 07 	sts	0x0763, r19	; 0x800763 <symbolIndex.1841>
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <makeMorse+0xee>
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	4a 95       	dec	r20
    27c0:	e2 f7       	brpl	.-8      	; 0x27ba <makeMorse+0xea>
    27c2:	82 23       	and	r24, r18
			
				if(isDah)
    27c4:	21 f0       	breq	.+8      	; 0x27ce <makeMorse+0xfe>
				{
					elementIndex = 2;
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <elementIndex.1842>
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <makeMorse+0x102>
				}		
				else
				{
					elementIndex = 0;
    27ce:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <elementIndex.1842>
				}
				
				carrierOn = TRUE;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	80 93 61 07 	sts	0x0761, r24	; 0x800761 <carrierOn.1844>
				
				if(symbolIndex >= morseInProgress.lengthInSymbols) addedSpace = 2;
    27d8:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <morseInProgress.1839+0x1>
    27dc:	38 17       	cp	r19, r24
    27de:	70 f0       	brcs	.+28     	; 0x27fc <makeMorse+0x12c>
    27e0:	82 e0       	ldi	r24, 0x02	; 2
    27e2:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <addedSpace.1843>
    27e6:	0a c0       	rjmp	.+20     	; 0x27fc <makeMorse+0x12c>
			} 
			else
			{
				symbolIndex = 255; /* ensure the next character gets read */
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <symbolIndex.1841>
				carrierOn = FALSE;
    27ee:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <carrierOn.1844>
				elementIndex = morseInProgress.lengthInSymbols-4;
    27f2:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <morseInProgress.1839+0x1>
    27f6:	84 50       	subi	r24, 0x04	; 4
    27f8:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <elementIndex.1842>
			}
		}
	}
	
	return carrierOn;
    27fc:	80 91 61 07 	lds	r24, 0x0761	; 0x800761 <carrierOn.1844>
}
    2800:	cf 91       	pop	r28
    2802:	08 95       	ret

00002804 <stringTimeRequiredToSend>:

uint16_t stringTimeRequiredToSend(char* str, uint16_t spd)
{
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	1f 93       	push	r17
    280e:	cf 93       	push	r28
    2810:	df 93       	push	r29
    2812:	6c 01       	movw	r12, r24
    2814:	7b 01       	movw	r14, r22
	uint8_t elements = 0;
	MorseCharacter m;
	char c;
	
	for(int i=0; i<20; i++)
    2816:	c0 e0       	ldi	r28, 0x00	; 0
    2818:	d0 e0       	ldi	r29, 0x00	; 0
	return carrierOn;
}

uint16_t stringTimeRequiredToSend(char* str, uint16_t spd)
{
	uint8_t elements = 0;
    281a:	10 e0       	ldi	r17, 0x00	; 0
	MorseCharacter m;
	char c;
	
	for(int i=0; i<20; i++)
    281c:	0c c0       	rjmp	.+24     	; 0x2836 <stringTimeRequiredToSend+0x32>
	{
		c = str[i];
    281e:	f6 01       	movw	r30, r12
    2820:	ec 0f       	add	r30, r28
    2822:	fd 1f       	adc	r31, r29
    2824:	80 81       	ld	r24, Z
		if(!c) break;
    2826:	88 23       	and	r24, r24
		m = getMorseChar(c);
    2828:	49 f0       	breq	.+18     	; 0x283c <stringTimeRequiredToSend+0x38>
    282a:	5f de       	rcall	.-834    	; 0x24ea <getMorseChar>
		if(m.pattern < INTER_WORD_SPACE) elements += 3;
    282c:	6d 3f       	cpi	r22, 0xFD	; 253
    282e:	08 f4       	brcc	.+2      	; 0x2832 <stringTimeRequiredToSend+0x2e>
    2830:	1d 5f       	subi	r17, 0xFD	; 253
		elements += m.lengthInElements;
    2832:	18 0f       	add	r17, r24
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;
	
	for(int i=0; i<20; i++)
    2834:	21 96       	adiw	r28, 0x01	; 1
    2836:	c4 31       	cpi	r28, 0x14	; 20
    2838:	d1 05       	cpc	r29, r1
    283a:	8c f3       	brlt	.-30     	; 0x281e <stringTimeRequiredToSend+0x1a>
		m = getMorseChar(c);
		if(m.pattern < INTER_WORD_SPACE) elements += 3;
		elements += m.lengthInElements;
	}
	
	return (elements * WPM_TO_MS_PER_DOT(spd));
    283c:	80 eb       	ldi	r24, 0xB0	; 176
    283e:	94 e0       	ldi	r25, 0x04	; 4
    2840:	b7 01       	movw	r22, r14
    2842:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__udivmodhi4>
}
    2846:	16 9f       	mul	r17, r22
    2848:	c0 01       	movw	r24, r0
    284a:	17 9f       	mul	r17, r23
    284c:	90 0d       	add	r25, r0
    284e:	11 24       	eor	r1, r1
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	ff 90       	pop	r15
    2858:	ef 90       	pop	r14
    285a:	df 90       	pop	r13
    285c:	cf 90       	pop	r12
    285e:	08 95       	ret

00002860 <txSetFrequency>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended receive frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq)
	{
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
    2864:	fc 01       	movw	r30, r24
		BOOL activeBandSet = FALSE;
		RadioBand bandSet = BAND_INVALID;

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    2866:	60 81       	ld	r22, Z
    2868:	71 81       	ldd	r23, Z+1	; 0x01
    286a:	82 81       	ldd	r24, Z+2	; 0x02
    286c:	93 81       	ldd	r25, Z+3	; 0x03
    286e:	8b 01       	movw	r16, r22
    2870:	9c 01       	movw	r18, r24
    2872:	01 5e       	subi	r16, 0xE1	; 225
    2874:	17 46       	sbci	r17, 0x67	; 103
    2876:	25 43       	sbci	r18, 0x35	; 53
    2878:	31 09       	sbc	r19, r1
    287a:	0f 31       	cpi	r16, 0x1F	; 31
    287c:	1a 4a       	sbci	r17, 0xAA	; 170
    287e:	24 44       	sbci	r18, 0x44	; 68
    2880:	31 05       	cpc	r19, r1
    2882:	50 f4       	brcc	.+20     	; 0x2898 <txSetFrequency+0x38>
		{
			g_80m_frequency = *freq;
    2884:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <g_80m_frequency>
    2888:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <g_80m_frequency+0x1>
    288c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <g_80m_frequency+0x2>
    2890:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_80m_frequency+0x3>
			bandSet = BAND_80M;
    2894:	21 e0       	ldi	r18, 0x01	; 1
    2896:	16 c0       	rjmp	.+44     	; 0x28c4 <txSetFrequency+0x64>
		}
		else if((*freq < TX_MAXIMUM_2M_FREQUENCY) && (*freq > TX_MINIMUM_2M_FREQUENCY)) /* 2m */
    2898:	8b 01       	movw	r16, r22
    289a:	9c 01       	movw	r18, r24
    289c:	01 50       	subi	r16, 0x01	; 1
    289e:	14 44       	sbci	r17, 0x44	; 68
    28a0:	25 49       	sbci	r18, 0x95	; 149
    28a2:	38 40       	sbci	r19, 0x08	; 8
    28a4:	0f 3f       	cpi	r16, 0xFF	; 255
    28a6:	18 40       	sbci	r17, 0x08	; 8
    28a8:	2d 43       	sbci	r18, 0x3D	; 61
    28aa:	31 05       	cpc	r19, r1
    28ac:	50 f4       	brcc	.+20     	; 0x28c2 <txSetFrequency+0x62>
		{
			g_2m_frequency = *freq;
    28ae:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_2m_frequency>
    28b2:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_2m_frequency+0x1>
    28b6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_2m_frequency+0x2>
    28ba:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <g_2m_frequency+0x3>
			bandSet = BAND_2M;
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	01 c0       	rjmp	.+2      	; 0x28c4 <txSetFrequency+0x64>
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq)
	{
		BOOL activeBandSet = FALSE;
		RadioBand bandSet = BAND_INVALID;
    28c2:	22 e0       	ldi	r18, 0x02	; 2
		{
			g_2m_frequency = *freq;
			bandSet = BAND_2M;
		}

		if(bandSet == BAND_INVALID)
    28c4:	22 30       	cpi	r18, 0x02	; 2
    28c6:	31 f4       	brne	.+12     	; 0x28d4 <txSetFrequency+0x74>
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
    28c8:	10 82       	st	Z, r1
    28ca:	11 82       	std	Z+1, r1	; 0x01
    28cc:	12 82       	std	Z+2, r1	; 0x02
    28ce:	13 82       	std	Z+3, r1	; 0x03
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq)
	{
		BOOL activeBandSet = FALSE;
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	11 c0       	rjmp	.+34     	; 0x28f6 <txSetFrequency+0x96>

		if(bandSet == BAND_INVALID)
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
		}
		else if(g_activeBand == bandSet)
    28d4:	30 91 6b 07 	lds	r19, 0x076B	; 0x80076b <g_activeBand>
    28d8:	23 13       	cpse	r18, r19
    28da:	0c c0       	rjmp	.+24     	; 0x28f4 <txSetFrequency+0x94>
		{
			if(bandSet == BAND_2M)
    28dc:	21 11       	cpse	r18, r1
    28de:	05 c0       	rjmp	.+10     	; 0x28ea <txSetFrequency+0x8a>
			{
				si5351_set_freq(*freq, TX_CLOCK_VHF);
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	0e 94 29 21 	call	0x4252	; 0x4252 <si5351_set_freq>
			else
			{
				si5351_set_freq(*freq, TX_CLOCK_HF_0);
			}

			activeBandSet = TRUE;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	06 c0       	rjmp	.+12     	; 0x28f6 <txSetFrequency+0x96>
			{
				si5351_set_freq(*freq, TX_CLOCK_VHF);
			}
			else
			{
				si5351_set_freq(*freq, TX_CLOCK_HF_0);
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 29 21 	call	0x4252	; 0x4252 <si5351_set_freq>
			}

			activeBandSet = TRUE;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	01 c0       	rjmp	.+2      	; 0x28f6 <txSetFrequency+0x96>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq)
	{
		BOOL activeBandSet = FALSE;
    28f4:	80 e0       	ldi	r24, 0x00	; 0

			activeBandSet = TRUE;
		}

		return( activeBandSet);
	}
    28f6:	1f 91       	pop	r17
    28f8:	0f 91       	pop	r16
    28fa:	08 95       	ret

000028fc <txGetFrequency>:

	Frequency_Hz txGetFrequency(void)
	{
		if(g_tx_initialized)
    28fc:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <g_tx_initialized>
    2900:	88 23       	and	r24, r24
    2902:	d1 f0       	breq	.+52     	; 0x2938 <txGetFrequency+0x3c>
		{
			if(g_activeBand == BAND_2M)
    2904:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>
    2908:	81 11       	cpse	r24, r1
    290a:	09 c0       	rjmp	.+18     	; 0x291e <txGetFrequency+0x22>
			{
				return( g_2m_frequency);
    290c:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <g_2m_frequency>
    2910:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <g_2m_frequency+0x1>
    2914:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <g_2m_frequency+0x2>
    2918:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <g_2m_frequency+0x3>
    291c:	08 95       	ret
			}
			else if(g_activeBand == BAND_80M)
    291e:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	69 f4       	brne	.+26     	; 0x2940 <txGetFrequency+0x44>
			{
				return( g_80m_frequency);
    2926:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <g_80m_frequency>
    292a:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <g_80m_frequency+0x1>
    292e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <g_80m_frequency+0x2>
    2932:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <g_80m_frequency+0x3>
    2936:	08 95       	ret
			}
		}

		return( FREQUENCY_NOT_SPECIFIED);
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	cb 01       	movw	r24, r22
    293e:	08 95       	ret
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	cb 01       	movw	r24, r22
	}
    2946:	08 95       	ret

00002948 <txSetBand>:

	void __attribute__((optimize("O0"))) txSetBand(RadioBand band)
	{
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	29 97       	sbiw	r28, 0x09	; 9
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	89 87       	std	Y+9, r24	; 0x09
		keyTransmitter(OFF);
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	64 d0       	rcall	.+200    	; 0x2a2a <keyTransmitter>
		powerToTransmitter(OFF);
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	41 d0       	rcall	.+130    	; 0x29e8 <powerToTransmitter>
	
		if(band == BAND_80M)
    2966:	89 85       	ldd	r24, Y+9	; 0x09
    2968:	81 30       	cpi	r24, 0x01	; 1
    296a:	b1 f4       	brne	.+44     	; 0x2998 <txSetBand+0x50>
		{
			g_activeBand = band;
    296c:	89 85       	ldd	r24, Y+9	; 0x09
    296e:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <g_activeBand>
			Frequency_Hz f = g_80m_frequency;
    2972:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_80m_frequency>
    2976:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <g_80m_frequency+0x1>
    297a:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <g_80m_frequency+0x2>
    297e:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <g_80m_frequency+0x3>
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	9a 83       	std	Y+2, r25	; 0x02
    2986:	ab 83       	std	Y+3, r26	; 0x03
    2988:	bc 83       	std	Y+4, r27	; 0x04
			txSetFrequency(&f);
    298a:	ce 01       	movw	r24, r28
    298c:	01 96       	adiw	r24, 0x01	; 1
    298e:	68 df       	rcall	.-304    	; 0x2860 <txSetFrequency>
			txSetPowerLevel(g_80m_power_level);
    2990:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <g_80m_power_level>
    2994:	8e d0       	rcall	.+284    	; 0x2ab2 <txSetPowerLevel>
    2996:	1b c0       	rjmp	.+54     	; 0x29ce <txSetBand+0x86>
			Frequency_Hz f = g_2m_frequency;
			txSetFrequency(&f);
			txSetModulation(g_2m_modulationFormat);
			txSetPowerLevel(g_2m_power_level);
		}
	}
    2998:	89 85       	ldd	r24, Y+9	; 0x09
			g_activeBand = band;
			Frequency_Hz f = g_80m_frequency;
			txSetFrequency(&f);
			txSetPowerLevel(g_80m_power_level);
		}
		else if(band == BAND_2M)
    299a:	88 23       	and	r24, r24
    299c:	c1 f4       	brne	.+48     	; 0x29ce <txSetBand+0x86>
    299e:	89 85       	ldd	r24, Y+9	; 0x09
		{
			g_activeBand = band;
    29a0:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <g_activeBand>
    29a4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_2m_frequency>
			Frequency_Hz f = g_2m_frequency;
    29a8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <g_2m_frequency+0x1>
    29ac:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <g_2m_frequency+0x2>
    29b0:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <g_2m_frequency+0x3>
    29b4:	8d 83       	std	Y+5, r24	; 0x05
    29b6:	9e 83       	std	Y+6, r25	; 0x06
    29b8:	af 83       	std	Y+7, r26	; 0x07
    29ba:	b8 87       	std	Y+8, r27	; 0x08
			txSetFrequency(&f);
    29bc:	ce 01       	movw	r24, r28
    29be:	05 96       	adiw	r24, 0x05	; 5
    29c0:	4f df       	rcall	.-354    	; 0x2860 <txSetFrequency>
			txSetModulation(g_2m_modulationFormat);
    29c2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <g_2m_modulationFormat>
    29c6:	8f d0       	rcall	.+286    	; 0x2ae6 <txSetModulation>
			txSetPowerLevel(g_2m_power_level);
    29c8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <g_2m_power_level>
    29cc:	72 d0       	rcall	.+228    	; 0x2ab2 <txSetPowerLevel>
    29ce:	00 00       	nop
		}
	}
    29d0:	29 96       	adiw	r28, 0x09	; 9
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	08 95       	ret

000029e2 <txGetBand>:
    29e2:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>

	RadioBand txGetBand(void)
	{
		return(g_activeBand);
    29e6:	08 95       	ret

000029e8 <powerToTransmitter>:
	}
    29e8:	88 23       	and	r24, r24
	
	void powerToTransmitter(BOOL on)
	{
		if(on)
    29ea:	b1 f0       	breq	.+44     	; 0x2a18 <powerToTransmitter+0x30>
    29ec:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>
		{
			if(g_activeBand == BAND_80M)
    29f0:	81 30       	cpi	r24, 0x01	; 1
    29f2:	49 f4       	brne	.+18     	; 0x2a06 <powerToTransmitter+0x1e>
			{
	//			mcp23017_set(MCP23017_PORTA, VHF_ENABLE, FALSE);
				mcp23017_set(MCP23017_PORTA, VHF_ENABLE, TRUE); // temporary kluge to test 5V on 80m drivers
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	63 e0       	ldi	r22, 0x03	; 3
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	62 d6       	rcall	.+3268   	; 0x36c0 <mcp23017_set>
				mcp23017_set(MCP23017_PORTA, HF_ENABLE, TRUE);
    29fc:	41 e0       	ldi	r20, 0x01	; 1
    29fe:	64 e0       	ldi	r22, 0x04	; 4
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	5e c6       	rjmp	.+3260   	; 0x36c0 <mcp23017_set>
			}
			else
			{
				mcp23017_set(MCP23017_PORTA, HF_ENABLE, FALSE);
    2a04:	08 95       	ret
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	64 e0       	ldi	r22, 0x04	; 4
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
				mcp23017_set(MCP23017_PORTA, VHF_ENABLE, TRUE);
    2a0c:	59 d6       	rcall	.+3250   	; 0x36c0 <mcp23017_set>
    2a0e:	41 e0       	ldi	r20, 0x01	; 1
    2a10:	63 e0       	ldi	r22, 0x03	; 3
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	55 c6       	rjmp	.+3242   	; 0x36c0 <mcp23017_set>
			}
		}
		else
		{
			mcp23017_set(MCP23017_PORTA, VHF_ENABLE, FALSE);
    2a16:	08 95       	ret
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	63 e0       	ldi	r22, 0x03	; 3
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	50 d6       	rcall	.+3232   	; 0x36c0 <mcp23017_set>
			mcp23017_set(MCP23017_PORTA, HF_ENABLE, FALSE);
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	64 e0       	ldi	r22, 0x04	; 4
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	4c c6       	rjmp	.+3224   	; 0x36c0 <mcp23017_set>
    2a28:	08 95       	ret

00002a2a <keyTransmitter>:
    2a2a:	88 23       	and	r24, r24
		}
	}
	
	void keyTransmitter(BOOL on)
	{
		if(on)
    2a2c:	c1 f0       	breq	.+48     	; 0x2a5e <keyTransmitter+0x34>
    2a2e:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <g_transmitter_keyed>
		{
			if(!g_transmitter_keyed)
    2a32:	81 11       	cpse	r24, r1
    2a34:	2a c0       	rjmp	.+84     	; 0x2a8a <keyTransmitter+0x60>
    2a36:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>
			{
				if(g_activeBand == BAND_80M)
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	41 f4       	brne	.+16     	; 0x2a4e <keyTransmitter+0x24>
    2a3e:	61 e0       	ldi	r22, 0x01	; 1
				{
					si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED);
    2a40:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
    2a44:	61 e0       	ldi	r22, 0x01	; 1
					si5351_clock_enable(TX_CLOCK_HF_1, SI5351_CLK_ENABLED);
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
    2a4c:	04 c0       	rjmp	.+8      	; 0x2a56 <keyTransmitter+0x2c>
    2a4e:	61 e0       	ldi	r22, 0x01	; 1
				}
				else
				{
					si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_ENABLED);
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
    2a56:	81 e0       	ldi	r24, 0x01	; 1
				}
			
				g_transmitter_keyed = TRUE;
    2a58:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <g_transmitter_keyed>
    2a5c:	08 95       	ret
    2a5e:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <g_transmitter_keyed>
			}
		}
		else if(g_transmitter_keyed)
    2a62:	88 23       	and	r24, r24
    2a64:	91 f0       	breq	.+36     	; 0x2a8a <keyTransmitter+0x60>
    2a66:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>
		{
			if(g_activeBand == BAND_80M)
    2a6a:	81 30       	cpi	r24, 0x01	; 1
    2a6c:	41 f4       	brne	.+16     	; 0x2a7e <keyTransmitter+0x54>
    2a6e:	60 e0       	ldi	r22, 0x00	; 0
			{
				si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    2a70:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
    2a74:	60 e0       	ldi	r22, 0x00	; 0
				si5351_clock_enable(TX_CLOCK_HF_1, SI5351_CLK_DISABLED);
    2a76:	82 e0       	ldi	r24, 0x02	; 2
    2a78:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
    2a7c:	04 c0       	rjmp	.+8      	; 0x2a86 <keyTransmitter+0x5c>
    2a7e:	60 e0       	ldi	r22, 0x00	; 0
			}
			else
			{
				si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_DISABLED);
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
    2a86:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <g_transmitter_keyed>
			}

			g_transmitter_keyed = FALSE;
    2a8a:	08 95       	ret

00002a8c <txSetDrive>:
    2a8c:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <g_activeBand>
		}
	}
	
	void txSetDrive(uint8_t drive)
	{
		if(g_activeBand != BAND_2M) return;
    2a90:	91 11       	cpse	r25, r1
    2a92:	0e c0       	rjmp	.+28     	; 0x2ab0 <txSetDrive+0x24>
    2a94:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <g_2m_modulationFormat>
		
		if(g_2m_modulationFormat == MODE_AM)
    2a98:	91 30       	cpi	r25, 0x01	; 1
    2a9a:	19 f4       	brne	.+6      	; 0x2aa2 <txSetDrive+0x16>
    2a9c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <g_am_drive_level>
		{
			g_am_drive_level = drive;
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <txSetDrive+0x1a>
    2aa2:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <g_cw_drive_level>
		}
		else
		{
			g_cw_drive_level = drive;
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		OCR1B = drive;
    2aa8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2aac:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    2ab0:	08 95       	ret

00002ab2 <txSetPowerLevel>:
	}
	
	void txSetPowerLevel(uint8_t power)
	{
    2ab2:	cf 93       	push	r28
    2ab4:	c8 2f       	mov	r28, r24
		if(g_activeBand == BAND_2M)
    2ab6:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>
    2aba:	81 11       	cpse	r24, r1
    2abc:	03 c0       	rjmp	.+6      	; 0x2ac4 <txSetPowerLevel+0x12>
		{
			g_2m_power_level = power;
    2abe:	c0 93 3c 01 	sts	0x013C, r28	; 0x80013c <g_2m_power_level>
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <txSetPowerLevel+0x16>
		}
		else
		{
			g_80m_power_level = power;
    2ac4:	c0 93 3d 01 	sts	0x013D, r28	; 0x80013d <g_80m_power_level>
		}
		
		dac081c_set_dac(power);
    2ac8:	8c 2f       	mov	r24, r28
    2aca:	e7 d1       	rcall	.+974    	; 0x2e9a <dac081c_set_dac>
						
		if(power == 0)
    2acc:	c1 11       	cpse	r28, r1
    2ace:	04 c0       	rjmp	.+8      	; 0x2ad8 <txSetPowerLevel+0x26>
		{
			PORTB &= ~(1 << PORTB6); /* Turn off Tx power */
    2ad0:	85 b1       	in	r24, 0x05	; 5
    2ad2:	8f 7b       	andi	r24, 0xBF	; 191
    2ad4:	85 b9       	out	0x05, r24	; 5
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <txSetPowerLevel+0x2c>
		}
		else
		{
			PORTB |= (1 << PORTB6); /* Turn on Tx power */
    2ad8:	85 b1       	in	r24, 0x05	; 5
    2ada:	80 64       	ori	r24, 0x40	; 64
		}
	}
    2adc:	85 b9       	out	0x05, r24	; 5
    2ade:	cf 91       	pop	r28

	uint8_t txGetPowerLevel(void)
	{
		uint8_t pwr = dac081c_read_dac();
    2ae0:	08 95       	ret

00002ae2 <txGetPowerLevel>:
    2ae2:	f2 c1       	rjmp	.+996    	; 0x2ec8 <dac081c_read_dac>
		return pwr;
	}
    2ae4:	08 95       	ret

00002ae6 <txSetModulation>:
	
	void txSetModulation(Modulation mode)
	{
		if((g_activeBand == BAND_2M) && (mode == MODE_AM))
    2ae6:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <g_activeBand>
    2aea:	91 11       	cpse	r25, r1
    2aec:	09 c0       	rjmp	.+18     	; 0x2b00 <txSetModulation+0x1a>
    2aee:	81 30       	cpi	r24, 0x01	; 1
    2af0:	39 f4       	brne	.+14     	; 0x2b00 <txSetModulation+0x1a>
		{
			txSetDrive(g_am_drive_level);
    2af2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <g_am_drive_level>
    2af6:	ca df       	rcall	.-108    	; 0x2a8c <txSetDrive>
			g_2m_modulationFormat = MODE_AM;
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <g_2m_modulationFormat>
    2afe:	08 95       	ret
		}
		else
		{
			if(g_activeBand == BAND_2M)
    2b00:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>
    2b04:	81 11       	cpse	r24, r1
    2b06:	05 c0       	rjmp	.+10     	; 0x2b12 <txSetModulation+0x2c>
			{
				g_2m_modulationFormat = MODE_CW;
    2b08:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <g_2m_modulationFormat>
				txSetDrive(g_cw_drive_level);
    2b0c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <g_cw_drive_level>
    2b10:	bd cf       	rjmp	.-134    	; 0x2a8c <txSetDrive>
			}
		}
	}

	BOOL init_transmitter(void)
	{
    2b12:	08 95       	ret

00002b14 <init_transmitter>:
		if(si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)) return TRUE;
    2b14:	cf 93       	push	r28
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	ba 01       	movw	r22, r20
    2b1c:	80 e4       	ldi	r24, 0x40	; 64
    2b1e:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <si5351_init>
    2b22:	c8 2f       	mov	r28, r24
    2b24:	81 11       	cpse	r24, r1

		initializeTransmitterEEPROMVars();
    2b26:	20 c0       	rjmp	.+64     	; 0x2b68 <init_transmitter+0x54>
    2b28:	25 d0       	rcall	.+74     	; 0x2b74 <initializeTransmitterEEPROMVars>

		txSetBand(g_activeBand);    /* sets most tx settings */
    2b2a:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <g_activeBand>
    2b2e:	0c df       	rcall	.-488    	; 0x2948 <txSetBand>
    2b30:	63 e0       	ldi	r22, 0x03	; 3

		si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA);
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	0e 94 00 20 	call	0x4000	; 0x4000 <si5351_drive_strength>
    2b38:	60 e0       	ldi	r22, 0x00	; 0
		si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
    2b40:	63 e0       	ldi	r22, 0x03	; 3

		si5351_drive_strength(TX_CLOCK_HF_1, SI5351_DRIVE_8MA);
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	0e 94 00 20 	call	0x4000	; 0x4000 <si5351_drive_strength>
    2b48:	60 e0       	ldi	r22, 0x00	; 0
		si5351_clock_enable(TX_CLOCK_HF_1, SI5351_CLK_DISABLED);
    2b4a:	82 e0       	ldi	r24, 0x02	; 2
    2b4c:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
		
		si5351_drive_strength(TX_CLOCK_VHF, SI5351_DRIVE_8MA);
    2b50:	63 e0       	ldi	r22, 0x03	; 3
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	0e 94 00 20 	call	0x4000	; 0x4000 <si5351_drive_strength>
		si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_DISABLED);
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <si5351_clock_enable>
		
		g_tx_initialized = TRUE;
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <g_tx_initialized>
		
		return FALSE;
    2b66:	01 c0       	rjmp	.+2      	; 0x2b6a <init_transmitter+0x56>
		}
	}

	BOOL init_transmitter(void)
	{
		if(si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)) return TRUE;
    2b68:	c1 e0       	ldi	r28, 0x01	; 1
		si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_DISABLED);
		
		g_tx_initialized = TRUE;
		
		return FALSE;
	}
    2b6a:	8c 2f       	mov	r24, r28
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <storeTtransmitterValues>:
	
	void storeTtransmitterValues(void)
	{
		saveAllTransmitterEEPROM();
    2b70:	8b c0       	rjmp	.+278    	; 0x2c88 <saveAllTransmitterEEPROM>
    2b72:	08 95       	ret

00002b74 <initializeTransmitterEEPROMVars>:
    2b74:	86 e3       	ldi	r24, 0x36	; 54
	}


	void initializeTransmitterEEPROMVars(void)
	{
		if(eeprom_read_byte(&ee_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    2b7c:	89 3a       	cpi	r24, 0xA9	; 169
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <initializeTransmitterEEPROMVars+0xe>
    2b80:	49 c0       	rjmp	.+146    	; 0x2c14 <initializeTransmitterEEPROMVars+0xa0>
    2b82:	8b e3       	ldi	r24, 0x3B	; 59
		{
			g_activeBand = eeprom_read_byte(&ee_active_band);
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    2b8a:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <g_activeBand>
    2b8e:	8c e3       	ldi	r24, 0x3C	; 60
			g_2m_frequency = eeprom_read_dword(&ee_active_2m_frequency);
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	0e 94 18 27 	call	0x4e30	; 0x4e30 <eeprom_read_dword>
    2b96:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <g_2m_frequency>
    2b9a:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <g_2m_frequency+0x1>
    2b9e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <g_2m_frequency+0x2>
    2ba2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <g_2m_frequency+0x3>
    2ba6:	80 e4       	ldi	r24, 0x40	; 64
			g_2m_power_level = eeprom_read_byte(&ee_2m_power_level);
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    2bae:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <g_2m_power_level>
    2bb2:	81 e4       	ldi	r24, 0x41	; 65
			g_80m_frequency = eeprom_read_dword(&ee_active_80m_frequency);
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 18 27 	call	0x4e30	; 0x4e30 <eeprom_read_dword>
    2bba:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <g_80m_frequency>
    2bbe:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <g_80m_frequency+0x1>
    2bc2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <g_80m_frequency+0x2>
    2bc6:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_80m_frequency+0x3>
    2bca:	85 e4       	ldi	r24, 0x45	; 69
			g_80m_power_level = eeprom_read_byte(&ee_80m_power_level);
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    2bd2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <g_80m_power_level>
    2bd6:	86 e4       	ldi	r24, 0x46	; 70
			g_rtty_offset = eeprom_read_dword(&ee_cw_offset_frequency);
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 18 27 	call	0x4e30	; 0x4e30 <eeprom_read_dword>
    2bde:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <g_rtty_offset>
    2be2:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <g_rtty_offset+0x1>
    2be6:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <g_rtty_offset+0x2>
    2bea:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <g_rtty_offset+0x3>
    2bee:	8a e4       	ldi	r24, 0x4A	; 74
			g_am_drive_level = eeprom_read_byte(&ee_am_drive_level);
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    2bf6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <g_am_drive_level>
    2bfa:	8b e4       	ldi	r24, 0x4B	; 75
			g_cw_drive_level = eeprom_read_byte(&ee_cw_drive_level);
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    2c02:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <g_cw_drive_level>
    2c06:	8c e4       	ldi	r24, 0x4C	; 76
			g_2m_modulationFormat = eeprom_read_byte(&ee_active_2m_modulation);
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    2c0e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <g_2m_modulationFormat>
    2c12:	08 95       	ret
    2c14:	69 ea       	ldi	r22, 0xA9	; 169
		}
		else
		{
			eeprom_write_byte(&ee_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    2c16:	86 e3       	ldi	r24, 0x36	; 54
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <eeprom_write_byte>
    2c1e:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <g_activeBand>

			g_activeBand = EEPROM_BAND_DEFAULT;
    2c22:	80 e3       	ldi	r24, 0x30	; 48
			g_2m_frequency = DEFAULT_TX_2M_FREQUENCY;
    2c24:	99 e2       	ldi	r25, 0x29	; 41
    2c26:	ad ea       	ldi	r26, 0xAD	; 173
    2c28:	b8 e0       	ldi	r27, 0x08	; 8
    2c2a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <g_2m_frequency>
    2c2e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <g_2m_frequency+0x1>
    2c32:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <g_2m_frequency+0x2>
    2c36:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <g_2m_frequency+0x3>
    2c3a:	82 e3       	ldi	r24, 0x32	; 50
			g_2m_power_level = DEFAULT_TX_2M_POWER;
    2c3c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <g_2m_power_level>
    2c40:	40 e3       	ldi	r20, 0x30	; 48
			g_80m_frequency = DEFAULT_TX_80M_FREQUENCY;
    2c42:	5b e2       	ldi	r21, 0x2B	; 43
    2c44:	66 e3       	ldi	r22, 0x36	; 54
    2c46:	70 e0       	ldi	r23, 0x00	; 0
    2c48:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <g_80m_frequency>
    2c4c:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <g_80m_frequency+0x1>
    2c50:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <g_80m_frequency+0x2>
    2c54:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <g_80m_frequency+0x3>
    2c58:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <g_80m_power_level>
			g_80m_power_level = DEFAULT_TX_80M_POWER;
    2c5c:	8a ea       	ldi	r24, 0xAA	; 170
			g_rtty_offset = DEFAULT_RTTY_OFFSET_FREQUENCY;
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	a0 e0       	ldi	r26, 0x00	; 0
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <g_rtty_offset>
    2c68:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <g_rtty_offset+0x1>
    2c6c:	a0 93 40 01 	sts	0x0140, r26	; 0x800140 <g_rtty_offset+0x2>
    2c70:	b0 93 41 01 	sts	0x0141, r27	; 0x800141 <g_rtty_offset+0x3>
			g_am_drive_level = DEFAULT_AM_DRIVE_LEVEL;
    2c74:	84 eb       	ldi	r24, 0xB4	; 180
    2c76:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <g_am_drive_level>
			g_cw_drive_level = DEFAULT_CW_DRIVE_LEVEL;
    2c7a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <g_cw_drive_level>
			g_2m_modulationFormat = DEFAULT_TX_2M_MODULATION;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1

			saveAllTransmitterEEPROM();
    2c80:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <g_2m_modulationFormat>
		}
	}

	void saveAllTransmitterEEPROM(void)
	{
		storeEEbyteIfChanged(&ee_active_band, g_activeBand);
    2c84:	01 c0       	rjmp	.+2      	; 0x2c88 <saveAllTransmitterEEPROM>
    2c86:	08 95       	ret

00002c88 <saveAllTransmitterEEPROM>:
    2c88:	60 91 6b 07 	lds	r22, 0x076B	; 0x80076b <g_activeBand>
    2c8c:	8b e3       	ldi	r24, 0x3B	; 59
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
		storeEEdwordIfChanged((uint32_t*)&ee_active_2m_frequency, g_2m_frequency);
    2c90:	60 d0       	rcall	.+192    	; 0x2d52 <storeEEbyteIfChanged>
    2c92:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <g_2m_frequency>
    2c96:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <g_2m_frequency+0x1>
    2c9a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <g_2m_frequency+0x2>
    2c9e:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <g_2m_frequency+0x3>
    2ca2:	8c e3       	ldi	r24, 0x3C	; 60
		storeEEbyteIfChanged(&ee_2m_power_level, g_2m_power_level);
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	66 d0       	rcall	.+204    	; 0x2d74 <storeEEdwordIfChanged>
    2ca8:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <g_2m_power_level>
    2cac:	80 e4       	ldi	r24, 0x40	; 64
    2cae:	90 e0       	ldi	r25, 0x00	; 0
		storeEEdwordIfChanged((uint32_t*)&ee_active_80m_frequency, g_80m_frequency);
    2cb0:	50 d0       	rcall	.+160    	; 0x2d52 <storeEEbyteIfChanged>
    2cb2:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <g_80m_frequency>
    2cb6:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <g_80m_frequency+0x1>
    2cba:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <g_80m_frequency+0x2>
    2cbe:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <g_80m_frequency+0x3>
		storeEEbyteIfChanged(&ee_80m_power_level, g_80m_power_level);
    2cc2:	81 e4       	ldi	r24, 0x41	; 65
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	56 d0       	rcall	.+172    	; 0x2d74 <storeEEdwordIfChanged>
    2cc8:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <g_80m_power_level>
		storeEEdwordIfChanged((uint32_t*)&ee_cw_offset_frequency, g_rtty_offset);
    2ccc:	85 e4       	ldi	r24, 0x45	; 69
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	40 d0       	rcall	.+128    	; 0x2d52 <storeEEbyteIfChanged>
    2cd2:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <g_rtty_offset>
    2cd6:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <g_rtty_offset+0x1>
    2cda:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <g_rtty_offset+0x2>
    2cde:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <g_rtty_offset+0x3>
		storeEEdwordIfChanged((uint32_t*)&ee_si5351_ref_correction, si5351_get_correction());
    2ce2:	86 e4       	ldi	r24, 0x46	; 70
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	46 d0       	rcall	.+140    	; 0x2d74 <storeEEdwordIfChanged>
    2ce8:	48 d5       	rcall	.+2704   	; 0x377a <si5351_get_correction>
    2cea:	ab 01       	movw	r20, r22
    2cec:	bc 01       	movw	r22, r24
    2cee:	87 e3       	ldi	r24, 0x37	; 55
		storeEEbyteIfChanged(&ee_am_drive_level, g_am_drive_level);
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	40 d0       	rcall	.+128    	; 0x2d74 <storeEEdwordIfChanged>
    2cf4:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <g_am_drive_level>
    2cf8:	8a e4       	ldi	r24, 0x4A	; 74
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
		storeEEbyteIfChanged(&ee_cw_drive_level, g_cw_drive_level);
    2cfc:	2a d0       	rcall	.+84     	; 0x2d52 <storeEEbyteIfChanged>
    2cfe:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <g_cw_drive_level>
    2d02:	8b e4       	ldi	r24, 0x4B	; 75
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	25 d0       	rcall	.+74     	; 0x2d52 <storeEEbyteIfChanged>
		storeEEbyteIfChanged(&ee_active_2m_modulation, g_2m_modulationFormat);
    2d08:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <g_2m_modulationFormat>
    2d0c:	8c e4       	ldi	r24, 0x4C	; 76
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	20 c0       	rjmp	.+64     	; 0x2d52 <storeEEbyteIfChanged>
    2d12:	08 95       	ret

00002d14 <bandForFrequency>:
    2d14:	0f 93       	push	r16


#endif  /*#ifdef INCLUDE_TRANSMITTER_SUPPORT */

RadioBand bandForFrequency(Frequency_Hz freq)
{
    2d16:	1f 93       	push	r17
    2d18:	8b 01       	movw	r16, r22
	RadioBand result = BAND_INVALID;

	if((freq >= TX_MINIMUM_2M_FREQUENCY) && (freq <= TX_MAXIMUM_2M_FREQUENCY))
    2d1a:	9c 01       	movw	r18, r24
    2d1c:	14 54       	subi	r17, 0x44	; 68
    2d1e:	25 49       	sbci	r18, 0x95	; 149
    2d20:	38 40       	sbci	r19, 0x08	; 8
    2d22:	01 30       	cpi	r16, 0x01	; 1
    2d24:	19 40       	sbci	r17, 0x09	; 9
    2d26:	2d 43       	sbci	r18, 0x3D	; 61
    2d28:	31 05       	cpc	r19, r1
    2d2a:	68 f0       	brcs	.+26     	; 0x2d46 <bandForFrequency+0x32>
    2d2c:	dc 01       	movw	r26, r24
	{
		result = BAND_2M;
	}
	else if((freq >= TX_MINIMUM_80M_FREQUENCY) && (freq <= TX_MAXIMUM_80M_FREQUENCY))
    2d2e:	cb 01       	movw	r24, r22
    2d30:	80 5e       	subi	r24, 0xE0	; 224
    2d32:	97 46       	sbci	r25, 0x67	; 103
    2d34:	a5 43       	sbci	r26, 0x35	; 53
    2d36:	b1 09       	sbc	r27, r1
    2d38:	81 32       	cpi	r24, 0x21	; 33
    2d3a:	9a 4a       	sbci	r25, 0xAA	; 170
    2d3c:	a4 44       	sbci	r26, 0x44	; 68
    2d3e:	b1 05       	cpc	r27, r1
    2d40:	20 f0       	brcs	.+8      	; 0x2d4a <bandForFrequency+0x36>
    2d42:	82 e0       	ldi	r24, 0x02	; 2

#endif  /*#ifdef INCLUDE_TRANSMITTER_SUPPORT */

RadioBand bandForFrequency(Frequency_Hz freq)
{
	RadioBand result = BAND_INVALID;
    2d44:	03 c0       	rjmp	.+6      	; 0x2d4c <bandForFrequency+0x38>
    2d46:	80 e0       	ldi	r24, 0x00	; 0

	if((freq >= TX_MINIMUM_2M_FREQUENCY) && (freq <= TX_MAXIMUM_2M_FREQUENCY))
	{
		result = BAND_2M;
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <bandForFrequency+0x38>
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if((freq >= TX_MINIMUM_80M_FREQUENCY) && (freq <= TX_MAXIMUM_80M_FREQUENCY))
	{
		result = BAND_80M;
    2d4c:	1f 91       	pop	r17
	}

	return(result);
}
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <storeEEbyteIfChanged>:
 *  EEPROM Utility Functions
 ************************************************************************************************/


void storeEEbyteIfChanged(uint8_t* ee_var, uint8_t val)
{
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	ec 01       	movw	r28, r24
    2d5a:	16 2f       	mov	r17, r22
	if(eeprom_read_byte((uint8_t*)ee_var) != val)
    2d5c:	0e 94 10 27 	call	0x4e20	; 0x4e20 <eeprom_read_byte>
    2d60:	81 17       	cp	r24, r17
    2d62:	21 f0       	breq	.+8      	; 0x2d6c <storeEEbyteIfChanged+0x1a>
	{
		eeprom_write_byte(ee_var, val);
    2d64:	61 2f       	mov	r22, r17
    2d66:	ce 01       	movw	r24, r28
    2d68:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <eeprom_write_byte>
	}
}
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	08 95       	ret

00002d74 <storeEEdwordIfChanged>:

void storeEEdwordIfChanged(uint32_t* ee_var, uint32_t val)
{
    2d74:	cf 92       	push	r12
    2d76:	df 92       	push	r13
    2d78:	ef 92       	push	r14
    2d7a:	ff 92       	push	r15
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
    2d80:	ec 01       	movw	r28, r24
    2d82:	6a 01       	movw	r12, r20
    2d84:	7b 01       	movw	r14, r22
	if(eeprom_read_dword(ee_var) != val)
    2d86:	0e 94 18 27 	call	0x4e30	; 0x4e30 <eeprom_read_dword>
    2d8a:	6c 15       	cp	r22, r12
    2d8c:	7d 05       	cpc	r23, r13
    2d8e:	8e 05       	cpc	r24, r14
    2d90:	9f 05       	cpc	r25, r15
    2d92:	29 f0       	breq	.+10     	; 0x2d9e <storeEEdwordIfChanged+0x2a>
	{
		eeprom_write_dword(ee_var, val);
    2d94:	b7 01       	movw	r22, r14
    2d96:	a6 01       	movw	r20, r12
    2d98:	ce 01       	movw	r24, r28
    2d9a:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <eeprom_write_dword>
	}
}
    2d9e:	df 91       	pop	r29
    2da0:	cf 91       	pop	r28
    2da2:	ff 90       	pop	r15
    2da4:	ef 90       	pop	r14
    2da6:	df 90       	pop	r13
    2da8:	cf 90       	pop	r12
    2daa:	08 95       	ret

00002dac <stringToSecondsSinceMidnight>:
/***********************************************************************************************
 *  Print Formatting Utility Functions
 ************************************************************************************************/

BOOL stringToSecondsSinceMidnight(char *str, int32_t *timeVal)
{
    2dac:	af 92       	push	r10
    2dae:	bf 92       	push	r11
    2db0:	cf 92       	push	r12
    2db2:	df 92       	push	r13
    2db4:	ef 92       	push	r14
    2db6:	ff 92       	push	r15
    2db8:	0f 93       	push	r16
    2dba:	1f 93       	push	r17
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <stringToSecondsSinceMidnight+0x16>
    2dc2:	1f 92       	push	r1
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	5b 01       	movw	r10, r22
	int32_t time_sec = 0;
	uint8_t index = 0;
	char field[3];
	char* loc1;

	field[2] = '\0';
    2dca:	1b 82       	std	Y+3, r1	; 0x03
	field[1] = '\0';
    2dcc:	1a 82       	std	Y+2, r1	; 0x02

	loc1 = strchr(str, ':');
    2dce:	6a e3       	ldi	r22, 0x3A	; 58
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	0e 94 31 24 	call	0x4862	; 0x4862 <strchr>
	if(loc1 == NULL) return 1; // format error
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <stringToSecondsSinceMidnight+0x30>
    2dda:	3f c0       	rjmp	.+126    	; 0x2e5a <stringToSecondsSinceMidnight+0xae>
	
	str = loc1 - 2; /* point str to beginning of time string */
    2ddc:	8c 01       	movw	r16, r24
    2dde:	02 50       	subi	r16, 0x02	; 2
    2de0:	11 09       	sbc	r17, r1

	/* hh:mm:ss */
	field[0] = str[index++];    /* tens of hours or hours */
    2de2:	f8 01       	movw	r30, r16
    2de4:	80 81       	ld	r24, Z
    2de6:	89 83       	std	Y+1, r24	; 0x01
	field[1] = str[index++];    /* hours */
    2de8:	81 81       	ldd	r24, Z+1	; 0x01
    2dea:	8a 83       	std	Y+2, r24	; 0x02
	
	time_sec = SecondsFromHours(atol(field));
    2dec:	ce 01       	movw	r24, r28
    2dee:	01 96       	adiw	r24, 0x01	; 1
    2df0:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
    2df4:	9b 01       	movw	r18, r22
    2df6:	ac 01       	movw	r20, r24
    2df8:	a0 e1       	ldi	r26, 0x10	; 16
    2dfa:	be e0       	ldi	r27, 0x0E	; 14
    2dfc:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__muluhisi3>
    2e00:	6b 01       	movw	r12, r22
    2e02:	7c 01       	movw	r14, r24
	index++;

	field[0] = str[index++];
    2e04:	f8 01       	movw	r30, r16
    2e06:	83 81       	ldd	r24, Z+3	; 0x03
    2e08:	89 83       	std	Y+1, r24	; 0x01
	field[1] = str[index++];    /* minutes */
    2e0a:	84 81       	ldd	r24, Z+4	; 0x04
    2e0c:	8a 83       	std	Y+2, r24	; 0x02
	time_sec += SecondsFromMinutes(atol(field));
    2e0e:	ce 01       	movw	r24, r28
    2e10:	01 96       	adiw	r24, 0x01	; 1
    2e12:	0e 94 03 24 	call	0x4806	; 0x4806 <atol>
    2e16:	9b 01       	movw	r18, r22
    2e18:	ac 01       	movw	r20, r24
    2e1a:	ac e3       	ldi	r26, 0x3C	; 60
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__muluhisi3>
    2e22:	c6 0e       	add	r12, r22
    2e24:	d7 1e       	adc	r13, r23
    2e26:	e8 1e       	adc	r14, r24
    2e28:	f9 1e       	adc	r15, r25
	index++;

	field[0] = str[index++];
    2e2a:	f8 01       	movw	r30, r16
    2e2c:	86 81       	ldd	r24, Z+6	; 0x06
    2e2e:	89 83       	std	Y+1, r24	; 0x01
	field[1] = str[index++];    /* seconds */
    2e30:	87 81       	ldd	r24, Z+7	; 0x07
    2e32:	8a 83       	std	Y+2, r24	; 0x02
	time_sec += atoi(field);
    2e34:	ce 01       	movw	r24, r28
    2e36:	01 96       	adiw	r24, 0x01	; 1
    2e38:	0e 94 e6 23 	call	0x47cc	; 0x47cc <atoi>
    2e3c:	09 2e       	mov	r0, r25
    2e3e:	00 0c       	add	r0, r0
    2e40:	aa 0b       	sbc	r26, r26
    2e42:	bb 0b       	sbc	r27, r27
    2e44:	c8 0e       	add	r12, r24
    2e46:	d9 1e       	adc	r13, r25
    2e48:	ea 1e       	adc	r14, r26
    2e4a:	fb 1e       	adc	r15, r27

	*timeVal = time_sec;
    2e4c:	f5 01       	movw	r30, r10
    2e4e:	c0 82       	st	Z, r12
    2e50:	d1 82       	std	Z+1, r13	; 0x01
    2e52:	e2 82       	std	Z+2, r14	; 0x02
    2e54:	f3 82       	std	Z+3, r15	; 0x03
	return FALSE; 
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	01 c0       	rjmp	.+2      	; 0x2e5c <stringToSecondsSinceMidnight+0xb0>

	field[2] = '\0';
	field[1] = '\0';

	loc1 = strchr(str, ':');
	if(loc1 == NULL) return 1; // format error
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
	field[1] = str[index++];    /* seconds */
	time_sec += atoi(field);

	*timeVal = time_sec;
	return FALSE; 
}
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	1f 91       	pop	r17
    2e68:	0f 91       	pop	r16
    2e6a:	ff 90       	pop	r15
    2e6c:	ef 90       	pop	r14
    2e6e:	df 90       	pop	r13
    2e70:	cf 90       	pop	r12
    2e72:	bf 90       	pop	r11
    2e74:	af 90       	pop	r10
    2e76:	08 95       	ret

00002e78 <ad5245_set_potentiometer>:
#include <util/twi.h>

#define AD5245_I2C_SLAVE_ADDR_A0_0 0x58

void ad5245_set_potentiometer(uint8_t setting)
{
    2e78:	cf 93       	push	r28
    2e7a:	df 93       	push	r29
    2e7c:	1f 92       	push	r1
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(AD5245_I2C_SLAVE_ADDR_A0_0, 0x00, &setting, 1);
    2e84:	21 e0       	ldi	r18, 0x01	; 1
    2e86:	ae 01       	movw	r20, r28
    2e88:	4f 5f       	subi	r20, 0xFF	; 255
    2e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	88 e5       	ldi	r24, 0x58	; 88
    2e90:	1c d3       	rcall	.+1592   	; 0x34ca <i2c_device_write>
}
    2e92:	0f 90       	pop	r0
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	08 95       	ret

00002e9a <dac081c_set_dac>:
#include <util/twi.h>

#define DAC081C_I2C_SLAVE_ADDR_A0 0x18

void dac081c_set_dac(uint8_t setting)
{
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
    2e9e:	1f 92       	push	r1
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte1=0, byte2=0;
	
	byte1 |= (setting >> 4);
    2ea4:	68 2f       	mov	r22, r24
    2ea6:	62 95       	swap	r22
    2ea8:	6f 70       	andi	r22, 0x0F	; 15
	byte2 |= (setting << 4);
    2eaa:	20 e1       	ldi	r18, 0x10	; 16
    2eac:	82 9f       	mul	r24, r18
    2eae:	c0 01       	movw	r24, r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(DAC081C_I2C_SLAVE_ADDR_A0, byte1, &byte2, 1);
    2eb4:	21 e0       	ldi	r18, 0x01	; 1
    2eb6:	ae 01       	movw	r20, r28
    2eb8:	4f 5f       	subi	r20, 0xFF	; 255
    2eba:	5f 4f       	sbci	r21, 0xFF	; 255
    2ebc:	88 e1       	ldi	r24, 0x18	; 24
    2ebe:	05 d3       	rcall	.+1546   	; 0x34ca <i2c_device_write>
}
    2ec0:	0f 90       	pop	r0
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	08 95       	ret

00002ec8 <dac081c_read_dac>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	uint8_t __attribute__((optimize("O0"))) dac081c_read_dac(void)
#else
	uint8_t dac081c_read_dac(void)
#endif
{
    2ec8:	0f 93       	push	r16
    2eca:	1f 93       	push	r17
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <dac081c_read_dac+0xa>
    2ed2:	00 d0       	rcall	.+0      	; 0x2ed4 <dac081c_read_dac+0xc>
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
	uint8_t bytes[2];
	uint8_t bytes2read = 2;
    2ed8:	82 e0       	ldi	r24, 0x02	; 2
    2eda:	89 83       	std	Y+1, r24	; 0x01
	uint8_t index = 0;
	
	i2c_start();
    2edc:	1a 82       	std	Y+2, r1	; 0x02
	if(i2c_status(TW_START))
    2ede:	93 d2       	rcall	.+1318   	; 0x3406 <i2c_start>
    2ee0:	88 e0       	ldi	r24, 0x08	; 8
    2ee2:	e4 d2       	rcall	.+1480   	; 0x34ac <i2c_status>
    2ee4:	88 23       	and	r24, r24
    2ee6:	11 f0       	breq	.+4      	; 0x2eec <dac081c_read_dac+0x24>
	{
		return(TRUE);
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
	}

	if(i2c_write_success((DAC081C_I2C_SLAVE_ADDR_A0 | TW_READ), TW_MR_SLA_ACK))
    2eea:	41 c0       	rjmp	.+130    	; 0x2f6e <dac081c_read_dac+0xa6>
    2eec:	60 e4       	ldi	r22, 0x40	; 64
    2eee:	89 e1       	ldi	r24, 0x19	; 25
    2ef0:	a6 d2       	rcall	.+1356   	; 0x343e <i2c_write_success>
    2ef2:	88 23       	and	r24, r24
    2ef4:	51 f1       	breq	.+84     	; 0x2f4a <dac081c_read_dac+0x82>
	{
		return(TRUE);
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	3a c0       	rjmp	.+116    	; 0x2f6e <dac081c_read_dac+0xa6>
	}

	while(bytes2read--)
	{
		if(bytes2read)
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	88 23       	and	r24, r24
    2efe:	a1 f0       	breq	.+40     	; 0x2f28 <dac081c_read_dac+0x60>
		{
			bytes[index++] = i2c_read_ack();
    2f00:	8a 81       	ldd	r24, Y+2	; 0x02
    2f02:	91 e0       	ldi	r25, 0x01	; 1
    2f04:	98 0f       	add	r25, r24
    2f06:	9a 83       	std	Y+2, r25	; 0x02
    2f08:	08 2f       	mov	r16, r24
    2f0a:	10 e0       	ldi	r17, 0x00	; 0
    2f0c:	b3 d2       	rcall	.+1382   	; 0x3474 <i2c_read_ack>
    2f0e:	28 2f       	mov	r18, r24
    2f10:	ce 01       	movw	r24, r28
    2f12:	03 96       	adiw	r24, 0x03	; 3
    2f14:	80 0f       	add	r24, r16
    2f16:	91 1f       	adc	r25, r17
    2f18:	fc 01       	movw	r30, r24
			if(i2c_status(TW_MR_DATA_ACK))
    2f1a:	20 83       	st	Z, r18
    2f1c:	80 e5       	ldi	r24, 0x50	; 80
    2f1e:	c6 d2       	rcall	.+1420   	; 0x34ac <i2c_status>
    2f20:	88 23       	and	r24, r24
			{
				return(TRUE);
    2f22:	99 f0       	breq	.+38     	; 0x2f4a <dac081c_read_dac+0x82>
    2f24:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		else
		{
			bytes[index] = i2c_read_nack();
    2f26:	23 c0       	rjmp	.+70     	; 0x2f6e <dac081c_read_dac+0xa6>
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	08 2f       	mov	r16, r24
    2f2c:	10 e0       	ldi	r17, 0x00	; 0
    2f2e:	b0 d2       	rcall	.+1376   	; 0x3490 <i2c_read_nack>
    2f30:	28 2f       	mov	r18, r24
    2f32:	ce 01       	movw	r24, r28
    2f34:	03 96       	adiw	r24, 0x03	; 3
    2f36:	80 0f       	add	r24, r16
    2f38:	91 1f       	adc	r25, r17
    2f3a:	fc 01       	movw	r30, r24
			if(i2c_status(TW_MR_DATA_NACK))
    2f3c:	20 83       	st	Z, r18
    2f3e:	88 e5       	ldi	r24, 0x58	; 88
    2f40:	b5 d2       	rcall	.+1386   	; 0x34ac <i2c_status>
    2f42:	88 23       	and	r24, r24
    2f44:	11 f0       	breq	.+4      	; 0x2f4a <dac081c_read_dac+0x82>
			{
				return(TRUE);
    2f46:	81 e0       	ldi	r24, 0x01	; 1
	if(i2c_write_success((DAC081C_I2C_SLAVE_ADDR_A0 | TW_READ), TW_MR_SLA_ACK))
	{
		return(TRUE);
	}

	while(bytes2read--)
    2f48:	12 c0       	rjmp	.+36     	; 0x2f6e <dac081c_read_dac+0xa6>
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9f ef       	ldi	r25, 0xFF	; 255
    2f4e:	98 0f       	add	r25, r24
    2f50:	99 83       	std	Y+1, r25	; 0x01
    2f52:	88 23       	and	r24, r24
				return(TRUE);
			}
		}
	}

	i2c_stop();
    2f54:	91 f6       	brne	.-92     	; 0x2efa <dac081c_read_dac+0x32>
    2f56:	6f d2       	rcall	.+1246   	; 0x3436 <i2c_stop>
		
	bytes[0] = (bytes[0] << 4);
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	82 95       	swap	r24
    2f5c:	80 7f       	andi	r24, 0xF0	; 240
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
	bytes[0] |= (bytes[1] >> 4);
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	8c 81       	ldd	r24, Y+4	; 0x04
    2f64:	82 95       	swap	r24
    2f66:	8f 70       	andi	r24, 0x0F	; 15
    2f68:	89 2b       	or	r24, r25
    2f6a:	8b 83       	std	Y+3, r24	; 0x03

	return(bytes[0]);
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <ds3231_read_date_time>:
	return weekdayname[JND % 7];
}
#endif

	void ds3231_read_date_time(int32_t* val, char* buffer, TimeFormat format)
	{
    2f80:	4f 92       	push	r4
    2f82:	5f 92       	push	r5
    2f84:	6f 92       	push	r6
    2f86:	7f 92       	push	r7
    2f88:	8f 92       	push	r8
    2f8a:	9f 92       	push	r9
    2f8c:	af 92       	push	r10
    2f8e:	bf 92       	push	r11
    2f90:	cf 92       	push	r12
    2f92:	df 92       	push	r13
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	27 97       	sbiw	r28, 0x07	; 7
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	7c 01       	movw	r14, r24
    2fb2:	4b 01       	movw	r8, r22
    2fb4:	74 2e       	mov	r7, r20
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
    2fb6:	ae 01       	movw	r20, r28
    2fb8:	4f 5f       	subi	r20, 0xFF	; 255
    2fba:	5f 4f       	sbci	r21, 0xFF	; 255
    2fbc:	87 e0       	ldi	r24, 0x07	; 7
    2fbe:	fa 01       	movw	r30, r20
    2fc0:	11 92       	st	Z+, r1
    2fc2:	8a 95       	dec	r24
    2fc4:	e9 f7       	brne	.-6      	; 0x2fc0 <ds3231_read_date_time+0x40>
		uint8_t hour10;
		uint8_t hour;
		BOOL am_pm;
		BOOL twelvehour;

		if(!i2c_device_read(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, data, 7))
    2fc6:	27 e0       	ldi	r18, 0x07	; 7
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	80 ed       	ldi	r24, 0xD0	; 208
    2fcc:	c3 d2       	rcall	.+1414   	; 0x3554 <i2c_device_read>
    2fce:	81 11       	cpse	r24, r1
    2fd0:	16 c1       	rjmp	.+556    	; 0x31fe <ds3231_read_date_time+0x27e>
		{
			second10 = ((data[0] & 0xf0) >> 4);
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	18 2f       	mov	r17, r24
    2fd6:	12 95       	swap	r17
    2fd8:	1f 70       	andi	r17, 0x0F	; 15
			second = (data[0] & 0x0f);
    2fda:	8f 70       	andi	r24, 0x0F	; 15
    2fdc:	a8 2e       	mov	r10, r24

			minute10 = ((data[1] & 0xf0) >> 4);
    2fde:	0a 81       	ldd	r16, Y+2	; 0x02
    2fe0:	d0 2e       	mov	r13, r16
    2fe2:	d6 94       	lsr	r13
    2fe4:	d6 94       	lsr	r13
    2fe6:	d6 94       	lsr	r13
    2fe8:	d6 94       	lsr	r13
			minute = (data[1] & 0x0f);
    2fea:	0f 70       	andi	r16, 0x0F	; 15

			am_pm = ((data[2] >> 5) & 0x01);
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	85 fb       	bst	r24, 5
    2ff0:	99 27       	eor	r25, r25
    2ff2:	90 f9       	bld	r25, 0
			hour10 = ((data[2] >> 4) & 0x01);
    2ff4:	84 fb       	bst	r24, 4
    2ff6:	cc 24       	eor	r12, r12
    2ff8:	c0 f8       	bld	r12, 0
			hour = (data[2] & 0x0f);
    2ffa:	f8 2f       	mov	r31, r24
    2ffc:	ff 70       	andi	r31, 0x0F	; 15
    2ffe:	bf 2e       	mov	r11, r31

			twelvehour = ((data[2] >> 6) & 0x01);

			if(!twelvehour && am_pm)
    3000:	86 fb       	bst	r24, 6
    3002:	22 27       	eor	r18, r18
    3004:	20 f9       	bld	r18, 0
    3006:	86 fd       	sbrc	r24, 6
    3008:	05 c0       	rjmp	.+10     	; 0x3014 <ds3231_read_date_time+0x94>
    300a:	99 23       	and	r25, r25
    300c:	19 f0       	breq	.+6      	; 0x3014 <ds3231_read_date_time+0x94>
			{
				hour10 = 2;
    300e:	68 94       	set
    3010:	cc 24       	eor	r12, r12
    3012:	c1 f8       	bld	r12, 1
			}

			if(buffer)
    3014:	81 14       	cp	r8, r1
    3016:	91 04       	cpc	r9, r1
    3018:	09 f4       	brne	.+2      	; 0x301c <ds3231_read_date_time+0x9c>
    301a:	a9 c0       	rjmp	.+338    	; 0x316e <ds3231_read_date_time+0x1ee>
			{
				switch(format)
    301c:	77 20       	and	r7, r7
    301e:	21 f0       	breq	.+8      	; 0x3028 <ds3231_read_date_time+0xa8>
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	78 16       	cp	r7, r24
    3024:	b9 f0       	breq	.+46     	; 0x3054 <ds3231_read_date_time+0xd4>
    3026:	55 c0       	rjmp	.+170    	; 0x30d2 <ds3231_read_date_time+0x152>
				{
					case Minutes_Seconds:
					{
						sprintf(buffer, "%1d%1d:%1d%1d", minute10, minute, second10, second);
    3028:	1f 92       	push	r1
    302a:	af 92       	push	r10
    302c:	1f 92       	push	r1
    302e:	1f 93       	push	r17
    3030:	1f 92       	push	r1
    3032:	0f 93       	push	r16
    3034:	1f 92       	push	r1
    3036:	df 92       	push	r13
    3038:	82 e5       	ldi	r24, 0x52	; 82
    303a:	95 e0       	ldi	r25, 0x05	; 5
    303c:	9f 93       	push	r25
    303e:	8f 93       	push	r24
    3040:	9f 92       	push	r9
    3042:	8f 92       	push	r8
    3044:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
					}
					break;
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	8d c0       	rjmp	.+282    	; 0x316e <ds3231_read_date_time+0x1ee>

					case Hours_Minutes_Seconds:
					{
						if(twelvehour)  /* 12-hour */
    3054:	22 23       	and	r18, r18
    3056:	19 f1       	breq	.+70     	; 0x309e <ds3231_read_date_time+0x11e>
						{
							sprintf(buffer, "%1d%1d:%1d%1d:%1d%1d%s", hour10, hour, minute10, minute, second10, second, am_pm ? "AM" : "PM");
    3058:	99 23       	and	r25, r25
    305a:	19 f0       	breq	.+6      	; 0x3062 <ds3231_read_date_time+0xe2>
    305c:	80 e2       	ldi	r24, 0x20	; 32
    305e:	95 e0       	ldi	r25, 0x05	; 5
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <ds3231_read_date_time+0xe6>
    3062:	83 e2       	ldi	r24, 0x23	; 35
    3064:	95 e0       	ldi	r25, 0x05	; 5
    3066:	9f 93       	push	r25
    3068:	8f 93       	push	r24
    306a:	1f 92       	push	r1
    306c:	af 92       	push	r10
    306e:	1f 92       	push	r1
    3070:	1f 93       	push	r17
    3072:	1f 92       	push	r1
    3074:	0f 93       	push	r16
    3076:	1f 92       	push	r1
    3078:	df 92       	push	r13
    307a:	1f 92       	push	r1
    307c:	bf 92       	push	r11
    307e:	1f 92       	push	r1
    3080:	cf 92       	push	r12
    3082:	86 e2       	ldi	r24, 0x26	; 38
    3084:	95 e0       	ldi	r25, 0x05	; 5
    3086:	9f 93       	push	r25
    3088:	8f 93       	push	r24
    308a:	9f 92       	push	r9
    308c:	8f 92       	push	r8
    308e:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	68 c0       	rjmp	.+208    	; 0x316e <ds3231_read_date_time+0x1ee>
						}
						else            /* 24 hour */
						{
							sprintf(buffer, "%1d%1d:%1d%1d:%1d%1d", hour10, hour, minute10, minute, second10, second);
    309e:	1f 92       	push	r1
    30a0:	af 92       	push	r10
    30a2:	1f 92       	push	r1
    30a4:	1f 93       	push	r17
    30a6:	1f 92       	push	r1
    30a8:	0f 93       	push	r16
    30aa:	1f 92       	push	r1
    30ac:	df 92       	push	r13
    30ae:	1f 92       	push	r1
    30b0:	bf 92       	push	r11
    30b2:	1f 92       	push	r1
    30b4:	cf 92       	push	r12
    30b6:	8b e4       	ldi	r24, 0x4B	; 75
    30b8:	95 e0       	ldi	r25, 0x05	; 5
    30ba:	9f 93       	push	r25
    30bc:	8f 93       	push	r24
    30be:	9f 92       	push	r9
    30c0:	8f 92       	push	r8
    30c2:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	4e c0       	rjmp	.+156    	; 0x316e <ds3231_read_date_time+0x1ee>
					}
					break;

					default:    /* Day_Month_Year_Hours_Minutes_Seconds: */
					{
						date = data[4] & 0x0f;
    30d2:	8d 81       	ldd	r24, Y+5	; 0x05
    30d4:	98 2f       	mov	r25, r24
    30d6:	9f 70       	andi	r25, 0x0F	; 15
						date += 10*((data[4] & 0xf0) >> 4);
    30d8:	82 95       	swap	r24
    30da:	8f 70       	andi	r24, 0x0F	; 15
    30dc:	88 0f       	add	r24, r24
    30de:	68 2f       	mov	r22, r24
    30e0:	66 0f       	add	r22, r22
    30e2:	66 0f       	add	r22, r22
    30e4:	86 0f       	add	r24, r22
    30e6:	68 2f       	mov	r22, r24
    30e8:	69 0f       	add	r22, r25
						month = data[5] & 0x0f;
    30ea:	8e 81       	ldd	r24, Y+6	; 0x06
    30ec:	98 2f       	mov	r25, r24
    30ee:	9f 70       	andi	r25, 0x0F	; 15
						month += 10*((data[5] & 0xf0) >> 4);
    30f0:	82 95       	swap	r24
    30f2:	8f 70       	andi	r24, 0x0F	; 15
    30f4:	88 0f       	add	r24, r24
    30f6:	78 2f       	mov	r23, r24
    30f8:	77 0f       	add	r23, r23
    30fa:	77 0f       	add	r23, r23
    30fc:	87 0f       	add	r24, r23
    30fe:	78 2f       	mov	r23, r24
    3100:	79 0f       	add	r23, r25
						year += data[6] & 0x0f;
    3102:	9f 81       	ldd	r25, Y+7	; 0x07
    3104:	29 2f       	mov	r18, r25
    3106:	2f 70       	andi	r18, 0x0F	; 15
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	20 53       	subi	r18, 0x30	; 48
    310c:	38 4f       	sbci	r19, 0xF8	; 248
						year += 10*((data[6] & 0xf0) >> 4);
    310e:	92 95       	swap	r25
    3110:	9f 70       	andi	r25, 0x0F	; 15
    3112:	89 2f       	mov	r24, r25
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	ac 01       	movw	r20, r24
    3118:	44 0f       	add	r20, r20
    311a:	55 1f       	adc	r21, r21
    311c:	88 0f       	add	r24, r24
    311e:	99 1f       	adc	r25, r25
    3120:	88 0f       	add	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	84 0f       	add	r24, r20
    312a:	95 1f       	adc	r25, r21
    312c:	28 0f       	add	r18, r24
    312e:	39 1f       	adc	r19, r25
				
						sprintf(buffer, "%4d-%02d-%02dT%1d%1d:%1d%1d:%1d%1d", year, month, date, hour10, hour, minute10, minute, second10, second);
    3130:	1f 92       	push	r1
    3132:	af 92       	push	r10
    3134:	1f 92       	push	r1
    3136:	1f 93       	push	r17
    3138:	1f 92       	push	r1
    313a:	0f 93       	push	r16
    313c:	1f 92       	push	r1
    313e:	df 92       	push	r13
    3140:	1f 92       	push	r1
    3142:	bf 92       	push	r11
    3144:	1f 92       	push	r1
    3146:	cf 92       	push	r12
    3148:	1f 92       	push	r1
    314a:	6f 93       	push	r22
    314c:	1f 92       	push	r1
    314e:	7f 93       	push	r23
    3150:	3f 93       	push	r19
    3152:	2f 93       	push	r18
    3154:	8d e3       	ldi	r24, 0x3D	; 61
    3156:	95 e0       	ldi	r25, 0x05	; 5
    3158:	9f 93       	push	r25
    315a:	8f 93       	push	r24
    315c:	9f 92       	push	r9
    315e:	8f 92       	push	r8
    3160:	0e 94 6f 24 	call	0x48de	; 0x48de <sprintf>
					}
					break;
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
				}
			}

			if(val)
    316e:	e1 14       	cp	r14, r1
    3170:	f1 04       	cpc	r15, r1
    3172:	09 f4       	brne	.+2      	; 0x3176 <ds3231_read_date_time+0x1f6>
    3174:	44 c0       	rjmp	.+136    	; 0x31fe <ds3231_read_date_time+0x27e>
			{
				*val = second + 10 * second10 + 60 * (int32_t)minute + 600 * (int32_t)minute10 +  3600 * (int32_t)hour + 36000 * (int32_t)hour10;
    3176:	81 2f       	mov	r24, r17
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	ac 01       	movw	r20, r24
    317c:	44 0f       	add	r20, r20
    317e:	55 1f       	adc	r21, r21
    3180:	88 0f       	add	r24, r24
    3182:	99 1f       	adc	r25, r25
    3184:	88 0f       	add	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	88 0f       	add	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	48 0f       	add	r20, r24
    318e:	59 1f       	adc	r21, r25
    3190:	4a 0d       	add	r20, r10
    3192:	51 1d       	adc	r21, r1
    3194:	20 2f       	mov	r18, r16
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	ac e3       	ldi	r26, 0x3C	; 60
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	0e 94 cd 23 	call	0x479a	; 0x479a <__umulhisi3>
    31a0:	2a 01       	movw	r4, r20
    31a2:	55 0f       	add	r21, r21
    31a4:	66 08       	sbc	r6, r6
    31a6:	77 08       	sbc	r7, r7
    31a8:	46 0e       	add	r4, r22
    31aa:	57 1e       	adc	r5, r23
    31ac:	68 1e       	adc	r6, r24
    31ae:	79 1e       	adc	r7, r25
    31b0:	2d 2d       	mov	r18, r13
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	a8 e5       	ldi	r26, 0x58	; 88
    31b6:	b2 e0       	ldi	r27, 0x02	; 2
    31b8:	0e 94 cd 23 	call	0x479a	; 0x479a <__umulhisi3>
    31bc:	46 0e       	add	r4, r22
    31be:	57 1e       	adc	r5, r23
    31c0:	68 1e       	adc	r6, r24
    31c2:	79 1e       	adc	r7, r25
    31c4:	2b 2d       	mov	r18, r11
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	a0 e1       	ldi	r26, 0x10	; 16
    31ca:	be e0       	ldi	r27, 0x0E	; 14
    31cc:	0e 94 cd 23 	call	0x479a	; 0x479a <__umulhisi3>
    31d0:	53 01       	movw	r10, r6
    31d2:	42 01       	movw	r8, r4
    31d4:	86 0e       	add	r8, r22
    31d6:	97 1e       	adc	r9, r23
    31d8:	a8 1e       	adc	r10, r24
    31da:	b9 1e       	adc	r11, r25
    31dc:	2c 2d       	mov	r18, r12
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	a0 ea       	ldi	r26, 0xA0	; 160
    31e2:	bc e8       	ldi	r27, 0x8C	; 140
    31e4:	0e 94 cd 23 	call	0x479a	; 0x479a <__umulhisi3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	88 0d       	add	r24, r8
    31ee:	99 1d       	adc	r25, r9
    31f0:	aa 1d       	adc	r26, r10
    31f2:	bb 1d       	adc	r27, r11
    31f4:	f7 01       	movw	r30, r14
    31f6:	80 83       	st	Z, r24
    31f8:	91 83       	std	Z+1, r25	; 0x01
    31fa:	a2 83       	std	Z+2, r26	; 0x02
    31fc:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
	}
    31fe:	27 96       	adiw	r28, 0x07	; 7
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	ff 90       	pop	r15
    3214:	ef 90       	pop	r14
    3216:	df 90       	pop	r13
    3218:	cf 90       	pop	r12
    321a:	bf 90       	pop	r11
    321c:	af 90       	pop	r10
    321e:	9f 90       	pop	r9
    3220:	8f 90       	pop	r8
    3222:	7f 90       	pop	r7
    3224:	6f 90       	pop	r6
    3226:	5f 90       	pop	r5
    3228:	4f 90       	pop	r4
    322a:	08 95       	ret

0000322c <ds3231_get_temp>:
	
	
	BOOL ds3231_get_temp(int16_t * val)
	{
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	00 d0       	rcall	.+0      	; 0x3236 <ds3231_get_temp+0xa>
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	8c 01       	movw	r16, r24
		uint8_t data[2] = { 0, 0 };
    323c:	19 82       	std	Y+1, r1	; 0x01
    323e:	1a 82       	std	Y+2, r1	; 0x02
		BOOL result = i2c_device_read(DS3231_I2C_SLAVE_ADDR, RTC_TEMP_MSB, data, 2);
    3240:	22 e0       	ldi	r18, 0x02	; 2
    3242:	ae 01       	movw	r20, r28
    3244:	4f 5f       	subi	r20, 0xFF	; 255
    3246:	5f 4f       	sbci	r21, 0xFF	; 255
    3248:	61 e1       	ldi	r22, 0x11	; 17
    324a:	80 ed       	ldi	r24, 0xD0	; 208
    324c:	83 d1       	rcall	.+774    	; 0x3554 <i2c_device_read>
		
		if(!result)
    324e:	81 11       	cpse	r24, r1
    3250:	09 c0       	rjmp	.+18     	; 0x3264 <ds3231_get_temp+0x38>
		{
			*val = data[0];
    3252:	29 81       	ldd	r18, Y+1	; 0x01
    3254:	30 e0       	ldi	r19, 0x00	; 0
			*val = *val << 8;
    3256:	32 2f       	mov	r19, r18
    3258:	22 27       	eor	r18, r18
			*val |= data[1];
    325a:	9a 81       	ldd	r25, Y+2	; 0x02
    325c:	29 2b       	or	r18, r25
    325e:	f8 01       	movw	r30, r16
    3260:	31 83       	std	Z+1, r19	; 0x01
    3262:	20 83       	st	Z, r18
		}
		
		return result;
	}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	08 95       	ret

00003272 <ds3231_set_date_time>:


void ds3231_set_date_time(char * dateString, ClockSetting setting) /* "2018-03-23T18:00:00Z" */
{
    3272:	cf 93       	push	r28
    3274:	df 93       	push	r29
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
    327a:	27 97       	sbiw	r28, 0x07	; 7
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	de bf       	out	0x3e, r29	; 62
    3282:	0f be       	out	0x3f, r0	; 63
    3284:	cd bf       	out	0x3d, r28	; 61
    3286:	fc 01       	movw	r30, r24
	uint8_t data[7] = { 0, 0, 0, 1, 0, 0, 0 };
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	8c 83       	std	Y+4, r24	; 0x04
	int temp, year=2000, month, date;
	
	data[0] = dateString[18] - '0'; /* seconds */
    328c:	82 89       	ldd	r24, Z+18	; 0x12
    328e:	20 ed       	ldi	r18, 0xD0	; 208
    3290:	28 0f       	add	r18, r24
	data[0] |= ((dateString[17] - '0') << 4); /*10s of seconds */
    3292:	91 89       	ldd	r25, Z+17	; 0x11
    3294:	89 2f       	mov	r24, r25
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	c0 97       	sbiw	r24, 0x30	; 48
    329a:	82 95       	swap	r24
    329c:	92 95       	swap	r25
    329e:	90 7f       	andi	r25, 0xF0	; 240
    32a0:	98 27       	eor	r25, r24
    32a2:	80 7f       	andi	r24, 0xF0	; 240
    32a4:	98 27       	eor	r25, r24
    32a6:	82 2b       	or	r24, r18
    32a8:	89 83       	std	Y+1, r24	; 0x01
	data[1] = dateString[15] - '0'; /* minutes */
    32aa:	87 85       	ldd	r24, Z+15	; 0x0f
    32ac:	20 ed       	ldi	r18, 0xD0	; 208
    32ae:	28 0f       	add	r18, r24
	data[1] |= ((dateString[14] - '0') << 4); /* 10s of minutes */
    32b0:	96 85       	ldd	r25, Z+14	; 0x0e
    32b2:	89 2f       	mov	r24, r25
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	c0 97       	sbiw	r24, 0x30	; 48
    32b8:	82 95       	swap	r24
    32ba:	92 95       	swap	r25
    32bc:	90 7f       	andi	r25, 0xF0	; 240
    32be:	98 27       	eor	r25, r24
    32c0:	80 7f       	andi	r24, 0xF0	; 240
    32c2:	98 27       	eor	r25, r24
    32c4:	82 2b       	or	r24, r18
    32c6:	8a 83       	std	Y+2, r24	; 0x02
	data[2] = dateString[12] - '0'; /* hours */
    32c8:	84 85       	ldd	r24, Z+12	; 0x0c
    32ca:	20 ed       	ldi	r18, 0xD0	; 208
    32cc:	28 0f       	add	r18, r24
	data[2] |= ((dateString[11] - '0') << 4); /* 10s of hours - sets 24-hour format (not AM/PM) */
    32ce:	93 85       	ldd	r25, Z+11	; 0x0b
    32d0:	89 2f       	mov	r24, r25
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	c0 97       	sbiw	r24, 0x30	; 48
    32d6:	82 95       	swap	r24
    32d8:	92 95       	swap	r25
    32da:	90 7f       	andi	r25, 0xF0	; 240
    32dc:	98 27       	eor	r25, r24
    32de:	80 7f       	andi	r24, 0xF0	; 240
    32e0:	98 27       	eor	r25, r24
    32e2:	82 2b       	or	r24, r18
    32e4:	8b 83       	std	Y+3, r24	; 0x03
	//data[3] = Skip day of week
	data[4] = dateString[9] - '0'; /* day of month digit 1 */
    32e6:	81 85       	ldd	r24, Z+9	; 0x09
    32e8:	20 ed       	ldi	r18, 0xD0	; 208
    32ea:	28 0f       	add	r18, r24
	date = data[4];
	temp = dateString[8] - '0';
    32ec:	90 85       	ldd	r25, Z+8	; 0x08
    32ee:	89 2f       	mov	r24, r25
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	c0 97       	sbiw	r24, 0x30	; 48
	date += 10*temp;
	data[4] |= (temp << 4); /* day of month digit 10 */
    32f4:	82 95       	swap	r24
    32f6:	92 95       	swap	r25
    32f8:	90 7f       	andi	r25, 0xF0	; 240
    32fa:	98 27       	eor	r25, r24
    32fc:	80 7f       	andi	r24, 0xF0	; 240
    32fe:	98 27       	eor	r25, r24
    3300:	82 2b       	or	r24, r18
    3302:	8d 83       	std	Y+5, r24	; 0x05
	data[5] = dateString[6] - '0'; /* month digit 1 */
    3304:	86 81       	ldd	r24, Z+6	; 0x06
    3306:	20 ed       	ldi	r18, 0xD0	; 208
    3308:	28 0f       	add	r18, r24
	month = data[5];
	temp = dateString[5] - '0';
    330a:	95 81       	ldd	r25, Z+5	; 0x05
    330c:	89 2f       	mov	r24, r25
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	c0 97       	sbiw	r24, 0x30	; 48
	month += 10*temp;
	data[5] |= (temp << 4 ); /* month digit 10; century=0 */
    3312:	82 95       	swap	r24
    3314:	92 95       	swap	r25
    3316:	90 7f       	andi	r25, 0xF0	; 240
    3318:	98 27       	eor	r25, r24
    331a:	80 7f       	andi	r24, 0xF0	; 240
    331c:	98 27       	eor	r25, r24
    331e:	82 2b       	or	r24, r18
    3320:	8e 83       	std	Y+6, r24	; 0x06
	data[6] = dateString[3] - '0'; /* year digit 1 */
    3322:	83 81       	ldd	r24, Z+3	; 0x03
    3324:	20 ed       	ldi	r18, 0xD0	; 208
    3326:	28 0f       	add	r18, r24
	year += data[6];
	temp = dateString[2] - '0';
    3328:	92 81       	ldd	r25, Z+2	; 0x02
    332a:	89 2f       	mov	r24, r25
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	c0 97       	sbiw	r24, 0x30	; 48
	year += 10*temp;
	data[6] |= (temp << 4); /* year digit 10 */
    3330:	82 95       	swap	r24
    3332:	92 95       	swap	r25
    3334:	90 7f       	andi	r25, 0xF0	; 240
    3336:	98 27       	eor	r25, r24
    3338:	80 7f       	andi	r24, 0xF0	; 240
    333a:	98 27       	eor	r25, r24
    333c:	82 2b       	or	r24, r18
    333e:	8f 83       	std	Y+7, r24	; 0x07
	
	i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS+(setting*7), data, 7);
    3340:	86 2f       	mov	r24, r22
    3342:	88 0f       	add	r24, r24
    3344:	88 0f       	add	r24, r24
    3346:	88 0f       	add	r24, r24
    3348:	86 1b       	sub	r24, r22
    334a:	68 2f       	mov	r22, r24
    334c:	27 e0       	ldi	r18, 0x07	; 7
    334e:	ae 01       	movw	r20, r28
    3350:	4f 5f       	subi	r20, 0xFF	; 255
    3352:	5f 4f       	sbci	r21, 0xFF	; 255
    3354:	80 ed       	ldi	r24, 0xD0	; 208
    3356:	b9 d0       	rcall	.+370    	; 0x34ca <i2c_device_write>
}
    3358:	27 96       	adiw	r28, 0x07	; 7
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <ds3231_1s_sqw>:

	void ds3231_1s_sqw(BOOL enable)
	{
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	1f 92       	push	r1
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
		if(enable)
    3374:	88 23       	and	r24, r24
    3376:	49 f0       	breq	.+18     	; 0x338a <ds3231_1s_sqw+0x20>
		{
			uint8_t byte = 0x00;
    3378:	19 82       	std	Y+1, r1	; 0x01
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
    337a:	21 e0       	ldi	r18, 0x01	; 1
    337c:	ae 01       	movw	r20, r28
    337e:	4f 5f       	subi	r20, 0xFF	; 255
    3380:	5f 4f       	sbci	r21, 0xFF	; 255
    3382:	6e e0       	ldi	r22, 0x0E	; 14
    3384:	80 ed       	ldi	r24, 0xD0	; 208
    3386:	a1 d0       	rcall	.+322    	; 0x34ca <i2c_device_write>
    3388:	09 c0       	rjmp	.+18     	; 0x339c <ds3231_1s_sqw+0x32>
		}
		else
		{
			uint8_t byte = 0x04;
    338a:	84 e0       	ldi	r24, 0x04	; 4
    338c:	89 83       	std	Y+1, r24	; 0x01
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
    338e:	21 e0       	ldi	r18, 0x01	; 1
    3390:	ae 01       	movw	r20, r28
    3392:	4f 5f       	subi	r20, 0xFF	; 255
    3394:	5f 4f       	sbci	r21, 0xFF	; 255
    3396:	6e e0       	ldi	r22, 0x0E	; 14
    3398:	80 ed       	ldi	r24, 0xD0	; 208
    339a:	97 d0       	rcall	.+302    	; 0x34ca <i2c_device_write>
		}
	}
    339c:	0f 90       	pop	r0
    339e:	df 91       	pop	r29
    33a0:	cf 91       	pop	r28
    33a2:	08 95       	ret

000033a4 <wifi_enabled>:

#include "huzzah.h"
#include "mcp23017.h"

BOOL wifi_enabled(void)
{
    33a4:	cf 93       	push	r28
    33a6:	df 93       	push	r29
    33a8:	1f 92       	push	r1
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t result;
	mcp23017_readPort(&result, MCP23017_PORTB);
    33ae:	61 e0       	ldi	r22, 0x01	; 1
    33b0:	ce 01       	movw	r24, r28
    33b2:	01 96       	adiw	r24, 0x01	; 1
    33b4:	c2 d1       	rcall	.+900    	; 0x373a <mcp23017_readPort>
	result &= (1 << WIFI_POWER_ENABLE);
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
	return result;
}
    33b8:	88 70       	andi	r24, 0x08	; 8
    33ba:	0f 90       	pop	r0
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	08 95       	ret

000033c2 <wifi_reset>:

void wifi_reset(BOOL reset)
{
	if(reset) // assert reset low
    33c2:	88 23       	and	r24, r24
    33c4:	29 f0       	breq	.+10     	; 0x33d0 <wifi_reset+0xe>
	{
		mcp23017_set( MCP23017_PORTB, WIFI_RESET, LOW);
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	62 e0       	ldi	r22, 0x02	; 2
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	79 c1       	rjmp	.+754    	; 0x36c0 <mcp23017_set>
    33ce:	08 95       	ret
	}
	else // de-assert reset high
	{
		mcp23017_set(MCP23017_PORTB, WIFI_RESET, HIGH);
    33d0:	41 e0       	ldi	r20, 0x01	; 1
    33d2:	62 e0       	ldi	r22, 0x02	; 2
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	74 c1       	rjmp	.+744    	; 0x36c0 <mcp23017_set>
    33d8:	08 95       	ret

000033da <wifi_power>:
	}
}

void wifi_power(BOOL on)
{
	mcp23017_set(MCP23017_PORTB, WIFI_POWER_ENABLE, on);
    33da:	48 2f       	mov	r20, r24
    33dc:	63 e0       	ldi	r22, 0x03	; 3
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	6f c1       	rjmp	.+734    	; 0x36c0 <mcp23017_set>
    33e2:	08 95       	ret

000033e4 <i2c_init>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
    33e4:	e4 e6       	ldi	r30, 0x64	; 100
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
    33ea:	8f 77       	andi	r24, 0x7F	; 127
    33ec:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
    33ee:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 0x25;
    33f2:	85 e2       	ldi	r24, 0x25	; 37
    33f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
    33f8:	84 e0       	ldi	r24, 0x04	; 4
    33fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	g_i2c_not_timed_out = TRUE;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <g_i2c_not_timed_out>
    3404:	08 95       	ret

00003406 <i2c_start>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    3406:	84 ea       	ldi	r24, 0xA4	; 164
    3408:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    340c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3410:	88 23       	and	r24, r24
    3412:	24 f0       	brlt	.+8      	; 0x341c <i2c_start+0x16>
    3414:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <g_i2c_not_timed_out>
    3418:	81 11       	cpse	r24, r1
    341a:	f8 cf       	rjmp	.-16     	; 0x340c <i2c_start+0x6>
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
    341c:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <g_i2c_not_timed_out>
    3420:	81 11       	cpse	r24, r1
    3422:	07 c0       	rjmp	.+14     	; 0x3432 <i2c_start+0x2c>
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
    3424:	80 e9       	ldi	r24, 0x90	; 144
    3426:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			g_i2c_not_timed_out = TRUE;
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <g_i2c_not_timed_out>
			return( TRUE);
    3430:	08 95       	ret
		}

		return( FALSE);
    3432:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
    3434:	08 95       	ret

00003436 <i2c_stop>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    3436:	84 e9       	ldi	r24, 0x94	; 148
    3438:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    343c:	08 95       	ret

0000343e <i2c_write_success>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
    343e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
    3442:	84 e8       	ldi	r24, 0x84	; 132
    3444:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    3448:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    344c:	88 23       	and	r24, r24
    344e:	24 f0       	brlt	.+8      	; 0x3458 <i2c_write_success+0x1a>
    3450:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <g_i2c_not_timed_out>
    3454:	81 11       	cpse	r24, r1
    3456:	f8 cf       	rjmp	.-16     	; 0x3448 <i2c_write_success+0xa>
		{
			;
		}

		uint8_t stat = TW_STATUS;
    3458:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    345c:	88 7f       	andi	r24, 0xF8	; 248

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    345e:	86 17       	cp	r24, r22
    3460:	39 f0       	breq	.+14     	; 0x3470 <i2c_write_success+0x32>
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    3462:	84 e9       	ldi	r24, 0x94	; 148
    3464:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			g_i2c_not_timed_out = TRUE;
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <g_i2c_not_timed_out>
			return(TRUE);
    346e:	08 95       	ret
		}

		return( FALSE);
    3470:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    3472:	08 95       	ret

00003474 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    3474:	84 ec       	ldi	r24, 0xC4	; 196
    3476:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    347a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    347e:	88 23       	and	r24, r24
    3480:	24 f0       	brlt	.+8      	; 0x348a <i2c_read_ack+0x16>
    3482:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <g_i2c_not_timed_out>
    3486:	81 11       	cpse	r24, r1
    3488:	f8 cf       	rjmp	.-16     	; 0x347a <i2c_read_ack+0x6>
		{
			;
		}
		
		return(TWDR);
    348a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			;
		}
		
		return( TWDR);
#endif
}
    348e:	08 95       	ret

00003490 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    3490:	84 e8       	ldi	r24, 0x84	; 132
    3492:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    3496:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    349a:	88 23       	and	r24, r24
    349c:	24 f0       	brlt	.+8      	; 0x34a6 <i2c_read_nack+0x16>
    349e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <g_i2c_not_timed_out>
    34a2:	81 11       	cpse	r24, r1
    34a4:	f8 cf       	rjmp	.-16     	; 0x3496 <i2c_read_nack+0x6>
		{
			;
		}
		
		return( TWDR);
    34a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			;
		}
		
		return( TWDR);
#endif
}
    34aa:	08 95       	ret

000034ac <i2c_status>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
    34ac:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    34b0:	28 7f       	andi	r18, 0xF8	; 248
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	28 17       	cp	r18, r24
    34b8:	39 07       	cpc	r19, r25
    34ba:	29 f0       	breq	.+10     	; 0x34c6 <i2c_status+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    34bc:	84 e9       	ldi	r24, 0x94	; 148
    34be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return(TRUE);
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	08 95       	ret
	}

	return(FALSE);
    34c6:	80 e0       	ldi	r24, 0x00	; 0
}
    34c8:	08 95       	ret

000034ca <i2c_device_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    34ca:	cf 93       	push	r28
    34cc:	df 93       	push	r29
    34ce:	00 d0       	rcall	.+0      	; 0x34d0 <i2c_device_write+0x6>
    34d0:	00 d0       	rcall	.+0      	; 0x34d2 <i2c_device_write+0x8>
    34d2:	00 d0       	rcall	.+0      	; 0x34d4 <i2c_device_write+0xa>
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	8a 83       	std	Y+2, r24	; 0x02
    34da:	6b 83       	std	Y+3, r22	; 0x03
    34dc:	5d 83       	std	Y+5, r21	; 0x05
    34de:	4c 83       	std	Y+4, r20	; 0x04
    34e0:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    34e2:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    34e4:	90 df       	rcall	.-224    	; 0x3406 <i2c_start>
		if(i2c_status(TW_START))
    34e6:	88 e0       	ldi	r24, 0x08	; 8
    34e8:	e1 df       	rcall	.-62     	; 0x34ac <i2c_status>
    34ea:	88 23       	and	r24, r24
    34ec:	11 f0       	breq	.+4      	; 0x34f2 <i2c_device_write+0x28>
		{
			return(TRUE);
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	28 c0       	rjmp	.+80     	; 0x3542 <i2c_device_write+0x78>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    34f2:	68 e1       	ldi	r22, 0x18	; 24
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	a3 df       	rcall	.-186    	; 0x343e <i2c_write_success>
    34f8:	88 23       	and	r24, r24
    34fa:	11 f0       	breq	.+4      	; 0x3500 <i2c_device_write+0x36>
		{
			return(TRUE);
    34fc:	81 e0       	ldi	r24, 0x01	; 1
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    34fe:	21 c0       	rjmp	.+66     	; 0x3542 <i2c_device_write+0x78>
    3500:	68 e2       	ldi	r22, 0x28	; 40
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	9c df       	rcall	.-200    	; 0x343e <i2c_write_success>
    3506:	88 23       	and	r24, r24
    3508:	a1 f0       	breq	.+40     	; 0x3532 <i2c_device_write+0x68>
		{
			return(TRUE);
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	1a c0       	rjmp	.+52     	; 0x3542 <i2c_device_write+0x78>
		}

		while(bytes2write--)
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	91 e0       	ldi	r25, 0x01	; 1
    3512:	98 0f       	add	r25, r24
    3514:	99 83       	std	Y+1, r25	; 0x01
    3516:	88 2f       	mov	r24, r24
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	2c 81       	ldd	r18, Y+4	; 0x04
    351c:	3d 81       	ldd	r19, Y+5	; 0x05
    351e:	82 0f       	add	r24, r18
    3520:	93 1f       	adc	r25, r19
    3522:	fc 01       	movw	r30, r24
    3524:	80 81       	ld	r24, Z
    3526:	68 e2       	ldi	r22, 0x28	; 40
    3528:	8a df       	rcall	.-236    	; 0x343e <i2c_write_success>
    352a:	88 23       	and	r24, r24
    352c:	11 f0       	breq	.+4      	; 0x3532 <i2c_device_write+0x68>
			{
				return(TRUE);
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	08 c0       	rjmp	.+16     	; 0x3542 <i2c_device_write+0x78>
		if(i2c_write_success(addr, TW_MT_DATA_ACK))
		{
			return(TRUE);
		}

		while(bytes2write--)
    3532:	8e 81       	ldd	r24, Y+6	; 0x06
    3534:	9f ef       	ldi	r25, 0xFF	; 255
    3536:	98 0f       	add	r25, r24
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	88 23       	and	r24, r24
			{
				return(TRUE);
			}
		}

		i2c_stop();
    353c:	41 f7       	brne	.-48     	; 0x350e <i2c_device_write+0x44>
    353e:	7b df       	rcall	.-266    	; 0x3436 <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    3540:	80 e0       	ldi	r24, 0x00	; 0
}
    3542:	26 96       	adiw	r28, 0x06	; 6
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	f8 94       	cli
    3548:	de bf       	out	0x3e, r29	; 62
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	cd bf       	out	0x3d, r28	; 61
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	08 95       	ret

00003554 <i2c_device_read>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	00 d0       	rcall	.+0      	; 0x355e <i2c_device_read+0xa>
    355e:	00 d0       	rcall	.+0      	; 0x3560 <i2c_device_read+0xc>
    3560:	00 d0       	rcall	.+0      	; 0x3562 <i2c_device_read+0xe>
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	8a 83       	std	Y+2, r24	; 0x02
    3568:	6b 83       	std	Y+3, r22	; 0x03
    356a:	5d 83       	std	Y+5, r21	; 0x05
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    356c:	4c 83       	std	Y+4, r20	; 0x04

		i2c_start();
    356e:	2e 83       	std	Y+6, r18	; 0x06
    3570:	19 82       	std	Y+1, r1	; 0x01
		if(i2c_status(TW_START))
    3572:	49 df       	rcall	.-366    	; 0x3406 <i2c_start>
    3574:	88 e0       	ldi	r24, 0x08	; 8
    3576:	9a df       	rcall	.-204    	; 0x34ac <i2c_status>
    3578:	88 23       	and	r24, r24
		{
			return(TRUE);
    357a:	11 f0       	breq	.+4      	; 0x3580 <i2c_device_read+0x2c>
    357c:	81 e0       	ldi	r24, 0x01	; 1
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    357e:	4d c0       	rjmp	.+154    	; 0x361a <i2c_device_read+0xc6>
    3580:	68 e1       	ldi	r22, 0x18	; 24
    3582:	8a 81       	ldd	r24, Y+2	; 0x02
    3584:	5c df       	rcall	.-328    	; 0x343e <i2c_write_success>
    3586:	88 23       	and	r24, r24
		{
			return(TRUE);
    3588:	11 f0       	breq	.+4      	; 0x358e <i2c_device_read+0x3a>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	46 c0       	rjmp	.+140    	; 0x361a <i2c_device_read+0xc6>
    358e:	68 e2       	ldi	r22, 0x28	; 40
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	55 df       	rcall	.-342    	; 0x343e <i2c_write_success>
		{
			return(TRUE);
    3594:	88 23       	and	r24, r24
    3596:	11 f0       	breq	.+4      	; 0x359c <i2c_device_read+0x48>
		}

		i2c_start();
    3598:	81 e0       	ldi	r24, 0x01	; 1
		if(i2c_status(TW_REP_START))
    359a:	3f c0       	rjmp	.+126    	; 0x361a <i2c_device_read+0xc6>
    359c:	34 df       	rcall	.-408    	; 0x3406 <i2c_start>
    359e:	80 e1       	ldi	r24, 0x10	; 16
    35a0:	85 df       	rcall	.-246    	; 0x34ac <i2c_status>
    35a2:	88 23       	and	r24, r24
		{
			return(TRUE);
    35a4:	11 f0       	breq	.+4      	; 0x35aa <i2c_device_read+0x56>
    35a6:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    35a8:	38 c0       	rjmp	.+112    	; 0x361a <i2c_device_read+0xc6>
    35aa:	8a 81       	ldd	r24, Y+2	; 0x02
    35ac:	81 60       	ori	r24, 0x01	; 1
    35ae:	60 e4       	ldi	r22, 0x40	; 64
    35b0:	46 df       	rcall	.-372    	; 0x343e <i2c_write_success>
    35b2:	88 23       	and	r24, r24
    35b4:	51 f1       	breq	.+84     	; 0x360a <i2c_device_read+0xb6>
		{
			return(TRUE);
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	30 c0       	rjmp	.+96     	; 0x361a <i2c_device_read+0xc6>
		}

		while(bytes2read--)
		{
			if(bytes2read)
    35ba:	8e 81       	ldd	r24, Y+6	; 0x06
    35bc:	88 23       	and	r24, r24
			{
				data[index++] = i2c_read_ack();
    35be:	a1 f0       	breq	.+40     	; 0x35e8 <i2c_device_read+0x94>
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	98 0f       	add	r25, r24
    35c6:	99 83       	std	Y+1, r25	; 0x01
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	2c 81       	ldd	r18, Y+4	; 0x04
    35ce:	3d 81       	ldd	r19, Y+5	; 0x05
    35d0:	89 01       	movw	r16, r18
    35d2:	08 0f       	add	r16, r24
    35d4:	19 1f       	adc	r17, r25
    35d6:	4e df       	rcall	.-356    	; 0x3474 <i2c_read_ack>
    35d8:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_ACK))
    35da:	80 83       	st	Z, r24
    35dc:	80 e5       	ldi	r24, 0x50	; 80
    35de:	66 df       	rcall	.-308    	; 0x34ac <i2c_status>
    35e0:	88 23       	and	r24, r24
				{
					return(TRUE);
    35e2:	99 f0       	breq	.+38     	; 0x360a <i2c_device_read+0xb6>
    35e4:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    35e6:	19 c0       	rjmp	.+50     	; 0x361a <i2c_device_read+0xc6>
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	88 2f       	mov	r24, r24
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	2c 81       	ldd	r18, Y+4	; 0x04
    35f0:	3d 81       	ldd	r19, Y+5	; 0x05
    35f2:	89 01       	movw	r16, r18
    35f4:	08 0f       	add	r16, r24
    35f6:	19 1f       	adc	r17, r25
    35f8:	4b df       	rcall	.-362    	; 0x3490 <i2c_read_nack>
    35fa:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_NACK))
    35fc:	80 83       	st	Z, r24
    35fe:	88 e5       	ldi	r24, 0x58	; 88
    3600:	55 df       	rcall	.-342    	; 0x34ac <i2c_status>
    3602:	88 23       	and	r24, r24
    3604:	11 f0       	breq	.+4      	; 0x360a <i2c_device_read+0xb6>
				{
					return(TRUE);
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	08 c0       	rjmp	.+16     	; 0x361a <i2c_device_read+0xc6>
		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
		{
			return(TRUE);
		}

		while(bytes2read--)
    360a:	8e 81       	ldd	r24, Y+6	; 0x06
    360c:	9f ef       	ldi	r25, 0xFF	; 255
    360e:	98 0f       	add	r25, r24
    3610:	9e 83       	std	Y+6, r25	; 0x06
    3612:	88 23       	and	r24, r24
    3614:	91 f6       	brne	.-92     	; 0x35ba <i2c_device_read+0x66>
					return(TRUE);
				}
			}
		}

		i2c_stop();
    3616:	0f df       	rcall	.-482    	; 0x3436 <i2c_stop>
    3618:	80 e0       	ldi	r24, 0x00	; 0

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    361a:	26 96       	adiw	r28, 0x06	; 6
}
    361c:	0f b6       	in	r0, 0x3f	; 63
    361e:	f8 94       	cli
    3620:	de bf       	out	0x3e, r29	; 62
    3622:	0f be       	out	0x3f, r0	; 63
    3624:	cd bf       	out	0x3d, r28	; 61
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	08 95       	ret

00003630 <mcp23017_init>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	void __attribute__((optimize("O0"))) mcp23017_init(void)
#else
	void mcp23017_init(void)
#endif
{
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
	g_data[0] = 0b00100000; // disable SEQOP
    3638:	80 e2       	ldi	r24, 0x20	; 32
    363a:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <g_data>
	if(i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_IOCON, g_data, 1))
    363e:	21 e0       	ldi	r18, 0x01	; 1
    3640:	4d e6       	ldi	r20, 0x6D	; 109
    3642:	57 e0       	ldi	r21, 0x07	; 7
    3644:	6b e0       	ldi	r22, 0x0B	; 11
    3646:	88 e4       	ldi	r24, 0x48	; 72
    3648:	40 df       	rcall	.-384    	; 0x34ca <i2c_device_write>
    364a:	88 23       	and	r24, r24
    364c:	11 f0       	breq	.+4      	; 0x3652 <mcp23017_init+0x22>
	{
		g_data[0] = 0;
    364e:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <g_data>
	*	PA4 - HF enable (high)
	*	PA5 - Test Point
	*	PA6 - T enable (transmit switch - high)
	*	PA7 - R enable (receive switch - high)
	*/
	g_data[0] = 0b00000111;
    3652:	87 e0       	ldi	r24, 0x07	; 7
    3654:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <g_data>
	if(i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_IODIRA, g_data, 1))
    3658:	21 e0       	ldi	r18, 0x01	; 1
    365a:	4d e6       	ldi	r20, 0x6D	; 109
    365c:	57 e0       	ldi	r21, 0x07	; 7
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	88 e4       	ldi	r24, 0x48	; 72
    3662:	33 df       	rcall	.-410    	; 0x34ca <i2c_device_write>
    3664:	88 23       	and	r24, r24
    3666:	11 f0       	breq	.+4      	; 0x366c <mcp23017_init+0x3c>
	{
		g_data[0] = 0;
    3668:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <g_data>
	}

	g_data[0] = 0b00000000;
    366c:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <g_data>
	if(i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_OLATA, g_data, 1))
    3670:	21 e0       	ldi	r18, 0x01	; 1
    3672:	4d e6       	ldi	r20, 0x6D	; 109
    3674:	57 e0       	ldi	r21, 0x07	; 7
    3676:	64 e1       	ldi	r22, 0x14	; 20
    3678:	88 e4       	ldi	r24, 0x48	; 72
    367a:	27 df       	rcall	.-434    	; 0x34ca <i2c_device_write>
    367c:	88 23       	and	r24, r24
    367e:	11 f0       	breq	.+4      	; 0x3684 <mcp23017_init+0x54>
	{
		g_data[0] = 0;
    3680:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <g_data>
	*	PB4 - DI Master/Clone Output (high = Master; low = Clone)
	*	PB5 - Audio Amp Enable Output (high)
	*	PB6 - Headphone Power Latch (high)
	*	PB7 - Client UART Enable (low)
	*/
	g_data[0] = 0b00000011;
    3684:	83 e0       	ldi	r24, 0x03	; 3
    3686:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <g_data>
	if(i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_IODIRB, g_data, 1))
    368a:	21 e0       	ldi	r18, 0x01	; 1
    368c:	4d e6       	ldi	r20, 0x6D	; 109
    368e:	57 e0       	ldi	r21, 0x07	; 7
    3690:	61 e0       	ldi	r22, 0x01	; 1
    3692:	88 e4       	ldi	r24, 0x48	; 72
    3694:	1a df       	rcall	.-460    	; 0x34ca <i2c_device_write>
    3696:	88 23       	and	r24, r24
    3698:	11 f0       	breq	.+4      	; 0x369e <mcp23017_init+0x6e>
	{
		g_data[0] = 0;
    369a:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <g_data>
	}

	g_data[0] = 0b10000000; // 0b10001100;
    369e:	80 e8       	ldi	r24, 0x80	; 128
    36a0:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <g_data>
	if(i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_OLATB, g_data, 1))
    36a4:	21 e0       	ldi	r18, 0x01	; 1
    36a6:	4d e6       	ldi	r20, 0x6D	; 109
    36a8:	57 e0       	ldi	r21, 0x07	; 7
    36aa:	65 e1       	ldi	r22, 0x15	; 21
    36ac:	88 e4       	ldi	r24, 0x48	; 72
    36ae:	0d df       	rcall	.-486    	; 0x34ca <i2c_device_write>
    36b0:	88 23       	and	r24, r24
    36b2:	11 f0       	breq	.+4      	; 0x36b8 <mcp23017_init+0x88>
	{
		g_data[0] = 0;
    36b4:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <g_data>
	}
}
    36b8:	00 00       	nop
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	08 95       	ret

000036c0 <mcp23017_set>:

void mcp23017_set( ExpanderPort port, DIbit bit, BOOL value )
{
    36c0:	ff 92       	push	r15
    36c2:	0f 93       	push	r16
    36c4:	1f 93       	push	r17
    36c6:	df 93       	push	r29
    36c8:	d8 2f       	mov	r29, r24
    36ca:	f4 2e       	mov	r15, r20
	uint8_t mask = (1 << bit);	
    36cc:	01 e0       	ldi	r16, 0x01	; 1
    36ce:	10 e0       	ldi	r17, 0x00	; 0
    36d0:	02 c0       	rjmp	.+4      	; 0x36d6 <mcp23017_set+0x16>
    36d2:	00 0f       	add	r16, r16
    36d4:	11 1f       	adc	r17, r17
    36d6:	6a 95       	dec	r22

	mcp23017_readPort(g_data, port);
    36d8:	e2 f7       	brpl	.-8      	; 0x36d2 <mcp23017_set+0x12>
    36da:	68 2f       	mov	r22, r24
    36dc:	8d e6       	ldi	r24, 0x6D	; 109
    36de:	97 e0       	ldi	r25, 0x07	; 7
    36e0:	2c d0       	rcall	.+88     	; 0x373a <mcp23017_readPort>
	
	if(value)
    36e2:	ff 20       	and	r15, r15
    36e4:	31 f0       	breq	.+12     	; 0x36f2 <mcp23017_set+0x32>
	{
		g_data[0] |= mask;
    36e6:	ed e6       	ldi	r30, 0x6D	; 109
    36e8:	f7 e0       	ldi	r31, 0x07	; 7
    36ea:	80 81       	ld	r24, Z
    36ec:	08 2b       	or	r16, r24
    36ee:	00 83       	st	Z, r16
    36f0:	06 c0       	rjmp	.+12     	; 0x36fe <mcp23017_set+0x3e>
	}
	else
	{
		g_data[0] &= ~mask;
    36f2:	ed e6       	ldi	r30, 0x6D	; 109
    36f4:	f7 e0       	ldi	r31, 0x07	; 7
    36f6:	00 95       	com	r16
    36f8:	80 81       	ld	r24, Z
    36fa:	08 23       	and	r16, r24
	}
	
	mcp23017_writePort(g_data[0], port);
    36fc:	00 83       	st	Z, r16
    36fe:	6d 2f       	mov	r22, r29
    3700:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <g_data>
    3704:	05 d0       	rcall	.+10     	; 0x3710 <mcp23017_writePort>
}
    3706:	df 91       	pop	r29
    3708:	1f 91       	pop	r17
    370a:	0f 91       	pop	r16
    370c:	ff 90       	pop	r15
    370e:	08 95       	ret

00003710 <mcp23017_writePort>:

void mcp23017_writePort( uint8_t databyte, ExpanderPort port)
{
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
    3714:	1f 92       	push	r1
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, (port == MCP23017_PORTA) ? ADDR_GPIOA:ADDR_GPIOB, &databyte, 1);
    371c:	61 11       	cpse	r22, r1
    371e:	02 c0       	rjmp	.+4      	; 0x3724 <mcp23017_writePort+0x14>
    3720:	62 e1       	ldi	r22, 0x12	; 18
    3722:	01 c0       	rjmp	.+2      	; 0x3726 <mcp23017_writePort+0x16>
    3724:	63 e1       	ldi	r22, 0x13	; 19
    3726:	21 e0       	ldi	r18, 0x01	; 1
    3728:	ae 01       	movw	r20, r28
    372a:	4f 5f       	subi	r20, 0xFF	; 255
    372c:	5f 4f       	sbci	r21, 0xFF	; 255
    372e:	88 e4       	ldi	r24, 0x48	; 72
    3730:	cc de       	rcall	.-616    	; 0x34ca <i2c_device_write>
}
    3732:	0f 90       	pop	r0
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	08 95       	ret

0000373a <mcp23017_readPort>:

BOOL mcp23017_readPort(uint8_t *databyte, ExpanderPort port)
{
	return(i2c_device_read(MCP23017_I2C_SLAVE_ADDR_A100, (port == MCP23017_PORTA) ? ADDR_GPIOA:ADDR_GPIOB, databyte, 1));
    373a:	61 11       	cpse	r22, r1
    373c:	02 c0       	rjmp	.+4      	; 0x3742 <mcp23017_readPort+0x8>
    373e:	62 e1       	ldi	r22, 0x12	; 18
    3740:	01 c0       	rjmp	.+2      	; 0x3744 <mcp23017_readPort+0xa>
    3742:	63 e1       	ldi	r22, 0x13	; 19
    3744:	21 e0       	ldi	r18, 0x01	; 1
    3746:	ac 01       	movw	r20, r24
    3748:	88 e4       	ldi	r24, 0x48	; 72
    374a:	04 cf       	rjmp	.-504    	; 0x3554 <i2c_device_read>
}
    374c:	08 95       	ret

0000374e <si5351_get_frequency>:
 * Returns TRUE on failure
 *
 */
	Frequency_Hz si5351_get_frequency(Si5351_clock clock)
	{
		return(clock_out[clock]);
    374e:	e8 2f       	mov	r30, r24
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	ee 0f       	add	r30, r30
    3754:	ff 1f       	adc	r31, r31
    3756:	ee 0f       	add	r30, r30
    3758:	ff 1f       	adc	r31, r31
    375a:	e1 59       	subi	r30, 0x91	; 145
    375c:	f8 4f       	sbci	r31, 0xF8	; 248
    375e:	60 81       	ld	r22, Z
    3760:	71 81       	ldd	r23, Z+1	; 0x01
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
	}
    3766:	08 95       	ret

00003768 <si5351_set_correction>:
 * EEPROM during initialization for use by the tuning
 * algorithms.
 */
	void si5351_set_correction(int32_t corr)
	{
		g_si5351_ref_correction = corr;
    3768:	60 93 80 07 	sts	0x0780, r22	; 0x800780 <g_si5351_ref_correction>
    376c:	70 93 81 07 	sts	0x0781, r23	; 0x800781 <g_si5351_ref_correction+0x1>
    3770:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <g_si5351_ref_correction+0x2>
    3774:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <g_si5351_ref_correction+0x3>
    3778:	08 95       	ret

0000377a <si5351_get_correction>:
 *
 * Returns the oscillator correction factor.
 */
	int32_t si5351_get_correction(void)
	{
		return(g_si5351_ref_correction);
    377a:	60 91 80 07 	lds	r22, 0x0780	; 0x800780 <g_si5351_ref_correction>
    377e:	70 91 81 07 	lds	r23, 0x0781	; 0x800781 <g_si5351_ref_correction+0x1>
    3782:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <g_si5351_ref_correction+0x2>
    3786:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <g_si5351_ref_correction+0x3>
	}
    378a:	08 95       	ret

0000378c <reduce_by_gcd>:
 *
 * Simple implementation of Euclid's Algorithm for calculating GCD of two uint32's
 *
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
    378c:	4f 92       	push	r4
    378e:	5f 92       	push	r5
    3790:	6f 92       	push	r6
    3792:	7f 92       	push	r7
    3794:	8f 92       	push	r8
    3796:	9f 92       	push	r9
    3798:	af 92       	push	r10
    379a:	bf 92       	push	r11
    379c:	cf 92       	push	r12
    379e:	df 92       	push	r13
    37a0:	ef 92       	push	r14
    37a2:	ff 92       	push	r15
    37a4:	0f 93       	push	r16
    37a6:	1f 93       	push	r17
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	8c 01       	movw	r16, r24
    37ae:	eb 01       	movw	r28, r22
		uint32_t r;
		uint32_t b = *m;
    37b0:	fc 01       	movw	r30, r24
    37b2:	40 80       	ld	r4, Z
    37b4:	51 80       	ldd	r5, Z+1	; 0x01
    37b6:	62 80       	ldd	r6, Z+2	; 0x02
    37b8:	73 80       	ldd	r7, Z+3	; 0x03
		uint32_t c = *n;
    37ba:	88 80       	ld	r8, Y
    37bc:	99 80       	ldd	r9, Y+1	; 0x01
    37be:	aa 80       	ldd	r10, Y+2	; 0x02
    37c0:	bb 80       	ldd	r11, Y+3	; 0x03

		if(!b || !c)
    37c2:	41 14       	cp	r4, r1
    37c4:	51 04       	cpc	r5, r1
    37c6:	61 04       	cpc	r6, r1
    37c8:	71 04       	cpc	r7, r1
    37ca:	c1 f1       	breq	.+112    	; 0x383c <reduce_by_gcd+0xb0>
    37cc:	81 14       	cp	r8, r1
    37ce:	91 04       	cpc	r9, r1
    37d0:	a1 04       	cpc	r10, r1
    37d2:	b1 04       	cpc	r11, r1
    37d4:	99 f1       	breq	.+102    	; 0x383c <reduce_by_gcd+0xb0>
		{
			return;
		}

		for(r = b % c; r; b = c, c = r, r = b % c)
    37d6:	c3 01       	movw	r24, r6
    37d8:	b2 01       	movw	r22, r4
    37da:	a5 01       	movw	r20, r10
    37dc:	94 01       	movw	r18, r8
    37de:	99 d7       	rcall	.+3890   	; 0x4712 <__udivmodsi4>
    37e0:	6b 01       	movw	r12, r22
    37e2:	7c 01       	movw	r14, r24
    37e4:	0b c0       	rjmp	.+22     	; 0x37fc <reduce_by_gcd+0x70>
    37e6:	c5 01       	movw	r24, r10
    37e8:	b4 01       	movw	r22, r8
    37ea:	a7 01       	movw	r20, r14
    37ec:	96 01       	movw	r18, r12
    37ee:	91 d7       	rcall	.+3874   	; 0x4712 <__udivmodsi4>
    37f0:	46 01       	movw	r8, r12
    37f2:	57 01       	movw	r10, r14
    37f4:	c6 2e       	mov	r12, r22
    37f6:	d7 2e       	mov	r13, r23
    37f8:	e8 2e       	mov	r14, r24
    37fa:	f9 2e       	mov	r15, r25
    37fc:	c1 14       	cp	r12, r1
    37fe:	d1 04       	cpc	r13, r1
    3800:	e1 04       	cpc	r14, r1
    3802:	f1 04       	cpc	r15, r1
    3804:	81 f7       	brne	.-32     	; 0x37e6 <reduce_by_gcd+0x5a>
		{
			;
		}

		if(c > 1)
    3806:	f2 e0       	ldi	r31, 0x02	; 2
    3808:	8f 16       	cp	r8, r31
    380a:	91 04       	cpc	r9, r1
    380c:	a1 04       	cpc	r10, r1
    380e:	b1 04       	cpc	r11, r1
    3810:	a8 f0       	brcs	.+42     	; 0x383c <reduce_by_gcd+0xb0>
		{
			*m /= c;
    3812:	c3 01       	movw	r24, r6
    3814:	b2 01       	movw	r22, r4
    3816:	a5 01       	movw	r20, r10
    3818:	94 01       	movw	r18, r8
    381a:	7b d7       	rcall	.+3830   	; 0x4712 <__udivmodsi4>
    381c:	f8 01       	movw	r30, r16
    381e:	20 83       	st	Z, r18
    3820:	31 83       	std	Z+1, r19	; 0x01
    3822:	42 83       	std	Z+2, r20	; 0x02
    3824:	53 83       	std	Z+3, r21	; 0x03
			*n /= c;
    3826:	68 81       	ld	r22, Y
    3828:	79 81       	ldd	r23, Y+1	; 0x01
    382a:	8a 81       	ldd	r24, Y+2	; 0x02
    382c:	9b 81       	ldd	r25, Y+3	; 0x03
    382e:	a5 01       	movw	r20, r10
    3830:	94 01       	movw	r18, r8
    3832:	6f d7       	rcall	.+3806   	; 0x4712 <__udivmodsi4>
    3834:	28 83       	st	Y, r18
    3836:	39 83       	std	Y+1, r19	; 0x01
    3838:	4a 83       	std	Y+2, r20	; 0x02
    383a:	5b 83       	std	Y+3, r21	; 0x03
		}

		return;
	}
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	ef 90       	pop	r14
    3848:	df 90       	pop	r13
    384a:	cf 90       	pop	r12
    384c:	bf 90       	pop	r11
    384e:	af 90       	pop	r10
    3850:	9f 90       	pop	r9
    3852:	8f 90       	pop	r8
    3854:	7f 90       	pop	r7
    3856:	6f 90       	pop	r6
    3858:	5f 90       	pop	r5
    385a:	4f 90       	pop	r4
    385c:	08 95       	ret

0000385e <pll_calc>:
#ifdef DEBUGGING_ONLY
		Frequency_Hz pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
#else
		BOOL pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
#endif
	{
    385e:	4f 92       	push	r4
    3860:	5f 92       	push	r5
    3862:	6f 92       	push	r6
    3864:	7f 92       	push	r7
    3866:	8f 92       	push	r8
    3868:	9f 92       	push	r9
    386a:	af 92       	push	r10
    386c:	bf 92       	push	r11
    386e:	cf 92       	push	r12
    3870:	df 92       	push	r13
    3872:	ef 92       	push	r14
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    387a:	cf 93       	push	r28
    387c:	df 93       	push	r29
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	28 97       	sbiw	r28, 0x08	; 8
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	8a 01       	movw	r16, r20
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = 0;
#endif
		Frequency_Hz ref_freq = xtal_freq;
    3890:	80 90 46 01 	lds	r8, 0x0146	; 0x800146 <xtal_freq>
    3894:	90 90 47 01 	lds	r9, 0x0147	; 0x800147 <xtal_freq+0x1>
    3898:	a0 90 48 01 	lds	r10, 0x0148	; 0x800148 <xtal_freq+0x2>
    389c:	b0 90 49 01 	lds	r11, 0x0149	; 0x800149 <xtal_freq+0x3>
				return(TRUE);
			}
#endif

		/* Determine integer part of feedback equation */
		a = vco_freq / ref_freq;
    38a0:	a5 01       	movw	r20, r10
    38a2:	94 01       	movw	r18, r8
    38a4:	36 d7       	rcall	.+3692   	; 0x4712 <__udivmodsi4>
    38a6:	69 01       	movw	r12, r18
    38a8:	7a 01       	movw	r14, r20
				return(TRUE);
			}
#endif

		/* Find best approximation for b/c = fVCO mod fIN */
		b = vco_freq % ref_freq;
    38aa:	69 83       	std	Y+1, r22	; 0x01
    38ac:	7a 83       	std	Y+2, r23	; 0x02
    38ae:	8b 83       	std	Y+3, r24	; 0x03
    38b0:	9c 83       	std	Y+4, r25	; 0x04
		c = ref_freq;
    38b2:	8d 82       	std	Y+5, r8	; 0x05
    38b4:	9e 82       	std	Y+6, r9	; 0x06
    38b6:	af 82       	std	Y+7, r10	; 0x07
    38b8:	b8 86       	std	Y+8, r11	; 0x08

		reduce_by_gcd(&b, &c);
    38ba:	be 01       	movw	r22, r28
    38bc:	6b 5f       	subi	r22, 0xFB	; 251
    38be:	7f 4f       	sbci	r23, 0xFF	; 255
    38c0:	ce 01       	movw	r24, r28
    38c2:	01 96       	adiw	r24, 0x01	; 1
    38c4:	63 df       	rcall	.-314    	; 0x378c <reduce_by_gcd>

		uint32_t bx128 = b << 7;
    38c6:	89 80       	ldd	r8, Y+1	; 0x01
    38c8:	9a 80       	ldd	r9, Y+2	; 0x02
    38ca:	ab 80       	ldd	r10, Y+3	; 0x03
    38cc:	bc 80       	ldd	r11, Y+4	; 0x04
    38ce:	88 0c       	add	r8, r8
    38d0:	99 1c       	adc	r9, r9
    38d2:	aa 1c       	adc	r10, r10
    38d4:	bb 1c       	adc	r11, r11
    38d6:	88 0c       	add	r8, r8
    38d8:	99 1c       	adc	r9, r9
    38da:	aa 1c       	adc	r10, r10
    38dc:	bb 1c       	adc	r11, r11
    38de:	88 0c       	add	r8, r8
    38e0:	99 1c       	adc	r9, r9
    38e2:	aa 1c       	adc	r10, r10
    38e4:	bb 1c       	adc	r11, r11
    38e6:	88 0c       	add	r8, r8
    38e8:	99 1c       	adc	r9, r9
    38ea:	aa 1c       	adc	r10, r10
    38ec:	bb 1c       	adc	r11, r11
    38ee:	88 0c       	add	r8, r8
    38f0:	99 1c       	adc	r9, r9
    38f2:	aa 1c       	adc	r10, r10
    38f4:	bb 1c       	adc	r11, r11
    38f6:	88 0c       	add	r8, r8
    38f8:	99 1c       	adc	r9, r9
    38fa:	aa 1c       	adc	r10, r10
    38fc:	bb 1c       	adc	r11, r11
    38fe:	88 0c       	add	r8, r8
    3900:	99 1c       	adc	r9, r9
    3902:	aa 1c       	adc	r10, r10
    3904:	bb 1c       	adc	r11, r11
		uint32_t bx128overc = bx128 / c;
    3906:	4d 80       	ldd	r4, Y+5	; 0x05
    3908:	5e 80       	ldd	r5, Y+6	; 0x06
    390a:	6f 80       	ldd	r6, Y+7	; 0x07
    390c:	78 84       	ldd	r7, Y+8	; 0x08
    390e:	c5 01       	movw	r24, r10
    3910:	b4 01       	movw	r22, r8
    3912:	a3 01       	movw	r20, r6
    3914:	92 01       	movw	r18, r4
    3916:	fd d6       	rcall	.+3578   	; 0x4712 <__udivmodsi4>
		reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    3918:	cc 0c       	add	r12, r12
    391a:	dd 1c       	adc	r13, r13
    391c:	ee 1c       	adc	r14, r14
    391e:	ff 1c       	adc	r15, r15
    3920:	cc 0c       	add	r12, r12
    3922:	dd 1c       	adc	r13, r13
    3924:	ee 1c       	adc	r14, r14
    3926:	ff 1c       	adc	r15, r15
    3928:	cc 0c       	add	r12, r12
    392a:	dd 1c       	adc	r13, r13
    392c:	ee 1c       	adc	r14, r14
    392e:	ff 1c       	adc	r15, r15
    3930:	cc 0c       	add	r12, r12
    3932:	dd 1c       	adc	r13, r13
    3934:	ee 1c       	adc	r14, r14
    3936:	ff 1c       	adc	r15, r15
    3938:	cc 0c       	add	r12, r12
    393a:	dd 1c       	adc	r13, r13
    393c:	ee 1c       	adc	r14, r14
    393e:	ff 1c       	adc	r15, r15
    3940:	cc 0c       	add	r12, r12
    3942:	dd 1c       	adc	r13, r13
    3944:	ee 1c       	adc	r14, r14
    3946:	ff 1c       	adc	r15, r15
    3948:	cc 0c       	add	r12, r12
    394a:	dd 1c       	adc	r13, r13
    394c:	ee 1c       	adc	r14, r14
    394e:	ff 1c       	adc	r15, r15
    3950:	c2 0e       	add	r12, r18
    3952:	d3 1e       	adc	r13, r19
    3954:	e4 1e       	adc	r14, r20
    3956:	f5 1e       	adc	r15, r21
    3958:	82 e0       	ldi	r24, 0x02	; 2
    395a:	d8 1a       	sub	r13, r24
    395c:	e1 08       	sbc	r14, r1
    395e:	f1 08       	sbc	r15, r1
    3960:	f8 01       	movw	r30, r16
    3962:	c0 82       	st	Z, r12
    3964:	d1 82       	std	Z+1, r13	; 0x01
    3966:	e2 82       	std	Z+2, r14	; 0x02
		reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    3968:	f3 82       	std	Z+3, r15	; 0x03
    396a:	c3 01       	movw	r24, r6
    396c:	b2 01       	movw	r22, r4
    396e:	9b d6       	rcall	.+3382   	; 0x46a6 <__mulsi3>
    3970:	86 1a       	sub	r8, r22
    3972:	97 0a       	sbc	r9, r23
    3974:	a8 0a       	sbc	r10, r24
    3976:	b9 0a       	sbc	r11, r25
    3978:	84 82       	std	Z+4, r8	; 0x04
    397a:	95 82       	std	Z+5, r9	; 0x05
    397c:	a6 82       	std	Z+6, r10	; 0x06
    397e:	b7 82       	std	Z+7, r11	; 0x07
		reg->ms.p3 = c;
    3980:	40 86       	std	Z+8, r4	; 0x08
    3982:	51 86       	std	Z+9, r5	; 0x09
    3984:	62 86       	std	Z+10, r6	; 0x0a
    3986:	73 86       	std	Z+11, r7	; 0x0b
#else

			return(FALSE);

#endif
	}
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	28 96       	adiw	r28, 0x08	; 8
    398c:	0f b6       	in	r0, 0x3f	; 63
    398e:	f8 94       	cli
    3990:	de bf       	out	0x3e, r29	; 62
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	cd bf       	out	0x3d, r28	; 61
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	df 90       	pop	r13
    39a4:	cf 90       	pop	r12
    39a6:	bf 90       	pop	r11
    39a8:	af 90       	pop	r10
    39aa:	9f 90       	pop	r9
    39ac:	8f 90       	pop	r8
    39ae:	7f 90       	pop	r7
    39b0:	6f 90       	pop	r6
    39b2:	5f 90       	pop	r5
    39b4:	4f 90       	pop	r4
    39b6:	08 95       	ret

000039b8 <multisynth_calc>:
#ifdef DEBUGGING_ONLY
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4, uint32_t *div)
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
    39b8:	2f 92       	push	r2
    39ba:	3f 92       	push	r3
    39bc:	4f 92       	push	r4
    39be:	5f 92       	push	r5
    39c0:	6f 92       	push	r6
    39c2:	7f 92       	push	r7
    39c4:	8f 92       	push	r8
    39c6:	9f 92       	push	r9
    39c8:	af 92       	push	r10
    39ca:	bf 92       	push	r11
    39cc:	cf 92       	push	r12
    39ce:	df 92       	push	r13
    39d0:	ef 92       	push	r14
    39d2:	ff 92       	push	r15
    39d4:	0f 93       	push	r16
    39d6:	1f 93       	push	r17
    39d8:	cf 93       	push	r28
    39da:	df 93       	push	r29
    39dc:	00 d0       	rcall	.+0      	; 0x39de <multisynth_calc+0x26>
    39de:	00 d0       	rcall	.+0      	; 0x39e0 <multisynth_calc+0x28>
    39e0:	1f 92       	push	r1
    39e2:	cd b7       	in	r28, 0x3d	; 61
    39e4:	de b7       	in	r29, 0x3e	; 62
    39e6:	2b 01       	movw	r4, r22
    39e8:	3c 01       	movw	r6, r24
    39ea:	5b 83       	std	Y+3, r21	; 0x03
    39ec:	4a 83       	std	Y+2, r20	; 0x02
    39ee:	18 01       	movw	r2, r16
		uint32_t a = 0;
		Frequency_Hz freq_VCO = 0;

		*int_mode = TRUE;   /* assumed */
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	f9 01       	movw	r30, r18
    39f4:	80 83       	st	Z, r24
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
    39f6:	f0 e8       	ldi	r31, 0x80	; 128
    39f8:	4f 16       	cp	r4, r31
    39fa:	f1 ed       	ldi	r31, 0xD1	; 209
    39fc:	5f 06       	cpc	r5, r31
    39fe:	f0 ef       	ldi	r31, 0xF0	; 240
    3a00:	6f 06       	cpc	r6, r31
    3a02:	f8 e0       	ldi	r31, 0x08	; 8
    3a04:	7f 06       	cpc	r7, r31
    3a06:	08 f4       	brcc	.+2      	; 0x3a0a <multisynth_calc+0x52>
    3a08:	40 c0       	rjmp	.+128    	; 0x3a8a <multisynth_calc+0xd2>
		{
			a = 4;
			freq_VCO = a * freq_Fout;
    3a0a:	c3 01       	movw	r24, r6
    3a0c:	b2 01       	movw	r22, r4
    3a0e:	66 0f       	add	r22, r22
    3a10:	77 1f       	adc	r23, r23
    3a12:	88 1f       	adc	r24, r24
    3a14:	99 1f       	adc	r25, r25
    3a16:	66 0f       	add	r22, r22
    3a18:	77 1f       	adc	r23, r23
    3a1a:	88 1f       	adc	r24, r24
    3a1c:	99 1f       	adc	r25, r25
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
		{
			a = 4;
    3a1e:	c1 2c       	mov	r12, r1
    3a20:	d1 2c       	mov	r13, r1
    3a22:	76 01       	movw	r14, r12
    3a24:	68 94       	set
    3a26:	c2 f8       	bld	r12, 2
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
			{
				temp = SI5351_PLL_VCO_MAX - (count * freq_Fout);    /* SI5351_PLL_VCO_MAX assumed even */
    3a28:	45 c0       	rjmp	.+138    	; 0x3ab4 <multisynth_calc+0xfc>
    3a2a:	8c 80       	ldd	r8, Y+4	; 0x04
    3a2c:	a8 2d       	mov	r26, r8
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	a3 01       	movw	r20, r6
    3a32:	92 01       	movw	r18, r4
    3a34:	c1 d6       	rcall	.+3458   	; 0x47b8 <__muluhisi3>
    3a36:	00 e0       	ldi	r16, 0x00	; 0
    3a38:	19 ee       	ldi	r17, 0xE9	; 233
    3a3a:	24 ea       	ldi	r18, 0xA4	; 164
    3a3c:	35 e3       	ldi	r19, 0x35	; 53
    3a3e:	48 01       	movw	r8, r16
    3a40:	59 01       	movw	r10, r18
    3a42:	86 1a       	sub	r8, r22
    3a44:	97 0a       	sbc	r9, r23
    3a46:	a8 0a       	sbc	r10, r24
    3a48:	b9 0a       	sbc	r11, r25
    3a4a:	c5 01       	movw	r24, r10
    3a4c:	b4 01       	movw	r22, r8
				count += 2;
    3a4e:	2c 81       	ldd	r18, Y+4	; 0x04
    3a50:	2e 5f       	subi	r18, 0xFE	; 254
    3a52:	2c 83       	std	Y+4, r18	; 0x04

				if(temp >= SI5351_PLL_VCO_MIN)
    3a54:	81 14       	cp	r8, r1
    3a56:	36 e4       	ldi	r19, 0x46	; 70
    3a58:	93 06       	cpc	r9, r19
    3a5a:	33 ec       	ldi	r19, 0xC3	; 195
    3a5c:	a3 06       	cpc	r10, r19
    3a5e:	33 e2       	ldi	r19, 0x23	; 35
    3a60:	b3 06       	cpc	r11, r19
				{
					temp /= freq_Fout;
    3a62:	48 f0       	brcs	.+18     	; 0x3a76 <multisynth_calc+0xbe>
    3a64:	a3 01       	movw	r20, r6
    3a66:	92 01       	movw	r18, r4
    3a68:	54 d6       	rcall	.+3240   	; 0x4712 <__udivmodsi4>

					if(temp >= 4)   /* accepts only even integers of 4 or greater */
    3a6a:	24 30       	cpi	r18, 0x04	; 4
    3a6c:	31 05       	cpc	r19, r1
    3a6e:	41 05       	cpc	r20, r1
    3a70:	51 05       	cpc	r21, r1
    3a72:	20 f4       	brcc	.+8      	; 0x3a7c <multisynth_calc+0xc4>
    3a74:	10 c0       	rjmp	.+32     	; 0x3a96 <multisynth_calc+0xde>
						a = temp;
					}
				}
				else
				{
					done = TRUE;
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	8d 83       	std	Y+5, r24	; 0x05
    3a7a:	0d c0       	rjmp	.+26     	; 0x3a96 <multisynth_calc+0xde>

					if(temp >= 4)   /* accepts only even integers of 4 or greater */
					{
						done = TRUE;
						success = TRUE;
						a = temp;
    3a7c:	69 01       	movw	r12, r18
    3a7e:	7a 01       	movw	r14, r20
					temp /= freq_Fout;

					if(temp >= 4)   /* accepts only even integers of 4 or greater */
					{
						done = TRUE;
						success = TRUE;
    3a80:	e1 e0       	ldi	r30, 0x01	; 1
    3a82:	e9 83       	std	Y+1, r30	; 0x01
				{
					temp /= freq_Fout;

					if(temp >= 4)   /* accepts only even integers of 4 or greater */
					{
						done = TRUE;
    3a84:	f1 e0       	ldi	r31, 0x01	; 1
    3a86:	fd 83       	std	Y+5, r31	; 0x05
    3a88:	06 c0       	rjmp	.+12     	; 0x3a96 <multisynth_calc+0xde>
    3a8a:	1c 82       	std	Y+4, r1	; 0x04
    3a8c:	19 82       	std	Y+1, r1	; 0x01
    3a8e:	1d 82       	std	Y+5, r1	; 0x05
    3a90:	c1 2c       	mov	r12, r1
    3a92:	d1 2c       	mov	r13, r1
    3a94:	76 01       	movw	r14, r12
			uint8_t done = FALSE;
			uint8_t success = FALSE;
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
    3a96:	8d 80       	ldd	r8, Y+5	; 0x05
    3a98:	88 20       	and	r8, r8
				{
					done = TRUE;
				}
			}

			if(success)
    3a9a:	39 f2       	breq	.-114    	; 0x3a2a <multisynth_calc+0x72>
    3a9c:	99 80       	ldd	r9, Y+1	; 0x01
    3a9e:	99 20       	and	r9, r9
			{
				freq_VCO = a * freq_Fout;
    3aa0:	31 f0       	breq	.+12     	; 0x3aae <multisynth_calc+0xf6>
    3aa2:	a7 01       	movw	r20, r14
    3aa4:	96 01       	movw	r18, r12
    3aa6:	c3 01       	movw	r24, r6
    3aa8:	b2 01       	movw	r22, r4
    3aaa:	fd d5       	rcall	.+3066   	; 0x46a6 <__mulsi3>
    3aac:	03 c0       	rjmp	.+6      	; 0x3ab4 <multisynth_calc+0xfc>
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
		uint32_t a = 0;
		Frequency_Hz freq_VCO = 0;
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	70 e0       	ldi	r23, 0x00	; 0
    3ab2:	cb 01       	movw	r24, r22
			{
				freq_VCO = a * freq_Fout;
			}
		}

		*divBy4 = (a == 4);
    3ab4:	21 e0       	ldi	r18, 0x01	; 1
    3ab6:	34 e0       	ldi	r19, 0x04	; 4
    3ab8:	c3 16       	cp	r12, r19
    3aba:	d1 04       	cpc	r13, r1
    3abc:	e1 04       	cpc	r14, r1
    3abe:	f1 04       	cpc	r15, r1
    3ac0:	09 f0       	breq	.+2      	; 0x3ac4 <multisynth_calc+0x10c>
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	f1 01       	movw	r30, r2
    3ac6:	20 83       	st	Z, r18
		reg->ms.p1 = (uint32_t)(a << 7) - 512;  /* 128 * a + floor((128 * b) / c) - 512 */
    3ac8:	cc 0c       	add	r12, r12
    3aca:	dd 1c       	adc	r13, r13
    3acc:	ee 1c       	adc	r14, r14
    3ace:	ff 1c       	adc	r15, r15
    3ad0:	cc 0c       	add	r12, r12
    3ad2:	dd 1c       	adc	r13, r13
    3ad4:	ee 1c       	adc	r14, r14
    3ad6:	ff 1c       	adc	r15, r15
    3ad8:	cc 0c       	add	r12, r12
    3ada:	dd 1c       	adc	r13, r13
    3adc:	ee 1c       	adc	r14, r14
    3ade:	ff 1c       	adc	r15, r15
    3ae0:	cc 0c       	add	r12, r12
    3ae2:	dd 1c       	adc	r13, r13
    3ae4:	ee 1c       	adc	r14, r14
    3ae6:	ff 1c       	adc	r15, r15
    3ae8:	cc 0c       	add	r12, r12
    3aea:	dd 1c       	adc	r13, r13
    3aec:	ee 1c       	adc	r14, r14
    3aee:	ff 1c       	adc	r15, r15
    3af0:	cc 0c       	add	r12, r12
    3af2:	dd 1c       	adc	r13, r13
    3af4:	ee 1c       	adc	r14, r14
    3af6:	ff 1c       	adc	r15, r15
    3af8:	cc 0c       	add	r12, r12
    3afa:	dd 1c       	adc	r13, r13
    3afc:	ee 1c       	adc	r14, r14
    3afe:	ff 1c       	adc	r15, r15
    3b00:	f2 e0       	ldi	r31, 0x02	; 2
    3b02:	df 1a       	sub	r13, r31
    3b04:	e1 08       	sbc	r14, r1
    3b06:	f1 08       	sbc	r15, r1
    3b08:	ea 81       	ldd	r30, Y+2	; 0x02
    3b0a:	fb 81       	ldd	r31, Y+3	; 0x03
    3b0c:	c0 82       	st	Z, r12
    3b0e:	d1 82       	std	Z+1, r13	; 0x01
    3b10:	e2 82       	std	Z+2, r14	; 0x02
    3b12:	f3 82       	std	Z+3, r15	; 0x03
		reg->ms.p2 = 0;                         /* 128 * b - c * floor((128 * b) / c) */
    3b14:	14 82       	std	Z+4, r1	; 0x04
    3b16:	15 82       	std	Z+5, r1	; 0x05
    3b18:	16 82       	std	Z+6, r1	; 0x06
    3b1a:	17 82       	std	Z+7, r1	; 0x07
		reg->ms.p3 = 1;
    3b1c:	01 e0       	ldi	r16, 0x01	; 1
    3b1e:	10 e0       	ldi	r17, 0x00	; 0
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	00 87       	std	Z+8, r16	; 0x08
    3b26:	11 87       	std	Z+9, r17	; 0x09
    3b28:	22 87       	std	Z+10, r18	; 0x0a
    3b2a:	33 87       	std	Z+11, r19	; 0x0b
#ifdef DEBUGGING_ONLY
			*div = a;
#endif

		return(freq_VCO);
	}
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	1f 91       	pop	r17
    3b3c:	0f 91       	pop	r16
    3b3e:	ff 90       	pop	r15
    3b40:	ef 90       	pop	r14
    3b42:	df 90       	pop	r13
    3b44:	cf 90       	pop	r12
    3b46:	bf 90       	pop	r11
    3b48:	af 90       	pop	r10
    3b4a:	9f 90       	pop	r9
    3b4c:	8f 90       	pop	r8
    3b4e:	7f 90       	pop	r7
    3b50:	6f 90       	pop	r6
    3b52:	5f 90       	pop	r5
    3b54:	4f 90       	pop	r4
    3b56:	3f 90       	pop	r3
    3b58:	2f 90       	pop	r2
    3b5a:	08 95       	ret

00003b5c <multisynth_estimate>:
 * Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
 *
 * Note: do not call this function with global value freqVCOB == zero
 */
	Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
	{
    3b5c:	2f 92       	push	r2
    3b5e:	3f 92       	push	r3
    3b60:	4f 92       	push	r4
    3b62:	5f 92       	push	r5
    3b64:	6f 92       	push	r6
    3b66:	7f 92       	push	r7
    3b68:	8f 92       	push	r8
    3b6a:	9f 92       	push	r9
    3b6c:	af 92       	push	r10
    3b6e:	bf 92       	push	r11
    3b70:	cf 92       	push	r12
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    3b7c:	cf 93       	push	r28
    3b7e:	df 93       	push	r29
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
    3b84:	62 97       	sbiw	r28, 0x12	; 18
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	f8 94       	cli
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	0f be       	out	0x3f, r0	; 63
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	4b 01       	movw	r8, r22
    3b92:	5c 01       	movw	r10, r24
    3b94:	1a 01       	movw	r2, r20
    3b96:	3a 8b       	std	Y+18, r19	; 0x12
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* Determine integer part of feedback equation */
		a = freqVCOB / freq_Fout;
    3b98:	29 8b       	std	Y+17, r18	; 0x11
    3b9a:	60 91 7c 07 	lds	r22, 0x077C	; 0x80077c <freqVCOB>
    3b9e:	70 91 7d 07 	lds	r23, 0x077D	; 0x80077d <freqVCOB+0x1>
    3ba2:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <freqVCOB+0x2>
    3ba6:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <freqVCOB+0x3>
    3baa:	a5 01       	movw	r20, r10
    3bac:	94 01       	movw	r18, r8
    3bae:	b1 d5       	rcall	.+2914   	; 0x4712 <__udivmodsi4>
    3bb0:	29 87       	std	Y+9, r18	; 0x09
    3bb2:	3a 87       	std	Y+10, r19	; 0x0a
    3bb4:	4b 87       	std	Y+11, r20	; 0x0b
    3bb6:	5c 87       	std	Y+12, r21	; 0x0c
    3bb8:	69 01       	movw	r12, r18
    3bba:	7a 01       	movw	r14, r20
		b = freqVCOB % freq_Fout;
    3bbc:	69 83       	std	Y+1, r22	; 0x01
    3bbe:	7a 83       	std	Y+2, r23	; 0x02
    3bc0:	8b 83       	std	Y+3, r24	; 0x03
		c = freq_Fout;
    3bc2:	9c 83       	std	Y+4, r25	; 0x04
    3bc4:	8d 82       	std	Y+5, r8	; 0x05
    3bc6:	9e 82       	std	Y+6, r9	; 0x06
    3bc8:	af 82       	std	Y+7, r10	; 0x07
		reduce_by_gcd(&b, &c);  /* prevents overflow conditions and makes results agree with ClockBuilder */
    3bca:	b8 86       	std	Y+8, r11	; 0x08
    3bcc:	be 01       	movw	r22, r28
    3bce:	6b 5f       	subi	r22, 0xFB	; 251
    3bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	01 96       	adiw	r24, 0x01	; 1
    3bd6:	da dd       	rcall	.-1100   	; 0x378c <reduce_by_gcd>

		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
    3bd8:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <freqVCOB>
    3bdc:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <freqVCOB+0x1>
    3be0:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <freqVCOB+0x2>
    3be4:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <freqVCOB+0x3>
    3be8:	8d 87       	std	Y+13, r24	; 0x0d
    3bea:	9e 87       	std	Y+14, r25	; 0x0e
    3bec:	af 87       	std	Y+15, r26	; 0x0f
		freq_Fout /= (a * c + b);
    3bee:	b8 8b       	std	Y+16, r27	; 0x10
    3bf0:	4d 80       	ldd	r4, Y+5	; 0x05
    3bf2:	5e 80       	ldd	r5, Y+6	; 0x06
    3bf4:	6f 80       	ldd	r6, Y+7	; 0x07
    3bf6:	78 84       	ldd	r7, Y+8	; 0x08
    3bf8:	29 85       	ldd	r18, Y+9	; 0x09
    3bfa:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bfc:	4b 85       	ldd	r20, Y+11	; 0x0b
    3bfe:	5c 85       	ldd	r21, Y+12	; 0x0c
    3c00:	c3 01       	movw	r24, r6
    3c02:	b2 01       	movw	r22, r4
    3c04:	50 d5       	rcall	.+2720   	; 0x46a6 <__mulsi3>
    3c06:	89 80       	ldd	r8, Y+1	; 0x01
    3c08:	9a 80       	ldd	r9, Y+2	; 0x02
    3c0a:	ab 80       	ldd	r10, Y+3	; 0x03
    3c0c:	bc 80       	ldd	r11, Y+4	; 0x04
    3c0e:	9b 01       	movw	r18, r22
    3c10:	ac 01       	movw	r20, r24
    3c12:	28 0d       	add	r18, r8
    3c14:	39 1d       	adc	r19, r9
    3c16:	4a 1d       	adc	r20, r10
    3c18:	5b 1d       	adc	r21, r11
    3c1a:	6d 85       	ldd	r22, Y+13	; 0x0d
    3c1c:	7e 85       	ldd	r23, Y+14	; 0x0e
    3c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c20:	98 89       	ldd	r25, Y+16	; 0x10
    3c22:	77 d5       	rcall	.+2798   	; 0x4712 <__udivmodsi4>
    3c24:	ca 01       	movw	r24, r20
		freq_Fout *= c;
    3c26:	b9 01       	movw	r22, r18
    3c28:	a3 01       	movw	r20, r6
    3c2a:	92 01       	movw	r18, r4
    3c2c:	3c d5       	rcall	.+2680   	; 0x46a6 <__mulsi3>
    3c2e:	6d 87       	std	Y+13, r22	; 0x0d
    3c30:	7e 87       	std	Y+14, r23	; 0x0e
    3c32:	8f 87       	std	Y+15, r24	; 0x0f
    3c34:	98 8b       	std	Y+16, r25	; 0x10

		*int_mode = (b == 0) && !(a % 2);
    3c36:	89 28       	or	r8, r9
    3c38:	8a 28       	or	r8, r10
    3c3a:	8b 28       	or	r8, r11
    3c3c:	29 f4       	brne	.+10     	; 0x3c48 <multisynth_estimate+0xec>
    3c3e:	99 85       	ldd	r25, Y+9	; 0x09
    3c40:	90 ff       	sbrs	r25, 0
    3c42:	04 c0       	rjmp	.+8      	; 0x3c4c <multisynth_estimate+0xf0>
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	03 c0       	rjmp	.+6      	; 0x3c4e <multisynth_estimate+0xf2>
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	01 c0       	rjmp	.+2      	; 0x3c4e <multisynth_estimate+0xf2>
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	a9 89       	ldd	r26, Y+17	; 0x11
    3c50:	ba 89       	ldd	r27, Y+18	; 0x12
    3c52:	8c 93       	st	X, r24
		*divBy4 = (a == 4) && *int_mode;
    3c54:	b4 e0       	ldi	r27, 0x04	; 4
    3c56:	cb 16       	cp	r12, r27
    3c58:	d1 04       	cpc	r13, r1
    3c5a:	e1 04       	cpc	r14, r1
    3c5c:	f1 04       	cpc	r15, r1
    3c5e:	21 f4       	brne	.+8      	; 0x3c68 <multisynth_estimate+0x10c>
    3c60:	81 11       	cpse	r24, r1
    3c62:	04 c0       	rjmp	.+8      	; 0x3c6c <multisynth_estimate+0x110>
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	03 c0       	rjmp	.+6      	; 0x3c6e <multisynth_estimate+0x112>
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	01 c0       	rjmp	.+2      	; 0x3c6e <multisynth_estimate+0x112>
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	f8 01       	movw	r30, r16
    3c70:	80 83       	st	Z, r24

		/* Calculate parameters */
		if(*divBy4)
    3c72:	88 23       	and	r24, r24
    3c74:	a1 f0       	breq	.+40     	; 0x3c9e <multisynth_estimate+0x142>
		{
			reg->ms.p1 = 0;
    3c76:	d1 01       	movw	r26, r2
    3c78:	1d 92       	st	X+, r1
    3c7a:	1d 92       	st	X+, r1
    3c7c:	1d 92       	st	X+, r1
    3c7e:	1c 92       	st	X, r1
    3c80:	13 97       	sbiw	r26, 0x03	; 3
			reg->ms.p2 = 0;
    3c82:	f1 01       	movw	r30, r2
    3c84:	14 82       	std	Z+4, r1	; 0x04
    3c86:	15 82       	std	Z+5, r1	; 0x05
    3c88:	16 82       	std	Z+6, r1	; 0x06
    3c8a:	17 82       	std	Z+7, r1	; 0x07
			reg->ms.p3 = 1;
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	a0 e0       	ldi	r26, 0x00	; 0
    3c92:	b0 e0       	ldi	r27, 0x00	; 0
    3c94:	80 87       	std	Z+8, r24	; 0x08
    3c96:	91 87       	std	Z+9, r25	; 0x09
    3c98:	a2 87       	std	Z+10, r26	; 0x0a
    3c9a:	b3 87       	std	Z+11, r27	; 0x0b
    3c9c:	67 c0       	rjmp	.+206    	; 0x3d6c <multisynth_estimate+0x210>
		}
		else
		{
			uint32_t bx128 = b << 7;
    3c9e:	89 80       	ldd	r8, Y+1	; 0x01
    3ca0:	9a 80       	ldd	r9, Y+2	; 0x02
    3ca2:	ab 80       	ldd	r10, Y+3	; 0x03
    3ca4:	bc 80       	ldd	r11, Y+4	; 0x04
    3ca6:	88 0c       	add	r8, r8
    3ca8:	99 1c       	adc	r9, r9
    3caa:	aa 1c       	adc	r10, r10
    3cac:	bb 1c       	adc	r11, r11
    3cae:	88 0c       	add	r8, r8
    3cb0:	99 1c       	adc	r9, r9
    3cb2:	aa 1c       	adc	r10, r10
    3cb4:	bb 1c       	adc	r11, r11
    3cb6:	88 0c       	add	r8, r8
    3cb8:	99 1c       	adc	r9, r9
    3cba:	aa 1c       	adc	r10, r10
    3cbc:	bb 1c       	adc	r11, r11
    3cbe:	88 0c       	add	r8, r8
    3cc0:	99 1c       	adc	r9, r9
    3cc2:	aa 1c       	adc	r10, r10
    3cc4:	bb 1c       	adc	r11, r11
    3cc6:	88 0c       	add	r8, r8
    3cc8:	99 1c       	adc	r9, r9
    3cca:	aa 1c       	adc	r10, r10
    3ccc:	bb 1c       	adc	r11, r11
    3cce:	88 0c       	add	r8, r8
    3cd0:	99 1c       	adc	r9, r9
    3cd2:	aa 1c       	adc	r10, r10
    3cd4:	bb 1c       	adc	r11, r11
    3cd6:	88 0c       	add	r8, r8
    3cd8:	99 1c       	adc	r9, r9
    3cda:	aa 1c       	adc	r10, r10
			uint32_t bx128overc = bx128 / c;
    3cdc:	bb 1c       	adc	r11, r11
    3cde:	4d 80       	ldd	r4, Y+5	; 0x05
    3ce0:	5e 80       	ldd	r5, Y+6	; 0x06
    3ce2:	6f 80       	ldd	r6, Y+7	; 0x07
    3ce4:	78 84       	ldd	r7, Y+8	; 0x08
    3ce6:	c5 01       	movw	r24, r10
    3ce8:	b4 01       	movw	r22, r8
    3cea:	a3 01       	movw	r20, r6
    3cec:	92 01       	movw	r18, r4
    3cee:	11 d5       	rcall	.+2594   	; 0x4712 <__udivmodsi4>
			reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    3cf0:	c9 84       	ldd	r12, Y+9	; 0x09
    3cf2:	da 84       	ldd	r13, Y+10	; 0x0a
    3cf4:	eb 84       	ldd	r14, Y+11	; 0x0b
    3cf6:	fc 84       	ldd	r15, Y+12	; 0x0c
    3cf8:	cc 0c       	add	r12, r12
    3cfa:	dd 1c       	adc	r13, r13
    3cfc:	ee 1c       	adc	r14, r14
    3cfe:	ff 1c       	adc	r15, r15
    3d00:	cc 0c       	add	r12, r12
    3d02:	dd 1c       	adc	r13, r13
    3d04:	ee 1c       	adc	r14, r14
    3d06:	ff 1c       	adc	r15, r15
    3d08:	cc 0c       	add	r12, r12
    3d0a:	dd 1c       	adc	r13, r13
    3d0c:	ee 1c       	adc	r14, r14
    3d0e:	ff 1c       	adc	r15, r15
    3d10:	cc 0c       	add	r12, r12
    3d12:	dd 1c       	adc	r13, r13
    3d14:	ee 1c       	adc	r14, r14
    3d16:	ff 1c       	adc	r15, r15
    3d18:	cc 0c       	add	r12, r12
    3d1a:	dd 1c       	adc	r13, r13
    3d1c:	ee 1c       	adc	r14, r14
    3d1e:	ff 1c       	adc	r15, r15
    3d20:	cc 0c       	add	r12, r12
    3d22:	dd 1c       	adc	r13, r13
    3d24:	ee 1c       	adc	r14, r14
    3d26:	ff 1c       	adc	r15, r15
    3d28:	cc 0c       	add	r12, r12
    3d2a:	dd 1c       	adc	r13, r13
    3d2c:	ee 1c       	adc	r14, r14
    3d2e:	ff 1c       	adc	r15, r15
    3d30:	c2 0e       	add	r12, r18
    3d32:	d3 1e       	adc	r13, r19
    3d34:	e4 1e       	adc	r14, r20
    3d36:	f5 1e       	adc	r15, r21
    3d38:	f2 e0       	ldi	r31, 0x02	; 2
    3d3a:	df 1a       	sub	r13, r31
    3d3c:	e1 08       	sbc	r14, r1
    3d3e:	f1 08       	sbc	r15, r1
    3d40:	d1 01       	movw	r26, r2
    3d42:	cd 92       	st	X+, r12
    3d44:	dd 92       	st	X+, r13
    3d46:	ed 92       	st	X+, r14
    3d48:	fc 92       	st	X, r15
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    3d4a:	13 97       	sbiw	r26, 0x03	; 3
    3d4c:	c3 01       	movw	r24, r6
    3d4e:	b2 01       	movw	r22, r4
    3d50:	aa d4       	rcall	.+2388   	; 0x46a6 <__mulsi3>
    3d52:	86 1a       	sub	r8, r22
    3d54:	97 0a       	sbc	r9, r23
    3d56:	a8 0a       	sbc	r10, r24
    3d58:	b9 0a       	sbc	r11, r25
    3d5a:	f1 01       	movw	r30, r2
    3d5c:	84 82       	std	Z+4, r8	; 0x04
    3d5e:	95 82       	std	Z+5, r9	; 0x05
    3d60:	a6 82       	std	Z+6, r10	; 0x06
    3d62:	b7 82       	std	Z+7, r11	; 0x07
			reg->ms.p3 = c;
    3d64:	40 86       	std	Z+8, r4	; 0x08
    3d66:	51 86       	std	Z+9, r5	; 0x09
    3d68:	62 86       	std	Z+10, r6	; 0x0a
    3d6a:	73 86       	std	Z+11, r7	; 0x0b
		}

		return(freq_Fout);
	}
    3d6c:	6d 85       	ldd	r22, Y+13	; 0x0d
    3d6e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d72:	98 89       	ldd	r25, Y+16	; 0x10
    3d74:	62 96       	adiw	r28, 0x12	; 18
    3d76:	0f b6       	in	r0, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	cd bf       	out	0x3d, r28	; 61
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	1f 91       	pop	r17
    3d86:	0f 91       	pop	r16
    3d88:	ff 90       	pop	r15
    3d8a:	ef 90       	pop	r14
    3d8c:	df 90       	pop	r13
    3d8e:	cf 90       	pop	r12
    3d90:	bf 90       	pop	r11
    3d92:	af 90       	pop	r10
    3d94:	9f 90       	pop	r9
    3d96:	8f 90       	pop	r8
    3d98:	7f 90       	pop	r7
    3d9a:	6f 90       	pop	r6
    3d9c:	5f 90       	pop	r5
    3d9e:	4f 90       	pop	r4
    3da0:	3f 90       	pop	r3
    3da2:	2f 90       	pop	r2


	BOOL si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data)
	{
    3da4:	08 95       	ret

00003da6 <si5351_write_bulk>:
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, data, bytes));
    3da6:	26 2f       	mov	r18, r22
    3da8:	68 2f       	mov	r22, r24
    3daa:	80 ec       	ldi	r24, 0xC0	; 192
    3dac:	8e cb       	rjmp	.-2276   	; 0x34ca <i2c_device_write>
	}
    3dae:	08 95       	ret

00003db0 <set_pll>:
#ifdef DEBUGGING_ONLY
		uint32_t set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#else
		void set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#endif
	{
    3db0:	ff 92       	push	r15
    3db2:	0f 93       	push	r16
    3db4:	1f 93       	push	r17
    3db6:	cf 93       	push	r28
    3db8:	df 93       	push	r29
    3dba:	cd b7       	in	r28, 0x3d	; 61
    3dbc:	de b7       	in	r29, 0x3e	; 62
    3dbe:	66 97       	sbiw	r28, 0x16	; 22
    3dc0:	0f b6       	in	r0, 0x3f	; 63
    3dc2:	f8 94       	cli
    3dc4:	de bf       	out	0x3e, r29	; 62
    3dc6:	0f be       	out	0x3f, r0	; 63
    3dc8:	cd bf       	out	0x3d, r28	; 61
		/* Output Multisynth Settings (Synthesis Stage 2) */
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
			Frequency_Hz pll_error = freq_VCO - result;
#else
			pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
    3dca:	f4 2e       	mov	r15, r20
    3dcc:	00 91 80 07 	lds	r16, 0x0780	; 0x800780 <g_si5351_ref_correction>
    3dd0:	10 91 81 07 	lds	r17, 0x0781	; 0x800781 <g_si5351_ref_correction+0x1>
    3dd4:	20 91 82 07 	lds	r18, 0x0782	; 0x800782 <g_si5351_ref_correction+0x2>
    3dd8:	30 91 83 07 	lds	r19, 0x0783	; 0x800783 <g_si5351_ref_correction+0x3>
    3ddc:	ae 01       	movw	r20, r28
    3dde:	4f 5f       	subi	r20, 0xFF	; 255
    3de0:	5f 4f       	sbci	r21, 0xFF	; 255
    3de2:	3d dd       	rcall	.-1414   	; 0x385e <pll_calc>

		/* Prepare an array for parameters to be written to */
		uint8_t i = 0;

		/* Registers 26-27 */
		params[i++] = pll_reg.reg.p3_1;
    3de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3de6:	8d 87       	std	Y+13, r24	; 0x0d
		params[i++] = pll_reg.reg.p3_0;
    3de8:	89 85       	ldd	r24, Y+9	; 0x09
    3dea:	8e 87       	std	Y+14, r24	; 0x0e

		/* Register 28 */
		params[i++] = pll_reg.reg.p1_2 & 0x03;
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	83 70       	andi	r24, 0x03	; 3
    3df0:	8f 87       	std	Y+15, r24	; 0x0f

		/* Registers 29-30 */
		params[i++] = pll_reg.reg.p1_1;
    3df2:	8a 81       	ldd	r24, Y+2	; 0x02
    3df4:	88 8b       	std	Y+16, r24	; 0x10
		params[i++] = pll_reg.reg.p1_0;
    3df6:	89 81       	ldd	r24, Y+1	; 0x01
    3df8:	89 8b       	std	Y+17, r24	; 0x11

		/* Register 31 */
		params[i] = pll_reg.reg.p3_2 << 4;
		params[i++] += pll_reg.reg.p2_2 & 0x0F;
    3dfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    3dfe:	8f 70       	andi	r24, 0x0F	; 15
    3e00:	20 e1       	ldi	r18, 0x10	; 16
    3e02:	92 9f       	mul	r25, r18
    3e04:	80 0d       	add	r24, r0

		/* Registers 32-33 */
		params[i++] = pll_reg.reg.p2_1;
    3e06:	11 24       	eor	r1, r1
    3e08:	8a 8b       	std	Y+18, r24	; 0x12
		params[i++] = pll_reg.reg.p2_0;
    3e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e0c:	8b 8b       	std	Y+19, r24	; 0x13

		/* Write the parameters */
		if(target_pll == SI5351_PLLA)
    3e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e10:	8c 8b       	std	Y+20, r24	; 0x14
    3e12:	81 e0       	ldi	r24, 0x01	; 1
		{
			si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
    3e14:	f8 12       	cpse	r15, r24
    3e16:	07 c0       	rjmp	.+14     	; 0x3e26 <set_pll+0x76>
    3e18:	ae 01       	movw	r20, r28
    3e1a:	43 5f       	subi	r20, 0xF3	; 243
    3e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1e:	68 e0       	ldi	r22, 0x08	; 8
    3e20:	8a e1       	ldi	r24, 0x1A	; 26
    3e22:	c1 df       	rcall	.-126    	; 0x3da6 <si5351_write_bulk>
		}
		else    /* if(target_pll == SI5351_PLLB) */
		{
			si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
    3e24:	06 c0       	rjmp	.+12     	; 0x3e32 <set_pll+0x82>
    3e26:	ae 01       	movw	r20, r28
    3e28:	43 5f       	subi	r20, 0xF3	; 243
    3e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e2c:	68 e0       	ldi	r22, 0x08	; 8
    3e2e:	82 e2       	ldi	r24, 0x22	; 34
		}

#ifdef DEBUGGING_ONLY
			return(result);
#endif
	}
    3e30:	ba df       	rcall	.-140    	; 0x3da6 <si5351_write_bulk>
    3e32:	66 96       	adiw	r28, 0x16	; 22
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	de bf       	out	0x3e, r29	; 62
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	cd bf       	out	0x3d, r28	; 61
    3e3e:	df 91       	pop	r29
    3e40:	cf 91       	pop	r28
    3e42:	1f 91       	pop	r17
    3e44:	0f 91       	pop	r16
    3e46:	ff 90       	pop	r15
 * Currently this only works for PLLB.
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
    3e48:	08 95       	ret

00003e4a <si5351_set_vcoB_freq>:
    3e4a:	60 93 7c 07 	sts	0x077C, r22	; 0x80077c <freqVCOB>
    3e4e:	70 93 7d 07 	sts	0x077D, r23	; 0x80077d <freqVCOB+0x1>
    3e52:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <freqVCOB+0x2>
		set_pll(freq_VCO, SI5351_PLLB);
    3e56:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <freqVCOB+0x3>
    3e5a:	42 e0       	ldi	r20, 0x02	; 2
    3e5c:	a9 cf       	rjmp	.-174    	; 0x3db0 <set_pll>
	{
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, data, bytes));
	}

	BOOL si5351_write(uint8_t addr, uint8_t data)
	{
    3e5e:	08 95       	ret

00003e60 <si5351_write>:
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    3e64:	1f 92       	push	r1
    3e66:	cd b7       	in	r28, 0x3d	; 61
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, &data, 1));
    3e68:	de b7       	in	r29, 0x3e	; 62
    3e6a:	69 83       	std	Y+1, r22	; 0x01
    3e6c:	21 e0       	ldi	r18, 0x01	; 1
    3e6e:	ae 01       	movw	r20, r28
    3e70:	4f 5f       	subi	r20, 0xFF	; 255
    3e72:	5f 4f       	sbci	r21, 0xFF	; 255
    3e74:	68 2f       	mov	r22, r24
	}
    3e76:	80 ec       	ldi	r24, 0xC0	; 192
    3e78:	28 db       	rcall	.-2480   	; 0x34ca <i2c_device_write>
    3e7a:	0f 90       	pop	r0
    3e7c:	df 91       	pop	r29
 *
 * Apply a reset to the indicated PLL(s).
 *
 */
	void pll_reset(Si5351_pll target_pll)
	{
    3e7e:	cf 91       	pop	r28
    3e80:	08 95       	ret

00003e82 <pll_reset>:
		if(target_pll & SI5351_PLLA)
    3e82:	cf 93       	push	r28
    3e84:	c8 2f       	mov	r28, r24
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
    3e86:	80 ff       	sbrs	r24, 0
    3e88:	03 c0       	rjmp	.+6      	; 0x3e90 <pll_reset+0xe>
    3e8a:	60 e2       	ldi	r22, 0x20	; 32
    3e8c:	81 eb       	ldi	r24, 0xB1	; 177
		}

		if(target_pll & SI5351_PLLB)
    3e8e:	e8 df       	rcall	.-48     	; 0x3e60 <si5351_write>
    3e90:	c1 ff       	sbrs	r28, 1
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
    3e92:	03 c0       	rjmp	.+6      	; 0x3e9a <pll_reset+0x18>
    3e94:	60 e8       	ldi	r22, 0x80	; 128
    3e96:	81 eb       	ldi	r24, 0xB1	; 177
		}
	}
    3e98:	e3 df       	rcall	.-58     	; 0x3e60 <si5351_write>
    3e9a:	cf 91       	pop	r28
	{
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, &data, 1));
	}

	BOOL si5351_read(uint8_t addr, uint8_t *data)
	{
    3e9c:	08 95       	ret

00003e9e <si5351_read>:
		return(i2c_device_read(SI5351_I2C_SLAVE_ADDR, addr, data, 1));
    3e9e:	ab 01       	movw	r20, r22
    3ea0:	21 e0       	ldi	r18, 0x01	; 1
    3ea2:	68 2f       	mov	r22, r24
    3ea4:	80 ec       	ldi	r24, 0xC0	; 192
    3ea6:	56 cb       	rjmp	.-2388   	; 0x3554 <i2c_device_read>
	}
    3ea8:	08 95       	ret

00003eaa <si5351_init>:
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	BOOL si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    3eaa:	cf 92       	push	r12
    3eac:	df 92       	push	r13
    3eae:	ef 92       	push	r14
    3eb0:	ff 92       	push	r15
    3eb2:	0f 93       	push	r16
    3eb4:	1f 93       	push	r17
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
    3eba:	1f 92       	push	r1
    3ebc:	cd b7       	in	r28, 0x3d	; 61
    3ebe:	de b7       	in	r29, 0x3e	; 62
    3ec0:	08 2f       	mov	r16, r24
    3ec2:	6a 01       	movw	r12, r20
		BOOL err = FALSE;
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			i2c_init();
    3ec4:	7b 01       	movw	r14, r22
    3ec6:	8e da       	rcall	.-2788   	; 0x33e4 <i2c_init>
			uint8_t result_val = 0x00;
			BOOL result = FALSE;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    3ec8:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <freqVCOB>
    3ecc:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <freqVCOB+0x1>
    3ed0:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <freqVCOB+0x2>
		xtal_freq = SI5351_XTAL_FREQ;
    3ed4:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <freqVCOB+0x3>
    3ed8:	80 e4       	ldi	r24, 0x40	; 64
    3eda:	98 e7       	ldi	r25, 0x78	; 120
    3edc:	ad e7       	ldi	r26, 0x7D	; 125
    3ede:	b1 e0       	ldi	r27, 0x01	; 1
    3ee0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <xtal_freq>
    3ee4:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <xtal_freq+0x1>
		enabledClocksMask = 0x00;
    3ee8:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <xtal_freq+0x2>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		err = si5351_write(3, 0xff);
    3eec:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <xtal_freq+0x3>
    3ef0:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <enabledClocksMask>
    3ef4:	6f ef       	ldi	r22, 0xFF	; 255

		/* Power down clocks */
		err |= si5351_write(16, 0xCC);
    3ef6:	83 e0       	ldi	r24, 0x03	; 3
    3ef8:	b3 df       	rcall	.-154    	; 0x3e60 <si5351_write>
    3efa:	18 2f       	mov	r17, r24
    3efc:	6c ec       	ldi	r22, 0xCC	; 204
    3efe:	80 e1       	ldi	r24, 0x10	; 16
		err |= si5351_write(17, 0xCC);
    3f00:	af df       	rcall	.-162    	; 0x3e60 <si5351_write>
    3f02:	18 2b       	or	r17, r24
    3f04:	6c ec       	ldi	r22, 0xCC	; 204
    3f06:	81 e1       	ldi	r24, 0x11	; 17
    3f08:	ab df       	rcall	.-170    	; 0x3e60 <si5351_write>
		err |= si5351_write(18, 0xCC);
    3f0a:	18 2b       	or	r17, r24
    3f0c:	6c ec       	ldi	r22, 0xCC	; 204
    3f0e:	82 e1       	ldi	r24, 0x12	; 18
    3f10:	a7 df       	rcall	.-178    	; 0x3e60 <si5351_write>
    3f12:	18 2b       	or	r17, r24

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    3f14:	60 2f       	mov	r22, r16
    3f16:	62 61       	ori	r22, 0x12	; 18
    3f18:	69 83       	std	Y+1, r22	; 0x01

		err |= si5351_write(SI5351_CRYSTAL_LOAD, reg_val);
    3f1a:	87 eb       	ldi	r24, 0xB7	; 183
    3f1c:	a1 df       	rcall	.-190    	; 0x3e60 <si5351_write>
    3f1e:	18 2b       	or	r17, r24

		if(!ref_osc_freq)
    3f20:	c1 14       	cp	r12, r1
    3f22:	d1 04       	cpc	r13, r1
    3f24:	e1 04       	cpc	r14, r1
    3f26:	f1 04       	cpc	r15, r1
    3f28:	51 f4       	brne	.+20     	; 0x3f3e <si5351_init+0x94>
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    3f2a:	0f 2e       	mov	r0, r31
    3f2c:	f0 e4       	ldi	r31, 0x40	; 64
    3f2e:	cf 2e       	mov	r12, r31
    3f30:	f8 e7       	ldi	r31, 0x78	; 120
    3f32:	df 2e       	mov	r13, r31
    3f34:	fd e7       	ldi	r31, 0x7D	; 125
    3f36:	ef 2e       	mov	r14, r31
    3f38:	ff 24       	eor	r15, r15
    3f3a:	f3 94       	inc	r15
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    3f3c:	f0 2d       	mov	r31, r0
    3f3e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <xtal_freq>
    3f42:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <xtal_freq+0x1>
    3f46:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <xtal_freq+0x2>
    3f4a:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <xtal_freq+0x3>
    3f4e:	c8 16       	cp	r12, r24
    3f50:	d9 06       	cpc	r13, r25
    3f52:	ea 06       	cpc	r14, r26
    3f54:	fb 06       	cpc	r15, r27
		{
			if(si5351_read(SI5351_PLL_INPUT_SOURCE, &reg_val))
    3f56:	b1 f0       	breq	.+44     	; 0x3f84 <si5351_init+0xda>
    3f58:	be 01       	movw	r22, r28
    3f5a:	6f 5f       	subi	r22, 0xFF	; 255
    3f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f5e:	8f e0       	ldi	r24, 0x0F	; 15
    3f60:	9e df       	rcall	.-196    	; 0x3e9e <si5351_read>
    3f62:	81 11       	cpse	r24, r1
    3f64:	11 c0       	rjmp	.+34     	; 0x3f88 <si5351_init+0xde>
			{
				return TRUE;
			}

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    3f66:	69 81       	ldd	r22, Y+1	; 0x01
    3f68:	6f 73       	andi	r22, 0x3F	; 63
    3f6a:	69 83       	std	Y+1, r22	; 0x01

			xtal_freq = ref_osc_freq;
    3f6c:	c0 92 46 01 	sts	0x0146, r12	; 0x800146 <xtal_freq>
    3f70:	d0 92 47 01 	sts	0x0147, r13	; 0x800147 <xtal_freq+0x1>
    3f74:	e0 92 48 01 	sts	0x0148, r14	; 0x800148 <xtal_freq+0x2>
    3f78:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			err |= si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
    3f7c:	8f e0       	ldi	r24, 0x0F	; 15
    3f7e:	70 df       	rcall	.-288    	; 0x3e60 <si5351_write>
    3f80:	81 2b       	or	r24, r17
    3f82:	03 c0       	rjmp	.+6      	; 0x3f8a <si5351_init+0xe0>

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;

		err |= si5351_write(SI5351_CRYSTAL_LOAD, reg_val);
    3f84:	81 2f       	mov	r24, r17
    3f86:	01 c0       	rjmp	.+2      	; 0x3f8a <si5351_init+0xe0>
		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
		{
			if(si5351_read(SI5351_PLL_INPUT_SOURCE, &reg_val))
			{
				return TRUE;
    3f88:	81 e0       	ldi	r24, 0x01	; 1

			err |= si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
		}
		
		return err;
	}
    3f8a:	0f 90       	pop	r0
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	ff 90       	pop	r15
    3f96:	ef 90       	pop	r14
    3f98:	df 90       	pop	r13
    3f9a:	cf 90       	pop	r12
    3f9c:	08 95       	ret

00003f9e <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	void si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    3f9e:	0f 93       	push	r16
    3fa0:	1f 93       	push	r17
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	1f 92       	push	r1
    3fa8:	cd b7       	in	r28, 0x3d	; 61
    3faa:	de b7       	in	r29, 0x3e	; 62
    3fac:	18 2f       	mov	r17, r24
		uint8_t reg_val;

		if(si5351_read(SI5351_OUTPUT_ENABLE_CTRL, &reg_val))
    3fae:	06 2f       	mov	r16, r22
    3fb0:	be 01       	movw	r22, r28
    3fb2:	6f 5f       	subi	r22, 0xFF	; 255
    3fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb6:	83 e0       	ldi	r24, 0x03	; 3
    3fb8:	72 df       	rcall	.-284    	; 0x3e9e <si5351_read>
    3fba:	81 11       	cpse	r24, r1
    3fbc:	1b c0       	rjmp	.+54     	; 0x3ff4 <si5351_clock_enable+0x56>
		{
			return;
		}

		if(enable)
    3fbe:	00 23       	and	r16, r16
    3fc0:	61 f0       	breq	.+24     	; 0x3fda <si5351_clock_enable+0x3c>
		{
			reg_val &= ~(1 << (uint8_t)clk);
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	02 c0       	rjmp	.+4      	; 0x3fcc <si5351_clock_enable+0x2e>
    3fc8:	88 0f       	add	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	1a 95       	dec	r17
    3fce:	e2 f7       	brpl	.-8      	; 0x3fc8 <si5351_clock_enable+0x2a>
    3fd0:	80 95       	com	r24
    3fd2:	99 81       	ldd	r25, Y+1	; 0x01
    3fd4:	89 23       	and	r24, r25
    3fd6:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    3fd8:	0a c0       	rjmp	.+20     	; 0x3fee <si5351_clock_enable+0x50>
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	02 c0       	rjmp	.+4      	; 0x3fe4 <si5351_clock_enable+0x46>
    3fe0:	88 0f       	add	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	1a 95       	dec	r17
    3fe6:	e2 f7       	brpl	.-8      	; 0x3fe0 <si5351_clock_enable+0x42>
    3fe8:	99 81       	ldd	r25, Y+1	; 0x01
    3fea:	89 2b       	or	r24, r25
		}

		si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
    3fec:	89 83       	std	Y+1, r24	; 0x01
    3fee:	69 81       	ldd	r22, Y+1	; 0x01
    3ff0:	83 e0       	ldi	r24, 0x03	; 3
    3ff2:	36 df       	rcall	.-404    	; 0x3e60 <si5351_write>
	}
    3ff4:	0f 90       	pop	r0
    3ff6:	df 91       	pop	r29
    3ff8:	cf 91       	pop	r28
    3ffa:	1f 91       	pop	r17
    3ffc:	0f 91       	pop	r16
    3ffe:	08 95       	ret

00004000 <si5351_drive_strength>:
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	void si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	1f 92       	push	r1
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val;
		const uint8_t mask = 0x03;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    400e:	06 2f       	mov	r16, r22
    4010:	10 e1       	ldi	r17, 0x10	; 16
    4012:	18 0f       	add	r17, r24
    4014:	be 01       	movw	r22, r28
    4016:	6f 5f       	subi	r22, 0xFF	; 255
    4018:	7f 4f       	sbci	r23, 0xFF	; 255
    401a:	81 2f       	mov	r24, r17
    401c:	40 df       	rcall	.-384    	; 0x3e9e <si5351_read>
    401e:	81 11       	cpse	r24, r1
    4020:	1c c0       	rjmp	.+56     	; 0x405a <si5351_drive_strength+0x5a>
		{
			return;
		}

		switch(drive)
    4022:	01 30       	cpi	r16, 0x01	; 1
    4024:	51 f0       	breq	.+20     	; 0x403a <si5351_drive_strength+0x3a>
    4026:	28 f0       	brcs	.+10     	; 0x4032 <si5351_drive_strength+0x32>
    4028:	02 30       	cpi	r16, 0x02	; 2
    402a:	61 f0       	breq	.+24     	; 0x4044 <si5351_drive_strength+0x44>
    402c:	03 30       	cpi	r16, 0x03	; 3
    402e:	79 f0       	breq	.+30     	; 0x404e <si5351_drive_strength+0x4e>
    4030:	11 c0       	rjmp	.+34     	; 0x4054 <si5351_drive_strength+0x54>
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	8c 7f       	andi	r24, 0xFC	; 252
				reg_val |= 0x00;
			}
			break;
    4036:	89 83       	std	Y+1, r24	; 0x01

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    4038:	0d c0       	rjmp	.+26     	; 0x4054 <si5351_drive_strength+0x54>
    403a:	89 81       	ldd	r24, Y+1	; 0x01
				reg_val |= 0x01;
    403c:	8c 7f       	andi	r24, 0xFC	; 252
    403e:	81 60       	ori	r24, 0x01	; 1
			}
			break;
    4040:	89 83       	std	Y+1, r24	; 0x01

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    4042:	08 c0       	rjmp	.+16     	; 0x4054 <si5351_drive_strength+0x54>
    4044:	89 81       	ldd	r24, Y+1	; 0x01
				reg_val |= 0x02;
    4046:	8c 7f       	andi	r24, 0xFC	; 252
    4048:	82 60       	ori	r24, 0x02	; 2
			}
			break;
    404a:	89 83       	std	Y+1, r24	; 0x01

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
    404c:	03 c0       	rjmp	.+6      	; 0x4054 <si5351_drive_strength+0x54>
				reg_val |= 0x03;
    404e:	89 81       	ldd	r24, Y+1	; 0x01
    4050:	83 60       	ori	r24, 0x03	; 3
			{
			}
			break;
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    4052:	89 83       	std	Y+1, r24	; 0x01
    4054:	69 81       	ldd	r22, Y+1	; 0x01
    4056:	81 2f       	mov	r24, r17
	}
    4058:	03 df       	rcall	.-506    	; 0x3e60 <si5351_write>
    405a:	0f 90       	pop	r0
    405c:	df 91       	pop	r29
    405e:	cf 91       	pop	r28
    4060:	1f 91       	pop	r17
    4062:	0f 91       	pop	r16
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	void set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    4064:	08 95       	ret

00004066 <set_multisynth_registers_source>:
    4066:	0f 93       	push	r16
    4068:	1f 93       	push	r17
    406a:	cf 93       	push	r28
    406c:	df 93       	push	r29
    406e:	1f 92       	push	r1
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val;
		uint8_t addr = SI5351_CLK0_CTRL + (uint8_t)clk;
    4074:	06 2f       	mov	r16, r22
    4076:	10 e1       	ldi	r17, 0x10	; 16

		if(si5351_read(addr, &reg_val))
    4078:	18 0f       	add	r17, r24
    407a:	be 01       	movw	r22, r28
    407c:	6f 5f       	subi	r22, 0xFF	; 255
    407e:	7f 4f       	sbci	r23, 0xFF	; 255
    4080:	81 2f       	mov	r24, r17
    4082:	0d df       	rcall	.-486    	; 0x3e9e <si5351_read>
    4084:	81 11       	cpse	r24, r1
		{
			return;
		}

		if(pll == SI5351_PLLA)
    4086:	0e c0       	rjmp	.+28     	; 0x40a4 <set_multisynth_registers_source+0x3e>
    4088:	01 30       	cpi	r16, 0x01	; 1
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    408a:	21 f4       	brne	.+8      	; 0x4094 <set_multisynth_registers_source+0x2e>
    408c:	89 81       	ldd	r24, Y+1	; 0x01
    408e:	8f 7d       	andi	r24, 0xDF	; 223
    4090:	89 83       	std	Y+1, r24	; 0x01
		}
		else if(pll == SI5351_PLLB)
    4092:	05 c0       	rjmp	.+10     	; 0x409e <set_multisynth_registers_source+0x38>
    4094:	02 30       	cpi	r16, 0x02	; 2
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    4096:	19 f4       	brne	.+6      	; 0x409e <set_multisynth_registers_source+0x38>
    4098:	89 81       	ldd	r24, Y+1	; 0x01
		}

		si5351_write(addr, reg_val);
    409a:	80 62       	ori	r24, 0x20	; 32
    409c:	89 83       	std	Y+1, r24	; 0x01
    409e:	69 81       	ldd	r22, Y+1	; 0x01
    40a0:	81 2f       	mov	r24, r17
	}
    40a2:	de de       	rcall	.-580    	; 0x3e60 <si5351_write>
    40a4:	0f 90       	pop	r0
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	1f 91       	pop	r17
    40ac:	0f 91       	pop	r16
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	void set_integer_mode(Si5351_clock clk, BOOL enable)
	{
    40ae:	08 95       	ret

000040b0 <set_integer_mode>:
    40b0:	0f 93       	push	r16
    40b2:	1f 93       	push	r17
    40b4:	cf 93       	push	r28
    40b6:	df 93       	push	r29
    40b8:	1f 92       	push	r1
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    40be:	06 2f       	mov	r16, r22
    40c0:	10 e1       	ldi	r17, 0x10	; 16
    40c2:	18 0f       	add	r17, r24
    40c4:	be 01       	movw	r22, r28
    40c6:	6f 5f       	subi	r22, 0xFF	; 255
    40c8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ca:	81 2f       	mov	r24, r17
    40cc:	e8 de       	rcall	.-560    	; 0x3e9e <si5351_read>
    40ce:	81 11       	cpse	r24, r1
    40d0:	0c c0       	rjmp	.+24     	; 0x40ea <set_integer_mode+0x3a>
		{
			return;
		}

		if(enable)
    40d2:	00 23       	and	r16, r16
    40d4:	21 f0       	breq	.+8      	; 0x40de <set_integer_mode+0x2e>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    40d6:	89 81       	ldd	r24, Y+1	; 0x01
    40d8:	80 64       	ori	r24, 0x40	; 64
    40da:	89 83       	std	Y+1, r24	; 0x01
    40dc:	03 c0       	rjmp	.+6      	; 0x40e4 <set_integer_mode+0x34>
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    40de:	89 81       	ldd	r24, Y+1	; 0x01
    40e0:	8f 7b       	andi	r24, 0xBF	; 191
    40e2:	89 83       	std	Y+1, r24	; 0x01
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    40e4:	69 81       	ldd	r22, Y+1	; 0x01
    40e6:	81 2f       	mov	r24, r17
    40e8:	bb de       	rcall	.-650    	; 0x3e60 <si5351_write>
	}
    40ea:	0f 90       	pop	r0
    40ec:	df 91       	pop	r29
    40ee:	cf 91       	pop	r28
    40f0:	1f 91       	pop	r17
    40f2:	0f 91       	pop	r16
    40f4:	08 95       	ret

000040f6 <ms_div>:


	void ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
	{
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	1f 92       	push	r1
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
		uint8_t reg_val, reg_addr;

		switch(clk)
    4106:	81 30       	cpi	r24, 0x01	; 1
    4108:	71 f0       	breq	.+28     	; 0x4126 <ms_div+0x30>
    410a:	18 f0       	brcs	.+6      	; 0x4112 <ms_div+0x1c>
    410c:	82 30       	cpi	r24, 0x02	; 2
    410e:	31 f0       	breq	.+12     	; 0x411c <ms_div+0x26>
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    4110:	27 c0       	rjmp	.+78     	; 0x4160 <ms_div+0x6a>
    4112:	0f 2e       	mov	r0, r31
    4114:	fc e2       	ldi	r31, 0x2C	; 44
    4116:	ff 2e       	mov	r15, r31
    4118:	f0 2d       	mov	r31, r0
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    411a:	09 c0       	rjmp	.+18     	; 0x412e <ms_div+0x38>
    411c:	0f 2e       	mov	r0, r31
    411e:	fc e3       	ldi	r31, 0x3C	; 60
    4120:	ff 2e       	mov	r15, r31
			}
			break;
    4122:	f0 2d       	mov	r31, r0
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    4124:	04 c0       	rjmp	.+8      	; 0x412e <ms_div+0x38>
    4126:	0f 2e       	mov	r0, r31
    4128:	f4 e3       	ldi	r31, 0x34	; 52
    412a:	ff 2e       	mov	r15, r31
    412c:	f0 2d       	mov	r31, r0
    412e:	04 2f       	mov	r16, r20

			default:
				return;
		}

		if(si5351_read(reg_addr, &reg_val))
    4130:	16 2f       	mov	r17, r22
    4132:	be 01       	movw	r22, r28
    4134:	6f 5f       	subi	r22, 0xFF	; 255
    4136:	7f 4f       	sbci	r23, 0xFF	; 255
    4138:	8f 2d       	mov	r24, r15
    413a:	b1 de       	rcall	.-670    	; 0x3e9e <si5351_read>
    413c:	81 11       	cpse	r24, r1
    413e:	10 c0       	rjmp	.+32     	; 0x4160 <ms_div+0x6a>
		{
			return;
		}

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    4140:	89 81       	ldd	r24, Y+1	; 0x01
    4142:	83 78       	andi	r24, 0x83	; 131
    4144:	89 83       	std	Y+1, r24	; 0x01

		if(div_by_4)
    4146:	00 23       	and	r16, r16
    4148:	11 f0       	breq	.+4      	; 0x414e <ms_div+0x58>
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    414a:	8c 60       	ori	r24, 0x0C	; 12
    414c:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    414e:	80 e1       	ldi	r24, 0x10	; 16
    4150:	18 9f       	mul	r17, r24
    4152:	b0 01       	movw	r22, r0
    4154:	11 24       	eor	r1, r1
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	68 2b       	or	r22, r24
    415a:	69 83       	std	Y+1, r22	; 0x01

		si5351_write(reg_addr, reg_val);
    415c:	8f 2d       	mov	r24, r15
    415e:	80 de       	rcall	.-768    	; 0x3e60 <si5351_write>
	}
    4160:	0f 90       	pop	r0
    4162:	df 91       	pop	r29
    4164:	cf 91       	pop	r28
    4166:	1f 91       	pop	r17
    4168:	0f 91       	pop	r16
    416a:	ff 90       	pop	r15
    416c:	08 95       	ret

0000416e <set_multisynth_registers>:
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	void set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
	{
    416e:	8f 92       	push	r8
    4170:	af 92       	push	r10
    4172:	cf 92       	push	r12
    4174:	df 92       	push	r13
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	67 97       	sbiw	r28, 0x17	; 23
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
    4192:	f8 2e       	mov	r15, r24
    4194:	cc 86       	std	Y+12, r12	; 0x0c
    4196:	dd 86       	std	Y+13, r13	; 0x0d
    4198:	ee 86       	std	Y+14, r14	; 0x0e
    419a:	08 8b       	std	Y+16, r16	; 0x10
    419c:	19 8b       	std	Y+17, r17	; 0x11
    419e:	2a 8b       	std	Y+18, r18	; 0x12
    41a0:	6e 8b       	std	Y+22, r22	; 0x16
		uint8_t params[10];
		uint8_t i = 0;
		uint8_t reg_val;

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    41a2:	59 83       	std	Y+1, r21	; 0x01
		params[i++] = ms_reg.reg.p3_0;
    41a4:	4a 83       	std	Y+2, r20	; 0x02

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), &reg_val))
    41a6:	88 0f       	add	r24, r24
    41a8:	88 0f       	add	r24, r24
    41aa:	88 0f       	add	r24, r24
    41ac:	be 01       	movw	r22, r28
    41ae:	65 5f       	subi	r22, 0xF5	; 245
    41b0:	7f 4f       	sbci	r23, 0xFF	; 255
    41b2:	84 5d       	subi	r24, 0xD4	; 212
    41b4:	74 de       	rcall	.-792    	; 0x3e9e <si5351_read>
    41b6:	81 11       	cpse	r24, r1
		{
			return;
		}

		reg_val &= 0xFC;    /*~(0x03); */
    41b8:	3b c0       	rjmp	.+118    	; 0x4230 <set_multisynth_registers+0xc2>
    41ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    41bc:	8c 7f       	andi	r24, 0xFC	; 252
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    41be:	8b 87       	std	Y+11, r24	; 0x0b
    41c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c2:	93 70       	andi	r25, 0x03	; 3

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    41c4:	89 2b       	or	r24, r25
		params[i++] = ms_reg.reg.p1_0;
    41c6:	8b 83       	std	Y+3, r24	; 0x03
    41c8:	8d 85       	ldd	r24, Y+13	; 0x0d

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    41ca:	8c 83       	std	Y+4, r24	; 0x04
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    41cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    41ce:	8d 83       	std	Y+5, r24	; 0x05
    41d0:	9e 89       	ldd	r25, Y+22	; 0x16
    41d2:	8a 89       	ldd	r24, Y+18	; 0x12
    41d4:	8f 70       	andi	r24, 0x0F	; 15
    41d6:	20 e1       	ldi	r18, 0x10	; 16

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    41d8:	92 9f       	mul	r25, r18
    41da:	80 0d       	add	r24, r0
		params[i++] = ms_reg.reg.p2_0;
    41dc:	11 24       	eor	r1, r1
    41de:	8e 83       	std	Y+6, r24	; 0x06

		/* Write the parameters */
		switch(clk)
    41e0:	89 89       	ldd	r24, Y+17	; 0x11
    41e2:	8f 83       	std	Y+7, r24	; 0x07
    41e4:	88 89       	ldd	r24, Y+16	; 0x10
    41e6:	88 87       	std	Y+8, r24	; 0x08
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	f8 16       	cp	r15, r24
    41ec:	69 f0       	breq	.+26     	; 0x4208 <set_multisynth_registers+0x9a>
    41ee:	f8 16       	cp	r15, r24
    41f0:	20 f0       	brcs	.+8      	; 0x41fa <set_multisynth_registers+0x8c>
		{
			case SI5351_CLK0:
			{
				si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
    41f2:	22 e0       	ldi	r18, 0x02	; 2
    41f4:	f2 16       	cp	r15, r18
    41f6:	79 f0       	breq	.+30     	; 0x4216 <set_multisynth_registers+0xa8>
    41f8:	14 c0       	rjmp	.+40     	; 0x4222 <set_multisynth_registers+0xb4>
    41fa:	ae 01       	movw	r20, r28
    41fc:	4f 5f       	subi	r20, 0xFF	; 255
    41fe:	5f 4f       	sbci	r21, 0xFF	; 255
			}
			break;
    4200:	68 e0       	ldi	r22, 0x08	; 8

			case SI5351_CLK1:
			{
				si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
    4202:	8a e2       	ldi	r24, 0x2A	; 42
    4204:	d0 dd       	rcall	.-1120   	; 0x3da6 <si5351_write_bulk>
    4206:	0d c0       	rjmp	.+26     	; 0x4222 <set_multisynth_registers+0xb4>
    4208:	ae 01       	movw	r20, r28
    420a:	4f 5f       	subi	r20, 0xFF	; 255
    420c:	5f 4f       	sbci	r21, 0xFF	; 255
    420e:	68 e0       	ldi	r22, 0x08	; 8
			}
			break;
    4210:	82 e3       	ldi	r24, 0x32	; 50

			case SI5351_CLK2:
			{
				si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
    4212:	c9 dd       	rcall	.-1134   	; 0x3da6 <si5351_write_bulk>
    4214:	06 c0       	rjmp	.+12     	; 0x4222 <set_multisynth_registers+0xb4>
    4216:	ae 01       	movw	r20, r28
    4218:	4f 5f       	subi	r20, 0xFF	; 255
    421a:	5f 4f       	sbci	r21, 0xFF	; 255
    421c:	68 e0       	ldi	r22, 0x08	; 8
    421e:	8a e3       	ldi	r24, 0x3A	; 58
			{
			}
			break;
		}

		set_integer_mode(clk, int_mode);
    4220:	c2 dd       	rcall	.-1148   	; 0x3da6 <si5351_write_bulk>
    4222:	6a 2d       	mov	r22, r10
    4224:	8f 2d       	mov	r24, r15
    4226:	44 df       	rcall	.-376    	; 0x40b0 <set_integer_mode>
		ms_div(clk, r_div, div_by_4);
    4228:	4c a1       	ldd	r20, Y+36	; 0x24
    422a:	68 2d       	mov	r22, r8
    422c:	8f 2d       	mov	r24, r15
    422e:	63 df       	rcall	.-314    	; 0x40f6 <ms_div>
    4230:	67 96       	adiw	r28, 0x17	; 23
	}
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	1f 91       	pop	r17
    4242:	0f 91       	pop	r16
    4244:	ff 90       	pop	r15
    4246:	ef 90       	pop	r14
    4248:	df 90       	pop	r13
    424a:	cf 90       	pop	r12
    424c:	af 90       	pop	r10
    424e:	8f 90       	pop	r8
 *
 * Returns TRUE on failure
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk)
	{
    4250:	08 95       	ret

00004252 <si5351_set_freq>:
    4252:	3f 92       	push	r3
    4254:	4f 92       	push	r4
    4256:	5f 92       	push	r5
    4258:	6f 92       	push	r6
    425a:	7f 92       	push	r7
    425c:	8f 92       	push	r8
    425e:	9f 92       	push	r9
    4260:	af 92       	push	r10
    4262:	bf 92       	push	r11
    4264:	cf 92       	push	r12
    4266:	df 92       	push	r13
    4268:	ef 92       	push	r14
    426a:	ff 92       	push	r15
    426c:	0f 93       	push	r16
    426e:	1f 93       	push	r17
    4270:	cf 93       	push	r28
    4272:	df 93       	push	r29
    4274:	cd b7       	in	r28, 0x3d	; 61
    4276:	de b7       	in	r29, 0x3e	; 62
    4278:	2e 97       	sbiw	r28, 0x0e	; 14
    427a:	0f b6       	in	r0, 0x3f	; 63
    427c:	f8 94       	cli
    427e:	de bf       	out	0x3e, r29	; 62
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	cd bf       	out	0x3d, r28	; 61
    4284:	6b 01       	movw	r12, r22
    4286:	7c 01       	movw	r14, r24
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		BOOL int_mode = FALSE;
    4288:	b4 2e       	mov	r11, r20
		BOOL div_by_4 = FALSE;
    428a:	1d 86       	std	Y+13, r1	; 0x0d
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    428c:	1e 86       	std	Y+14, r1	; 0x0e
    428e:	80 e4       	ldi	r24, 0x40	; 64
    4290:	c8 16       	cp	r12, r24
    4292:	82 e4       	ldi	r24, 0x42	; 66
    4294:	d8 06       	cpc	r13, r24
    4296:	8f e0       	ldi	r24, 0x0F	; 15
    4298:	e8 06       	cpc	r14, r24
			{
				freq_Fout /= 100;
    429a:	f1 04       	cpc	r15, r1
    429c:	60 f0       	brcs	.+24     	; 0x42b6 <si5351_set_freq+0x64>
    429e:	c7 01       	movw	r24, r14
    42a0:	b6 01       	movw	r22, r12
    42a2:	24 e6       	ldi	r18, 0x64	; 100
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	40 e0       	ldi	r20, 0x00	; 0
    42a8:	50 e0       	ldi	r21, 0x00	; 0
				freq_Fout *= 100;
    42aa:	33 d2       	rcall	.+1126   	; 0x4712 <__udivmodsi4>
    42ac:	a4 e6       	ldi	r26, 0x64	; 100
    42ae:	b0 e0       	ldi	r27, 0x00	; 0
    42b0:	83 d2       	rcall	.+1286   	; 0x47b8 <__muluhisi3>
    42b2:	6b 01       	movw	r12, r22
    42b4:	7c 01       	movw	r14, r24
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	b8 16       	cp	r11, r24
    42ba:	c9 f0       	breq	.+50     	; 0x42ee <si5351_set_freq+0x9c>
    42bc:	b8 16       	cp	r11, r24
    42be:	20 f0       	brcs	.+8      	; 0x42c8 <si5351_set_freq+0x76>
    42c0:	82 e0       	ldi	r24, 0x02	; 2
    42c2:	b8 16       	cp	r11, r24
    42c4:	69 f1       	breq	.+90     	; 0x4320 <si5351_set_freq+0xce>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    42c6:	b6 c0       	rjmp	.+364    	; 0x4434 <si5351_set_freq+0x1e2>
    42c8:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <enabledClocksMask>
    42cc:	81 60       	ori	r24, 0x01	; 1
    42ce:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <enabledClocksMask>
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    42d2:	c0 92 6f 07 	sts	0x076F, r12	; 0x80076f <clock_out>
    42d6:	d0 92 70 07 	sts	0x0770, r13	; 0x800770 <clock_out+0x1>
    42da:	e0 92 71 07 	sts	0x0771, r14	; 0x800771 <clock_out+0x2>
    42de:	f0 92 72 07 	sts	0x0772, r15	; 0x800772 <clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    42e2:	68 94       	set
    42e4:	33 24       	eor	r3, r3

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    42e6:	34 f8       	bld	r3, 4
    42e8:	99 24       	eor	r9, r9
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
			}
			break;
    42ea:	93 94       	inc	r9
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    42ec:	31 c0       	rjmp	.+98     	; 0x4350 <si5351_set_freq+0xfe>
    42ee:	60 91 7b 07 	lds	r22, 0x077B	; 0x80077b <enabledClocksMask>
    42f2:	62 60       	ori	r22, 0x02	; 2
    42f4:	60 93 7b 07 	sts	0x077B, r22	; 0x80077b <enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */
    42f8:	60 95       	com	r22
    42fa:	6a 6f       	ori	r22, 0xFA	; 250
    42fc:	83 e0       	ldi	r24, 0x03	; 3
    42fe:	b0 dd       	rcall	.-1184   	; 0x3e60 <si5351_write>

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    4300:	c0 92 73 07 	sts	0x0773, r12	; 0x800773 <clock_out+0x4>
    4304:	d0 92 74 07 	sts	0x0774, r13	; 0x800774 <clock_out+0x5>
    4308:	e0 92 75 07 	sts	0x0775, r14	; 0x800775 <clock_out+0x6>
    430c:	f0 92 76 07 	sts	0x0776, r15	; 0x800776 <clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    4310:	0f 2e       	mov	r0, r31
    4312:	f1 e1       	ldi	r31, 0x11	; 17
    4314:	3f 2e       	mov	r3, r31
    4316:	f0 2d       	mov	r31, r0

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */

				target_pll = SI5351_PLLB;
    4318:	68 94       	set
    431a:	99 24       	eor	r9, r9
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    431c:	91 f8       	bld	r9, 1
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    431e:	18 c0       	rjmp	.+48     	; 0x4350 <si5351_set_freq+0xfe>
    4320:	60 91 7b 07 	lds	r22, 0x077B	; 0x80077b <enabledClocksMask>
    4324:	64 60       	ori	r22, 0x04	; 4
    4326:	60 93 7b 07 	sts	0x077B, r22	; 0x80077b <enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */
    432a:	60 95       	com	r22
    432c:	6c 6f       	ori	r22, 0xFC	; 252
    432e:	83 e0       	ldi	r24, 0x03	; 3
    4330:	97 dd       	rcall	.-1234   	; 0x3e60 <si5351_write>

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    4332:	c0 92 77 07 	sts	0x0777, r12	; 0x800777 <clock_out+0x8>
    4336:	d0 92 78 07 	sts	0x0778, r13	; 0x800778 <clock_out+0x9>
    433a:	e0 92 79 07 	sts	0x0779, r14	; 0x800779 <clock_out+0xa>
    433e:	f0 92 7a 07 	sts	0x077A, r15	; 0x80077a <clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    4342:	0f 2e       	mov	r0, r31
    4344:	f2 e1       	ldi	r31, 0x12	; 18
    4346:	3f 2e       	mov	r3, r31

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */

				target_pll = SI5351_PLLB;
    4348:	f0 2d       	mov	r31, r0
    434a:	68 94       	set
    434c:	99 24       	eor	r9, r9
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    434e:	91 f8       	bld	r9, 1
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	98 16       	cp	r9, r24
    4354:	61 f0       	breq	.+24     	; 0x436e <si5351_set_freq+0x11c>
    4356:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <freqVCOB>
    435a:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <freqVCOB+0x1>
    435e:	a0 91 7e 07 	lds	r26, 0x077E	; 0x80077e <freqVCOB+0x2>
    4362:	b0 91 7f 07 	lds	r27, 0x077F	; 0x80077f <freqVCOB+0x3>
    4366:	89 2b       	or	r24, r25
    4368:	8a 2b       	or	r24, r26
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    436a:	8b 2b       	or	r24, r27
    436c:	79 f4       	brne	.+30     	; 0x438c <si5351_set_freq+0x13a>
    436e:	8e 01       	movw	r16, r28
    4370:	02 5f       	subi	r16, 0xF2	; 242
    4372:	1f 4f       	sbci	r17, 0xFF	; 255
    4374:	9e 01       	movw	r18, r28
    4376:	23 5f       	subi	r18, 0xF3	; 243
    4378:	3f 4f       	sbci	r19, 0xFF	; 255
    437a:	ae 01       	movw	r20, r28
    437c:	4f 5f       	subi	r20, 0xFF	; 255
    437e:	5f 4f       	sbci	r21, 0xFF	; 255
    4380:	c7 01       	movw	r24, r14
    4382:	b6 01       	movw	r22, r12
    4384:	19 db       	rcall	.-2510   	; 0x39b8 <multisynth_calc>
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    4386:	2b 01       	movw	r4, r22
    4388:	3c 01       	movw	r6, r24
    438a:	0f c0       	rjmp	.+30     	; 0x43aa <si5351_set_freq+0x158>
    438c:	8e 01       	movw	r16, r28
    438e:	02 5f       	subi	r16, 0xF2	; 242
    4390:	1f 4f       	sbci	r17, 0xFF	; 255
    4392:	9e 01       	movw	r18, r28
    4394:	23 5f       	subi	r18, 0xF3	; 243
    4396:	3f 4f       	sbci	r19, 0xFF	; 255
    4398:	ae 01       	movw	r20, r28
    439a:	4f 5f       	subi	r20, 0xFF	; 255
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    439c:	5f 4f       	sbci	r21, 0xFF	; 255
    439e:	c7 01       	movw	r24, r14
    43a0:	b6 01       	movw	r22, r12
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    43a2:	dc db       	rcall	.-2120   	; 0x3b5c <multisynth_estimate>
    43a4:	41 2c       	mov	r4, r1
    43a6:	51 2c       	mov	r5, r1
    43a8:	32 01       	movw	r6, r4
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    43aa:	69 2d       	mov	r22, r9
    43ac:	8b 2d       	mov	r24, r11
    43ae:	5b de       	rcall	.-842    	; 0x4066 <set_multisynth_registers_source>
    43b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    43b2:	8f 93       	push	r24
    43b4:	81 2c       	mov	r8, r1
    43b6:	ad 84       	ldd	r10, Y+13	; 0x0d
    43b8:	c9 80       	ldd	r12, Y+1	; 0x01
    43ba:	da 80       	ldd	r13, Y+2	; 0x02
    43bc:	eb 80       	ldd	r14, Y+3	; 0x03
    43be:	fc 80       	ldd	r15, Y+4	; 0x04
    43c0:	0d 81       	ldd	r16, Y+5	; 0x05
    43c2:	1e 81       	ldd	r17, Y+6	; 0x06
    43c4:	2f 81       	ldd	r18, Y+7	; 0x07
    43c6:	38 85       	ldd	r19, Y+8	; 0x08
    43c8:	49 85       	ldd	r20, Y+9	; 0x09
    43ca:	5a 85       	ldd	r21, Y+10	; 0x0a
    43cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ce:	7c 85       	ldd	r23, Y+12	; 0x0c
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    43d0:	8b 2d       	mov	r24, r11
    43d2:	cd de       	rcall	.-614    	; 0x416e <set_multisynth_registers>
    43d4:	0f 90       	pop	r0
    43d6:	41 14       	cp	r4, r1
    43d8:	51 04       	cpc	r5, r1
    43da:	61 04       	cpc	r6, r1
			{
				set_pll(freq_VCO, target_pll);
    43dc:	71 04       	cpc	r7, r1
    43de:	21 f0       	breq	.+8      	; 0x43e8 <si5351_set_freq+0x196>
    43e0:	49 2d       	mov	r20, r9
    43e2:	c3 01       	movw	r24, r6
    43e4:	b2 01       	movw	r22, r4
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		si5351_write(3, ~enabledClocksMask);    /* only enable clock(s) in use */
    43e6:	e4 dc       	rcall	.-1592   	; 0x3db0 <set_pll>
    43e8:	60 91 7b 07 	lds	r22, 0x077B	; 0x80077b <enabledClocksMask>
    43ec:	60 95       	com	r22
    43ee:	83 e0       	ldi	r24, 0x03	; 3
    43f0:	37 dd       	rcall	.-1426   	; 0x3e60 <si5351_write>

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	98 12       	cpse	r9, r24
    43f6:	05 c0       	rjmp	.+10     	; 0x4402 <si5351_set_freq+0x1b0>
		{
			si5351_write(clock_ctrl_addr, 0x4C);    /* power up only clock being set, leaving that clock configured as follows: */
    43f8:	6c e4       	ldi	r22, 0x4C	; 76
    43fa:	83 2d       	mov	r24, r3
    43fc:	31 dd       	rcall	.-1438   	; 0x3e60 <si5351_write>
    43fe:	80 e0       	ldi	r24, 0x00	; 0
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    4400:	1c c0       	rjmp	.+56     	; 0x443a <si5351_set_freq+0x1e8>
    4402:	8d 85       	ldd	r24, Y+13	; 0x0d
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    4404:	88 23       	and	r24, r24
    4406:	21 f0       	breq	.+8      	; 0x4410 <si5351_set_freq+0x1be>
    4408:	6c e6       	ldi	r22, 0x6C	; 108
			{
				si5351_write(clock_ctrl_addr, 0x6C);    /* power up only clock being set, leaving that clock configured as follows: */
    440a:	83 2d       	mov	r24, r3
    440c:	29 dd       	rcall	.-1454   	; 0x3e60 <si5351_write>
    440e:	03 c0       	rjmp	.+6      	; 0x4416 <si5351_set_freq+0x1c4>
    4410:	6c e2       	ldi	r22, 0x2C	; 44
    4412:	83 2d       	mov	r24, r3
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
				si5351_write(clock_ctrl_addr, 0x2C);    /* power up only clock being set, leaving that clock configured as follows: */
    4414:	25 dd       	rcall	.-1462   	; 0x3e60 <si5351_write>
    4416:	41 14       	cp	r4, r1
    4418:	51 04       	cpc	r5, r1
    441a:	61 04       	cpc	r6, r1
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    441c:	71 04       	cpc	r7, r1
    441e:	61 f0       	breq	.+24     	; 0x4438 <si5351_set_freq+0x1e6>
    4420:	40 92 7c 07 	sts	0x077C, r4	; 0x80077c <freqVCOB>
    4424:	50 92 7d 07 	sts	0x077D, r5	; 0x80077d <freqVCOB+0x1>
			{
				freqVCOB = freq_VCO;
    4428:	60 92 7e 07 	sts	0x077E, r6	; 0x80077e <freqVCOB+0x2>
    442c:	70 92 7f 07 	sts	0x077F, r7	; 0x80077f <freqVCOB+0x3>
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	03 c0       	rjmp	.+6      	; 0x443a <si5351_set_freq+0x1e8>
    4434:	81 e0       	ldi	r24, 0x01	; 1
			}
		}

		return(FALSE);
    4436:	01 c0       	rjmp	.+2      	; 0x443a <si5351_set_freq+0x1e8>
    4438:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;

			default:
			{
				return(TRUE);
    443a:	2e 96       	adiw	r28, 0x0e	; 14
    443c:	0f b6       	in	r0, 0x3f	; 63
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    443e:	f8 94       	cli
	}
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	ff 90       	pop	r15
    4450:	ef 90       	pop	r14
    4452:	df 90       	pop	r13
    4454:	cf 90       	pop	r12
    4456:	bf 90       	pop	r11
    4458:	af 90       	pop	r10
    445a:	9f 90       	pop	r9
    445c:	8f 90       	pop	r8
    445e:	7f 90       	pop	r7
    4460:	6f 90       	pop	r6
    4462:	5f 90       	pop	r5
    4464:	4f 90       	pop	r4
    4466:	3f 90       	pop	r3
    4468:	08 95       	ret

0000446a <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    446a:	08 95       	ret

0000446c <__fixunssfsi>:
    446c:	70 d0       	rcall	.+224    	; 0x454e <__fp_splitA>
    446e:	88 f0       	brcs	.+34     	; 0x4492 <__fixunssfsi+0x26>
    4470:	9f 57       	subi	r25, 0x7F	; 127
    4472:	90 f0       	brcs	.+36     	; 0x4498 <__fixunssfsi+0x2c>
    4474:	b9 2f       	mov	r27, r25
    4476:	99 27       	eor	r25, r25
    4478:	b7 51       	subi	r27, 0x17	; 23
    447a:	a0 f0       	brcs	.+40     	; 0x44a4 <__fixunssfsi+0x38>
    447c:	d1 f0       	breq	.+52     	; 0x44b2 <__fixunssfsi+0x46>
    447e:	66 0f       	add	r22, r22
    4480:	77 1f       	adc	r23, r23
    4482:	88 1f       	adc	r24, r24
    4484:	99 1f       	adc	r25, r25
    4486:	1a f0       	brmi	.+6      	; 0x448e <__fixunssfsi+0x22>
    4488:	ba 95       	dec	r27
    448a:	c9 f7       	brne	.-14     	; 0x447e <__fixunssfsi+0x12>
    448c:	12 c0       	rjmp	.+36     	; 0x44b2 <__fixunssfsi+0x46>
    448e:	b1 30       	cpi	r27, 0x01	; 1
    4490:	81 f0       	breq	.+32     	; 0x44b2 <__fixunssfsi+0x46>
    4492:	77 d0       	rcall	.+238    	; 0x4582 <__fp_zero>
    4494:	b1 e0       	ldi	r27, 0x01	; 1
    4496:	08 95       	ret
    4498:	74 c0       	rjmp	.+232    	; 0x4582 <__fp_zero>
    449a:	67 2f       	mov	r22, r23
    449c:	78 2f       	mov	r23, r24
    449e:	88 27       	eor	r24, r24
    44a0:	b8 5f       	subi	r27, 0xF8	; 248
    44a2:	39 f0       	breq	.+14     	; 0x44b2 <__fixunssfsi+0x46>
    44a4:	b9 3f       	cpi	r27, 0xF9	; 249
    44a6:	cc f3       	brlt	.-14     	; 0x449a <__fixunssfsi+0x2e>
    44a8:	86 95       	lsr	r24
    44aa:	77 95       	ror	r23
    44ac:	67 95       	ror	r22
    44ae:	b3 95       	inc	r27
    44b0:	d9 f7       	brne	.-10     	; 0x44a8 <__fixunssfsi+0x3c>
    44b2:	3e f4       	brtc	.+14     	; 0x44c2 <__fixunssfsi+0x56>
    44b4:	90 95       	com	r25
    44b6:	80 95       	com	r24
    44b8:	70 95       	com	r23
    44ba:	61 95       	neg	r22
    44bc:	7f 4f       	sbci	r23, 0xFF	; 255
    44be:	8f 4f       	sbci	r24, 0xFF	; 255
    44c0:	9f 4f       	sbci	r25, 0xFF	; 255
    44c2:	08 95       	ret

000044c4 <__floatunsisf>:
    44c4:	e8 94       	clt
    44c6:	09 c0       	rjmp	.+18     	; 0x44da <__floatsisf+0x12>

000044c8 <__floatsisf>:
    44c8:	97 fb       	bst	r25, 7
    44ca:	3e f4       	brtc	.+14     	; 0x44da <__floatsisf+0x12>
    44cc:	90 95       	com	r25
    44ce:	80 95       	com	r24
    44d0:	70 95       	com	r23
    44d2:	61 95       	neg	r22
    44d4:	7f 4f       	sbci	r23, 0xFF	; 255
    44d6:	8f 4f       	sbci	r24, 0xFF	; 255
    44d8:	9f 4f       	sbci	r25, 0xFF	; 255
    44da:	99 23       	and	r25, r25
    44dc:	a9 f0       	breq	.+42     	; 0x4508 <__floatsisf+0x40>
    44de:	f9 2f       	mov	r31, r25
    44e0:	96 e9       	ldi	r25, 0x96	; 150
    44e2:	bb 27       	eor	r27, r27
    44e4:	93 95       	inc	r25
    44e6:	f6 95       	lsr	r31
    44e8:	87 95       	ror	r24
    44ea:	77 95       	ror	r23
    44ec:	67 95       	ror	r22
    44ee:	b7 95       	ror	r27
    44f0:	f1 11       	cpse	r31, r1
    44f2:	f8 cf       	rjmp	.-16     	; 0x44e4 <__floatsisf+0x1c>
    44f4:	fa f4       	brpl	.+62     	; 0x4534 <__floatsisf+0x6c>
    44f6:	bb 0f       	add	r27, r27
    44f8:	11 f4       	brne	.+4      	; 0x44fe <__floatsisf+0x36>
    44fa:	60 ff       	sbrs	r22, 0
    44fc:	1b c0       	rjmp	.+54     	; 0x4534 <__floatsisf+0x6c>
    44fe:	6f 5f       	subi	r22, 0xFF	; 255
    4500:	7f 4f       	sbci	r23, 0xFF	; 255
    4502:	8f 4f       	sbci	r24, 0xFF	; 255
    4504:	9f 4f       	sbci	r25, 0xFF	; 255
    4506:	16 c0       	rjmp	.+44     	; 0x4534 <__floatsisf+0x6c>
    4508:	88 23       	and	r24, r24
    450a:	11 f0       	breq	.+4      	; 0x4510 <__floatsisf+0x48>
    450c:	96 e9       	ldi	r25, 0x96	; 150
    450e:	11 c0       	rjmp	.+34     	; 0x4532 <__floatsisf+0x6a>
    4510:	77 23       	and	r23, r23
    4512:	21 f0       	breq	.+8      	; 0x451c <__floatsisf+0x54>
    4514:	9e e8       	ldi	r25, 0x8E	; 142
    4516:	87 2f       	mov	r24, r23
    4518:	76 2f       	mov	r23, r22
    451a:	05 c0       	rjmp	.+10     	; 0x4526 <__floatsisf+0x5e>
    451c:	66 23       	and	r22, r22
    451e:	71 f0       	breq	.+28     	; 0x453c <__floatsisf+0x74>
    4520:	96 e8       	ldi	r25, 0x86	; 134
    4522:	86 2f       	mov	r24, r22
    4524:	70 e0       	ldi	r23, 0x00	; 0
    4526:	60 e0       	ldi	r22, 0x00	; 0
    4528:	2a f0       	brmi	.+10     	; 0x4534 <__floatsisf+0x6c>
    452a:	9a 95       	dec	r25
    452c:	66 0f       	add	r22, r22
    452e:	77 1f       	adc	r23, r23
    4530:	88 1f       	adc	r24, r24
    4532:	da f7       	brpl	.-10     	; 0x452a <__floatsisf+0x62>
    4534:	88 0f       	add	r24, r24
    4536:	96 95       	lsr	r25
    4538:	87 95       	ror	r24
    453a:	97 f9       	bld	r25, 7
    453c:	08 95       	ret

0000453e <__fp_split3>:
    453e:	57 fd       	sbrc	r21, 7
    4540:	90 58       	subi	r25, 0x80	; 128
    4542:	44 0f       	add	r20, r20
    4544:	55 1f       	adc	r21, r21
    4546:	59 f0       	breq	.+22     	; 0x455e <__fp_splitA+0x10>
    4548:	5f 3f       	cpi	r21, 0xFF	; 255
    454a:	71 f0       	breq	.+28     	; 0x4568 <__fp_splitA+0x1a>
    454c:	47 95       	ror	r20

0000454e <__fp_splitA>:
    454e:	88 0f       	add	r24, r24
    4550:	97 fb       	bst	r25, 7
    4552:	99 1f       	adc	r25, r25
    4554:	61 f0       	breq	.+24     	; 0x456e <__fp_splitA+0x20>
    4556:	9f 3f       	cpi	r25, 0xFF	; 255
    4558:	79 f0       	breq	.+30     	; 0x4578 <__fp_splitA+0x2a>
    455a:	87 95       	ror	r24
    455c:	08 95       	ret
    455e:	12 16       	cp	r1, r18
    4560:	13 06       	cpc	r1, r19
    4562:	14 06       	cpc	r1, r20
    4564:	55 1f       	adc	r21, r21
    4566:	f2 cf       	rjmp	.-28     	; 0x454c <__fp_split3+0xe>
    4568:	46 95       	lsr	r20
    456a:	f1 df       	rcall	.-30     	; 0x454e <__fp_splitA>
    456c:	08 c0       	rjmp	.+16     	; 0x457e <__fp_splitA+0x30>
    456e:	16 16       	cp	r1, r22
    4570:	17 06       	cpc	r1, r23
    4572:	18 06       	cpc	r1, r24
    4574:	99 1f       	adc	r25, r25
    4576:	f1 cf       	rjmp	.-30     	; 0x455a <__fp_splitA+0xc>
    4578:	86 95       	lsr	r24
    457a:	71 05       	cpc	r23, r1
    457c:	61 05       	cpc	r22, r1
    457e:	08 94       	sec
    4580:	08 95       	ret

00004582 <__fp_zero>:
    4582:	e8 94       	clt

00004584 <__fp_szero>:
    4584:	bb 27       	eor	r27, r27
    4586:	66 27       	eor	r22, r22
    4588:	77 27       	eor	r23, r23
    458a:	cb 01       	movw	r24, r22
    458c:	97 f9       	bld	r25, 7
    458e:	08 95       	ret

00004590 <__mulsf3>:
    4590:	0b d0       	rcall	.+22     	; 0x45a8 <__mulsf3x>
    4592:	78 c0       	rjmp	.+240    	; 0x4684 <__fp_round>
    4594:	69 d0       	rcall	.+210    	; 0x4668 <__fp_pscA>
    4596:	28 f0       	brcs	.+10     	; 0x45a2 <__mulsf3+0x12>
    4598:	6e d0       	rcall	.+220    	; 0x4676 <__fp_pscB>
    459a:	18 f0       	brcs	.+6      	; 0x45a2 <__mulsf3+0x12>
    459c:	95 23       	and	r25, r21
    459e:	09 f0       	breq	.+2      	; 0x45a2 <__mulsf3+0x12>
    45a0:	5a c0       	rjmp	.+180    	; 0x4656 <__fp_inf>
    45a2:	5f c0       	rjmp	.+190    	; 0x4662 <__fp_nan>
    45a4:	11 24       	eor	r1, r1
    45a6:	ee cf       	rjmp	.-36     	; 0x4584 <__fp_szero>

000045a8 <__mulsf3x>:
    45a8:	ca df       	rcall	.-108    	; 0x453e <__fp_split3>
    45aa:	a0 f3       	brcs	.-24     	; 0x4594 <__mulsf3+0x4>

000045ac <__mulsf3_pse>:
    45ac:	95 9f       	mul	r25, r21
    45ae:	d1 f3       	breq	.-12     	; 0x45a4 <__mulsf3+0x14>
    45b0:	95 0f       	add	r25, r21
    45b2:	50 e0       	ldi	r21, 0x00	; 0
    45b4:	55 1f       	adc	r21, r21
    45b6:	62 9f       	mul	r22, r18
    45b8:	f0 01       	movw	r30, r0
    45ba:	72 9f       	mul	r23, r18
    45bc:	bb 27       	eor	r27, r27
    45be:	f0 0d       	add	r31, r0
    45c0:	b1 1d       	adc	r27, r1
    45c2:	63 9f       	mul	r22, r19
    45c4:	aa 27       	eor	r26, r26
    45c6:	f0 0d       	add	r31, r0
    45c8:	b1 1d       	adc	r27, r1
    45ca:	aa 1f       	adc	r26, r26
    45cc:	64 9f       	mul	r22, r20
    45ce:	66 27       	eor	r22, r22
    45d0:	b0 0d       	add	r27, r0
    45d2:	a1 1d       	adc	r26, r1
    45d4:	66 1f       	adc	r22, r22
    45d6:	82 9f       	mul	r24, r18
    45d8:	22 27       	eor	r18, r18
    45da:	b0 0d       	add	r27, r0
    45dc:	a1 1d       	adc	r26, r1
    45de:	62 1f       	adc	r22, r18
    45e0:	73 9f       	mul	r23, r19
    45e2:	b0 0d       	add	r27, r0
    45e4:	a1 1d       	adc	r26, r1
    45e6:	62 1f       	adc	r22, r18
    45e8:	83 9f       	mul	r24, r19
    45ea:	a0 0d       	add	r26, r0
    45ec:	61 1d       	adc	r22, r1
    45ee:	22 1f       	adc	r18, r18
    45f0:	74 9f       	mul	r23, r20
    45f2:	33 27       	eor	r19, r19
    45f4:	a0 0d       	add	r26, r0
    45f6:	61 1d       	adc	r22, r1
    45f8:	23 1f       	adc	r18, r19
    45fa:	84 9f       	mul	r24, r20
    45fc:	60 0d       	add	r22, r0
    45fe:	21 1d       	adc	r18, r1
    4600:	82 2f       	mov	r24, r18
    4602:	76 2f       	mov	r23, r22
    4604:	6a 2f       	mov	r22, r26
    4606:	11 24       	eor	r1, r1
    4608:	9f 57       	subi	r25, 0x7F	; 127
    460a:	50 40       	sbci	r21, 0x00	; 0
    460c:	8a f0       	brmi	.+34     	; 0x4630 <__mulsf3_pse+0x84>
    460e:	e1 f0       	breq	.+56     	; 0x4648 <__mulsf3_pse+0x9c>
    4610:	88 23       	and	r24, r24
    4612:	4a f0       	brmi	.+18     	; 0x4626 <__mulsf3_pse+0x7a>
    4614:	ee 0f       	add	r30, r30
    4616:	ff 1f       	adc	r31, r31
    4618:	bb 1f       	adc	r27, r27
    461a:	66 1f       	adc	r22, r22
    461c:	77 1f       	adc	r23, r23
    461e:	88 1f       	adc	r24, r24
    4620:	91 50       	subi	r25, 0x01	; 1
    4622:	50 40       	sbci	r21, 0x00	; 0
    4624:	a9 f7       	brne	.-22     	; 0x4610 <__mulsf3_pse+0x64>
    4626:	9e 3f       	cpi	r25, 0xFE	; 254
    4628:	51 05       	cpc	r21, r1
    462a:	70 f0       	brcs	.+28     	; 0x4648 <__mulsf3_pse+0x9c>
    462c:	14 c0       	rjmp	.+40     	; 0x4656 <__fp_inf>
    462e:	aa cf       	rjmp	.-172    	; 0x4584 <__fp_szero>
    4630:	5f 3f       	cpi	r21, 0xFF	; 255
    4632:	ec f3       	brlt	.-6      	; 0x462e <__mulsf3_pse+0x82>
    4634:	98 3e       	cpi	r25, 0xE8	; 232
    4636:	dc f3       	brlt	.-10     	; 0x462e <__mulsf3_pse+0x82>
    4638:	86 95       	lsr	r24
    463a:	77 95       	ror	r23
    463c:	67 95       	ror	r22
    463e:	b7 95       	ror	r27
    4640:	f7 95       	ror	r31
    4642:	e7 95       	ror	r30
    4644:	9f 5f       	subi	r25, 0xFF	; 255
    4646:	c1 f7       	brne	.-16     	; 0x4638 <__mulsf3_pse+0x8c>
    4648:	fe 2b       	or	r31, r30
    464a:	88 0f       	add	r24, r24
    464c:	91 1d       	adc	r25, r1
    464e:	96 95       	lsr	r25
    4650:	87 95       	ror	r24
    4652:	97 f9       	bld	r25, 7
    4654:	08 95       	ret

00004656 <__fp_inf>:
    4656:	97 f9       	bld	r25, 7
    4658:	9f 67       	ori	r25, 0x7F	; 127
    465a:	80 e8       	ldi	r24, 0x80	; 128
    465c:	70 e0       	ldi	r23, 0x00	; 0
    465e:	60 e0       	ldi	r22, 0x00	; 0
    4660:	08 95       	ret

00004662 <__fp_nan>:
    4662:	9f ef       	ldi	r25, 0xFF	; 255
    4664:	80 ec       	ldi	r24, 0xC0	; 192
    4666:	08 95       	ret

00004668 <__fp_pscA>:
    4668:	00 24       	eor	r0, r0
    466a:	0a 94       	dec	r0
    466c:	16 16       	cp	r1, r22
    466e:	17 06       	cpc	r1, r23
    4670:	18 06       	cpc	r1, r24
    4672:	09 06       	cpc	r0, r25
    4674:	08 95       	ret

00004676 <__fp_pscB>:
    4676:	00 24       	eor	r0, r0
    4678:	0a 94       	dec	r0
    467a:	12 16       	cp	r1, r18
    467c:	13 06       	cpc	r1, r19
    467e:	14 06       	cpc	r1, r20
    4680:	05 06       	cpc	r0, r21
    4682:	08 95       	ret

00004684 <__fp_round>:
    4684:	09 2e       	mov	r0, r25
    4686:	03 94       	inc	r0
    4688:	00 0c       	add	r0, r0
    468a:	11 f4       	brne	.+4      	; 0x4690 <__fp_round+0xc>
    468c:	88 23       	and	r24, r24
    468e:	52 f0       	brmi	.+20     	; 0x46a4 <__fp_round+0x20>
    4690:	bb 0f       	add	r27, r27
    4692:	40 f4       	brcc	.+16     	; 0x46a4 <__fp_round+0x20>
    4694:	bf 2b       	or	r27, r31
    4696:	11 f4       	brne	.+4      	; 0x469c <__fp_round+0x18>
    4698:	60 ff       	sbrs	r22, 0
    469a:	04 c0       	rjmp	.+8      	; 0x46a4 <__fp_round+0x20>
    469c:	6f 5f       	subi	r22, 0xFF	; 255
    469e:	7f 4f       	sbci	r23, 0xFF	; 255
    46a0:	8f 4f       	sbci	r24, 0xFF	; 255
    46a2:	9f 4f       	sbci	r25, 0xFF	; 255
    46a4:	08 95       	ret

000046a6 <__mulsi3>:
    46a6:	db 01       	movw	r26, r22
    46a8:	8f 93       	push	r24
    46aa:	9f 93       	push	r25
    46ac:	85 d0       	rcall	.+266    	; 0x47b8 <__muluhisi3>
    46ae:	bf 91       	pop	r27
    46b0:	af 91       	pop	r26
    46b2:	a2 9f       	mul	r26, r18
    46b4:	80 0d       	add	r24, r0
    46b6:	91 1d       	adc	r25, r1
    46b8:	a3 9f       	mul	r26, r19
    46ba:	90 0d       	add	r25, r0
    46bc:	b2 9f       	mul	r27, r18
    46be:	90 0d       	add	r25, r0
    46c0:	11 24       	eor	r1, r1
    46c2:	08 95       	ret

000046c4 <__udivmodhi4>:
    46c4:	aa 1b       	sub	r26, r26
    46c6:	bb 1b       	sub	r27, r27
    46c8:	51 e1       	ldi	r21, 0x11	; 17
    46ca:	07 c0       	rjmp	.+14     	; 0x46da <__udivmodhi4_ep>

000046cc <__udivmodhi4_loop>:
    46cc:	aa 1f       	adc	r26, r26
    46ce:	bb 1f       	adc	r27, r27
    46d0:	a6 17       	cp	r26, r22
    46d2:	b7 07       	cpc	r27, r23
    46d4:	10 f0       	brcs	.+4      	; 0x46da <__udivmodhi4_ep>
    46d6:	a6 1b       	sub	r26, r22
    46d8:	b7 0b       	sbc	r27, r23

000046da <__udivmodhi4_ep>:
    46da:	88 1f       	adc	r24, r24
    46dc:	99 1f       	adc	r25, r25
    46de:	5a 95       	dec	r21
    46e0:	a9 f7       	brne	.-22     	; 0x46cc <__udivmodhi4_loop>
    46e2:	80 95       	com	r24
    46e4:	90 95       	com	r25
    46e6:	bc 01       	movw	r22, r24
    46e8:	cd 01       	movw	r24, r26
    46ea:	08 95       	ret

000046ec <__divmodhi4>:
    46ec:	97 fb       	bst	r25, 7
    46ee:	07 2e       	mov	r0, r23
    46f0:	16 f4       	brtc	.+4      	; 0x46f6 <__divmodhi4+0xa>
    46f2:	00 94       	com	r0
    46f4:	06 d0       	rcall	.+12     	; 0x4702 <__divmodhi4_neg1>
    46f6:	77 fd       	sbrc	r23, 7
    46f8:	08 d0       	rcall	.+16     	; 0x470a <__divmodhi4_neg2>
    46fa:	e4 df       	rcall	.-56     	; 0x46c4 <__udivmodhi4>
    46fc:	07 fc       	sbrc	r0, 7
    46fe:	05 d0       	rcall	.+10     	; 0x470a <__divmodhi4_neg2>
    4700:	3e f4       	brtc	.+14     	; 0x4710 <__divmodhi4_exit>

00004702 <__divmodhi4_neg1>:
    4702:	90 95       	com	r25
    4704:	81 95       	neg	r24
    4706:	9f 4f       	sbci	r25, 0xFF	; 255
    4708:	08 95       	ret

0000470a <__divmodhi4_neg2>:
    470a:	70 95       	com	r23
    470c:	61 95       	neg	r22
    470e:	7f 4f       	sbci	r23, 0xFF	; 255

00004710 <__divmodhi4_exit>:
    4710:	08 95       	ret

00004712 <__udivmodsi4>:
    4712:	a1 e2       	ldi	r26, 0x21	; 33
    4714:	1a 2e       	mov	r1, r26
    4716:	aa 1b       	sub	r26, r26
    4718:	bb 1b       	sub	r27, r27
    471a:	fd 01       	movw	r30, r26
    471c:	0d c0       	rjmp	.+26     	; 0x4738 <__udivmodsi4_ep>

0000471e <__udivmodsi4_loop>:
    471e:	aa 1f       	adc	r26, r26
    4720:	bb 1f       	adc	r27, r27
    4722:	ee 1f       	adc	r30, r30
    4724:	ff 1f       	adc	r31, r31
    4726:	a2 17       	cp	r26, r18
    4728:	b3 07       	cpc	r27, r19
    472a:	e4 07       	cpc	r30, r20
    472c:	f5 07       	cpc	r31, r21
    472e:	20 f0       	brcs	.+8      	; 0x4738 <__udivmodsi4_ep>
    4730:	a2 1b       	sub	r26, r18
    4732:	b3 0b       	sbc	r27, r19
    4734:	e4 0b       	sbc	r30, r20
    4736:	f5 0b       	sbc	r31, r21

00004738 <__udivmodsi4_ep>:
    4738:	66 1f       	adc	r22, r22
    473a:	77 1f       	adc	r23, r23
    473c:	88 1f       	adc	r24, r24
    473e:	99 1f       	adc	r25, r25
    4740:	1a 94       	dec	r1
    4742:	69 f7       	brne	.-38     	; 0x471e <__udivmodsi4_loop>
    4744:	60 95       	com	r22
    4746:	70 95       	com	r23
    4748:	80 95       	com	r24
    474a:	90 95       	com	r25
    474c:	9b 01       	movw	r18, r22
    474e:	ac 01       	movw	r20, r24
    4750:	bd 01       	movw	r22, r26
    4752:	cf 01       	movw	r24, r30
    4754:	08 95       	ret

00004756 <__divmodsi4>:
    4756:	05 2e       	mov	r0, r21
    4758:	97 fb       	bst	r25, 7
    475a:	16 f4       	brtc	.+4      	; 0x4760 <__divmodsi4+0xa>
    475c:	00 94       	com	r0
    475e:	0f d0       	rcall	.+30     	; 0x477e <__negsi2>
    4760:	57 fd       	sbrc	r21, 7
    4762:	05 d0       	rcall	.+10     	; 0x476e <__divmodsi4_neg2>
    4764:	d6 df       	rcall	.-84     	; 0x4712 <__udivmodsi4>
    4766:	07 fc       	sbrc	r0, 7
    4768:	02 d0       	rcall	.+4      	; 0x476e <__divmodsi4_neg2>
    476a:	46 f4       	brtc	.+16     	; 0x477c <__divmodsi4_exit>
    476c:	08 c0       	rjmp	.+16     	; 0x477e <__negsi2>

0000476e <__divmodsi4_neg2>:
    476e:	50 95       	com	r21
    4770:	40 95       	com	r20
    4772:	30 95       	com	r19
    4774:	21 95       	neg	r18
    4776:	3f 4f       	sbci	r19, 0xFF	; 255
    4778:	4f 4f       	sbci	r20, 0xFF	; 255
    477a:	5f 4f       	sbci	r21, 0xFF	; 255

0000477c <__divmodsi4_exit>:
    477c:	08 95       	ret

0000477e <__negsi2>:
    477e:	90 95       	com	r25
    4780:	80 95       	com	r24
    4782:	70 95       	com	r23
    4784:	61 95       	neg	r22
    4786:	7f 4f       	sbci	r23, 0xFF	; 255
    4788:	8f 4f       	sbci	r24, 0xFF	; 255
    478a:	9f 4f       	sbci	r25, 0xFF	; 255
    478c:	08 95       	ret

0000478e <__tablejump2__>:
    478e:	ee 0f       	add	r30, r30
    4790:	ff 1f       	adc	r31, r31
    4792:	05 90       	lpm	r0, Z+
    4794:	f4 91       	lpm	r31, Z
    4796:	e0 2d       	mov	r30, r0
    4798:	09 94       	ijmp

0000479a <__umulhisi3>:
    479a:	a2 9f       	mul	r26, r18
    479c:	b0 01       	movw	r22, r0
    479e:	b3 9f       	mul	r27, r19
    47a0:	c0 01       	movw	r24, r0
    47a2:	a3 9f       	mul	r26, r19
    47a4:	70 0d       	add	r23, r0
    47a6:	81 1d       	adc	r24, r1
    47a8:	11 24       	eor	r1, r1
    47aa:	91 1d       	adc	r25, r1
    47ac:	b2 9f       	mul	r27, r18
    47ae:	70 0d       	add	r23, r0
    47b0:	81 1d       	adc	r24, r1
    47b2:	11 24       	eor	r1, r1
    47b4:	91 1d       	adc	r25, r1
    47b6:	08 95       	ret

000047b8 <__muluhisi3>:
    47b8:	f0 df       	rcall	.-32     	; 0x479a <__umulhisi3>
    47ba:	a5 9f       	mul	r26, r21
    47bc:	90 0d       	add	r25, r0
    47be:	b4 9f       	mul	r27, r20
    47c0:	90 0d       	add	r25, r0
    47c2:	a4 9f       	mul	r26, r20
    47c4:	80 0d       	add	r24, r0
    47c6:	91 1d       	adc	r25, r1
    47c8:	11 24       	eor	r1, r1
    47ca:	08 95       	ret

000047cc <atoi>:
    47cc:	fc 01       	movw	r30, r24
    47ce:	88 27       	eor	r24, r24
    47d0:	99 27       	eor	r25, r25
    47d2:	e8 94       	clt
    47d4:	21 91       	ld	r18, Z+
    47d6:	20 32       	cpi	r18, 0x20	; 32
    47d8:	e9 f3       	breq	.-6      	; 0x47d4 <atoi+0x8>
    47da:	29 30       	cpi	r18, 0x09	; 9
    47dc:	10 f0       	brcs	.+4      	; 0x47e2 <atoi+0x16>
    47de:	2e 30       	cpi	r18, 0x0E	; 14
    47e0:	c8 f3       	brcs	.-14     	; 0x47d4 <atoi+0x8>
    47e2:	2b 32       	cpi	r18, 0x2B	; 43
    47e4:	39 f0       	breq	.+14     	; 0x47f4 <atoi+0x28>
    47e6:	2d 32       	cpi	r18, 0x2D	; 45
    47e8:	31 f4       	brne	.+12     	; 0x47f6 <atoi+0x2a>
    47ea:	68 94       	set
    47ec:	03 c0       	rjmp	.+6      	; 0x47f4 <atoi+0x28>
    47ee:	6f d0       	rcall	.+222    	; 0x48ce <__mulhi_const_10>
    47f0:	82 0f       	add	r24, r18
    47f2:	91 1d       	adc	r25, r1
    47f4:	21 91       	ld	r18, Z+
    47f6:	20 53       	subi	r18, 0x30	; 48
    47f8:	2a 30       	cpi	r18, 0x0A	; 10
    47fa:	c8 f3       	brcs	.-14     	; 0x47ee <atoi+0x22>
    47fc:	1e f4       	brtc	.+6      	; 0x4804 <atoi+0x38>
    47fe:	90 95       	com	r25
    4800:	81 95       	neg	r24
    4802:	9f 4f       	sbci	r25, 0xFF	; 255
    4804:	08 95       	ret

00004806 <atol>:
    4806:	1f 93       	push	r17
    4808:	fc 01       	movw	r30, r24
    480a:	99 27       	eor	r25, r25
    480c:	88 27       	eor	r24, r24
    480e:	bc 01       	movw	r22, r24
    4810:	e8 94       	clt
    4812:	11 91       	ld	r17, Z+
    4814:	10 32       	cpi	r17, 0x20	; 32
    4816:	e9 f3       	breq	.-6      	; 0x4812 <atol+0xc>
    4818:	19 30       	cpi	r17, 0x09	; 9
    481a:	10 f0       	brcs	.+4      	; 0x4820 <atol+0x1a>
    481c:	1e 30       	cpi	r17, 0x0E	; 14
    481e:	c8 f3       	brcs	.-14     	; 0x4812 <atol+0xc>
    4820:	1b 32       	cpi	r17, 0x2B	; 43
    4822:	49 f0       	breq	.+18     	; 0x4836 <atol+0x30>
    4824:	1d 32       	cpi	r17, 0x2D	; 45
    4826:	41 f4       	brne	.+16     	; 0x4838 <atol+0x32>
    4828:	68 94       	set
    482a:	05 c0       	rjmp	.+10     	; 0x4836 <atol+0x30>
    482c:	3b d0       	rcall	.+118    	; 0x48a4 <__mulsi_const_10>
    482e:	61 0f       	add	r22, r17
    4830:	71 1d       	adc	r23, r1
    4832:	81 1d       	adc	r24, r1
    4834:	91 1d       	adc	r25, r1
    4836:	11 91       	ld	r17, Z+
    4838:	10 53       	subi	r17, 0x30	; 48
    483a:	1a 30       	cpi	r17, 0x0A	; 10
    483c:	b8 f3       	brcs	.-18     	; 0x482c <atol+0x26>
    483e:	3e f4       	brtc	.+14     	; 0x484e <atol+0x48>
    4840:	90 95       	com	r25
    4842:	80 95       	com	r24
    4844:	70 95       	com	r23
    4846:	61 95       	neg	r22
    4848:	7f 4f       	sbci	r23, 0xFF	; 255
    484a:	8f 4f       	sbci	r24, 0xFF	; 255
    484c:	9f 4f       	sbci	r25, 0xFF	; 255
    484e:	1f 91       	pop	r17
    4850:	08 95       	ret

00004852 <toupper>:
    4852:	91 11       	cpse	r25, r1
    4854:	08 95       	ret
    4856:	81 56       	subi	r24, 0x61	; 97
    4858:	8a 51       	subi	r24, 0x1A	; 26
    485a:	08 f4       	brcc	.+2      	; 0x485e <toupper+0xc>
    485c:	80 52       	subi	r24, 0x20	; 32
    485e:	85 58       	subi	r24, 0x85	; 133
    4860:	08 95       	ret

00004862 <strchr>:
    4862:	fc 01       	movw	r30, r24
    4864:	81 91       	ld	r24, Z+
    4866:	86 17       	cp	r24, r22
    4868:	21 f0       	breq	.+8      	; 0x4872 <strchr+0x10>
    486a:	88 23       	and	r24, r24
    486c:	d9 f7       	brne	.-10     	; 0x4864 <strchr+0x2>
    486e:	99 27       	eor	r25, r25
    4870:	08 95       	ret
    4872:	31 97       	sbiw	r30, 0x01	; 1
    4874:	cf 01       	movw	r24, r30
    4876:	08 95       	ret

00004878 <strcpy>:
    4878:	fb 01       	movw	r30, r22
    487a:	dc 01       	movw	r26, r24
    487c:	01 90       	ld	r0, Z+
    487e:	0d 92       	st	X+, r0
    4880:	00 20       	and	r0, r0
    4882:	e1 f7       	brne	.-8      	; 0x487c <strcpy+0x4>
    4884:	08 95       	ret

00004886 <strncpy>:
    4886:	fb 01       	movw	r30, r22
    4888:	dc 01       	movw	r26, r24
    488a:	41 50       	subi	r20, 0x01	; 1
    488c:	50 40       	sbci	r21, 0x00	; 0
    488e:	48 f0       	brcs	.+18     	; 0x48a2 <strncpy+0x1c>
    4890:	01 90       	ld	r0, Z+
    4892:	0d 92       	st	X+, r0
    4894:	00 20       	and	r0, r0
    4896:	c9 f7       	brne	.-14     	; 0x488a <strncpy+0x4>
    4898:	01 c0       	rjmp	.+2      	; 0x489c <strncpy+0x16>
    489a:	1d 92       	st	X+, r1
    489c:	41 50       	subi	r20, 0x01	; 1
    489e:	50 40       	sbci	r21, 0x00	; 0
    48a0:	e0 f7       	brcc	.-8      	; 0x489a <strncpy+0x14>
    48a2:	08 95       	ret

000048a4 <__mulsi_const_10>:
    48a4:	59 2f       	mov	r21, r25
    48a6:	48 2f       	mov	r20, r24
    48a8:	37 2f       	mov	r19, r23
    48aa:	26 2f       	mov	r18, r22
    48ac:	66 0f       	add	r22, r22
    48ae:	77 1f       	adc	r23, r23
    48b0:	88 1f       	adc	r24, r24
    48b2:	99 1f       	adc	r25, r25
    48b4:	66 0f       	add	r22, r22
    48b6:	77 1f       	adc	r23, r23
    48b8:	88 1f       	adc	r24, r24
    48ba:	99 1f       	adc	r25, r25
    48bc:	62 0f       	add	r22, r18
    48be:	73 1f       	adc	r23, r19
    48c0:	84 1f       	adc	r24, r20
    48c2:	95 1f       	adc	r25, r21
    48c4:	66 0f       	add	r22, r22
    48c6:	77 1f       	adc	r23, r23
    48c8:	88 1f       	adc	r24, r24
    48ca:	99 1f       	adc	r25, r25
    48cc:	08 95       	ret

000048ce <__mulhi_const_10>:
    48ce:	7a e0       	ldi	r23, 0x0A	; 10
    48d0:	97 9f       	mul	r25, r23
    48d2:	90 2d       	mov	r25, r0
    48d4:	87 9f       	mul	r24, r23
    48d6:	80 2d       	mov	r24, r0
    48d8:	91 0d       	add	r25, r1
    48da:	11 24       	eor	r1, r1
    48dc:	08 95       	ret

000048de <sprintf>:
    48de:	ae e0       	ldi	r26, 0x0E	; 14
    48e0:	b0 e0       	ldi	r27, 0x00	; 0
    48e2:	e4 e7       	ldi	r30, 0x74	; 116
    48e4:	f4 e2       	ldi	r31, 0x24	; 36
    48e6:	dd c2       	rjmp	.+1466   	; 0x4ea2 <__prologue_saves__+0x1c>
    48e8:	0d 89       	ldd	r16, Y+21	; 0x15
    48ea:	1e 89       	ldd	r17, Y+22	; 0x16
    48ec:	86 e0       	ldi	r24, 0x06	; 6
    48ee:	8c 83       	std	Y+4, r24	; 0x04
    48f0:	1a 83       	std	Y+2, r17	; 0x02
    48f2:	09 83       	std	Y+1, r16	; 0x01
    48f4:	8f ef       	ldi	r24, 0xFF	; 255
    48f6:	9f e7       	ldi	r25, 0x7F	; 127
    48f8:	9e 83       	std	Y+6, r25	; 0x06
    48fa:	8d 83       	std	Y+5, r24	; 0x05
    48fc:	ae 01       	movw	r20, r28
    48fe:	47 5e       	subi	r20, 0xE7	; 231
    4900:	5f 4f       	sbci	r21, 0xFF	; 255
    4902:	6f 89       	ldd	r22, Y+23	; 0x17
    4904:	78 8d       	ldd	r23, Y+24	; 0x18
    4906:	ce 01       	movw	r24, r28
    4908:	01 96       	adiw	r24, 0x01	; 1
    490a:	08 d0       	rcall	.+16     	; 0x491c <vfprintf>
    490c:	ef 81       	ldd	r30, Y+7	; 0x07
    490e:	f8 85       	ldd	r31, Y+8	; 0x08
    4910:	e0 0f       	add	r30, r16
    4912:	f1 1f       	adc	r31, r17
    4914:	10 82       	st	Z, r1
    4916:	2e 96       	adiw	r28, 0x0e	; 14
    4918:	e4 e0       	ldi	r30, 0x04	; 4
    491a:	df c2       	rjmp	.+1470   	; 0x4eda <__epilogue_restores__+0x1c>

0000491c <vfprintf>:
    491c:	ab e0       	ldi	r26, 0x0B	; 11
    491e:	b0 e0       	ldi	r27, 0x00	; 0
    4920:	e3 e9       	ldi	r30, 0x93	; 147
    4922:	f4 e2       	ldi	r31, 0x24	; 36
    4924:	b0 c2       	rjmp	.+1376   	; 0x4e86 <__prologue_saves__>
    4926:	6c 01       	movw	r12, r24
    4928:	7b 01       	movw	r14, r22
    492a:	8a 01       	movw	r16, r20
    492c:	fc 01       	movw	r30, r24
    492e:	17 82       	std	Z+7, r1	; 0x07
    4930:	16 82       	std	Z+6, r1	; 0x06
    4932:	83 81       	ldd	r24, Z+3	; 0x03
    4934:	81 ff       	sbrs	r24, 1
    4936:	bf c1       	rjmp	.+894    	; 0x4cb6 <vfprintf+0x39a>
    4938:	ce 01       	movw	r24, r28
    493a:	01 96       	adiw	r24, 0x01	; 1
    493c:	3c 01       	movw	r6, r24
    493e:	f6 01       	movw	r30, r12
    4940:	93 81       	ldd	r25, Z+3	; 0x03
    4942:	f7 01       	movw	r30, r14
    4944:	93 fd       	sbrc	r25, 3
    4946:	85 91       	lpm	r24, Z+
    4948:	93 ff       	sbrs	r25, 3
    494a:	81 91       	ld	r24, Z+
    494c:	7f 01       	movw	r14, r30
    494e:	88 23       	and	r24, r24
    4950:	09 f4       	brne	.+2      	; 0x4954 <vfprintf+0x38>
    4952:	ad c1       	rjmp	.+858    	; 0x4cae <vfprintf+0x392>
    4954:	85 32       	cpi	r24, 0x25	; 37
    4956:	39 f4       	brne	.+14     	; 0x4966 <vfprintf+0x4a>
    4958:	93 fd       	sbrc	r25, 3
    495a:	85 91       	lpm	r24, Z+
    495c:	93 ff       	sbrs	r25, 3
    495e:	81 91       	ld	r24, Z+
    4960:	7f 01       	movw	r14, r30
    4962:	85 32       	cpi	r24, 0x25	; 37
    4964:	21 f4       	brne	.+8      	; 0x496e <vfprintf+0x52>
    4966:	b6 01       	movw	r22, r12
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	c0 d1       	rcall	.+896    	; 0x4cec <fputc>
    496c:	e8 cf       	rjmp	.-48     	; 0x493e <vfprintf+0x22>
    496e:	91 2c       	mov	r9, r1
    4970:	21 2c       	mov	r2, r1
    4972:	31 2c       	mov	r3, r1
    4974:	ff e1       	ldi	r31, 0x1F	; 31
    4976:	f3 15       	cp	r31, r3
    4978:	d8 f0       	brcs	.+54     	; 0x49b0 <vfprintf+0x94>
    497a:	8b 32       	cpi	r24, 0x2B	; 43
    497c:	79 f0       	breq	.+30     	; 0x499c <vfprintf+0x80>
    497e:	38 f4       	brcc	.+14     	; 0x498e <vfprintf+0x72>
    4980:	80 32       	cpi	r24, 0x20	; 32
    4982:	79 f0       	breq	.+30     	; 0x49a2 <vfprintf+0x86>
    4984:	83 32       	cpi	r24, 0x23	; 35
    4986:	a1 f4       	brne	.+40     	; 0x49b0 <vfprintf+0x94>
    4988:	23 2d       	mov	r18, r3
    498a:	20 61       	ori	r18, 0x10	; 16
    498c:	1d c0       	rjmp	.+58     	; 0x49c8 <vfprintf+0xac>
    498e:	8d 32       	cpi	r24, 0x2D	; 45
    4990:	61 f0       	breq	.+24     	; 0x49aa <vfprintf+0x8e>
    4992:	80 33       	cpi	r24, 0x30	; 48
    4994:	69 f4       	brne	.+26     	; 0x49b0 <vfprintf+0x94>
    4996:	23 2d       	mov	r18, r3
    4998:	21 60       	ori	r18, 0x01	; 1
    499a:	16 c0       	rjmp	.+44     	; 0x49c8 <vfprintf+0xac>
    499c:	83 2d       	mov	r24, r3
    499e:	82 60       	ori	r24, 0x02	; 2
    49a0:	38 2e       	mov	r3, r24
    49a2:	e3 2d       	mov	r30, r3
    49a4:	e4 60       	ori	r30, 0x04	; 4
    49a6:	3e 2e       	mov	r3, r30
    49a8:	2a c0       	rjmp	.+84     	; 0x49fe <vfprintf+0xe2>
    49aa:	f3 2d       	mov	r31, r3
    49ac:	f8 60       	ori	r31, 0x08	; 8
    49ae:	1d c0       	rjmp	.+58     	; 0x49ea <vfprintf+0xce>
    49b0:	37 fc       	sbrc	r3, 7
    49b2:	2d c0       	rjmp	.+90     	; 0x4a0e <vfprintf+0xf2>
    49b4:	20 ed       	ldi	r18, 0xD0	; 208
    49b6:	28 0f       	add	r18, r24
    49b8:	2a 30       	cpi	r18, 0x0A	; 10
    49ba:	40 f0       	brcs	.+16     	; 0x49cc <vfprintf+0xb0>
    49bc:	8e 32       	cpi	r24, 0x2E	; 46
    49be:	b9 f4       	brne	.+46     	; 0x49ee <vfprintf+0xd2>
    49c0:	36 fc       	sbrc	r3, 6
    49c2:	75 c1       	rjmp	.+746    	; 0x4cae <vfprintf+0x392>
    49c4:	23 2d       	mov	r18, r3
    49c6:	20 64       	ori	r18, 0x40	; 64
    49c8:	32 2e       	mov	r3, r18
    49ca:	19 c0       	rjmp	.+50     	; 0x49fe <vfprintf+0xe2>
    49cc:	36 fe       	sbrs	r3, 6
    49ce:	06 c0       	rjmp	.+12     	; 0x49dc <vfprintf+0xc0>
    49d0:	8a e0       	ldi	r24, 0x0A	; 10
    49d2:	98 9e       	mul	r9, r24
    49d4:	20 0d       	add	r18, r0
    49d6:	11 24       	eor	r1, r1
    49d8:	92 2e       	mov	r9, r18
    49da:	11 c0       	rjmp	.+34     	; 0x49fe <vfprintf+0xe2>
    49dc:	ea e0       	ldi	r30, 0x0A	; 10
    49de:	2e 9e       	mul	r2, r30
    49e0:	20 0d       	add	r18, r0
    49e2:	11 24       	eor	r1, r1
    49e4:	22 2e       	mov	r2, r18
    49e6:	f3 2d       	mov	r31, r3
    49e8:	f0 62       	ori	r31, 0x20	; 32
    49ea:	3f 2e       	mov	r3, r31
    49ec:	08 c0       	rjmp	.+16     	; 0x49fe <vfprintf+0xe2>
    49ee:	8c 36       	cpi	r24, 0x6C	; 108
    49f0:	21 f4       	brne	.+8      	; 0x49fa <vfprintf+0xde>
    49f2:	83 2d       	mov	r24, r3
    49f4:	80 68       	ori	r24, 0x80	; 128
    49f6:	38 2e       	mov	r3, r24
    49f8:	02 c0       	rjmp	.+4      	; 0x49fe <vfprintf+0xe2>
    49fa:	88 36       	cpi	r24, 0x68	; 104
    49fc:	41 f4       	brne	.+16     	; 0x4a0e <vfprintf+0xf2>
    49fe:	f7 01       	movw	r30, r14
    4a00:	93 fd       	sbrc	r25, 3
    4a02:	85 91       	lpm	r24, Z+
    4a04:	93 ff       	sbrs	r25, 3
    4a06:	81 91       	ld	r24, Z+
    4a08:	7f 01       	movw	r14, r30
    4a0a:	81 11       	cpse	r24, r1
    4a0c:	b3 cf       	rjmp	.-154    	; 0x4974 <vfprintf+0x58>
    4a0e:	98 2f       	mov	r25, r24
    4a10:	9f 7d       	andi	r25, 0xDF	; 223
    4a12:	95 54       	subi	r25, 0x45	; 69
    4a14:	93 30       	cpi	r25, 0x03	; 3
    4a16:	28 f4       	brcc	.+10     	; 0x4a22 <vfprintf+0x106>
    4a18:	0c 5f       	subi	r16, 0xFC	; 252
    4a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1c:	9f e3       	ldi	r25, 0x3F	; 63
    4a1e:	99 83       	std	Y+1, r25	; 0x01
    4a20:	0d c0       	rjmp	.+26     	; 0x4a3c <vfprintf+0x120>
    4a22:	83 36       	cpi	r24, 0x63	; 99
    4a24:	31 f0       	breq	.+12     	; 0x4a32 <vfprintf+0x116>
    4a26:	83 37       	cpi	r24, 0x73	; 115
    4a28:	71 f0       	breq	.+28     	; 0x4a46 <vfprintf+0x12a>
    4a2a:	83 35       	cpi	r24, 0x53	; 83
    4a2c:	09 f0       	breq	.+2      	; 0x4a30 <vfprintf+0x114>
    4a2e:	55 c0       	rjmp	.+170    	; 0x4ada <vfprintf+0x1be>
    4a30:	20 c0       	rjmp	.+64     	; 0x4a72 <vfprintf+0x156>
    4a32:	f8 01       	movw	r30, r16
    4a34:	80 81       	ld	r24, Z
    4a36:	89 83       	std	Y+1, r24	; 0x01
    4a38:	0e 5f       	subi	r16, 0xFE	; 254
    4a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a3c:	88 24       	eor	r8, r8
    4a3e:	83 94       	inc	r8
    4a40:	91 2c       	mov	r9, r1
    4a42:	53 01       	movw	r10, r6
    4a44:	12 c0       	rjmp	.+36     	; 0x4a6a <vfprintf+0x14e>
    4a46:	28 01       	movw	r4, r16
    4a48:	f2 e0       	ldi	r31, 0x02	; 2
    4a4a:	4f 0e       	add	r4, r31
    4a4c:	51 1c       	adc	r5, r1
    4a4e:	f8 01       	movw	r30, r16
    4a50:	a0 80       	ld	r10, Z
    4a52:	b1 80       	ldd	r11, Z+1	; 0x01
    4a54:	36 fe       	sbrs	r3, 6
    4a56:	03 c0       	rjmp	.+6      	; 0x4a5e <vfprintf+0x142>
    4a58:	69 2d       	mov	r22, r9
    4a5a:	70 e0       	ldi	r23, 0x00	; 0
    4a5c:	02 c0       	rjmp	.+4      	; 0x4a62 <vfprintf+0x146>
    4a5e:	6f ef       	ldi	r22, 0xFF	; 255
    4a60:	7f ef       	ldi	r23, 0xFF	; 255
    4a62:	c5 01       	movw	r24, r10
    4a64:	38 d1       	rcall	.+624    	; 0x4cd6 <strnlen>
    4a66:	4c 01       	movw	r8, r24
    4a68:	82 01       	movw	r16, r4
    4a6a:	f3 2d       	mov	r31, r3
    4a6c:	ff 77       	andi	r31, 0x7F	; 127
    4a6e:	3f 2e       	mov	r3, r31
    4a70:	15 c0       	rjmp	.+42     	; 0x4a9c <vfprintf+0x180>
    4a72:	28 01       	movw	r4, r16
    4a74:	22 e0       	ldi	r18, 0x02	; 2
    4a76:	42 0e       	add	r4, r18
    4a78:	51 1c       	adc	r5, r1
    4a7a:	f8 01       	movw	r30, r16
    4a7c:	a0 80       	ld	r10, Z
    4a7e:	b1 80       	ldd	r11, Z+1	; 0x01
    4a80:	36 fe       	sbrs	r3, 6
    4a82:	03 c0       	rjmp	.+6      	; 0x4a8a <vfprintf+0x16e>
    4a84:	69 2d       	mov	r22, r9
    4a86:	70 e0       	ldi	r23, 0x00	; 0
    4a88:	02 c0       	rjmp	.+4      	; 0x4a8e <vfprintf+0x172>
    4a8a:	6f ef       	ldi	r22, 0xFF	; 255
    4a8c:	7f ef       	ldi	r23, 0xFF	; 255
    4a8e:	c5 01       	movw	r24, r10
    4a90:	17 d1       	rcall	.+558    	; 0x4cc0 <strnlen_P>
    4a92:	4c 01       	movw	r8, r24
    4a94:	f3 2d       	mov	r31, r3
    4a96:	f0 68       	ori	r31, 0x80	; 128
    4a98:	3f 2e       	mov	r3, r31
    4a9a:	82 01       	movw	r16, r4
    4a9c:	33 fc       	sbrc	r3, 3
    4a9e:	19 c0       	rjmp	.+50     	; 0x4ad2 <vfprintf+0x1b6>
    4aa0:	82 2d       	mov	r24, r2
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	88 16       	cp	r8, r24
    4aa6:	99 06       	cpc	r9, r25
    4aa8:	a0 f4       	brcc	.+40     	; 0x4ad2 <vfprintf+0x1b6>
    4aaa:	b6 01       	movw	r22, r12
    4aac:	80 e2       	ldi	r24, 0x20	; 32
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	1d d1       	rcall	.+570    	; 0x4cec <fputc>
    4ab2:	2a 94       	dec	r2
    4ab4:	f5 cf       	rjmp	.-22     	; 0x4aa0 <vfprintf+0x184>
    4ab6:	f5 01       	movw	r30, r10
    4ab8:	37 fc       	sbrc	r3, 7
    4aba:	85 91       	lpm	r24, Z+
    4abc:	37 fe       	sbrs	r3, 7
    4abe:	81 91       	ld	r24, Z+
    4ac0:	5f 01       	movw	r10, r30
    4ac2:	b6 01       	movw	r22, r12
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	12 d1       	rcall	.+548    	; 0x4cec <fputc>
    4ac8:	21 10       	cpse	r2, r1
    4aca:	2a 94       	dec	r2
    4acc:	21 e0       	ldi	r18, 0x01	; 1
    4ace:	82 1a       	sub	r8, r18
    4ad0:	91 08       	sbc	r9, r1
    4ad2:	81 14       	cp	r8, r1
    4ad4:	91 04       	cpc	r9, r1
    4ad6:	79 f7       	brne	.-34     	; 0x4ab6 <vfprintf+0x19a>
    4ad8:	e1 c0       	rjmp	.+450    	; 0x4c9c <vfprintf+0x380>
    4ada:	84 36       	cpi	r24, 0x64	; 100
    4adc:	11 f0       	breq	.+4      	; 0x4ae2 <vfprintf+0x1c6>
    4ade:	89 36       	cpi	r24, 0x69	; 105
    4ae0:	39 f5       	brne	.+78     	; 0x4b30 <vfprintf+0x214>
    4ae2:	f8 01       	movw	r30, r16
    4ae4:	37 fe       	sbrs	r3, 7
    4ae6:	07 c0       	rjmp	.+14     	; 0x4af6 <vfprintf+0x1da>
    4ae8:	60 81       	ld	r22, Z
    4aea:	71 81       	ldd	r23, Z+1	; 0x01
    4aec:	82 81       	ldd	r24, Z+2	; 0x02
    4aee:	93 81       	ldd	r25, Z+3	; 0x03
    4af0:	0c 5f       	subi	r16, 0xFC	; 252
    4af2:	1f 4f       	sbci	r17, 0xFF	; 255
    4af4:	08 c0       	rjmp	.+16     	; 0x4b06 <vfprintf+0x1ea>
    4af6:	60 81       	ld	r22, Z
    4af8:	71 81       	ldd	r23, Z+1	; 0x01
    4afa:	07 2e       	mov	r0, r23
    4afc:	00 0c       	add	r0, r0
    4afe:	88 0b       	sbc	r24, r24
    4b00:	99 0b       	sbc	r25, r25
    4b02:	0e 5f       	subi	r16, 0xFE	; 254
    4b04:	1f 4f       	sbci	r17, 0xFF	; 255
    4b06:	f3 2d       	mov	r31, r3
    4b08:	ff 76       	andi	r31, 0x6F	; 111
    4b0a:	3f 2e       	mov	r3, r31
    4b0c:	97 ff       	sbrs	r25, 7
    4b0e:	09 c0       	rjmp	.+18     	; 0x4b22 <vfprintf+0x206>
    4b10:	90 95       	com	r25
    4b12:	80 95       	com	r24
    4b14:	70 95       	com	r23
    4b16:	61 95       	neg	r22
    4b18:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b1e:	f0 68       	ori	r31, 0x80	; 128
    4b20:	3f 2e       	mov	r3, r31
    4b22:	2a e0       	ldi	r18, 0x0A	; 10
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	a3 01       	movw	r20, r6
    4b28:	1d d1       	rcall	.+570    	; 0x4d64 <__ultoa_invert>
    4b2a:	88 2e       	mov	r8, r24
    4b2c:	86 18       	sub	r8, r6
    4b2e:	44 c0       	rjmp	.+136    	; 0x4bb8 <vfprintf+0x29c>
    4b30:	85 37       	cpi	r24, 0x75	; 117
    4b32:	31 f4       	brne	.+12     	; 0x4b40 <vfprintf+0x224>
    4b34:	23 2d       	mov	r18, r3
    4b36:	2f 7e       	andi	r18, 0xEF	; 239
    4b38:	b2 2e       	mov	r11, r18
    4b3a:	2a e0       	ldi	r18, 0x0A	; 10
    4b3c:	30 e0       	ldi	r19, 0x00	; 0
    4b3e:	25 c0       	rjmp	.+74     	; 0x4b8a <vfprintf+0x26e>
    4b40:	93 2d       	mov	r25, r3
    4b42:	99 7f       	andi	r25, 0xF9	; 249
    4b44:	b9 2e       	mov	r11, r25
    4b46:	8f 36       	cpi	r24, 0x6F	; 111
    4b48:	c1 f0       	breq	.+48     	; 0x4b7a <vfprintf+0x25e>
    4b4a:	18 f4       	brcc	.+6      	; 0x4b52 <vfprintf+0x236>
    4b4c:	88 35       	cpi	r24, 0x58	; 88
    4b4e:	79 f0       	breq	.+30     	; 0x4b6e <vfprintf+0x252>
    4b50:	ae c0       	rjmp	.+348    	; 0x4cae <vfprintf+0x392>
    4b52:	80 37       	cpi	r24, 0x70	; 112
    4b54:	19 f0       	breq	.+6      	; 0x4b5c <vfprintf+0x240>
    4b56:	88 37       	cpi	r24, 0x78	; 120
    4b58:	21 f0       	breq	.+8      	; 0x4b62 <vfprintf+0x246>
    4b5a:	a9 c0       	rjmp	.+338    	; 0x4cae <vfprintf+0x392>
    4b5c:	e9 2f       	mov	r30, r25
    4b5e:	e0 61       	ori	r30, 0x10	; 16
    4b60:	be 2e       	mov	r11, r30
    4b62:	b4 fe       	sbrs	r11, 4
    4b64:	0d c0       	rjmp	.+26     	; 0x4b80 <vfprintf+0x264>
    4b66:	fb 2d       	mov	r31, r11
    4b68:	f4 60       	ori	r31, 0x04	; 4
    4b6a:	bf 2e       	mov	r11, r31
    4b6c:	09 c0       	rjmp	.+18     	; 0x4b80 <vfprintf+0x264>
    4b6e:	34 fe       	sbrs	r3, 4
    4b70:	0a c0       	rjmp	.+20     	; 0x4b86 <vfprintf+0x26a>
    4b72:	29 2f       	mov	r18, r25
    4b74:	26 60       	ori	r18, 0x06	; 6
    4b76:	b2 2e       	mov	r11, r18
    4b78:	06 c0       	rjmp	.+12     	; 0x4b86 <vfprintf+0x26a>
    4b7a:	28 e0       	ldi	r18, 0x08	; 8
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	05 c0       	rjmp	.+10     	; 0x4b8a <vfprintf+0x26e>
    4b80:	20 e1       	ldi	r18, 0x10	; 16
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	02 c0       	rjmp	.+4      	; 0x4b8a <vfprintf+0x26e>
    4b86:	20 e1       	ldi	r18, 0x10	; 16
    4b88:	32 e0       	ldi	r19, 0x02	; 2
    4b8a:	f8 01       	movw	r30, r16
    4b8c:	b7 fe       	sbrs	r11, 7
    4b8e:	07 c0       	rjmp	.+14     	; 0x4b9e <vfprintf+0x282>
    4b90:	60 81       	ld	r22, Z
    4b92:	71 81       	ldd	r23, Z+1	; 0x01
    4b94:	82 81       	ldd	r24, Z+2	; 0x02
    4b96:	93 81       	ldd	r25, Z+3	; 0x03
    4b98:	0c 5f       	subi	r16, 0xFC	; 252
    4b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b9c:	06 c0       	rjmp	.+12     	; 0x4baa <vfprintf+0x28e>
    4b9e:	60 81       	ld	r22, Z
    4ba0:	71 81       	ldd	r23, Z+1	; 0x01
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	0e 5f       	subi	r16, 0xFE	; 254
    4ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    4baa:	a3 01       	movw	r20, r6
    4bac:	db d0       	rcall	.+438    	; 0x4d64 <__ultoa_invert>
    4bae:	88 2e       	mov	r8, r24
    4bb0:	86 18       	sub	r8, r6
    4bb2:	fb 2d       	mov	r31, r11
    4bb4:	ff 77       	andi	r31, 0x7F	; 127
    4bb6:	3f 2e       	mov	r3, r31
    4bb8:	36 fe       	sbrs	r3, 6
    4bba:	0d c0       	rjmp	.+26     	; 0x4bd6 <vfprintf+0x2ba>
    4bbc:	23 2d       	mov	r18, r3
    4bbe:	2e 7f       	andi	r18, 0xFE	; 254
    4bc0:	a2 2e       	mov	r10, r18
    4bc2:	89 14       	cp	r8, r9
    4bc4:	58 f4       	brcc	.+22     	; 0x4bdc <vfprintf+0x2c0>
    4bc6:	34 fe       	sbrs	r3, 4
    4bc8:	0b c0       	rjmp	.+22     	; 0x4be0 <vfprintf+0x2c4>
    4bca:	32 fc       	sbrc	r3, 2
    4bcc:	09 c0       	rjmp	.+18     	; 0x4be0 <vfprintf+0x2c4>
    4bce:	83 2d       	mov	r24, r3
    4bd0:	8e 7e       	andi	r24, 0xEE	; 238
    4bd2:	a8 2e       	mov	r10, r24
    4bd4:	05 c0       	rjmp	.+10     	; 0x4be0 <vfprintf+0x2c4>
    4bd6:	b8 2c       	mov	r11, r8
    4bd8:	a3 2c       	mov	r10, r3
    4bda:	03 c0       	rjmp	.+6      	; 0x4be2 <vfprintf+0x2c6>
    4bdc:	b8 2c       	mov	r11, r8
    4bde:	01 c0       	rjmp	.+2      	; 0x4be2 <vfprintf+0x2c6>
    4be0:	b9 2c       	mov	r11, r9
    4be2:	a4 fe       	sbrs	r10, 4
    4be4:	0f c0       	rjmp	.+30     	; 0x4c04 <vfprintf+0x2e8>
    4be6:	fe 01       	movw	r30, r28
    4be8:	e8 0d       	add	r30, r8
    4bea:	f1 1d       	adc	r31, r1
    4bec:	80 81       	ld	r24, Z
    4bee:	80 33       	cpi	r24, 0x30	; 48
    4bf0:	21 f4       	brne	.+8      	; 0x4bfa <vfprintf+0x2de>
    4bf2:	9a 2d       	mov	r25, r10
    4bf4:	99 7e       	andi	r25, 0xE9	; 233
    4bf6:	a9 2e       	mov	r10, r25
    4bf8:	09 c0       	rjmp	.+18     	; 0x4c0c <vfprintf+0x2f0>
    4bfa:	a2 fe       	sbrs	r10, 2
    4bfc:	06 c0       	rjmp	.+12     	; 0x4c0a <vfprintf+0x2ee>
    4bfe:	b3 94       	inc	r11
    4c00:	b3 94       	inc	r11
    4c02:	04 c0       	rjmp	.+8      	; 0x4c0c <vfprintf+0x2f0>
    4c04:	8a 2d       	mov	r24, r10
    4c06:	86 78       	andi	r24, 0x86	; 134
    4c08:	09 f0       	breq	.+2      	; 0x4c0c <vfprintf+0x2f0>
    4c0a:	b3 94       	inc	r11
    4c0c:	a3 fc       	sbrc	r10, 3
    4c0e:	10 c0       	rjmp	.+32     	; 0x4c30 <vfprintf+0x314>
    4c10:	a0 fe       	sbrs	r10, 0
    4c12:	06 c0       	rjmp	.+12     	; 0x4c20 <vfprintf+0x304>
    4c14:	b2 14       	cp	r11, r2
    4c16:	80 f4       	brcc	.+32     	; 0x4c38 <vfprintf+0x31c>
    4c18:	28 0c       	add	r2, r8
    4c1a:	92 2c       	mov	r9, r2
    4c1c:	9b 18       	sub	r9, r11
    4c1e:	0d c0       	rjmp	.+26     	; 0x4c3a <vfprintf+0x31e>
    4c20:	b2 14       	cp	r11, r2
    4c22:	58 f4       	brcc	.+22     	; 0x4c3a <vfprintf+0x31e>
    4c24:	b6 01       	movw	r22, r12
    4c26:	80 e2       	ldi	r24, 0x20	; 32
    4c28:	90 e0       	ldi	r25, 0x00	; 0
    4c2a:	60 d0       	rcall	.+192    	; 0x4cec <fputc>
    4c2c:	b3 94       	inc	r11
    4c2e:	f8 cf       	rjmp	.-16     	; 0x4c20 <vfprintf+0x304>
    4c30:	b2 14       	cp	r11, r2
    4c32:	18 f4       	brcc	.+6      	; 0x4c3a <vfprintf+0x31e>
    4c34:	2b 18       	sub	r2, r11
    4c36:	02 c0       	rjmp	.+4      	; 0x4c3c <vfprintf+0x320>
    4c38:	98 2c       	mov	r9, r8
    4c3a:	21 2c       	mov	r2, r1
    4c3c:	a4 fe       	sbrs	r10, 4
    4c3e:	0f c0       	rjmp	.+30     	; 0x4c5e <vfprintf+0x342>
    4c40:	b6 01       	movw	r22, r12
    4c42:	80 e3       	ldi	r24, 0x30	; 48
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	52 d0       	rcall	.+164    	; 0x4cec <fputc>
    4c48:	a2 fe       	sbrs	r10, 2
    4c4a:	16 c0       	rjmp	.+44     	; 0x4c78 <vfprintf+0x35c>
    4c4c:	a1 fc       	sbrc	r10, 1
    4c4e:	03 c0       	rjmp	.+6      	; 0x4c56 <vfprintf+0x33a>
    4c50:	88 e7       	ldi	r24, 0x78	; 120
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <vfprintf+0x33e>
    4c56:	88 e5       	ldi	r24, 0x58	; 88
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	b6 01       	movw	r22, r12
    4c5c:	0c c0       	rjmp	.+24     	; 0x4c76 <vfprintf+0x35a>
    4c5e:	8a 2d       	mov	r24, r10
    4c60:	86 78       	andi	r24, 0x86	; 134
    4c62:	51 f0       	breq	.+20     	; 0x4c78 <vfprintf+0x35c>
    4c64:	a1 fe       	sbrs	r10, 1
    4c66:	02 c0       	rjmp	.+4      	; 0x4c6c <vfprintf+0x350>
    4c68:	8b e2       	ldi	r24, 0x2B	; 43
    4c6a:	01 c0       	rjmp	.+2      	; 0x4c6e <vfprintf+0x352>
    4c6c:	80 e2       	ldi	r24, 0x20	; 32
    4c6e:	a7 fc       	sbrc	r10, 7
    4c70:	8d e2       	ldi	r24, 0x2D	; 45
    4c72:	b6 01       	movw	r22, r12
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	3a d0       	rcall	.+116    	; 0x4cec <fputc>
    4c78:	89 14       	cp	r8, r9
    4c7a:	30 f4       	brcc	.+12     	; 0x4c88 <vfprintf+0x36c>
    4c7c:	b6 01       	movw	r22, r12
    4c7e:	80 e3       	ldi	r24, 0x30	; 48
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	34 d0       	rcall	.+104    	; 0x4cec <fputc>
    4c84:	9a 94       	dec	r9
    4c86:	f8 cf       	rjmp	.-16     	; 0x4c78 <vfprintf+0x35c>
    4c88:	8a 94       	dec	r8
    4c8a:	f3 01       	movw	r30, r6
    4c8c:	e8 0d       	add	r30, r8
    4c8e:	f1 1d       	adc	r31, r1
    4c90:	80 81       	ld	r24, Z
    4c92:	b6 01       	movw	r22, r12
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	2a d0       	rcall	.+84     	; 0x4cec <fputc>
    4c98:	81 10       	cpse	r8, r1
    4c9a:	f6 cf       	rjmp	.-20     	; 0x4c88 <vfprintf+0x36c>
    4c9c:	22 20       	and	r2, r2
    4c9e:	09 f4       	brne	.+2      	; 0x4ca2 <vfprintf+0x386>
    4ca0:	4e ce       	rjmp	.-868    	; 0x493e <vfprintf+0x22>
    4ca2:	b6 01       	movw	r22, r12
    4ca4:	80 e2       	ldi	r24, 0x20	; 32
    4ca6:	90 e0       	ldi	r25, 0x00	; 0
    4ca8:	21 d0       	rcall	.+66     	; 0x4cec <fputc>
    4caa:	2a 94       	dec	r2
    4cac:	f7 cf       	rjmp	.-18     	; 0x4c9c <vfprintf+0x380>
    4cae:	f6 01       	movw	r30, r12
    4cb0:	86 81       	ldd	r24, Z+6	; 0x06
    4cb2:	97 81       	ldd	r25, Z+7	; 0x07
    4cb4:	02 c0       	rjmp	.+4      	; 0x4cba <vfprintf+0x39e>
    4cb6:	8f ef       	ldi	r24, 0xFF	; 255
    4cb8:	9f ef       	ldi	r25, 0xFF	; 255
    4cba:	2b 96       	adiw	r28, 0x0b	; 11
    4cbc:	e2 e1       	ldi	r30, 0x12	; 18
    4cbe:	ff c0       	rjmp	.+510    	; 0x4ebe <__epilogue_restores__>

00004cc0 <strnlen_P>:
    4cc0:	fc 01       	movw	r30, r24
    4cc2:	05 90       	lpm	r0, Z+
    4cc4:	61 50       	subi	r22, 0x01	; 1
    4cc6:	70 40       	sbci	r23, 0x00	; 0
    4cc8:	01 10       	cpse	r0, r1
    4cca:	d8 f7       	brcc	.-10     	; 0x4cc2 <strnlen_P+0x2>
    4ccc:	80 95       	com	r24
    4cce:	90 95       	com	r25
    4cd0:	8e 0f       	add	r24, r30
    4cd2:	9f 1f       	adc	r25, r31
    4cd4:	08 95       	ret

00004cd6 <strnlen>:
    4cd6:	fc 01       	movw	r30, r24
    4cd8:	61 50       	subi	r22, 0x01	; 1
    4cda:	70 40       	sbci	r23, 0x00	; 0
    4cdc:	01 90       	ld	r0, Z+
    4cde:	01 10       	cpse	r0, r1
    4ce0:	d8 f7       	brcc	.-10     	; 0x4cd8 <strnlen+0x2>
    4ce2:	80 95       	com	r24
    4ce4:	90 95       	com	r25
    4ce6:	8e 0f       	add	r24, r30
    4ce8:	9f 1f       	adc	r25, r31
    4cea:	08 95       	ret

00004cec <fputc>:
    4cec:	0f 93       	push	r16
    4cee:	1f 93       	push	r17
    4cf0:	cf 93       	push	r28
    4cf2:	df 93       	push	r29
    4cf4:	fb 01       	movw	r30, r22
    4cf6:	23 81       	ldd	r18, Z+3	; 0x03
    4cf8:	21 fd       	sbrc	r18, 1
    4cfa:	03 c0       	rjmp	.+6      	; 0x4d02 <fputc+0x16>
    4cfc:	8f ef       	ldi	r24, 0xFF	; 255
    4cfe:	9f ef       	ldi	r25, 0xFF	; 255
    4d00:	2c c0       	rjmp	.+88     	; 0x4d5a <fputc+0x6e>
    4d02:	22 ff       	sbrs	r18, 2
    4d04:	16 c0       	rjmp	.+44     	; 0x4d32 <fputc+0x46>
    4d06:	46 81       	ldd	r20, Z+6	; 0x06
    4d08:	57 81       	ldd	r21, Z+7	; 0x07
    4d0a:	24 81       	ldd	r18, Z+4	; 0x04
    4d0c:	35 81       	ldd	r19, Z+5	; 0x05
    4d0e:	42 17       	cp	r20, r18
    4d10:	53 07       	cpc	r21, r19
    4d12:	44 f4       	brge	.+16     	; 0x4d24 <fputc+0x38>
    4d14:	a0 81       	ld	r26, Z
    4d16:	b1 81       	ldd	r27, Z+1	; 0x01
    4d18:	9d 01       	movw	r18, r26
    4d1a:	2f 5f       	subi	r18, 0xFF	; 255
    4d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1e:	31 83       	std	Z+1, r19	; 0x01
    4d20:	20 83       	st	Z, r18
    4d22:	8c 93       	st	X, r24
    4d24:	26 81       	ldd	r18, Z+6	; 0x06
    4d26:	37 81       	ldd	r19, Z+7	; 0x07
    4d28:	2f 5f       	subi	r18, 0xFF	; 255
    4d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d2c:	37 83       	std	Z+7, r19	; 0x07
    4d2e:	26 83       	std	Z+6, r18	; 0x06
    4d30:	14 c0       	rjmp	.+40     	; 0x4d5a <fputc+0x6e>
    4d32:	8b 01       	movw	r16, r22
    4d34:	ec 01       	movw	r28, r24
    4d36:	fb 01       	movw	r30, r22
    4d38:	00 84       	ldd	r0, Z+8	; 0x08
    4d3a:	f1 85       	ldd	r31, Z+9	; 0x09
    4d3c:	e0 2d       	mov	r30, r0
    4d3e:	09 95       	icall
    4d40:	89 2b       	or	r24, r25
    4d42:	e1 f6       	brne	.-72     	; 0x4cfc <fputc+0x10>
    4d44:	d8 01       	movw	r26, r16
    4d46:	16 96       	adiw	r26, 0x06	; 6
    4d48:	8d 91       	ld	r24, X+
    4d4a:	9c 91       	ld	r25, X
    4d4c:	17 97       	sbiw	r26, 0x07	; 7
    4d4e:	01 96       	adiw	r24, 0x01	; 1
    4d50:	17 96       	adiw	r26, 0x07	; 7
    4d52:	9c 93       	st	X, r25
    4d54:	8e 93       	st	-X, r24
    4d56:	16 97       	sbiw	r26, 0x06	; 6
    4d58:	ce 01       	movw	r24, r28
    4d5a:	df 91       	pop	r29
    4d5c:	cf 91       	pop	r28
    4d5e:	1f 91       	pop	r17
    4d60:	0f 91       	pop	r16
    4d62:	08 95       	ret

00004d64 <__ultoa_invert>:
    4d64:	fa 01       	movw	r30, r20
    4d66:	aa 27       	eor	r26, r26
    4d68:	28 30       	cpi	r18, 0x08	; 8
    4d6a:	51 f1       	breq	.+84     	; 0x4dc0 <__ultoa_invert+0x5c>
    4d6c:	20 31       	cpi	r18, 0x10	; 16
    4d6e:	81 f1       	breq	.+96     	; 0x4dd0 <__ultoa_invert+0x6c>
    4d70:	e8 94       	clt
    4d72:	6f 93       	push	r22
    4d74:	6e 7f       	andi	r22, 0xFE	; 254
    4d76:	6e 5f       	subi	r22, 0xFE	; 254
    4d78:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d7e:	af 4f       	sbci	r26, 0xFF	; 255
    4d80:	b1 e0       	ldi	r27, 0x01	; 1
    4d82:	3e d0       	rcall	.+124    	; 0x4e00 <__ultoa_invert+0x9c>
    4d84:	b4 e0       	ldi	r27, 0x04	; 4
    4d86:	3c d0       	rcall	.+120    	; 0x4e00 <__ultoa_invert+0x9c>
    4d88:	67 0f       	add	r22, r23
    4d8a:	78 1f       	adc	r23, r24
    4d8c:	89 1f       	adc	r24, r25
    4d8e:	9a 1f       	adc	r25, r26
    4d90:	a1 1d       	adc	r26, r1
    4d92:	68 0f       	add	r22, r24
    4d94:	79 1f       	adc	r23, r25
    4d96:	8a 1f       	adc	r24, r26
    4d98:	91 1d       	adc	r25, r1
    4d9a:	a1 1d       	adc	r26, r1
    4d9c:	6a 0f       	add	r22, r26
    4d9e:	71 1d       	adc	r23, r1
    4da0:	81 1d       	adc	r24, r1
    4da2:	91 1d       	adc	r25, r1
    4da4:	a1 1d       	adc	r26, r1
    4da6:	20 d0       	rcall	.+64     	; 0x4de8 <__ultoa_invert+0x84>
    4da8:	09 f4       	brne	.+2      	; 0x4dac <__ultoa_invert+0x48>
    4daa:	68 94       	set
    4dac:	3f 91       	pop	r19
    4dae:	2a e0       	ldi	r18, 0x0A	; 10
    4db0:	26 9f       	mul	r18, r22
    4db2:	11 24       	eor	r1, r1
    4db4:	30 19       	sub	r19, r0
    4db6:	30 5d       	subi	r19, 0xD0	; 208
    4db8:	31 93       	st	Z+, r19
    4dba:	de f6       	brtc	.-74     	; 0x4d72 <__ultoa_invert+0xe>
    4dbc:	cf 01       	movw	r24, r30
    4dbe:	08 95       	ret
    4dc0:	46 2f       	mov	r20, r22
    4dc2:	47 70       	andi	r20, 0x07	; 7
    4dc4:	40 5d       	subi	r20, 0xD0	; 208
    4dc6:	41 93       	st	Z+, r20
    4dc8:	b3 e0       	ldi	r27, 0x03	; 3
    4dca:	0f d0       	rcall	.+30     	; 0x4dea <__ultoa_invert+0x86>
    4dcc:	c9 f7       	brne	.-14     	; 0x4dc0 <__ultoa_invert+0x5c>
    4dce:	f6 cf       	rjmp	.-20     	; 0x4dbc <__ultoa_invert+0x58>
    4dd0:	46 2f       	mov	r20, r22
    4dd2:	4f 70       	andi	r20, 0x0F	; 15
    4dd4:	40 5d       	subi	r20, 0xD0	; 208
    4dd6:	4a 33       	cpi	r20, 0x3A	; 58
    4dd8:	18 f0       	brcs	.+6      	; 0x4de0 <__ultoa_invert+0x7c>
    4dda:	49 5d       	subi	r20, 0xD9	; 217
    4ddc:	31 fd       	sbrc	r19, 1
    4dde:	40 52       	subi	r20, 0x20	; 32
    4de0:	41 93       	st	Z+, r20
    4de2:	02 d0       	rcall	.+4      	; 0x4de8 <__ultoa_invert+0x84>
    4de4:	a9 f7       	brne	.-22     	; 0x4dd0 <__ultoa_invert+0x6c>
    4de6:	ea cf       	rjmp	.-44     	; 0x4dbc <__ultoa_invert+0x58>
    4de8:	b4 e0       	ldi	r27, 0x04	; 4
    4dea:	a6 95       	lsr	r26
    4dec:	97 95       	ror	r25
    4dee:	87 95       	ror	r24
    4df0:	77 95       	ror	r23
    4df2:	67 95       	ror	r22
    4df4:	ba 95       	dec	r27
    4df6:	c9 f7       	brne	.-14     	; 0x4dea <__ultoa_invert+0x86>
    4df8:	00 97       	sbiw	r24, 0x00	; 0
    4dfa:	61 05       	cpc	r22, r1
    4dfc:	71 05       	cpc	r23, r1
    4dfe:	08 95       	ret
    4e00:	9b 01       	movw	r18, r22
    4e02:	ac 01       	movw	r20, r24
    4e04:	0a 2e       	mov	r0, r26
    4e06:	06 94       	lsr	r0
    4e08:	57 95       	ror	r21
    4e0a:	47 95       	ror	r20
    4e0c:	37 95       	ror	r19
    4e0e:	27 95       	ror	r18
    4e10:	ba 95       	dec	r27
    4e12:	c9 f7       	brne	.-14     	; 0x4e06 <__ultoa_invert+0xa2>
    4e14:	62 0f       	add	r22, r18
    4e16:	73 1f       	adc	r23, r19
    4e18:	84 1f       	adc	r24, r20
    4e1a:	95 1f       	adc	r25, r21
    4e1c:	a0 1d       	adc	r26, r0
    4e1e:	08 95       	ret

00004e20 <eeprom_read_byte>:
    4e20:	f9 99       	sbic	0x1f, 1	; 31
    4e22:	fe cf       	rjmp	.-4      	; 0x4e20 <eeprom_read_byte>
    4e24:	92 bd       	out	0x22, r25	; 34
    4e26:	81 bd       	out	0x21, r24	; 33
    4e28:	f8 9a       	sbi	0x1f, 0	; 31
    4e2a:	99 27       	eor	r25, r25
    4e2c:	80 b5       	in	r24, 0x20	; 32
    4e2e:	08 95       	ret

00004e30 <eeprom_read_dword>:
    4e30:	a6 e1       	ldi	r26, 0x16	; 22
    4e32:	b0 e0       	ldi	r27, 0x00	; 0
    4e34:	44 e0       	ldi	r20, 0x04	; 4
    4e36:	50 e0       	ldi	r21, 0x00	; 0
    4e38:	18 c0       	rjmp	.+48     	; 0x4e6a <eeprom_read_blraw>

00004e3a <eeprom_write_byte>:
    4e3a:	26 2f       	mov	r18, r22

00004e3c <eeprom_write_r18>:
    4e3c:	f9 99       	sbic	0x1f, 1	; 31
    4e3e:	fe cf       	rjmp	.-4      	; 0x4e3c <eeprom_write_r18>
    4e40:	1f ba       	out	0x1f, r1	; 31
    4e42:	92 bd       	out	0x22, r25	; 34
    4e44:	81 bd       	out	0x21, r24	; 33
    4e46:	20 bd       	out	0x20, r18	; 32
    4e48:	0f b6       	in	r0, 0x3f	; 63
    4e4a:	f8 94       	cli
    4e4c:	fa 9a       	sbi	0x1f, 2	; 31
    4e4e:	f9 9a       	sbi	0x1f, 1	; 31
    4e50:	0f be       	out	0x3f, r0	; 63
    4e52:	01 96       	adiw	r24, 0x01	; 1
    4e54:	08 95       	ret

00004e56 <eeprom_write_dword>:
    4e56:	24 2f       	mov	r18, r20
    4e58:	f1 df       	rcall	.-30     	; 0x4e3c <eeprom_write_r18>
    4e5a:	25 2f       	mov	r18, r21
    4e5c:	ef df       	rcall	.-34     	; 0x4e3c <eeprom_write_r18>
    4e5e:	00 c0       	rjmp	.+0      	; 0x4e60 <eeprom_write_word>

00004e60 <eeprom_write_word>:
    4e60:	ec df       	rcall	.-40     	; 0x4e3a <eeprom_write_byte>
    4e62:	27 2f       	mov	r18, r23
    4e64:	eb cf       	rjmp	.-42     	; 0x4e3c <eeprom_write_r18>

00004e66 <eeprom_read_block>:
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22

00004e6a <eeprom_read_blraw>:
    4e6a:	fc 01       	movw	r30, r24
    4e6c:	f9 99       	sbic	0x1f, 1	; 31
    4e6e:	fe cf       	rjmp	.-4      	; 0x4e6c <eeprom_read_blraw+0x2>
    4e70:	06 c0       	rjmp	.+12     	; 0x4e7e <eeprom_read_blraw+0x14>
    4e72:	f2 bd       	out	0x22, r31	; 34
    4e74:	e1 bd       	out	0x21, r30	; 33
    4e76:	f8 9a       	sbi	0x1f, 0	; 31
    4e78:	31 96       	adiw	r30, 0x01	; 1
    4e7a:	00 b4       	in	r0, 0x20	; 32
    4e7c:	0d 92       	st	X+, r0
    4e7e:	41 50       	subi	r20, 0x01	; 1
    4e80:	50 40       	sbci	r21, 0x00	; 0
    4e82:	b8 f7       	brcc	.-18     	; 0x4e72 <eeprom_read_blraw+0x8>
    4e84:	08 95       	ret

00004e86 <__prologue_saves__>:
    4e86:	2f 92       	push	r2
    4e88:	3f 92       	push	r3
    4e8a:	4f 92       	push	r4
    4e8c:	5f 92       	push	r5
    4e8e:	6f 92       	push	r6
    4e90:	7f 92       	push	r7
    4e92:	8f 92       	push	r8
    4e94:	9f 92       	push	r9
    4e96:	af 92       	push	r10
    4e98:	bf 92       	push	r11
    4e9a:	cf 92       	push	r12
    4e9c:	df 92       	push	r13
    4e9e:	ef 92       	push	r14
    4ea0:	ff 92       	push	r15
    4ea2:	0f 93       	push	r16
    4ea4:	1f 93       	push	r17
    4ea6:	cf 93       	push	r28
    4ea8:	df 93       	push	r29
    4eaa:	cd b7       	in	r28, 0x3d	; 61
    4eac:	de b7       	in	r29, 0x3e	; 62
    4eae:	ca 1b       	sub	r28, r26
    4eb0:	db 0b       	sbc	r29, r27
    4eb2:	0f b6       	in	r0, 0x3f	; 63
    4eb4:	f8 94       	cli
    4eb6:	de bf       	out	0x3e, r29	; 62
    4eb8:	0f be       	out	0x3f, r0	; 63
    4eba:	cd bf       	out	0x3d, r28	; 61
    4ebc:	09 94       	ijmp

00004ebe <__epilogue_restores__>:
    4ebe:	2a 88       	ldd	r2, Y+18	; 0x12
    4ec0:	39 88       	ldd	r3, Y+17	; 0x11
    4ec2:	48 88       	ldd	r4, Y+16	; 0x10
    4ec4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ec6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ec8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4eca:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ecc:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ece:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ed0:	b9 84       	ldd	r11, Y+9	; 0x09
    4ed2:	c8 84       	ldd	r12, Y+8	; 0x08
    4ed4:	df 80       	ldd	r13, Y+7	; 0x07
    4ed6:	ee 80       	ldd	r14, Y+6	; 0x06
    4ed8:	fd 80       	ldd	r15, Y+5	; 0x05
    4eda:	0c 81       	ldd	r16, Y+4	; 0x04
    4edc:	1b 81       	ldd	r17, Y+3	; 0x03
    4ede:	aa 81       	ldd	r26, Y+2	; 0x02
    4ee0:	b9 81       	ldd	r27, Y+1	; 0x01
    4ee2:	ce 0f       	add	r28, r30
    4ee4:	d1 1d       	adc	r29, r1
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	f8 94       	cli
    4eea:	de bf       	out	0x3e, r29	; 62
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	cd bf       	out	0x3d, r28	; 61
    4ef0:	ed 01       	movw	r28, r26
    4ef2:	08 95       	ret

00004ef4 <_exit>:
    4ef4:	f8 94       	cli

00004ef6 <__stop_program>:
    4ef6:	ff cf       	rjmp	.-2      	; 0x4ef6 <__stop_program>
