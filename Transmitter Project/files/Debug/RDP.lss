
RDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  000076c8  0000777c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000076c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024f  00800510  00800510  00007b8c  2**0
                  ALLOC
  3 .eeprom       00000052  00810000  00810000  00007b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00007bde  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007c3c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000160  00000000  00000000  00007c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003b79  00000000  00000000  00007ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ddc  00000000  00000000  0000b955  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005b2d  00000000  00000000  0000c731  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001144  00000000  00000000  00012260  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0001449e  00000000  00000000  000133a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000240f  00000000  00000000  00027842  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00029c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000580c  00000000  00000000  00029cd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	90 c0       	rjmp	.+288    	; 0x122 <__ctors_end>
       2:	00 00       	nop
       4:	7d c7       	rjmp	.+3834   	; 0xf00 <__vector_1>
       6:	00 00       	nop
       8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
       a:	00 00       	nop
       c:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__vector_3>
      10:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_4>
      14:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__vector_5>
      18:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_6>
      1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_8>
      24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
      26:	00 00       	nop
      28:	99 c0       	rjmp	.+306    	; 0x15c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	97 c0       	rjmp	.+302    	; 0x15c <__bad_interrupt>
      2e:	00 00       	nop
      30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
      32:	00 00       	nop
      34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
      36:	00 00       	nop
      38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
      3e:	00 00       	nop
      40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
      42:	00 00       	nop
      44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__vector_18>
      4c:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__vector_19>
      50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
      52:	00 00       	nop
      54:	83 c0       	rjmp	.+262    	; 0x15c <__bad_interrupt>
      56:	00 00       	nop
      58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7f c0       	rjmp	.+254    	; 0x15c <__bad_interrupt>
      5e:	00 00       	nop
      60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
      62:	00 00       	nop
      64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
      66:	00 00       	nop
      68:	8f 21       	and	r24, r15
      6a:	26 21       	and	r18, r6
      6c:	73 21       	and	r23, r3
      6e:	9b 21       	and	r25, r11
      70:	7a 21       	and	r23, r10
      72:	9b 21       	and	r25, r11
      74:	42 21       	and	r20, r2
      76:	1f 21       	and	r17, r15
      78:	34 21       	and	r19, r4
      7a:	3b 21       	and	r19, r11
      7c:	9b 21       	and	r25, r11
      7e:	5e 21       	and	r21, r14
      80:	11 21       	and	r17, r1
      82:	65 21       	and	r22, r5
      84:	0a 21       	and	r16, r10
      86:	2d 21       	and	r18, r13
      88:	c5 20       	and	r12, r5
      8a:	cc 20       	and	r12, r12
      8c:	d3 20       	and	r13, r3
      8e:	da 20       	and	r13, r10
      90:	e1 20       	and	r14, r1
      92:	e8 20       	and	r14, r8
      94:	ee 20       	and	r14, r14
      96:	f5 20       	and	r15, r5
      98:	fc 20       	and	r15, r12
      9a:	03 21       	and	r16, r3
      9c:	49 21       	and	r20, r9
      9e:	50 21       	and	r21, r0
      a0:	96 21       	and	r25, r6
      a2:	57 21       	and	r21, r7
      a4:	9b 21       	and	r25, r11
      a6:	18 21       	and	r17, r8
      a8:	81 21       	and	r24, r1
      aa:	13 20       	and	r1, r3
      ac:	1a 20       	and	r1, r10
      ae:	21 20       	and	r2, r1
      b0:	28 20       	and	r2, r8
      b2:	2f 20       	and	r2, r15
      b4:	35 20       	and	r3, r5
      b6:	3c 20       	and	r3, r12
      b8:	43 20       	and	r4, r3
      ba:	49 20       	and	r4, r9
      bc:	4f 20       	and	r4, r15
      be:	56 20       	and	r5, r6
      c0:	5d 20       	and	r5, r13
      c2:	64 20       	and	r6, r4
      c4:	6b 20       	and	r6, r11
      c6:	72 20       	and	r7, r2
      c8:	79 20       	and	r7, r9
      ca:	80 20       	and	r8, r0
      cc:	87 20       	and	r8, r7
      ce:	8e 20       	and	r8, r14
      d0:	94 20       	and	r9, r4
      d2:	9b 20       	and	r9, r11
      d4:	a2 20       	and	r10, r2
      d6:	a9 20       	and	r10, r9
      d8:	b0 20       	and	r11, r0
      da:	b7 20       	and	r11, r7
      dc:	be 20       	and	r11, r14
      de:	9b 21       	and	r25, r11
      e0:	9b 21       	and	r25, r11
      e2:	9b 21       	and	r25, r11
      e4:	9b 21       	and	r25, r11
      e6:	6c 21       	and	r22, r12
      e8:	9b 21       	and	r25, r11
      ea:	9b 21       	and	r25, r11
      ec:	9b 21       	and	r25, r11
      ee:	9b 21       	and	r25, r11
      f0:	9b 21       	and	r25, r11
      f2:	9b 21       	and	r25, r11
      f4:	9b 21       	and	r25, r11
      f6:	9b 21       	and	r25, r11
      f8:	9b 21       	and	r25, r11
      fa:	9b 21       	and	r25, r11
      fc:	9b 21       	and	r25, r11
      fe:	9b 21       	and	r25, r11
     100:	9b 21       	and	r25, r11
     102:	9b 21       	and	r25, r11
     104:	9b 21       	and	r25, r11
     106:	9b 21       	and	r25, r11
     108:	9b 21       	and	r25, r11
     10a:	9b 21       	and	r25, r11
     10c:	9b 21       	and	r25, r11
     10e:	9b 21       	and	r25, r11
     110:	9b 21       	and	r25, r11
     112:	9b 21       	and	r25, r11
     114:	9b 21       	and	r25, r11
     116:	9b 21       	and	r25, r11
     118:	9b 21       	and	r25, r11
     11a:	9b 21       	and	r25, r11
     11c:	9b 21       	and	r25, r11
     11e:	9b 21       	and	r25, r11
     120:	88 21       	and	r24, r8

00000122 <__ctors_end>:
     122:	11 24       	eor	r1, r1
     124:	1f be       	out	0x3f, r1	; 63
     126:	cf ef       	ldi	r28, 0xFF	; 255
     128:	d8 e0       	ldi	r29, 0x08	; 8
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_copy_data>:
     12e:	15 e0       	ldi	r17, 0x05	; 5
     130:	a0 e0       	ldi	r26, 0x00	; 0
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	e8 ec       	ldi	r30, 0xC8	; 200
     136:	f6 e7       	ldi	r31, 0x76	; 118
     138:	02 c0       	rjmp	.+4      	; 0x13e <__do_copy_data+0x10>
     13a:	05 90       	lpm	r0, Z+
     13c:	0d 92       	st	X+, r0
     13e:	a0 31       	cpi	r26, 0x10	; 16
     140:	b1 07       	cpc	r27, r17
     142:	d9 f7       	brne	.-10     	; 0x13a <__do_copy_data+0xc>

00000144 <__do_clear_bss>:
     144:	27 e0       	ldi	r18, 0x07	; 7
     146:	a0 e1       	ldi	r26, 0x10	; 16
     148:	b5 e0       	ldi	r27, 0x05	; 5
     14a:	01 c0       	rjmp	.+2      	; 0x14e <.do_clear_bss_start>

0000014c <.do_clear_bss_loop>:
     14c:	1d 92       	st	X+, r1

0000014e <.do_clear_bss_start>:
     14e:	af 35       	cpi	r26, 0x5F	; 95
     150:	b2 07       	cpc	r27, r18
     152:	e1 f7       	brne	.-8      	; 0x14c <.do_clear_bss_loop>
     154:	0e 94 2d 12 	call	0x245a	; 0x245a <main>
     158:	0c 94 62 3b 	jmp	0x76c4	; 0x76c4 <_exit>

0000015c <__bad_interrupt>:
     15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <nextFullTxBuffer>:
static volatile BOOL linkbus_tx_active = FALSE; // volatile is required to ensure optimizer handles this properly
static LinkbusTxBuffer tx_buffer[LINKBUS_NUMBER_OF_TX_MSG_BUFFERS];
static LinkbusRxBuffer rx_buffer[LINKBUS_NUMBER_OF_RX_MSG_BUFFERS];

LinkbusTxBuffer* nextFullTxBuffer(void)
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	00 d0       	rcall	.+0      	; 0x164 <nextFullTxBuffer+0x6>
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
	BOOL found = TRUE;
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;
     16c:	1a 82       	std	Y+2, r1	; 0x02

	while(tx_buffer[bufferIndex][0] == '\0')
     16e:	13 c0       	rjmp	.+38     	; 0x196 <nextFullTxBuffer+0x38>
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	8f 5f       	subi	r24, 0xFF	; 255
     174:	8a 83       	std	Y+2, r24	; 0x02
     176:	8a 81       	ldd	r24, Y+2	; 0x02
     178:	84 30       	cpi	r24, 0x04	; 4
     17a:	10 f0       	brcs	.+4      	; 0x180 <nextFullTxBuffer+0x22>
		{
			found = FALSE;
     17c:	19 82       	std	Y+1, r1	; 0x01
			break;
     17e:	1b c0       	rjmp	.+54     	; 0x1b6 <nextFullTxBuffer+0x58>
		}

		bufferIndex++;
     180:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <bufferIndex.2864>
     184:	8f 5f       	subi	r24, 0xFF	; 255
     186:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <bufferIndex.2864>
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     18a:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <bufferIndex.2864>
     18e:	84 30       	cpi	r24, 0x04	; 4
     190:	10 f0       	brcs	.+4      	; 0x196 <nextFullTxBuffer+0x38>
		{
			bufferIndex = 0;
     192:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <bufferIndex.2864>
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] == '\0')
     196:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <bufferIndex.2864>
     19a:	28 2f       	mov	r18, r24
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	42 e3       	ldi	r20, 0x32	; 50
     1a0:	42 9f       	mul	r20, r18
     1a2:	c0 01       	movw	r24, r0
     1a4:	43 9f       	mul	r20, r19
     1a6:	90 0d       	add	r25, r0
     1a8:	11 24       	eor	r1, r1
     1aa:	8c 5b       	subi	r24, 0xBC	; 188
     1ac:	9a 4f       	sbci	r25, 0xFA	; 250
     1ae:	fc 01       	movw	r30, r24
     1b0:	80 81       	ld	r24, Z
     1b2:	88 23       	and	r24, r24
     1b4:	e9 f2       	breq	.-70     	; 0x170 <nextFullTxBuffer+0x12>
		{
			bufferIndex = 0;
		}
	}

	if(found)
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	88 23       	and	r24, r24
     1ba:	69 f0       	breq	.+26     	; 0x1d6 <nextFullTxBuffer+0x78>
	{
		return( &tx_buffer[bufferIndex]);
     1bc:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <bufferIndex.2864>
     1c0:	28 2f       	mov	r18, r24
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	42 e3       	ldi	r20, 0x32	; 50
     1c6:	42 9f       	mul	r20, r18
     1c8:	c0 01       	movw	r24, r0
     1ca:	43 9f       	mul	r20, r19
     1cc:	90 0d       	add	r25, r0
     1ce:	11 24       	eor	r1, r1
     1d0:	8c 5b       	subi	r24, 0xBC	; 188
     1d2:	9a 4f       	sbci	r25, 0xFA	; 250
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <nextFullTxBuffer+0x7c>
	}

	return(NULL);
     1d6:	80 e0       	ldi	r24, 0x00	; 0
     1d8:	90 e0       	ldi	r25, 0x00	; 0
}
     1da:	0f 90       	pop	r0
     1dc:	0f 90       	pop	r0
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <nextEmptyTxBuffer>:

LinkbusTxBuffer* nextEmptyTxBuffer(void)
{
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	00 d0       	rcall	.+0      	; 0x1ea <nextEmptyTxBuffer+0x6>
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
	BOOL found = TRUE;
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;
     1f2:	1a 82       	std	Y+2, r1	; 0x02

	while(tx_buffer[bufferIndex][0] != '\0')
     1f4:	13 c0       	rjmp	.+38     	; 0x21c <nextEmptyTxBuffer+0x38>
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	8f 5f       	subi	r24, 0xFF	; 255
     1fa:	8a 83       	std	Y+2, r24	; 0x02
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	84 30       	cpi	r24, 0x04	; 4
     200:	10 f0       	brcs	.+4      	; 0x206 <nextEmptyTxBuffer+0x22>
		{
			found = FALSE;
     202:	19 82       	std	Y+1, r1	; 0x01
			break;
     204:	1b c0       	rjmp	.+54     	; 0x23c <nextEmptyTxBuffer+0x58>
		}

		bufferIndex++;
     206:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <bufferIndex.2873>
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <bufferIndex.2873>
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     210:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <bufferIndex.2873>
     214:	84 30       	cpi	r24, 0x04	; 4
     216:	10 f0       	brcs	.+4      	; 0x21c <nextEmptyTxBuffer+0x38>
		{
			bufferIndex = 0;
     218:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <bufferIndex.2873>
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] != '\0')
     21c:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <bufferIndex.2873>
     220:	28 2f       	mov	r18, r24
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	42 e3       	ldi	r20, 0x32	; 50
     226:	42 9f       	mul	r20, r18
     228:	c0 01       	movw	r24, r0
     22a:	43 9f       	mul	r20, r19
     22c:	90 0d       	add	r25, r0
     22e:	11 24       	eor	r1, r1
     230:	8c 5b       	subi	r24, 0xBC	; 188
     232:	9a 4f       	sbci	r25, 0xFA	; 250
     234:	fc 01       	movw	r30, r24
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	e9 f6       	brne	.-70     	; 0x1f6 <nextEmptyTxBuffer+0x12>
		{
			bufferIndex = 0;
		}
	}

	if(found)
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	88 23       	and	r24, r24
     240:	69 f0       	breq	.+26     	; 0x25c <nextEmptyTxBuffer+0x78>
	{
		return( &tx_buffer[bufferIndex]);
     242:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <bufferIndex.2873>
     246:	28 2f       	mov	r18, r24
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	42 e3       	ldi	r20, 0x32	; 50
     24c:	42 9f       	mul	r20, r18
     24e:	c0 01       	movw	r24, r0
     250:	43 9f       	mul	r20, r19
     252:	90 0d       	add	r25, r0
     254:	11 24       	eor	r1, r1
     256:	8c 5b       	subi	r24, 0xBC	; 188
     258:	9a 4f       	sbci	r25, 0xFA	; 250
     25a:	02 c0       	rjmp	.+4      	; 0x260 <nextEmptyTxBuffer+0x7c>
	}

	return(NULL);
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
}
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <nextEmptyRxBuffer>:

LinkbusRxBuffer* nextEmptyRxBuffer(void)
{
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	00 d0       	rcall	.+0      	; 0x270 <nextEmptyRxBuffer+0x6>
     270:	cd b7       	in	r28, 0x3d	; 61
     272:	de b7       	in	r29, 0x3e	; 62
	BOOL found = TRUE;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;
     278:	1a 82       	std	Y+2, r1	; 0x02

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     27a:	13 c0       	rjmp	.+38     	; 0x2a2 <nextEmptyRxBuffer+0x38>
	{
		if(++count >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     27c:	8a 81       	ldd	r24, Y+2	; 0x02
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	8a 83       	std	Y+2, r24	; 0x02
     282:	8a 81       	ldd	r24, Y+2	; 0x02
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	10 f0       	brcs	.+4      	; 0x28c <nextEmptyRxBuffer+0x22>
		{
			found = FALSE;
     288:	19 82       	std	Y+1, r1	; 0x01
			break;
     28a:	1c c0       	rjmp	.+56     	; 0x2c4 <nextEmptyRxBuffer+0x5a>
		}

		bufferIndex++;
     28c:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <bufferIndex.2882>
     290:	8f 5f       	subi	r24, 0xFF	; 255
     292:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <bufferIndex.2882>
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     296:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <bufferIndex.2882>
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	10 f0       	brcs	.+4      	; 0x2a2 <nextEmptyRxBuffer+0x38>
		{
			bufferIndex = 0;
     29e:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <bufferIndex.2882>
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     2a2:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <bufferIndex.2882>
     2a6:	28 2f       	mov	r18, r24
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	42 e4       	ldi	r20, 0x42	; 66
     2ac:	42 9f       	mul	r20, r18
     2ae:	c0 01       	movw	r24, r0
     2b0:	43 9f       	mul	r20, r19
     2b2:	90 0d       	add	r25, r0
     2b4:	11 24       	eor	r1, r1
     2b6:	83 5f       	subi	r24, 0xF3	; 243
     2b8:	99 4f       	sbci	r25, 0xF9	; 249
     2ba:	fc 01       	movw	r30, r24
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	89 2b       	or	r24, r25
     2c2:	e1 f6       	brne	.-72     	; 0x27c <nextEmptyRxBuffer+0x12>
		{
			bufferIndex = 0;
		}
	}

	if(found)
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	88 23       	and	r24, r24
     2c8:	69 f0       	breq	.+26     	; 0x2e4 <nextEmptyRxBuffer+0x7a>
	{
		return( &rx_buffer[bufferIndex]);
     2ca:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <bufferIndex.2882>
     2ce:	28 2f       	mov	r18, r24
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	42 e4       	ldi	r20, 0x42	; 66
     2d4:	42 9f       	mul	r20, r18
     2d6:	c0 01       	movw	r24, r0
     2d8:	43 9f       	mul	r20, r19
     2da:	90 0d       	add	r25, r0
     2dc:	11 24       	eor	r1, r1
     2de:	84 5f       	subi	r24, 0xF4	; 244
     2e0:	99 4f       	sbci	r25, 0xF9	; 249
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <nextEmptyRxBuffer+0x7e>
	}

	return(NULL);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
}
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <nextFullRxBuffer>:

LinkbusRxBuffer* nextFullRxBuffer(void)
{
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <nextFullRxBuffer+0x6>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
	BOOL found = TRUE;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;
     300:	1a 82       	std	Y+2, r1	; 0x02

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     302:	13 c0       	rjmp	.+38     	; 0x32a <nextFullRxBuffer+0x38>
	{
		if(++count >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	8a 83       	std	Y+2, r24	; 0x02
     30a:	8a 81       	ldd	r24, Y+2	; 0x02
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	10 f0       	brcs	.+4      	; 0x314 <nextFullRxBuffer+0x22>
		{
			found = FALSE;
     310:	19 82       	std	Y+1, r1	; 0x01
			break;
     312:	1c c0       	rjmp	.+56     	; 0x34c <nextFullRxBuffer+0x5a>
		}

		bufferIndex++;
     314:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <bufferIndex.2891>
     318:	8f 5f       	subi	r24, 0xFF	; 255
     31a:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <bufferIndex.2891>
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     31e:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <bufferIndex.2891>
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	10 f0       	brcs	.+4      	; 0x32a <nextFullRxBuffer+0x38>
		{
			bufferIndex = 0;
     326:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <bufferIndex.2891>
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     32a:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <bufferIndex.2891>
     32e:	28 2f       	mov	r18, r24
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	42 e4       	ldi	r20, 0x42	; 66
     334:	42 9f       	mul	r20, r18
     336:	c0 01       	movw	r24, r0
     338:	43 9f       	mul	r20, r19
     33a:	90 0d       	add	r25, r0
     33c:	11 24       	eor	r1, r1
     33e:	83 5f       	subi	r24, 0xF3	; 243
     340:	99 4f       	sbci	r25, 0xF9	; 249
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	91 81       	ldd	r25, Z+1	; 0x01
     348:	89 2b       	or	r24, r25
     34a:	e1 f2       	breq	.-72     	; 0x304 <nextFullRxBuffer+0x12>
		{
			bufferIndex = 0;
		}
	}

	if(found)
     34c:	89 81       	ldd	r24, Y+1	; 0x01
     34e:	88 23       	and	r24, r24
     350:	69 f0       	breq	.+26     	; 0x36c <nextFullRxBuffer+0x7a>
	{
		return( &rx_buffer[bufferIndex]);
     352:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <bufferIndex.2891>
     356:	28 2f       	mov	r18, r24
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	42 e4       	ldi	r20, 0x42	; 66
     35c:	42 9f       	mul	r20, r18
     35e:	c0 01       	movw	r24, r0
     360:	43 9f       	mul	r20, r19
     362:	90 0d       	add	r25, r0
     364:	11 24       	eor	r1, r1
     366:	84 5f       	subi	r24, 0xF4	; 244
     368:	99 4f       	sbci	r25, 0xF9	; 249
     36a:	02 c0       	rjmp	.+4      	; 0x370 <nextFullRxBuffer+0x7e>
	}

	return(NULL);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
}
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <linkbusTxInProgress>:

/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
	return(linkbus_tx_active);
     382:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <linkbus_tx_active>
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <linkbus_start_tx>:

BOOL linkbus_start_tx(void)
{
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	1f 92       	push	r1
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
	BOOL success = !linkbus_tx_active;
     396:	90 91 43 05 	lds	r25, 0x0543	; 0x800543 <linkbus_tx_active>
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	99 23       	and	r25, r25
     39e:	09 f0       	breq	.+2      	; 0x3a2 <linkbus_start_tx+0x16>
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	89 83       	std	Y+1, r24	; 0x01

	if(success) /* message will be lost if transmit is busy */
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	88 23       	and	r24, r24
     3a8:	61 f0       	breq	.+24     	; 0x3c2 <linkbus_start_tx+0x36>
	{
		linkbus_tx_active = TRUE;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <linkbus_tx_active>
		UCSR0B |= (1 << UDRIE0);
     3b0:	81 ec       	ldi	r24, 0xC1	; 193
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	21 ec       	ldi	r18, 0xC1	; 193
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	f9 01       	movw	r30, r18
     3ba:	20 81       	ld	r18, Z
     3bc:	20 62       	ori	r18, 0x20	; 32
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
	}

	return(success);
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
}
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <linkbus_end_tx>:

void linkbus_end_tx(void)
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	if(linkbus_tx_active)
     3d4:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <linkbus_tx_active>
     3d8:	88 23       	and	r24, r24
     3da:	59 f0       	breq	.+22     	; 0x3f2 <linkbus_end_tx+0x26>
	{
		UCSR0B &= ~(1 << UDRIE0);
     3dc:	81 ec       	ldi	r24, 0xC1	; 193
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	21 ec       	ldi	r18, 0xC1	; 193
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	f9 01       	movw	r30, r18
     3e6:	20 81       	ld	r18, Z
     3e8:	2f 7d       	andi	r18, 0xDF	; 223
     3ea:	fc 01       	movw	r30, r24
     3ec:	20 83       	st	Z, r18
		linkbus_tx_active = FALSE;
     3ee:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <linkbus_tx_active>
	}
}
     3f2:	00 00       	nop
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <linkbus_reset_rx>:

void linkbus_reset_rx(void)
{
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
	if(UCSR0B & (1 << RXEN0))   /* perform only if rx is currently enabled */
     402:	81 ec       	ldi	r24, 0xC1	; 193
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	fc 01       	movw	r30, r24
     408:	80 81       	ld	r24, Z
     40a:	88 2f       	mov	r24, r24
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	80 71       	andi	r24, 0x10	; 16
     410:	99 27       	eor	r25, r25
     412:	89 2b       	or	r24, r25
     414:	d1 f0       	breq	.+52     	; 0x44a <STACK_SIZE+0x4a>
	{
		UCSR0B &= ~(1 << RXEN0);
     416:	81 ec       	ldi	r24, 0xC1	; 193
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	21 ec       	ldi	r18, 0xC1	; 193
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	f9 01       	movw	r30, r18
     420:	20 81       	ld	r18, Z
     422:	2f 7e       	andi	r18, 0xEF	; 239
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
/*		uint16_t s = sizeof(rx_buffer); // test */
		memset(rx_buffer, 0, sizeof(rx_buffer));
     428:	44 e8       	ldi	r20, 0x84	; 132
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	8c e0       	ldi	r24, 0x0C	; 12
     432:	96 e0       	ldi	r25, 0x06	; 6
     434:	0e 94 0f 38 	call	0x701e	; 0x701e <memset>
/*		if(s) s = 0; // test */
		UCSR0B |= (1 << RXEN0);
     438:	81 ec       	ldi	r24, 0xC1	; 193
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	21 ec       	ldi	r18, 0xC1	; 193
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	f9 01       	movw	r30, r18
     442:	20 81       	ld	r18, Z
     444:	20 61       	ori	r18, 0x10	; 16
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
	}
}
     44a:	00 00       	nop
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <linkbus_init>:

void linkbus_init(uint32_t baud)
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	00 d0       	rcall	.+0      	; 0x458 <linkbus_init+0x6>
     458:	00 d0       	rcall	.+0      	; 0x45a <linkbus_init+0x8>
     45a:	00 d0       	rcall	.+0      	; 0x45c <linkbus_init+0xa>
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	6b 83       	std	Y+3, r22	; 0x03
     462:	7c 83       	std	Y+4, r23	; 0x04
     464:	8d 83       	std	Y+5, r24	; 0x05
     466:	9e 83       	std	Y+6, r25	; 0x06
	memset(rx_buffer, 0, sizeof(rx_buffer));
     468:	44 e8       	ldi	r20, 0x84	; 132
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	8c e0       	ldi	r24, 0x0C	; 12
     472:	96 e0       	ldi	r25, 0x06	; 6
     474:	0e 94 0f 38 	call	0x701e	; 0x701e <memset>
	/*Set baud rate */
	uint16_t myubrr = MYUBRR(baud);
     478:	80 e2       	ldi	r24, 0x20	; 32
     47a:	91 ea       	ldi	r25, 0xA1	; 161
     47c:	a7 e0       	ldi	r26, 0x07	; 7
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	2b 81       	ldd	r18, Y+3	; 0x03
     482:	3c 81       	ldd	r19, Y+4	; 0x04
     484:	4d 81       	ldd	r20, Y+5	; 0x05
     486:	5e 81       	ldd	r21, Y+6	; 0x06
     488:	bc 01       	movw	r22, r24
     48a:	cd 01       	movw	r24, r26
     48c:	0e 94 67 37 	call	0x6ece	; 0x6ece <__udivmodsi4>
     490:	da 01       	movw	r26, r20
     492:	c9 01       	movw	r24, r18
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	9a 83       	std	Y+2, r25	; 0x02
     498:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (uint8_t)(myubrr >> 8);
     49a:	85 ec       	ldi	r24, 0xC5	; 197
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	29 81       	ldd	r18, Y+1	; 0x01
     4a0:	3a 81       	ldd	r19, Y+2	; 0x02
     4a2:	23 2f       	mov	r18, r19
     4a4:	33 27       	eor	r19, r19
     4a6:	fc 01       	movw	r30, r24
     4a8:	20 83       	st	Z, r18
	UBRR0L = (uint8_t)myubrr;
     4aa:	84 ec       	ldi	r24, 0xC4	; 196
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	29 81       	ldd	r18, Y+1	; 0x01
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
	/* Enable receiver and transmitter and related interrupts */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     4b4:	81 ec       	ldi	r24, 0xC1	; 193
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 e9       	ldi	r18, 0x98	; 152
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
/*	UCSR0B = (1<<RXEN0) | (1<<TXEN0); */
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     4be:	82 ec       	ldi	r24, 0xC2	; 194
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	2e e0       	ldi	r18, 0x0E	; 14
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
	g_bus_disabled = FALSE;
     4c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
}
     4cc:	00 00       	nop
     4ce:	26 96       	adiw	r28, 0x06	; 6
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <linkbus_disable>:

void linkbus_disable(void)
{
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	1f 92       	push	r1
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t bufferIndex;
	
	g_bus_disabled = TRUE;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	UCSR0B = 0;
     4f0:	81 ec       	ldi	r24, 0xC1	; 193
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	fc 01       	movw	r30, r24
     4f6:	10 82       	st	Z, r1
	linkbus_end_tx();
     4f8:	69 df       	rcall	.-302    	; 0x3cc <linkbus_end_tx>
	memset(rx_buffer, 0, sizeof(rx_buffer));
     4fa:	44 e8       	ldi	r20, 0x84	; 132
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	8c e0       	ldi	r24, 0x0C	; 12
     504:	96 e0       	ldi	r25, 0x06	; 6
     506:	0e 94 0f 38 	call	0x701e	; 0x701e <memset>
	
	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
     50a:	19 82       	std	Y+1, r1	; 0x01
     50c:	10 c0       	rjmp	.+32     	; 0x52e <linkbus_disable+0x4e>
	{
		tx_buffer[bufferIndex][0] = '\0';
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	28 2f       	mov	r18, r24
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	42 e3       	ldi	r20, 0x32	; 50
     516:	42 9f       	mul	r20, r18
     518:	c0 01       	movw	r24, r0
     51a:	43 9f       	mul	r20, r19
     51c:	90 0d       	add	r25, r0
     51e:	11 24       	eor	r1, r1
     520:	8c 5b       	subi	r24, 0xBC	; 188
     522:	9a 4f       	sbci	r25, 0xFA	; 250
     524:	fc 01       	movw	r30, r24
     526:	10 82       	st	Z, r1
	g_bus_disabled = TRUE;
	UCSR0B = 0;
	linkbus_end_tx();
	memset(rx_buffer, 0, sizeof(rx_buffer));
	
	for(bufferIndex=0; bufferIndex<LINKBUS_NUMBER_OF_TX_MSG_BUFFERS; bufferIndex++)
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	8f 5f       	subi	r24, 0xFF	; 255
     52c:	89 83       	std	Y+1, r24	; 0x01
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	84 30       	cpi	r24, 0x04	; 4
     532:	68 f3       	brcs	.-38     	; 0x50e <linkbus_disable+0x2e>
	{
		tx_buffer[bufferIndex][0] = '\0';
	}
}
     534:	00 00       	nop
     536:	0f 90       	pop	r0
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <linkbus_setTerminalMode>:

void linkbus_setTerminalMode(BOOL on)
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	1f 92       	push	r1
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	89 83       	std	Y+1, r24	; 0x01
	g_lb_terminal_mode = on;
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <__data_end>

	if(g_lb_terminal_mode)
     550:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
     554:	88 23       	and	r24, r24
     556:	39 f0       	breq	.+14     	; 0x566 <linkbus_setTerminalMode+0x28>
	{
		linkbus_setLineTerm("\n");
     558:	85 e8       	ldi	r24, 0x85	; 133
     55a:	93 e0       	ldi	r25, 0x03	; 3
     55c:	e7 d0       	rcall	.+462    	; 0x72c <linkbus_setLineTerm>
		linkbus_send_text(lineTerm);
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	09 d0       	rcall	.+18     	; 0x576 <linkbus_send_text>
	}
	else
	{
		linkbus_send_text((char*)crlf);
     564:	03 c0       	rjmp	.+6      	; 0x56c <linkbus_setTerminalMode+0x2e>
     566:	8a e3       	ldi	r24, 0x3A	; 58
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	05 d0       	rcall	.+10     	; 0x576 <linkbus_send_text>
	}
}
     56c:	00 00       	nop
     56e:	0f 90       	pop	r0
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <linkbus_send_text>:

BOOL linkbus_send_text(char* text)
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	00 d0       	rcall	.+0      	; 0x57c <linkbus_send_text+0x6>
     57c:	00 d0       	rcall	.+0      	; 0x57e <linkbus_send_text+0x8>
     57e:	1f 92       	push	r1
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	9d 83       	std	Y+5, r25	; 0x05
     586:	8c 83       	std	Y+4, r24	; 0x04
	BOOL err = TRUE;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	89 83       	std	Y+1, r24	; 0x01
	
	if(g_bus_disabled) return err;
     58c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     590:	88 23       	and	r24, r24
     592:	11 f0       	breq	.+4      	; 0x598 <linkbus_send_text+0x22>
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	28 c0       	rjmp	.+80     	; 0x5e8 <linkbus_send_text+0x72>

	if(text)
     598:	8c 81       	ldd	r24, Y+4	; 0x04
     59a:	9d 81       	ldd	r25, Y+5	; 0x05
     59c:	89 2b       	or	r24, r25
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     59e:	19 f1       	breq	.+70     	; 0x5e6 <linkbus_send_text+0x70>
     5a0:	21 de       	rcall	.-958    	; 0x1e4 <nextEmptyTxBuffer>
     5a2:	9b 83       	std	Y+3, r25	; 0x03

		while(!buff)
		{
			while(linkbusTxInProgress())
     5a4:	8a 83       	std	Y+2, r24	; 0x02
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <linkbus_send_text+0x40>
     5a8:	00 00       	nop
     5aa:	e7 de       	rcall	.-562    	; 0x37a <linkbusTxInProgress>
     5ac:	88 23       	and	r24, r24
			{
				;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
     5ae:	e9 f7       	brne	.-6      	; 0x5aa <linkbus_send_text+0x34>
     5b0:	19 de       	rcall	.-974    	; 0x1e4 <nextEmptyTxBuffer>
     5b2:	9b 83       	std	Y+3, r25	; 0x03
     5b4:	8a 83       	std	Y+2, r24	; 0x02

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff)
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ba:	89 2b       	or	r24, r25
     5bc:	a9 f3       	breq	.-22     	; 0x5a8 <linkbus_send_text+0x32>
				;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
		}

		if(buff)
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	9b 81       	ldd	r25, Y+3	; 0x03
     5c2:	89 2b       	or	r24, r25
     5c4:	81 f0       	breq	.+32     	; 0x5e6 <linkbus_send_text+0x70>
		{
			sprintf(*buff, text);
     5c6:	8d 81       	ldd	r24, Y+5	; 0x05
     5c8:	8f 93       	push	r24
     5ca:	8c 81       	ldd	r24, Y+4	; 0x04
     5cc:	8f 93       	push	r24
     5ce:	8b 81       	ldd	r24, Y+3	; 0x03
     5d0:	8f 93       	push	r24
     5d2:	8a 81       	ldd	r24, Y+2	; 0x02
     5d4:	8f 93       	push	r24
     5d6:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0

			linkbus_start_tx();
     5e0:	0f 90       	pop	r0
     5e2:	d4 de       	rcall	.-600    	; 0x38c <linkbus_start_tx>
			err = FALSE;
     5e4:	19 82       	std	Y+1, r1	; 0x01
		}
	}

	return(err);
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
}
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28

void lb_send_WDTError(void)
{
     5f6:	08 95       	ret

000005f8 <lb_send_WDTError>:
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	cd b7       	in	r28, 0x3d	; 61
	linkbus_send_text((char*)textWDT);
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	81 e4       	ldi	r24, 0x41	; 65
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	b8 df       	rcall	.-144    	; 0x576 <linkbus_send_text>
}
     606:	00 00       	nop
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	08 95       	ret

0000060e <lb_send_Help>:

/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	00 d0       	rcall	.+0      	; 0x614 <lb_send_Help+0x6>
     614:	00 d0       	rcall	.+0      	; 0x616 <lb_send_Help+0x8>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
	if(g_bus_disabled) return;
     61a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     61e:	88 23       	and	r24, r24
     620:	09 f0       	breq	.+2      	; 0x624 <lb_send_Help+0x16>
     622:	5c c0       	rjmp	.+184    	; 0x6dc <lb_send_Help+0xce>
	if(!g_lb_terminal_mode) return;
     624:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
     628:	88 23       	and	r24, r24
     62a:	09 f4       	brne	.+2      	; 0x62e <lb_send_Help+0x20>
     62c:	59 c0       	rjmp	.+178    	; 0x6e0 <lb_send_Help+0xd2>

#ifdef DEBUG_FUNCTIONS_ENABLE
	sprintf(g_tempMsgBuff, "\n*** %s Debug Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
#else
	sprintf(g_tempMsgBuff, "\n*** %s Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
     62e:	87 e8       	ldi	r24, 0x87	; 135
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	89 2f       	mov	r24, r25
     634:	8f 93       	push	r24
     636:	87 e8       	ldi	r24, 0x87	; 135
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	8f 93       	push	r24
     63c:	8e e8       	ldi	r24, 0x8E	; 142
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	89 2f       	mov	r24, r25
     642:	8f 93       	push	r24
     644:	8e e8       	ldi	r24, 0x8E	; 142
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	8f 93       	push	r24
     64a:	89 ea       	ldi	r24, 0xA9	; 169
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	89 2f       	mov	r24, r25
     650:	8f 93       	push	r24
     652:	89 ea       	ldi	r24, 0xA9	; 169
     654:	93 e0       	ldi	r25, 0x03	; 3
     656:	8f 93       	push	r24
     658:	81 e1       	ldi	r24, 0x11	; 17
     65a:	95 e0       	ldi	r25, 0x05	; 5
     65c:	89 2f       	mov	r24, r25
     65e:	8f 93       	push	r24
     660:	81 e1       	ldi	r24, 0x11	; 17
     662:	95 e0       	ldi	r25, 0x05	; 5
     664:	8f 93       	push	r24
     666:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     66a:	8d b7       	in	r24, 0x3d	; 61
     66c:	9e b7       	in	r25, 0x3e	; 62
     66e:	08 96       	adiw	r24, 0x08	; 8
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
#endif
	
	while(linkbus_send_text(g_tempMsgBuff));
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	00 00       	nop
     67c:	81 e1       	ldi	r24, 0x11	; 17
     67e:	95 e0       	ldi	r25, 0x05	; 5
     680:	7a df       	rcall	.-268    	; 0x576 <linkbus_send_text>
     682:	88 23       	and	r24, r24
	while(linkbusTxInProgress());
     684:	d9 f7       	brne	.-10     	; 0x67c <lb_send_Help+0x6e>
     686:	00 00       	nop
     688:	78 de       	rcall	.-784    	; 0x37a <linkbusTxInProgress>
     68a:	88 23       	and	r24, r24
     68c:	e9 f7       	brne	.-6      	; 0x688 <lb_send_Help+0x7a>
	sprintf(g_tempMsgBuff, "\nNote: Watchdog disabled in this build!");
	while(linkbus_send_text(g_tempMsgBuff)); 
	while(linkbusTxInProgress());
#endif // TRANQUILIZE_WATCHDOG
	
	int rows = sizeof(textHelp)/sizeof(textHelp[0]);
     68e:	80 e1       	ldi	r24, 0x10	; 16
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	9c 83       	std	Y+4, r25	; 0x04
     694:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0; i<rows; i++)
     696:	1a 82       	std	Y+2, r1	; 0x02
     698:	19 82       	std	Y+1, r1	; 0x01
     69a:	17 c0       	rjmp	.+46     	; 0x6ca <lb_send_Help+0xbc>
	{
		while(linkbus_send_text((char*)textHelp[i])); 
     69c:	00 00       	nop
     69e:	29 81       	ldd	r18, Y+1	; 0x01
     6a0:	3a 81       	ldd	r19, Y+2	; 0x02
     6a2:	43 e2       	ldi	r20, 0x23	; 35
     6a4:	42 9f       	mul	r20, r18
     6a6:	c0 01       	movw	r24, r0
     6a8:	43 9f       	mul	r20, r19
     6aa:	90 0d       	add	r25, r0
     6ac:	11 24       	eor	r1, r1
     6ae:	8b 5a       	subi	r24, 0xAB	; 171
     6b0:	9e 4f       	sbci	r25, 0xFE	; 254
     6b2:	61 df       	rcall	.-318    	; 0x576 <linkbus_send_text>
     6b4:	88 23       	and	r24, r24
		while(linkbusTxInProgress());
     6b6:	99 f7       	brne	.-26     	; 0x69e <lb_send_Help+0x90>
     6b8:	00 00       	nop
     6ba:	5f de       	rcall	.-834    	; 0x37a <linkbusTxInProgress>
     6bc:	88 23       	and	r24, r24
	while(linkbus_send_text(g_tempMsgBuff)); 
	while(linkbusTxInProgress());
#endif // TRANQUILIZE_WATCHDOG
	
	int rows = sizeof(textHelp)/sizeof(textHelp[0]);
	for(int i=0; i<rows; i++)
     6be:	e9 f7       	brne	.-6      	; 0x6ba <lb_send_Help+0xac>
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	29 81       	ldd	r18, Y+1	; 0x01
     6cc:	3a 81       	ldd	r19, Y+2	; 0x02
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	9c 81       	ldd	r25, Y+4	; 0x04
     6d2:	28 17       	cp	r18, r24
     6d4:	39 07       	cpc	r19, r25
	{
		while(linkbus_send_text((char*)textHelp[i])); 
		while(linkbusTxInProgress());
	}
	
	lb_send_NewLine();
     6d6:	14 f3       	brlt	.-60     	; 0x69c <lb_send_Help+0x8e>
     6d8:	1e d0       	rcall	.+60     	; 0x716 <lb_send_NewLine>
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <lb_send_Help+0xd4>
/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
	if(g_bus_disabled) return;
     6dc:	00 00       	nop
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <lb_send_Help+0xd4>
	if(!g_lb_terminal_mode) return;
     6e0:	00 00       	nop
		while(linkbus_send_text((char*)textHelp[i])); 
		while(linkbusTxInProgress());
	}
	
	lb_send_NewLine();
}
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
/***********************************************************************************
 *  Support for creating and sending various Terminal Mode Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_NewPrompt(void)
{
     6ee:	08 95       	ret

000006f0 <lb_send_NewPrompt>:
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
	if(g_lb_terminal_mode)
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
	{
		linkbus_send_text((char*)textPrompt);
     6fc:	88 23       	and	r24, r24
     6fe:	21 f0       	breq	.+8      	; 0x708 <lb_send_NewPrompt+0x18>
     700:	8c e3       	ldi	r24, 0x3C	; 60
	}
	else
	{
		linkbus_send_text((char*)crlf);
	}
}
     702:	91 e0       	ldi	r25, 0x01	; 1
	{
		linkbus_send_text((char*)textPrompt);
	}
	else
	{
		linkbus_send_text((char*)crlf);
     704:	38 df       	rcall	.-400    	; 0x576 <linkbus_send_text>
     706:	03 c0       	rjmp	.+6      	; 0x70e <lb_send_NewPrompt+0x1e>
     708:	8a e3       	ldi	r24, 0x3A	; 58
     70a:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     70c:	34 df       	rcall	.-408    	; 0x576 <linkbus_send_text>
     70e:	00 00       	nop
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28

void lb_send_NewLine(void)
{
     714:	08 95       	ret

00000716 <lb_send_NewLine>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
	linkbus_send_text((char*)crlf);
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	8a e3       	ldi	r24, 0x3A	; 58
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	29 df       	rcall	.-430    	; 0x576 <linkbus_send_text>
}
     724:	00 00       	nop
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <linkbus_setLineTerm>:

void linkbus_setLineTerm(char* term)
{
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	00 d0       	rcall	.+0      	; 0x732 <linkbus_setLineTerm+0x6>
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01
	sprintf(lineTerm, term);
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	8f 93       	push	r24
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	8f 93       	push	r24
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	89 2f       	mov	r24, r25
     748:	8f 93       	push	r24
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	8f 93       	push	r24
     750:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
}
     75c:	00 00       	nop
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28

void lb_echo_char(uint8_t c)
{
     766:	08 95       	ret

00000768 <lb_echo_char>:
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	1f 92       	push	r1
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
	g_tempMsgBuff[0] = c;
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <g_tempMsgBuff>
	g_tempMsgBuff[1] = '\0';
     77a:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <g_tempMsgBuff+0x1>
	linkbus_send_text(g_tempMsgBuff);
     77e:	81 e1       	ldi	r24, 0x11	; 17
     780:	95 e0       	ldi	r25, 0x05	; 5
     782:	f9 de       	rcall	.-526    	; 0x576 <linkbus_send_text>
}
     784:	00 00       	nop
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <lb_send_string>:

BOOL lb_send_string(char* str)
{
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	00 d0       	rcall	.+0      	; 0x794 <lb_send_string+0x6>
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	9a 83       	std	Y+2, r25	; 0x02
     79a:	89 83       	std	Y+1, r24	; 0x01
	if(str == NULL) return TRUE;
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	89 2b       	or	r24, r25
     7a2:	11 f4       	brne	.+4      	; 0x7a8 <lb_send_string+0x1a>
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	15 c0       	rjmp	.+42     	; 0x7d2 <lb_send_string+0x44>
	if(strlen(str) > LINKBUS_MAX_MSG_LENGTH) return TRUE;
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	0e 94 1d 38 	call	0x703a	; 0x703a <strlen>
     7b0:	c3 97       	sbiw	r24, 0x33	; 51
     7b2:	10 f0       	brcs	.+4      	; 0x7b8 <lb_send_string+0x2a>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
	strncpy(g_tempMsgBuff, str, LINKBUS_MAX_MSG_LENGTH);
     7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <lb_send_string+0x44>
     7b8:	89 81       	ldd	r24, Y+1	; 0x01
     7ba:	9a 81       	ldd	r25, Y+2	; 0x02
     7bc:	42 e3       	ldi	r20, 0x32	; 50
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	bc 01       	movw	r22, r24
     7c2:	81 e1       	ldi	r24, 0x11	; 17
     7c4:	95 e0       	ldi	r25, 0x05	; 5
     7c6:	0e 94 26 38 	call	0x704c	; 0x704c <strncpy>
	linkbus_send_text(g_tempMsgBuff);
     7ca:	81 e1       	ldi	r24, 0x11	; 17
     7cc:	95 e0       	ldi	r25, 0x05	; 5
     7ce:	d3 de       	rcall	.-602    	; 0x576 <linkbus_send_text>
	return FALSE;
     7d0:	80 e0       	ldi	r24, 0x00	; 0
}
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <lb_send_value>:

void lb_send_value(uint16_t value, char* label)
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <lb_send_value+0x6>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <lb_send_value+0x8>
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	7c 83       	std	Y+4, r23	; 0x04
     7ee:	6b 83       	std	Y+3, r22	; 0x03
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	89 2f       	mov	r24, r25
     7f6:	8f 93       	push	r24
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	8f 93       	push	r24
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	8f 93       	push	r24
     802:	89 81       	ldd	r24, Y+1	; 0x01
     804:	8f 93       	push	r24
     806:	8c 81       	ldd	r24, Y+4	; 0x04
     808:	8f 93       	push	r24
     80a:	8b 81       	ldd	r24, Y+3	; 0x03
     80c:	8f 93       	push	r24
     80e:	8d eb       	ldi	r24, 0xBD	; 189
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	89 2f       	mov	r24, r25
     814:	8f 93       	push	r24
     816:	8d eb       	ldi	r24, 0xBD	; 189
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	8f 93       	push	r24
     81c:	81 e1       	ldi	r24, 0x11	; 17
     81e:	95 e0       	ldi	r25, 0x05	; 5
     820:	89 2f       	mov	r24, r25
     822:	8f 93       	push	r24
     824:	81 e1       	ldi	r24, 0x11	; 17
     826:	95 e0       	ldi	r25, 0x05	; 5
     828:	8f 93       	push	r24
     82a:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     82e:	8d b7       	in	r24, 0x3d	; 61
     830:	9e b7       	in	r25, 0x3e	; 62
     832:	0a 96       	adiw	r24, 0x0a	; 10
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
	linkbus_send_text(g_tempMsgBuff);
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	81 e1       	ldi	r24, 0x11	; 17
     840:	95 e0       	ldi	r25, 0x05	; 5
     842:	99 de       	rcall	.-718    	; 0x576 <linkbus_send_text>
}
     844:	00 00       	nop
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <lb_send_FRE>:
/***********************************************************************************
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	63 97       	sbiw	r28, 0x13	; 19
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	8e 87       	std	Y+14, r24	; 0x0e
     86a:	4f 87       	std	Y+15, r20	; 0x0f
     86c:	58 8b       	std	Y+16, r21	; 0x10
     86e:	69 8b       	std	Y+17, r22	; 0x11
     870:	7a 8b       	std	Y+18, r23	; 0x12
     872:	2b 8b       	std	Y+19, r18	; 0x13
	BOOL valid = TRUE;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	89 83       	std	Y+1, r24	; 0x01
	char f[10] = "\0";
     878:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <textHelp+0x29e>
     87c:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <textHelp+0x29f>
     880:	9d 83       	std	Y+5, r25	; 0x05
     882:	8c 83       	std	Y+4, r24	; 0x04
     884:	28 e0       	ldi	r18, 0x08	; 8
     886:	ce 01       	movw	r24, r28
     888:	06 96       	adiw	r24, 0x06	; 6
     88a:	fc 01       	movw	r30, r24
     88c:	32 2f       	mov	r19, r18
     88e:	11 92       	st	Z+, r1
     890:	3a 95       	dec	r19
     892:	e9 f7       	brne	.-6      	; 0x88e <lb_send_FRE+0x3a>
	char prefix = '$';
     894:	84 e2       	ldi	r24, 0x24	; 36
     896:	8a 83       	std	Y+2, r24	; 0x02
	char terminus = ';';
     898:	8b e3       	ldi	r24, 0x3B	; 59
     89a:	8b 83       	std	Y+3, r24	; 0x03

	if(freq != FREQUENCY_NOT_SPECIFIED)
     89c:	8f 85       	ldd	r24, Y+15	; 0x0f
     89e:	98 89       	ldd	r25, Y+16	; 0x10
     8a0:	a9 89       	ldd	r26, Y+17	; 0x11
     8a2:	ba 89       	ldd	r27, Y+18	; 0x12
     8a4:	89 2b       	or	r24, r25
     8a6:	8a 2b       	or	r24, r26
     8a8:	8b 2b       	or	r24, r27
     8aa:	09 f4       	brne	.+2      	; 0x8ae <lb_send_FRE+0x5a>
     8ac:	40 c0       	rjmp	.+128    	; 0x92e <__stack+0x2f>
	{
		if(freq < ILLEGAL_MEMORY)   /* Memory locations are MEM1, MEM2, MEM3, ... ILLEGAL_MEMORY-1 */
     8ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     8b0:	98 89       	ldd	r25, Y+16	; 0x10
     8b2:	a9 89       	ldd	r26, Y+17	; 0x11
     8b4:	ba 89       	ldd	r27, Y+18	; 0x12
     8b6:	06 97       	sbiw	r24, 0x06	; 6
     8b8:	a1 05       	cpc	r26, r1
     8ba:	b1 05       	cpc	r27, r1
     8bc:	d0 f4       	brcc	.+52     	; 0x8f2 <lb_send_FRE+0x9e>
		{
			sprintf(f, "M%d", (int)freq);
     8be:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c0:	98 89       	ldd	r25, Y+16	; 0x10
     8c2:	29 2f       	mov	r18, r25
     8c4:	2f 93       	push	r18
     8c6:	8f 93       	push	r24
     8c8:	87 ec       	ldi	r24, 0xC7	; 199
     8ca:	93 e0       	ldi	r25, 0x03	; 3
     8cc:	89 2f       	mov	r24, r25
     8ce:	8f 93       	push	r24
     8d0:	87 ec       	ldi	r24, 0xC7	; 199
     8d2:	93 e0       	ldi	r25, 0x03	; 3
     8d4:	8f 93       	push	r24
     8d6:	ce 01       	movw	r24, r28
     8d8:	04 96       	adiw	r24, 0x04	; 4
     8da:	29 2f       	mov	r18, r25
     8dc:	2f 93       	push	r18
     8de:	8f 93       	push	r24
     8e0:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	1e c0       	rjmp	.+60     	; 0x92e <__stack+0x2f>
		}
		else
		{
			sprintf(f, "%ld", freq);
     8f2:	8a 89       	ldd	r24, Y+18	; 0x12
     8f4:	8f 93       	push	r24
     8f6:	89 89       	ldd	r24, Y+17	; 0x11
     8f8:	8f 93       	push	r24
     8fa:	88 89       	ldd	r24, Y+16	; 0x10
     8fc:	8f 93       	push	r24
     8fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     900:	8f 93       	push	r24
     902:	8b ec       	ldi	r24, 0xCB	; 203
     904:	93 e0       	ldi	r25, 0x03	; 3
     906:	89 2f       	mov	r24, r25
     908:	8f 93       	push	r24
     90a:	8b ec       	ldi	r24, 0xCB	; 203
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	8f 93       	push	r24
     910:	ce 01       	movw	r24, r28
     912:	04 96       	adiw	r24, 0x04	; 4
     914:	29 2f       	mov	r18, r25
     916:	2f 93       	push	r18
     918:	8f 93       	push	r24
     91a:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     91e:	8d b7       	in	r24, 0x3d	; 61
     920:	9e b7       	in	r25, 0x3e	; 62
     922:	08 96       	adiw	r24, 0x08	; 8
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
     92e:	8e 85       	ldd	r24, Y+14	; 0x0e
     930:	83 30       	cpi	r24, 0x03	; 3
     932:	19 f4       	brne	.+6      	; 0x93a <__stack+0x3b>
	{
		prefix = '!';
     934:	81 e2       	ldi	r24, 0x21	; 33
     936:	8a 83       	std	Y+2, r24	; 0x02
     938:	0a c0       	rjmp	.+20     	; 0x94e <__stack+0x4f>
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     93a:	8e 85       	ldd	r24, Y+14	; 0x0e
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	19 f4       	brne	.+6      	; 0x946 <__stack+0x47>
	{
		terminus = '?';
     940:	8f e3       	ldi	r24, 0x3F	; 63
     942:	8b 83       	std	Y+3, r24	; 0x03
     944:	04 c0       	rjmp	.+8      	; 0x94e <__stack+0x4f>
	}
	else if(msgType != LINKBUS_MSG_COMMAND)
     946:	8e 85       	ldd	r24, Y+14	; 0x0e
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	09 f0       	breq	.+2      	; 0x94e <__stack+0x4f>
	{
		valid = FALSE;
     94c:	19 82       	std	Y+1, r1	; 0x01
	}

	if(valid)
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	88 23       	and	r24, r24
     952:	09 f4       	brne	.+2      	; 0x956 <__stack+0x57>
     954:	8a c0       	rjmp	.+276    	; 0xa6a <__stack+0x16b>
	{
		if(g_lb_terminal_mode)
     956:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
     95a:	88 23       	and	r24, r24
     95c:	09 f4       	brne	.+2      	; 0x960 <__stack+0x61>
     95e:	4d c0       	rjmp	.+154    	; 0x9fa <__stack+0xfb>
		{
			if(isMemoryValue)
     960:	8b 89       	ldd	r24, Y+19	; 0x13
     962:	88 23       	and	r24, r24
     964:	29 f1       	breq	.+74     	; 0x9b0 <__stack+0xb1>
			{
				sprintf(g_tempMsgBuff, "> %s (MEM)%s", f, lineTerm);
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	89 2f       	mov	r24, r25
     96c:	8f 93       	push	r24
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	8f 93       	push	r24
     974:	ce 01       	movw	r24, r28
     976:	04 96       	adiw	r24, 0x04	; 4
     978:	29 2f       	mov	r18, r25
     97a:	2f 93       	push	r18
     97c:	8f 93       	push	r24
     97e:	8f ec       	ldi	r24, 0xCF	; 207
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	89 2f       	mov	r24, r25
     984:	8f 93       	push	r24
     986:	8f ec       	ldi	r24, 0xCF	; 207
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	8f 93       	push	r24
     98c:	81 e1       	ldi	r24, 0x11	; 17
     98e:	95 e0       	ldi	r25, 0x05	; 5
     990:	89 2f       	mov	r24, r25
     992:	8f 93       	push	r24
     994:	81 e1       	ldi	r24, 0x11	; 17
     996:	95 e0       	ldi	r25, 0x05	; 5
     998:	8f 93       	push	r24
     99a:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     99e:	ed b7       	in	r30, 0x3d	; 61
     9a0:	fe b7       	in	r31, 0x3e	; 62
     9a2:	38 96       	adiw	r30, 0x08	; 8
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	de bf       	out	0x3e, r29	; 62
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	cd bf       	out	0x3d, r28	; 61
     9ae:	5a c0       	rjmp	.+180    	; 0xa64 <__stack+0x165>
			}
			else
			{
				sprintf(g_tempMsgBuff, "> %s%s", f, lineTerm);
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	89 2f       	mov	r24, r25
     9b6:	8f 93       	push	r24
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	8f 93       	push	r24
     9be:	ce 01       	movw	r24, r28
     9c0:	04 96       	adiw	r24, 0x04	; 4
     9c2:	29 2f       	mov	r18, r25
     9c4:	2f 93       	push	r18
     9c6:	8f 93       	push	r24
     9c8:	8c ed       	ldi	r24, 0xDC	; 220
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	89 2f       	mov	r24, r25
     9ce:	8f 93       	push	r24
     9d0:	8c ed       	ldi	r24, 0xDC	; 220
     9d2:	93 e0       	ldi	r25, 0x03	; 3
     9d4:	8f 93       	push	r24
     9d6:	81 e1       	ldi	r24, 0x11	; 17
     9d8:	95 e0       	ldi	r25, 0x05	; 5
     9da:	89 2f       	mov	r24, r25
     9dc:	8f 93       	push	r24
     9de:	81 e1       	ldi	r24, 0x11	; 17
     9e0:	95 e0       	ldi	r25, 0x05	; 5
     9e2:	8f 93       	push	r24
     9e4:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     9e8:	8d b7       	in	r24, 0x3d	; 61
     9ea:	9e b7       	in	r25, 0x3e	; 62
     9ec:	08 96       	adiw	r24, 0x08	; 8
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	35 c0       	rjmp	.+106    	; 0xa64 <__stack+0x165>
			}
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cFRE,%s,%s%c", prefix, f, isMemoryValue ? "M" : NULL, terminus);
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	48 2f       	mov	r20, r24
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	8b 89       	ldd	r24, Y+19	; 0x13
     a02:	88 23       	and	r24, r24
     a04:	19 f0       	breq	.+6      	; 0xa0c <__stack+0x10d>
     a06:	83 ee       	ldi	r24, 0xE3	; 227
     a08:	93 e0       	ldi	r25, 0x03	; 3
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__stack+0x111>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	2a 81       	ldd	r18, Y+2	; 0x02
     a12:	22 2f       	mov	r18, r18
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	65 2f       	mov	r22, r21
     a18:	6f 93       	push	r22
     a1a:	4f 93       	push	r20
     a1c:	49 2f       	mov	r20, r25
     a1e:	4f 93       	push	r20
     a20:	8f 93       	push	r24
     a22:	ce 01       	movw	r24, r28
     a24:	04 96       	adiw	r24, 0x04	; 4
     a26:	49 2f       	mov	r20, r25
     a28:	4f 93       	push	r20
     a2a:	8f 93       	push	r24
     a2c:	83 2f       	mov	r24, r19
     a2e:	8f 93       	push	r24
     a30:	82 2f       	mov	r24, r18
     a32:	8f 93       	push	r24
     a34:	85 ee       	ldi	r24, 0xE5	; 229
     a36:	93 e0       	ldi	r25, 0x03	; 3
     a38:	89 2f       	mov	r24, r25
     a3a:	8f 93       	push	r24
     a3c:	85 ee       	ldi	r24, 0xE5	; 229
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	8f 93       	push	r24
     a42:	81 e1       	ldi	r24, 0x11	; 17
     a44:	95 e0       	ldi	r25, 0x05	; 5
     a46:	89 2f       	mov	r24, r25
     a48:	8f 93       	push	r24
     a4a:	81 e1       	ldi	r24, 0x11	; 17
     a4c:	95 e0       	ldi	r25, 0x05	; 5
     a4e:	8f 93       	push	r24
     a50:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     a54:	ed b7       	in	r30, 0x3d	; 61
     a56:	fe b7       	in	r31, 0x3e	; 62
     a58:	3c 96       	adiw	r30, 0x0c	; 12
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
		}

		linkbus_send_text(g_tempMsgBuff);
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	81 e1       	ldi	r24, 0x11	; 17
     a66:	95 e0       	ldi	r25, 0x05	; 5
     a68:	86 dd       	rcall	.-1268   	; 0x576 <linkbus_send_text>
	}
}
     a6a:	00 00       	nop
     a6c:	63 96       	adiw	r28, 0x13	; 19
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <lb_send_msg>:


void lb_send_msg(LBMessageType msgType, char* msgLabel, char* msgStr)
{
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	27 97       	sbiw	r28, 0x07	; 7
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	7d 83       	std	Y+5, r23	; 0x05
     a96:	6c 83       	std	Y+4, r22	; 0x04
     a98:	5f 83       	std	Y+7, r21	; 0x07
     a9a:	4e 83       	std	Y+6, r20	; 0x06
	char prefix = '$';
     a9c:	84 e2       	ldi	r24, 0x24	; 36
     a9e:	89 83       	std	Y+1, r24	; 0x01
	char terminus = ';';
     aa0:	8b e3       	ldi	r24, 0x3B	; 59
     aa2:	8a 83       	std	Y+2, r24	; 0x02

	if(msgType == LINKBUS_MSG_REPLY)
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	83 30       	cpi	r24, 0x03	; 3
     aa8:	19 f4       	brne	.+6      	; 0xab0 <lb_send_msg+0x32>
	{
		prefix = '!';
     aaa:	81 e2       	ldi	r24, 0x21	; 33
     aac:	89 83       	std	Y+1, r24	; 0x01
     aae:	05 c0       	rjmp	.+10     	; 0xaba <lb_send_msg+0x3c>
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	82 30       	cpi	r24, 0x02	; 2
     ab4:	11 f4       	brne	.+4      	; 0xaba <lb_send_msg+0x3c>
	{
		terminus = '?';
     ab6:	8f e3       	ldi	r24, 0x3F	; 63
     ab8:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(g_lb_terminal_mode)
     aba:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
     abe:	88 23       	and	r24, r24
     ac0:	41 f1       	breq	.+80     	; 0xb12 <lb_send_msg+0x94>
	{
		sprintf(g_tempMsgBuff, "> %s=%s%s", msgLabel, msgStr, lineTerm);
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	89 2f       	mov	r24, r25
     ac8:	8f 93       	push	r24
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	8f 93       	push	r24
     ad0:	8f 81       	ldd	r24, Y+7	; 0x07
     ad2:	8f 93       	push	r24
     ad4:	8e 81       	ldd	r24, Y+6	; 0x06
     ad6:	8f 93       	push	r24
     ad8:	8d 81       	ldd	r24, Y+5	; 0x05
     ada:	8f 93       	push	r24
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	8f 93       	push	r24
     ae0:	8d ef       	ldi	r24, 0xFD	; 253
     ae2:	93 e0       	ldi	r25, 0x03	; 3
     ae4:	89 2f       	mov	r24, r25
     ae6:	8f 93       	push	r24
     ae8:	8d ef       	ldi	r24, 0xFD	; 253
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	8f 93       	push	r24
     aee:	81 e1       	ldi	r24, 0x11	; 17
     af0:	95 e0       	ldi	r25, 0x05	; 5
     af2:	89 2f       	mov	r24, r25
     af4:	8f 93       	push	r24
     af6:	81 e1       	ldi	r24, 0x11	; 17
     af8:	95 e0       	ldi	r25, 0x05	; 5
     afa:	8f 93       	push	r24
     afc:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     b00:	8d b7       	in	r24, 0x3d	; 61
     b02:	9e b7       	in	r25, 0x3e	; 62
     b04:	0a 96       	adiw	r24, 0x0a	; 10
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	2c c0       	rjmp	.+88     	; 0xb6a <lb_send_msg+0xec>
	}
	else
	{
		sprintf(g_tempMsgBuff, "%c%s,%s%c", prefix, msgLabel, msgStr, terminus);
     b12:	8a 81       	ldd	r24, Y+2	; 0x02
     b14:	28 2f       	mov	r18, r24
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	88 2f       	mov	r24, r24
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	43 2f       	mov	r20, r19
     b20:	4f 93       	push	r20
     b22:	2f 93       	push	r18
     b24:	2f 81       	ldd	r18, Y+7	; 0x07
     b26:	2f 93       	push	r18
     b28:	2e 81       	ldd	r18, Y+6	; 0x06
     b2a:	2f 93       	push	r18
     b2c:	2d 81       	ldd	r18, Y+5	; 0x05
     b2e:	2f 93       	push	r18
     b30:	2c 81       	ldd	r18, Y+4	; 0x04
     b32:	2f 93       	push	r18
     b34:	29 2f       	mov	r18, r25
     b36:	2f 93       	push	r18
     b38:	8f 93       	push	r24
     b3a:	87 e0       	ldi	r24, 0x07	; 7
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	89 2f       	mov	r24, r25
     b40:	8f 93       	push	r24
     b42:	87 e0       	ldi	r24, 0x07	; 7
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	8f 93       	push	r24
     b48:	81 e1       	ldi	r24, 0x11	; 17
     b4a:	95 e0       	ldi	r25, 0x05	; 5
     b4c:	89 2f       	mov	r24, r25
     b4e:	8f 93       	push	r24
     b50:	81 e1       	ldi	r24, 0x11	; 17
     b52:	95 e0       	ldi	r25, 0x05	; 5
     b54:	8f 93       	push	r24
     b56:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     b5a:	8d b7       	in	r24, 0x3d	; 61
     b5c:	9e b7       	in	r25, 0x3e	; 62
     b5e:	0c 96       	adiw	r24, 0x0c	; 12
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
	}

	linkbus_send_text(g_tempMsgBuff);
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	81 e1       	ldi	r24, 0x11	; 17
     b6c:	95 e0       	ldi	r25, 0x05	; 5
     b6e:	03 dd       	rcall	.-1530   	; 0x576 <linkbus_send_text>
}
     b70:	00 00       	nop
     b72:	27 96       	adiw	r28, 0x07	; 7
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <lb_send_BND>:


void lb_send_BND(LBMessageType msgType, RadioBand band)
{
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	29 97       	sbiw	r28, 0x09	; 9
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	de bf       	out	0x3e, r29	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	cd bf       	out	0x3d, r28	; 61
     b98:	88 87       	std	Y+8, r24	; 0x08
     b9a:	69 87       	std	Y+9, r22	; 0x09
	char b[4];
	BOOL valid = TRUE;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	89 83       	std	Y+1, r24	; 0x01
	char prefix = '$';
     ba0:	84 e2       	ldi	r24, 0x24	; 36
     ba2:	8a 83       	std	Y+2, r24	; 0x02
	char terminus = ';';
     ba4:	8b e3       	ldi	r24, 0x3B	; 59
     ba6:	8b 83       	std	Y+3, r24	; 0x03

	if(msgType == LINKBUS_MSG_REPLY)
     ba8:	88 85       	ldd	r24, Y+8	; 0x08
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	19 f4       	brne	.+6      	; 0xbb4 <lb_send_BND+0x30>
	{
		prefix = '!';
     bae:	81 e2       	ldi	r24, 0x21	; 33
     bb0:	8a 83       	std	Y+2, r24	; 0x02
     bb2:	0a c0       	rjmp	.+20     	; 0xbc8 <lb_send_BND+0x44>
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     bb4:	88 85       	ldd	r24, Y+8	; 0x08
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	19 f4       	brne	.+6      	; 0xbc0 <lb_send_BND+0x3c>
	{
		terminus = '?';
     bba:	8f e3       	ldi	r24, 0x3F	; 63
     bbc:	8b 83       	std	Y+3, r24	; 0x03
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <lb_send_BND+0x44>
	}
	else if(msgType != LINKBUS_MSG_COMMAND)
     bc0:	88 85       	ldd	r24, Y+8	; 0x08
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <lb_send_BND+0x44>
	{
		valid = FALSE;
     bc6:	19 82       	std	Y+1, r1	; 0x01
	}

	if(g_lb_terminal_mode)
     bc8:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
     bcc:	88 23       	and	r24, r24
     bce:	81 f0       	breq	.+32     	; 0xbf0 <lb_send_BND+0x6c>
	{
		sprintf(b, "%s", band == BAND_2M ? "2m" : "80m");
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	88 23       	and	r24, r24
     bd4:	19 f4       	brne	.+6      	; 0xbdc <lb_send_BND+0x58>
     bd6:	81 e1       	ldi	r24, 0x11	; 17
     bd8:	94 e0       	ldi	r25, 0x04	; 4
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <lb_send_BND+0x5c>
     bdc:	84 e1       	ldi	r24, 0x14	; 20
     bde:	94 e0       	ldi	r25, 0x04	; 4
     be0:	9e 01       	movw	r18, r28
     be2:	2c 5f       	subi	r18, 0xFC	; 252
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	bc 01       	movw	r22, r24
     be8:	c9 01       	movw	r24, r18
     bea:	0e 94 16 38 	call	0x702c	; 0x702c <strcpy>
     bee:	1a c0       	rjmp	.+52     	; 0xc24 <lb_send_BND+0xa0>
	}
	else
	{
		sprintf(b, "%d", band);
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	29 2f       	mov	r18, r25
     bf8:	2f 93       	push	r18
     bfa:	8f 93       	push	r24
     bfc:	88 e1       	ldi	r24, 0x18	; 24
     bfe:	94 e0       	ldi	r25, 0x04	; 4
     c00:	89 2f       	mov	r24, r25
     c02:	8f 93       	push	r24
     c04:	88 e1       	ldi	r24, 0x18	; 24
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	8f 93       	push	r24
     c0a:	ce 01       	movw	r24, r28
     c0c:	04 96       	adiw	r24, 0x04	; 4
     c0e:	29 2f       	mov	r18, r25
     c10:	2f 93       	push	r18
     c12:	8f 93       	push	r24
     c14:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
	}

	if(valid)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	88 23       	and	r24, r24
     c28:	09 f4       	brne	.+2      	; 0xc2c <lb_send_BND+0xa8>
     c2a:	56 c0       	rjmp	.+172    	; 0xcd8 <lb_send_BND+0x154>
	{
		if(g_lb_terminal_mode)
     c2c:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
     c30:	88 23       	and	r24, r24
     c32:	29 f1       	breq	.+74     	; 0xc7e <lb_send_BND+0xfa>
		{
			sprintf(g_tempMsgBuff, "> BND=%s%s", b, lineTerm);
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	89 2f       	mov	r24, r25
     c3a:	8f 93       	push	r24
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	8f 93       	push	r24
     c42:	ce 01       	movw	r24, r28
     c44:	04 96       	adiw	r24, 0x04	; 4
     c46:	29 2f       	mov	r18, r25
     c48:	2f 93       	push	r18
     c4a:	8f 93       	push	r24
     c4c:	8b e1       	ldi	r24, 0x1B	; 27
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	89 2f       	mov	r24, r25
     c52:	8f 93       	push	r24
     c54:	8b e1       	ldi	r24, 0x1B	; 27
     c56:	94 e0       	ldi	r25, 0x04	; 4
     c58:	8f 93       	push	r24
     c5a:	81 e1       	ldi	r24, 0x11	; 17
     c5c:	95 e0       	ldi	r25, 0x05	; 5
     c5e:	89 2f       	mov	r24, r25
     c60:	8f 93       	push	r24
     c62:	81 e1       	ldi	r24, 0x11	; 17
     c64:	95 e0       	ldi	r25, 0x05	; 5
     c66:	8f 93       	push	r24
     c68:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     c6c:	8d b7       	in	r24, 0x3d	; 61
     c6e:	9e b7       	in	r25, 0x3e	; 62
     c70:	08 96       	adiw	r24, 0x08	; 8
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	2a c0       	rjmp	.+84     	; 0xcd2 <lb_send_BND+0x14e>
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cBND,%s%c", prefix, b, terminus);
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	43 2f       	mov	r20, r19
     c8c:	4f 93       	push	r20
     c8e:	2f 93       	push	r18
     c90:	9e 01       	movw	r18, r28
     c92:	2c 5f       	subi	r18, 0xFC	; 252
     c94:	3f 4f       	sbci	r19, 0xFF	; 255
     c96:	43 2f       	mov	r20, r19
     c98:	4f 93       	push	r20
     c9a:	2f 93       	push	r18
     c9c:	29 2f       	mov	r18, r25
     c9e:	2f 93       	push	r18
     ca0:	8f 93       	push	r24
     ca2:	86 e2       	ldi	r24, 0x26	; 38
     ca4:	94 e0       	ldi	r25, 0x04	; 4
     ca6:	89 2f       	mov	r24, r25
     ca8:	8f 93       	push	r24
     caa:	86 e2       	ldi	r24, 0x26	; 38
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	8f 93       	push	r24
     cb0:	81 e1       	ldi	r24, 0x11	; 17
     cb2:	95 e0       	ldi	r25, 0x05	; 5
     cb4:	89 2f       	mov	r24, r25
     cb6:	8f 93       	push	r24
     cb8:	81 e1       	ldi	r24, 0x11	; 17
     cba:	95 e0       	ldi	r25, 0x05	; 5
     cbc:	8f 93       	push	r24
     cbe:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     cc2:	8d b7       	in	r24, 0x3d	; 61
     cc4:	9e b7       	in	r25, 0x3e	; 62
     cc6:	0a 96       	adiw	r24, 0x0a	; 10
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
		}

		linkbus_send_text(g_tempMsgBuff);
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	81 e1       	ldi	r24, 0x11	; 17
     cd4:	95 e0       	ldi	r25, 0x05	; 5
     cd6:	4f dc       	rcall	.-1890   	; 0x576 <linkbus_send_text>
	}
}
     cd8:	00 00       	nop
     cda:	29 96       	adiw	r28, 0x09	; 9
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28

void lb_send_sync(void)
{
     cea:	08 95       	ret

00000cec <lb_send_sync>:
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	cd b7       	in	r28, 0x3d	; 61
	sprintf(g_tempMsgBuff, ".....");
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	86 e0       	ldi	r24, 0x06	; 6
     cf6:	e1 e3       	ldi	r30, 0x31	; 49
     cf8:	f4 e0       	ldi	r31, 0x04	; 4
     cfa:	a1 e1       	ldi	r26, 0x11	; 17
     cfc:	b5 e0       	ldi	r27, 0x05	; 5
     cfe:	01 90       	ld	r0, Z+
     d00:	0d 92       	st	X+, r0
     d02:	8a 95       	dec	r24
	linkbus_send_text(g_tempMsgBuff);
     d04:	e1 f7       	brne	.-8      	; 0xcfe <lb_send_sync+0x12>
     d06:	81 e1       	ldi	r24, 0x11	; 17
     d08:	95 e0       	ldi	r25, 0x05	; 5
     d0a:	35 dc       	rcall	.-1942   	; 0x576 <linkbus_send_text>
}
     d0c:	00 00       	nop
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <lb_broadcast_num>:


void lb_broadcast_num(uint16_t data, char* str)
{
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	2a 97       	sbiw	r28, 0x0a	; 10
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	98 87       	std	Y+8, r25	; 0x08
     d2a:	8f 83       	std	Y+7, r24	; 0x07
     d2c:	7a 87       	std	Y+10, r23	; 0x0a
     d2e:	69 87       	std	Y+9, r22	; 0x09
	char t[6] = "\0";
     d30:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <textHelp+0x29e>
     d34:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <textHelp+0x29f>
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	24 e0       	ldi	r18, 0x04	; 4
     d3e:	ce 01       	movw	r24, r28
     d40:	03 96       	adiw	r24, 0x03	; 3
     d42:	fc 01       	movw	r30, r24
     d44:	32 2f       	mov	r19, r18
     d46:	11 92       	st	Z+, r1
     d48:	3a 95       	dec	r19
     d4a:	e9 f7       	brne	.-6      	; 0xd46 <lb_broadcast_num+0x32>

	sprintf(t, "%u", data);
     d4c:	88 85       	ldd	r24, Y+8	; 0x08
     d4e:	8f 93       	push	r24
     d50:	8f 81       	ldd	r24, Y+7	; 0x07
     d52:	8f 93       	push	r24
     d54:	87 e3       	ldi	r24, 0x37	; 55
     d56:	94 e0       	ldi	r25, 0x04	; 4
     d58:	89 2f       	mov	r24, r25
     d5a:	8f 93       	push	r24
     d5c:	87 e3       	ldi	r24, 0x37	; 55
     d5e:	94 e0       	ldi	r25, 0x04	; 4
     d60:	8f 93       	push	r24
     d62:	ce 01       	movw	r24, r28
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	9f 93       	push	r25
     d68:	8f 93       	push	r24
     d6a:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
	g_tempMsgBuff[0] = '\0';
     d7a:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <g_tempMsgBuff>

	if(g_lb_terminal_mode)
     d7e:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <__data_end>
     d82:	88 23       	and	r24, r24
     d84:	09 f4       	brne	.+2      	; 0xd88 <lb_broadcast_num+0x74>
     d86:	50 c0       	rjmp	.+160    	; 0xe28 <lb_broadcast_num+0x114>
	{
		if(str)
     d88:	89 85       	ldd	r24, Y+9	; 0x09
     d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8c:	89 2b       	or	r24, r25
     d8e:	41 f1       	breq	.+80     	; 0xde0 <lb_broadcast_num+0xcc>
		{
			sprintf(g_tempMsgBuff, "> %s=%s%s", str, t, lineTerm);
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	89 2f       	mov	r24, r25
     d96:	8f 93       	push	r24
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	8f 93       	push	r24
     d9e:	ce 01       	movw	r24, r28
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9f 93       	push	r25
     da4:	8f 93       	push	r24
     da6:	8a 85       	ldd	r24, Y+10	; 0x0a
     da8:	8f 93       	push	r24
     daa:	89 85       	ldd	r24, Y+9	; 0x09
     dac:	8f 93       	push	r24
     dae:	8d ef       	ldi	r24, 0xFD	; 253
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	89 2f       	mov	r24, r25
     db4:	8f 93       	push	r24
     db6:	8d ef       	ldi	r24, 0xFD	; 253
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	8f 93       	push	r24
     dbc:	81 e1       	ldi	r24, 0x11	; 17
     dbe:	95 e0       	ldi	r25, 0x05	; 5
     dc0:	89 2f       	mov	r24, r25
     dc2:	8f 93       	push	r24
     dc4:	81 e1       	ldi	r24, 0x11	; 17
     dc6:	95 e0       	ldi	r25, 0x05	; 5
     dc8:	8f 93       	push	r24
     dca:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     dce:	8d b7       	in	r24, 0x3d	; 61
     dd0:	9e b7       	in	r25, 0x3e	; 62
     dd2:	0a 96       	adiw	r24, 0x0a	; 10
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	48 c0       	rjmp	.+144    	; 0xe70 <lb_broadcast_num+0x15c>
		}
		else
		{
			sprintf(g_tempMsgBuff, "> %s%s", t, lineTerm);
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	89 2f       	mov	r24, r25
     de6:	8f 93       	push	r24
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	8f 93       	push	r24
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	9f 93       	push	r25
     df4:	8f 93       	push	r24
     df6:	8c ed       	ldi	r24, 0xDC	; 220
     df8:	93 e0       	ldi	r25, 0x03	; 3
     dfa:	89 2f       	mov	r24, r25
     dfc:	8f 93       	push	r24
     dfe:	8c ed       	ldi	r24, 0xDC	; 220
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	8f 93       	push	r24
     e04:	81 e1       	ldi	r24, 0x11	; 17
     e06:	95 e0       	ldi	r25, 0x05	; 5
     e08:	89 2f       	mov	r24, r25
     e0a:	8f 93       	push	r24
     e0c:	81 e1       	ldi	r24, 0x11	; 17
     e0e:	95 e0       	ldi	r25, 0x05	; 5
     e10:	8f 93       	push	r24
     e12:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     e16:	ed b7       	in	r30, 0x3d	; 61
     e18:	fe b7       	in	r31, 0x3e	; 62
     e1a:	38 96       	adiw	r30, 0x08	; 8
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	24 c0       	rjmp	.+72     	; 0xe70 <lb_broadcast_num+0x15c>
		}
	}
	else
	{
		if(str)
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	89 2b       	or	r24, r25
     e2e:	01 f1       	breq	.+64     	; 0xe70 <lb_broadcast_num+0x15c>
		{
			sprintf(g_tempMsgBuff, "%s,%s;", str, t);
     e30:	ce 01       	movw	r24, r28
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	9f 93       	push	r25
     e36:	8f 93       	push	r24
     e38:	8a 85       	ldd	r24, Y+10	; 0x0a
     e3a:	8f 93       	push	r24
     e3c:	89 85       	ldd	r24, Y+9	; 0x09
     e3e:	8f 93       	push	r24
     e40:	8a e3       	ldi	r24, 0x3A	; 58
     e42:	94 e0       	ldi	r25, 0x04	; 4
     e44:	89 2f       	mov	r24, r25
     e46:	8f 93       	push	r24
     e48:	8a e3       	ldi	r24, 0x3A	; 58
     e4a:	94 e0       	ldi	r25, 0x04	; 4
     e4c:	8f 93       	push	r24
     e4e:	81 e1       	ldi	r24, 0x11	; 17
     e50:	95 e0       	ldi	r25, 0x05	; 5
     e52:	89 2f       	mov	r24, r25
     e54:	8f 93       	push	r24
     e56:	81 e1       	ldi	r24, 0x11	; 17
     e58:	95 e0       	ldi	r25, 0x05	; 5
     e5a:	8f 93       	push	r24
     e5c:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
     e60:	8d b7       	in	r24, 0x3d	; 61
     e62:	9e b7       	in	r25, 0x3e	; 62
     e64:	08 96       	adiw	r24, 0x08	; 8
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
		}
	}

	if(g_tempMsgBuff[0]) linkbus_send_text(g_tempMsgBuff);
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <g_tempMsgBuff>
     e74:	88 23       	and	r24, r24
     e76:	19 f0       	breq	.+6      	; 0xe7e <lb_broadcast_num+0x16a>
     e78:	81 e1       	ldi	r24, 0x11	; 17
     e7a:	95 e0       	ldi	r25, 0x05	; 5
     e7c:	7c db       	rcall	.-2312   	; 0x576 <linkbus_send_text>
}
     e7e:	00 00       	nop
     e80:	2a 96       	adiw	r28, 0x0a	; 10
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <wdt_init>:
 * Notice: Optimization must be enabled before watchdog can be set
 * in C (WDCE). Use __attribute__ to enforce optimization level.
 ************************************************************************/
void __attribute__((optimize("O1"))) wdt_init(WDReset resetType)
{
	wdt_reset();
     e92:	a8 95       	wdr

	if(MCUSR & (1 << WDRF))     /* If a reset was caused by the Watchdog Timer perform any special operations */
     e94:	04 b6       	in	r0, 0x34	; 52
     e96:	03 fe       	sbrs	r0, 3
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <wdt_init+0xe>
	{
		MCUSR &= (1 << WDRF);   /* Clear the WDT reset flag */
     e9a:	94 b7       	in	r25, 0x34	; 52
     e9c:	98 70       	andi	r25, 0x08	; 8
     e9e:	94 bf       	out	0x34, r25	; 52
	}

	if(resetType == WD_DISABLE)
     ea0:	83 30       	cpi	r24, 0x03	; 3
     ea2:	61 f4       	brne	.+24     	; 0xebc <wdt_init+0x2a>
	{
		/* Clear WDRF in MCUSR */
		MCUSR &= ~(1<<WDRF);
     ea4:	84 b7       	in	r24, 0x34	; 52
     ea6:	87 7f       	andi	r24, 0xF7	; 247
     ea8:	84 bf       	out	0x34, r24	; 52
		/* Write logical one to WDCE and WDE */
		/* Keep old prescaler setting to prevent unintentional
		time-out */
		WDTCSR |= (1<<WDCE) | (1<<WDE);
     eaa:	e0 e6       	ldi	r30, 0x60	; 96
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 61       	ori	r24, 0x18	; 24
     eb2:	80 83       	st	Z, r24
		/* Turn off WDT */
		WDTCSR = 0x00;
     eb4:	10 82       	st	Z, r1
		g_enableHardwareWDResets = FALSE;
     eb6:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <g_enableHardwareWDResets>
     eba:	08 95       	ret
	}
	else
	{
		if(resetType == WD_HW_RESETS)
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	41 f4       	brne	.+16     	; 0xed0 <wdt_init+0x3e>
		{
			WDTCSR |= (1 << WDCE) | (1 << WDE);
     ec0:	e0 e6       	ldi	r30, 0x60	; 96
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	90 81       	ld	r25, Z
     ec6:	98 61       	ori	r25, 0x18	; 24
     ec8:	90 83       	st	Z, r25
			WDTCSR = (1 << WDP3) | (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt every 4 seconds, and hardware resets */
     eca:	98 e6       	ldi	r25, 0x68	; 104
     ecc:	90 83       	st	Z, r25
     ece:	11 c0       	rjmp	.+34     	; 0xef2 <wdt_init+0x60>
			/*	WDTCSR = (1 << WDP3) | (1 << WDP0) | (1 << WDIE) | (1 << WDE); // Enable WD interrupt every 8 seconds, and hardware resets */
		}
		else if(resetType == WD_SW_RESETS)
     ed0:	81 11       	cpse	r24, r1
     ed2:	08 c0       	rjmp	.+16     	; 0xee4 <wdt_init+0x52>
		{
			WDTCSR |= (1 << WDCE) | (1 << WDE);
     ed4:	e0 e6       	ldi	r30, 0x60	; 96
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	90 81       	ld	r25, Z
     eda:	98 61       	ori	r25, 0x18	; 24
     edc:	90 83       	st	Z, r25
			/*	WDTCSR = (1 << WDP3) | (1 << WDIE); // Enable WD interrupt every 4 seconds (no HW reset)
			 *	WDTCSR = (1 << WDP3) | (1 << WDP0)  | (1 << WDIE); // Enable WD interrupt every 8 seconds (no HW reset) */
			WDTCSR = (1 << WDP1) | (1 << WDP2)  | (1 << WDIE);  /* Enable WD interrupt every 1 seconds (no HW reset) */
     ede:	96 e4       	ldi	r25, 0x46	; 70
     ee0:	90 83       	st	Z, r25
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <wdt_init+0x60>
		}
		else
		{
			WDTCSR |= (1 << WDCE) | (1 << WDE);
     ee4:	e0 e6       	ldi	r30, 0x60	; 96
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	90 81       	ld	r25, Z
     eea:	98 61       	ori	r25, 0x18	; 24
     eec:	90 83       	st	Z, r25
			WDTCSR = (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt in 16ms, and hardware reset */
     eee:	98 e4       	ldi	r25, 0x48	; 72
     ef0:	90 83       	st	Z, r25
		}
	
		g_enableHardwareWDResets = (resetType != WD_SW_RESETS);
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	81 11       	cpse	r24, r1
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <wdt_init+0x68>
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 06 07 	sts	0x0706, r25	; 0x800706 <g_enableHardwareWDResets>
     efe:	08 95       	ret

00000f00 <__vector_1>:
	}
}


ISR( INT0_vect )
{
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f08:	0f 92       	push	r0
     f0a:	11 24       	eor	r1, r1
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	2f 93       	push	r18
     f16:	3f 93       	push	r19
     f18:	4f 93       	push	r20
     f1a:	5f 93       	push	r21
     f1c:	6f 93       	push	r22
     f1e:	7f 93       	push	r23
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	00 d0       	rcall	.+0      	; 0xf32 <__vector_1+0x32>
     f32:	1f 92       	push	r1
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
#ifdef ENABLE_1_SEC_INTERRUPTS
	system_tick();
     f38:	0e 94 02 37 	call	0x6e04	; 0x6e04 <system_tick>
	g_tx_epoch_time++;
     f3c:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
     f40:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
     f44:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
     f48:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	a1 1d       	adc	r26, r1
     f50:	b1 1d       	adc	r27, r1
     f52:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <g_tx_epoch_time>
     f56:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <g_tx_epoch_time+0x1>
     f5a:	a0 93 b8 06 	sts	0x06B8, r26	; 0x8006b8 <g_tx_epoch_time+0x2>
     f5e:	b0 93 b9 06 	sts	0x06B9, r27	; 0x8006b9 <g_tx_epoch_time+0x3>
	
	if(g_event_enabled)
     f62:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <g_event_enabled>
     f66:	88 23       	and	r24, r24
     f68:	09 f4       	brne	.+2      	; 0xf6c <__vector_1+0x6c>
     f6a:	2a c2       	rjmp	.+1108   	; 0x13c0 <__vector_1+0x4c0>
	{
		if(g_event_commenced)
     f6c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <g_event_commenced>
     f70:	88 23       	and	r24, r24
     f72:	09 f4       	brne	.+2      	; 0xf76 <__vector_1+0x76>
     f74:	87 c1       	rjmp	.+782    	; 0x1284 <__vector_1+0x384>
		{
			BOOL repeat;
			
			if(g_time_to_send_ID_countdown) g_time_to_send_ID_countdown--;
     f76:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <g_time_to_send_ID_countdown>
     f7a:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <g_time_to_send_ID_countdown+0x1>
     f7e:	89 2b       	or	r24, r25
     f80:	49 f0       	breq	.+18     	; 0xf94 <__vector_1+0x94>
     f82:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <g_time_to_send_ID_countdown>
     f86:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <g_time_to_send_ID_countdown+0x1>
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <g_time_to_send_ID_countdown+0x1>
     f90:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <g_time_to_send_ID_countdown>

			if(g_on_the_air)
     f94:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
     f98:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
     f9c:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
     fa0:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
     fa4:	89 2b       	or	r24, r25
     fa6:	8a 2b       	or	r24, r26
     fa8:	8b 2b       	or	r24, r27
     faa:	09 f4       	brne	.+2      	; 0xfae <__vector_1+0xae>
     fac:	09 c2       	rjmp	.+1042   	; 0x13c0 <__vector_1+0x4c0>
			{
				if(g_event_finish_time > 0)
     fae:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <g_event_finish_time>
     fb2:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <g_event_finish_time+0x1>
     fb6:	a0 91 ed 06 	lds	r26, 0x06ED	; 0x8006ed <g_event_finish_time+0x2>
     fba:	b0 91 ee 06 	lds	r27, 0x06EE	; 0x8006ee <g_event_finish_time+0x3>
     fbe:	89 2b       	or	r24, r25
     fc0:	8a 2b       	or	r24, r26
     fc2:	8b 2b       	or	r24, r27
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <__vector_1+0xc8>
     fc6:	5f c0       	rjmp	.+190    	; 0x1086 <__vector_1+0x186>
				{
					g_temp_time = time(NULL);
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 ef 36 	call	0x6dde	; 0x6dde <time>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
     fd8:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
     fdc:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
     fe0:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
					
					if(g_temp_time != g_tx_epoch_time)
     fe4:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
     fe8:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
     fec:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
     ff0:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
     ff4:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
     ff8:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
     ffc:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    1000:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    1004:	28 17       	cp	r18, r24
    1006:	39 07       	cpc	r19, r25
    1008:	4a 07       	cpc	r20, r26
    100a:	5b 07       	cpc	r21, r27
    100c:	81 f0       	breq	.+32     	; 0x102e <__vector_1+0x12e>
					{
						g_temp_time = g_tx_epoch_time;
    100e:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    1012:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    1016:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    101a:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    101e:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    1022:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    1026:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    102a:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
					}
					
					if(g_temp_time >= g_event_finish_time)
    102e:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
    1032:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    1036:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    103a:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    103e:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <g_event_finish_time>
    1042:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <g_event_finish_time+0x1>
    1046:	a0 91 ed 06 	lds	r26, 0x06ED	; 0x8006ed <g_event_finish_time+0x2>
    104a:	b0 91 ee 06 	lds	r27, 0x06EE	; 0x8006ee <g_event_finish_time+0x3>
    104e:	28 17       	cp	r18, r24
    1050:	39 07       	cpc	r19, r25
    1052:	4a 07       	cpc	r20, r26
    1054:	5b 07       	cpc	r21, r27
    1056:	b8 f0       	brcs	.+46     	; 0x1086 <__vector_1+0x186>
					{
						g_on_the_air = 0;
    1058:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <g_on_the_air>
    105c:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <g_on_the_air+0x1>
    1060:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <g_on_the_air+0x2>
    1064:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <g_on_the_air+0x3>
						g_event_finish_time = EEPROM_FINISH_TIME_DEFAULT;
    1068:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <g_event_finish_time>
    106c:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <g_event_finish_time+0x1>
    1070:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <g_event_finish_time+0x2>
    1074:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <g_event_finish_time+0x3>
						keyTransmitter(OFF);
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0e 94 28 23 	call	0x4650	; 0x4650 <keyTransmitter>
						g_event_enabled = FALSE;
    107e:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <g_event_enabled>
						g_event_commenced = FALSE;
    1082:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <g_event_commenced>
					}
				}

				if(g_on_the_air > 0) /* on the air */
    1086:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    108a:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    108e:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    1092:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    1096:	18 16       	cp	r1, r24
    1098:	19 06       	cpc	r1, r25
    109a:	1a 06       	cpc	r1, r26
    109c:	1b 06       	cpc	r1, r27
    109e:	0c f0       	brlt	.+2      	; 0x10a2 <__vector_1+0x1a2>
    10a0:	a2 c0       	rjmp	.+324    	; 0x11e6 <__vector_1+0x2e6>
				{
					g_on_the_air--;
    10a2:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    10a6:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    10aa:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    10ae:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	a1 09       	sbc	r26, r1
    10b6:	b1 09       	sbc	r27, r1
    10b8:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    10bc:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    10c0:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    10c4:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
			
					if(!g_time_to_send_ID_countdown)
    10c8:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <g_time_to_send_ID_countdown>
    10cc:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <g_time_to_send_ID_countdown+0x1>
    10d0:	89 2b       	or	r24, r25
    10d2:	71 f5       	brne	.+92     	; 0x1130 <__vector_1+0x230>
					{
						if(g_on_the_air == g_time_needed_for_ID) // wait until the end of a transmission
    10d4:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <g_time_needed_for_ID>
    10d8:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <g_time_needed_for_ID+0x1>
    10dc:	9c 01       	movw	r18, r24
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    10e6:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    10ea:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    10ee:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	4a 07       	cpc	r20, r26
    10f8:	5b 07       	cpc	r21, r27
    10fa:	d1 f4       	brne	.+52     	; 0x1130 <__vector_1+0x230>
						{
							g_time_to_send_ID_countdown = g_ID_time;
    10fc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_ID_time>
    1100:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_ID_time+0x1>
    1104:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <g_time_to_send_ID_countdown+0x1>
    1108:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <g_time_to_send_ID_countdown>
							g_code_throttle = throttleValue(g_id_codespeed);
    110c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_id_codespeed>
    1110:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <throttleValue>
    1114:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_code_throttle+0x1>
    1118:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_code_throttle>
							repeat = FALSE;
    111c:	19 82       	std	Y+1, r1	; 0x01
							makeMorse(g_messages_text[STATION_ID], &repeat, NULL); /* Send only once */
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	bc 01       	movw	r22, r24
    1128:	8f ec       	ldi	r24, 0xCF	; 207
    112a:	96 e0       	ldi	r25, 0x06	; 6
    112c:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <makeMorse>
						}
					}

		
					if(!g_on_the_air)
    1130:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    1134:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    1138:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    113c:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    1140:	89 2b       	or	r24, r25
    1142:	8a 2b       	or	r24, r26
    1144:	8b 2b       	or	r24, r27
    1146:	09 f0       	breq	.+2      	; 0x114a <__vector_1+0x24a>
    1148:	3b c1       	rjmp	.+630    	; 0x13c0 <__vector_1+0x4c0>
					{
						if(g_off_air_seconds)
    114a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_off_air_seconds>
    114e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_off_air_seconds+0x1>
    1152:	89 2b       	or	r24, r25
    1154:	79 f1       	breq	.+94     	; 0x11b4 <__vector_1+0x2b4>
						{
							keyTransmitter(OFF);
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 28 23 	call	0x4650	; 0x4650 <keyTransmitter>
							g_on_the_air -= g_off_air_seconds;
    115c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_off_air_seconds>
    1160:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_off_air_seconds+0x1>
    1164:	20 91 f1 06 	lds	r18, 0x06F1	; 0x8006f1 <g_on_the_air>
    1168:	30 91 f2 06 	lds	r19, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    116c:	40 91 f3 06 	lds	r20, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    1170:	50 91 f4 06 	lds	r21, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    1174:	09 2e       	mov	r0, r25
    1176:	00 0c       	add	r0, r0
    1178:	aa 0b       	sbc	r26, r26
    117a:	bb 0b       	sbc	r27, r27
    117c:	79 01       	movw	r14, r18
    117e:	8a 01       	movw	r16, r20
    1180:	e8 1a       	sub	r14, r24
    1182:	f9 0a       	sbc	r15, r25
    1184:	0a 0b       	sbc	r16, r26
    1186:	1b 0b       	sbc	r17, r27
    1188:	d8 01       	movw	r26, r16
    118a:	c7 01       	movw	r24, r14
    118c:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    1190:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    1194:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    1198:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
							repeat = TRUE;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
							makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL); /* Reset pattern to start */
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	bc 01       	movw	r22, r24
    11aa:	8b eb       	ldi	r24, 0xBB	; 187
    11ac:	96 e0       	ldi	r25, 0x06	; 6
    11ae:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <makeMorse>
    11b2:	06 c1       	rjmp	.+524    	; 0x13c0 <__vector_1+0x4c0>
						}
						else
						{
							g_on_the_air = g_on_air_seconds;
    11b4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_on_air_seconds>
    11b8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    11bc:	09 2e       	mov	r0, r25
    11be:	00 0c       	add	r0, r0
    11c0:	aa 0b       	sbc	r26, r26
    11c2:	bb 0b       	sbc	r27, r27
    11c4:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    11c8:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    11cc:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    11d0:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
							g_code_throttle = throttleValue(g_pattern_codespeed);
    11d4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    11d8:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <throttleValue>
    11dc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_code_throttle+0x1>
    11e0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_code_throttle>
    11e4:	ed c0       	rjmp	.+474    	; 0x13c0 <__vector_1+0x4c0>
						}
					}
				}
				else if(g_on_the_air < 0) /* off the air - g_on_the_air = 0 means all transmissions are disabled */
    11e6:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    11ea:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    11ee:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    11f2:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    11f6:	bb 23       	and	r27, r27
    11f8:	0c f0       	brlt	.+2      	; 0x11fc <__vector_1+0x2fc>
    11fa:	e2 c0       	rjmp	.+452    	; 0x13c0 <__vector_1+0x4c0>
				{
					g_on_the_air++;
    11fc:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    1200:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    1204:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    1208:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	a1 1d       	adc	r26, r1
    1210:	b1 1d       	adc	r27, r1
    1212:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    1216:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    121a:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    121e:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
		
					if(!g_on_the_air) // off-the-air time has expired
    1222:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    1226:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    122a:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    122e:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    1232:	89 2b       	or	r24, r25
    1234:	8a 2b       	or	r24, r26
    1236:	8b 2b       	or	r24, r27
    1238:	09 f0       	breq	.+2      	; 0x123c <__vector_1+0x33c>
    123a:	c2 c0       	rjmp	.+388    	; 0x13c0 <__vector_1+0x4c0>
					{
						g_on_the_air = g_on_air_seconds;
    123c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_on_air_seconds>
    1240:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    1244:	09 2e       	mov	r0, r25
    1246:	00 0c       	add	r0, r0
    1248:	aa 0b       	sbc	r26, r26
    124a:	bb 0b       	sbc	r27, r27
    124c:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    1250:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    1254:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    1258:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
						g_code_throttle = throttleValue(g_pattern_codespeed);
    125c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    1260:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <throttleValue>
    1264:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_code_throttle+0x1>
    1268:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_code_throttle>
						BOOL repeat = TRUE;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	8a 83       	std	Y+2, r24	; 0x02
						makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    1270:	ce 01       	movw	r24, r28
    1272:	02 96       	adiw	r24, 0x02	; 2
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	bc 01       	movw	r22, r24
    127a:	8b eb       	ldi	r24, 0xBB	; 187
    127c:	96 e0       	ldi	r25, 0x06	; 6
    127e:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <makeMorse>
    1282:	9e c0       	rjmp	.+316    	; 0x13c0 <__vector_1+0x4c0>
					}
				}
			}
		}
		else if(g_event_start_time > 0) /* off the air - waiting for the start time to arrive */
    1284:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <g_event_start_time>
    1288:	90 91 e8 06 	lds	r25, 0x06E8	; 0x8006e8 <g_event_start_time+0x1>
    128c:	a0 91 e9 06 	lds	r26, 0x06E9	; 0x8006e9 <g_event_start_time+0x2>
    1290:	b0 91 ea 06 	lds	r27, 0x06EA	; 0x8006ea <g_event_start_time+0x3>
    1294:	89 2b       	or	r24, r25
    1296:	8a 2b       	or	r24, r26
    1298:	8b 2b       	or	r24, r27
    129a:	09 f4       	brne	.+2      	; 0x129e <__vector_1+0x39e>
    129c:	91 c0       	rjmp	.+290    	; 0x13c0 <__vector_1+0x4c0>
		{
			g_temp_time = time(NULL);
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 ef 36 	call	0x6dde	; 0x6dde <time>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    12ae:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    12b2:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    12b6:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
			
			if(g_temp_time != g_tx_epoch_time)
    12ba:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
    12be:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    12c2:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    12c6:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    12ca:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    12ce:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    12d2:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    12d6:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    12da:	28 17       	cp	r18, r24
    12dc:	39 07       	cpc	r19, r25
    12de:	4a 07       	cpc	r20, r26
    12e0:	5b 07       	cpc	r21, r27
    12e2:	81 f0       	breq	.+32     	; 0x1304 <__vector_1+0x404>
			{
				g_temp_time = g_tx_epoch_time;
    12e4:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    12e8:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    12ec:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    12f0:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    12f4:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    12f8:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    12fc:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    1300:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
			}
			
			if(g_temp_time >= g_event_start_time)
    1304:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
    1308:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    130c:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    1310:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    1314:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <g_event_start_time>
    1318:	90 91 e8 06 	lds	r25, 0x06E8	; 0x8006e8 <g_event_start_time+0x1>
    131c:	a0 91 e9 06 	lds	r26, 0x06E9	; 0x8006e9 <g_event_start_time+0x2>
    1320:	b0 91 ea 06 	lds	r27, 0x06EA	; 0x8006ea <g_event_start_time+0x3>
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	4a 07       	cpc	r20, r26
    132a:	5b 07       	cpc	r21, r27
    132c:	08 f4       	brcc	.+2      	; 0x1330 <__vector_1+0x430>
    132e:	48 c0       	rjmp	.+144    	; 0x13c0 <__vector_1+0x4c0>
			{
				if(g_intra_cycle_delay_time)
    1330:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <g_intra_cycle_delay_time>
    1334:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    1338:	89 2b       	or	r24, r25
    133a:	a1 f0       	breq	.+40     	; 0x1364 <__vector_1+0x464>
				{
					g_on_the_air = -g_intra_cycle_delay_time;
    133c:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <g_intra_cycle_delay_time>
    1340:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    1344:	91 95       	neg	r25
    1346:	81 95       	neg	r24
    1348:	91 09       	sbc	r25, r1
    134a:	09 2e       	mov	r0, r25
    134c:	00 0c       	add	r0, r0
    134e:	aa 0b       	sbc	r26, r26
    1350:	bb 0b       	sbc	r27, r27
    1352:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    1356:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    135a:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    135e:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
    1362:	23 c0       	rjmp	.+70     	; 0x13aa <__vector_1+0x4aa>
				}
				else
				{
					g_on_the_air = g_on_air_seconds;
    1364:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_on_air_seconds>
    1368:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    136c:	09 2e       	mov	r0, r25
    136e:	00 0c       	add	r0, r0
    1370:	aa 0b       	sbc	r26, r26
    1372:	bb 0b       	sbc	r27, r27
    1374:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    1378:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    137c:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    1380:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
					g_code_throttle = throttleValue(g_pattern_codespeed);
    1384:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    1388:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <throttleValue>
    138c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_code_throttle+0x1>
    1390:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_code_throttle>
					BOOL repeat = TRUE;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	8b 83       	std	Y+3, r24	; 0x03
					makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    1398:	ce 01       	movw	r24, r28
    139a:	03 96       	adiw	r24, 0x03	; 3
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	bc 01       	movw	r22, r24
    13a2:	8b eb       	ldi	r24, 0xBB	; 187
    13a4:	96 e0       	ldi	r25, 0x06	; 6
    13a6:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <makeMorse>
				}
				
				g_time_to_send_ID_countdown = g_ID_time;
    13aa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_ID_time>
    13ae:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_ID_time+0x1>
    13b2:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <g_time_to_send_ID_countdown+0x1>
    13b6:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <g_time_to_send_ID_countdown>
				g_event_commenced = TRUE;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <g_event_commenced>
	}
	
	/**************************************
	 * Delay before re-enabling linkbus receive
	 ***************************************/
	if(g_wifi_enable_delay)
    13c0:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <g_wifi_enable_delay>
    13c4:	88 23       	and	r24, r24
    13c6:	81 f0       	breq	.+32     	; 0x13e8 <__vector_1+0x4e8>
	{
		g_wifi_enable_delay--;
    13c8:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <g_wifi_enable_delay>
    13cc:	81 50       	subi	r24, 0x01	; 1
    13ce:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <g_wifi_enable_delay>

		if(!g_wifi_enable_delay)
    13d2:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <g_wifi_enable_delay>
    13d6:	88 23       	and	r24, r24
    13d8:	d1 f4       	brne	.+52     	; 0x140e <__vector_1+0x50e>
		{
			wifi_power(ON); // power on WiFi
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	0e 94 b6 29 	call	0x536c	; 0x536c <wifi_power>
			wifi_reset(OFF); // bring WiFi out of reset
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	0e 94 95 29 	call	0x532a	; 0x532a <wifi_reset>
	if(g_terminal_mode)
	{
		lb_send_string("\nError: INT0 occurred!\n");
	}
#endif
}
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <__vector_1+0x50e>
			wifi_reset(OFF); // bring WiFi out of reset
		}
	}
	else
	{
		if(g_WiFi_shutdown_seconds) 
    13e8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_WiFi_shutdown_seconds>
    13ec:	88 23       	and	r24, r24
    13ee:	79 f0       	breq	.+30     	; 0x140e <__vector_1+0x50e>
		{
			g_WiFi_shutdown_seconds--;
    13f0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_WiFi_shutdown_seconds>
    13f4:	81 50       	subi	r24, 0x01	; 1
    13f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_WiFi_shutdown_seconds>
			
			if(!g_WiFi_shutdown_seconds)
    13fa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <g_WiFi_shutdown_seconds>
    13fe:	88 23       	and	r24, r24
    1400:	31 f4       	brne	.+12     	; 0x140e <__vector_1+0x50e>
			{
				wifi_reset(ON); // put WiFi into reset
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	0e 94 95 29 	call	0x532a	; 0x532a <wifi_reset>
				wifi_power(OFF); // power off WiFi
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 b6 29 	call	0x536c	; 0x536c <wifi_power>
	if(g_terminal_mode)
	{
		lb_send_string("\nError: INT0 occurred!\n");
	}
#endif
}
    140e:	00 00       	nop
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	ff 91       	pop	r31
    141c:	ef 91       	pop	r30
    141e:	bf 91       	pop	r27
    1420:	af 91       	pop	r26
    1422:	9f 91       	pop	r25
    1424:	8f 91       	pop	r24
    1426:	7f 91       	pop	r23
    1428:	6f 91       	pop	r22
    142a:	5f 91       	pop	r21
    142c:	4f 91       	pop	r20
    142e:	3f 91       	pop	r19
    1430:	2f 91       	pop	r18
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	0f 90       	pop	r0
    143c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_8>:
 * Timer/Counter2 Compare Match A ISR
 *
 * Handles periodic tasks not requiring precise timing.
 ************************************************************************/
ISR( TIMER2_COMPB_vect )
{
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    144e:	0f 92       	push	r0
    1450:	11 24       	eor	r1, r1
    1452:	2f 93       	push	r18
    1454:	3f 93       	push	r19
    1456:	4f 93       	push	r20
    1458:	5f 93       	push	r21
    145a:	6f 93       	push	r22
    145c:	7f 93       	push	r23
    145e:	8f 93       	push	r24
    1460:	9f 93       	push	r25
    1462:	af 93       	push	r26
    1464:	bf 93       	push	r27
    1466:	ef 93       	push	r30
    1468:	ff 93       	push	r31
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	2c 97       	sbiw	r28, 0x0c	; 12
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	cd bf       	out	0x3d, r28	; 61
	static int8_t indexConversionInProcess;
	static uint16_t codeInc = 0;
	static uint8_t amModulation = 0;
	BOOL repeat, finished;

	g_tick_count++;
    1478:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <g_tick_count>
    147c:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <g_tick_count+0x1>
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <g_tick_count+0x1>
    1486:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <g_tick_count>

	static BOOL key = FALSE;
	
	if(g_event_enabled && g_event_commenced)
    148a:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <g_event_enabled>
    148e:	88 23       	and	r24, r24
    1490:	09 f4       	brne	.+2      	; 0x1494 <__vector_8+0x4e>
    1492:	8a c0       	rjmp	.+276    	; 0x15a8 <__vector_8+0x162>
    1494:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <g_event_commenced>
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <__vector_8+0x58>
    149c:	85 c0       	rjmp	.+266    	; 0x15a8 <__vector_8+0x162>
	{
		if(g_on_the_air > 0)
    149e:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    14a2:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    14a6:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    14aa:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    14ae:	18 16       	cp	r1, r24
    14b0:	19 06       	cpc	r1, r25
    14b2:	1a 06       	cpc	r1, r26
    14b4:	1b 06       	cpc	r1, r27
    14b6:	0c f0       	brlt	.+2      	; 0x14ba <__vector_8+0x74>
    14b8:	5f c0       	rjmp	.+190    	; 0x1578 <__vector_8+0x132>
		{
			if(codeInc)
    14ba:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <codeInc.3212>
    14be:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <codeInc.3212+0x1>
    14c2:	89 2b       	or	r24, r25
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <__vector_8+0x82>
    14c6:	4b c0       	rjmp	.+150    	; 0x155e <__vector_8+0x118>
			{
				codeInc--;
    14c8:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <codeInc.3212>
    14cc:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <codeInc.3212+0x1>
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <codeInc.3212+0x1>
    14d6:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <codeInc.3212>
				
				if(!codeInc)
    14da:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <codeInc.3212>
    14de:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <codeInc.3212+0x1>
    14e2:	89 2b       	or	r24, r25
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <__vector_8+0xa2>
    14e6:	60 c0       	rjmp	.+192    	; 0x15a8 <__vector_8+0x162>
				{
					key = makeMorse(NULL, &repeat, &finished);
    14e8:	9e 01       	movw	r18, r28
    14ea:	25 5f       	subi	r18, 0xF5	; 245
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	ce 01       	movw	r24, r28
    14f0:	0a 96       	adiw	r24, 0x0a	; 10
    14f2:	a9 01       	movw	r20, r18
    14f4:	bc 01       	movw	r22, r24
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <makeMorse>
    14fe:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <key.3216>
					
					if(!repeat && finished) // ID has completed, so resume pattern
    1502:	8a 85       	ldd	r24, Y+10	; 0x0a
    1504:	88 23       	and	r24, r24
    1506:	19 f5       	brne	.+70     	; 0x154e <__vector_8+0x108>
    1508:	8b 85       	ldd	r24, Y+11	; 0x0b
    150a:	88 23       	and	r24, r24
    150c:	01 f1       	breq	.+64     	; 0x154e <__vector_8+0x108>
					{
						g_code_throttle = throttleValue(g_pattern_codespeed);
    150e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    1512:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <throttleValue>
    1516:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_code_throttle+0x1>
    151a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_code_throttle>
						repeat = TRUE;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	8a 87       	std	Y+10, r24	; 0x0a
						makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    1522:	ce 01       	movw	r24, r28
    1524:	0a 96       	adiw	r24, 0x0a	; 10
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	bc 01       	movw	r22, r24
    152c:	8b eb       	ldi	r24, 0xBB	; 187
    152e:	96 e0       	ldi	r25, 0x06	; 6
    1530:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <makeMorse>
						key = makeMorse(NULL, &repeat, &finished);
    1534:	9e 01       	movw	r18, r28
    1536:	25 5f       	subi	r18, 0xF5	; 245
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	ce 01       	movw	r24, r28
    153c:	0a 96       	adiw	r24, 0x0a	; 10
    153e:	a9 01       	movw	r20, r18
    1540:	bc 01       	movw	r22, r24
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <makeMorse>
    154a:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <key.3216>
					}
					
					if(key) powerToTransmitter(ON);
    154e:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <key.3216>
    1552:	88 23       	and	r24, r24
    1554:	49 f1       	breq	.+82     	; 0x15a8 <__vector_8+0x162>
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	0e 94 e7 22 	call	0x45ce	; 0x45ce <powerToTransmitter>
    155c:	25 c0       	rjmp	.+74     	; 0x15a8 <__vector_8+0x162>
				}
			}
			else
			{
				keyTransmitter(key);
    155e:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <key.3216>
    1562:	0e 94 28 23 	call	0x4650	; 0x4650 <keyTransmitter>
				codeInc = g_code_throttle;
    1566:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <g_code_throttle>
    156a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <g_code_throttle+0x1>
    156e:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <codeInc.3212+0x1>
    1572:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <codeInc.3212>
    1576:	18 c0       	rjmp	.+48     	; 0x15a8 <__vector_8+0x162>
			}
		}
		else if(!g_on_the_air)
    1578:	80 91 f1 06 	lds	r24, 0x06F1	; 0x8006f1 <g_on_the_air>
    157c:	90 91 f2 06 	lds	r25, 0x06F2	; 0x8006f2 <g_on_the_air+0x1>
    1580:	a0 91 f3 06 	lds	r26, 0x06F3	; 0x8006f3 <g_on_the_air+0x2>
    1584:	b0 91 f4 06 	lds	r27, 0x06F4	; 0x8006f4 <g_on_the_air+0x3>
    1588:	89 2b       	or	r24, r25
    158a:	8a 2b       	or	r24, r26
    158c:	8b 2b       	or	r24, r27
    158e:	61 f4       	brne	.+24     	; 0x15a8 <__vector_8+0x162>
		{
			if(key)
    1590:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <key.3216>
    1594:	88 23       	and	r24, r24
    1596:	41 f0       	breq	.+16     	; 0x15a8 <__vector_8+0x162>
			{
				key = OFF;
    1598:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <key.3216>
				keyTransmitter(OFF);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	0e 94 28 23 	call	0x4650	; 0x4650 <keyTransmitter>
				powerToTransmitter(OFF);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	0e 94 e7 22 	call	0x45ce	; 0x45ce <powerToTransmitter>
			}
		}
	}
	
	if(g_am_modulation_enabled)
    15a8:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <g_am_modulation_enabled>
    15ac:	88 23       	and	r24, r24
    15ae:	b9 f0       	breq	.+46     	; 0x15de <__vector_8+0x198>
	{
		amModulation = !amModulation;
    15b0:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <amModulation.3213>
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	99 23       	and	r25, r25
    15b8:	09 f0       	breq	.+2      	; 0x15bc <__vector_8+0x176>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <amModulation.3213>
		
		if(amModulation)
    15c0:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <amModulation.3213>
    15c4:	88 23       	and	r24, r24
    15c6:	31 f0       	breq	.+12     	; 0x15d4 <__vector_8+0x18e>
		{
			dac081c_set_dac(g_mod_up, AM_DAC);
    15c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <g_mod_up>
    15cc:	6a e1       	ldi	r22, 0x1A	; 26
    15ce:	0e 94 08 2c 	call	0x5810	; 0x5810 <dac081c_set_dac>
    15d2:	05 c0       	rjmp	.+10     	; 0x15de <__vector_8+0x198>
		}
		else
		{
			dac081c_set_dac(g_mod_down, AM_DAC);
    15d4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_mod_down>
    15d8:	6a e1       	ldi	r22, 0x1A	; 26
    15da:	0e 94 08 2c 	call	0x5810	; 0x5810 <dac081c_set_dac>


	/**
	 * Handle Periodic ADC Readings
	 * The following algorithm allows multipe ADC channel readings to be performed at different polling intervals. */
	if(!conversionInProcess)
    15de:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <conversionInProcess.3210>
    15e2:	88 23       	and	r24, r24
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <__vector_8+0x1a2>
    15e6:	78 c0       	rjmp	.+240    	; 0x16d8 <__vector_8+0x292>
	{
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <indexConversionInProcess.3211>

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
    15ee:	1c 86       	std	Y+12, r1	; 0x0c
    15f0:	32 c0       	rjmp	.+100    	; 0x1656 <__vector_8+0x210>
		{
			if(g_tickCountdownADCFlag[i])
    15f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	89 5e       	subi	r24, 0xE9	; 233
    15fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1600:	fc 01       	movw	r30, r24
    1602:	80 81       	ld	r24, Z
    1604:	91 81       	ldd	r25, Z+1	; 0x01
    1606:	89 2b       	or	r24, r25
    1608:	a1 f0       	breq	.+40     	; 0x1632 <__vector_8+0x1ec>
			{
				g_tickCountdownADCFlag[i]--;
    160a:	8c 85       	ldd	r24, Y+12	; 0x0c
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9c 01       	movw	r18, r24
    1612:	22 0f       	add	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	29 5e       	subi	r18, 0xE9	; 233
    1618:	3e 4f       	sbci	r19, 0xFE	; 254
    161a:	f9 01       	movw	r30, r18
    161c:	20 81       	ld	r18, Z
    161e:	31 81       	ldd	r19, Z+1	; 0x01
    1620:	21 50       	subi	r18, 0x01	; 1
    1622:	31 09       	sbc	r19, r1
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	89 5e       	subi	r24, 0xE9	; 233
    162a:	9e 4f       	sbci	r25, 0xFE	; 254
    162c:	fc 01       	movw	r30, r24
    162e:	31 83       	std	Z+1, r19	; 0x01
    1630:	20 83       	st	Z, r18
			}

			if(g_tickCountdownADCFlag[i] == 0)
    1632:	8c 85       	ldd	r24, Y+12	; 0x0c
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	89 5e       	subi	r24, 0xE9	; 233
    163e:	9e 4f       	sbci	r25, 0xFE	; 254
    1640:	fc 01       	movw	r30, r24
    1642:	80 81       	ld	r24, Z
    1644:	91 81       	ldd	r25, Z+1	; 0x01
    1646:	89 2b       	or	r24, r25
    1648:	19 f4       	brne	.+6      	; 0x1650 <__vector_8+0x20a>
			{
				indexConversionInProcess = (int8_t)i;
    164a:	8c 85       	ldd	r24, Y+12	; 0x0c
    164c:	80 93 0d 07 	sts	0x070D, r24	; 0x80070d <indexConversionInProcess.3211>
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
    1650:	8c 85       	ldd	r24, Y+12	; 0x0c
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	8c 87       	std	Y+12, r24	; 0x0c
    1656:	8c 85       	ldd	r24, Y+12	; 0x0c
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	58 f2       	brcs	.-106    	; 0x15f2 <__vector_8+0x1ac>
			{
				indexConversionInProcess = (int8_t)i;
			}
		}

		if(indexConversionInProcess >= 0)
    165c:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    1660:	88 23       	and	r24, r24
    1662:	0c f4       	brge	.+2      	; 0x1666 <__vector_8+0x220>
    1664:	0e c1       	rjmp	.+540    	; 0x1882 <__vector_8+0x43c>
		{
			g_tickCountdownADCFlag[indexConversionInProcess] = g_adcChannelConversionPeriod_ticks[indexConversionInProcess];    /* reset the tick countdown */
    1666:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    166a:	08 2e       	mov	r0, r24
    166c:	00 0c       	add	r0, r0
    166e:	99 0b       	sbc	r25, r25
    1670:	20 91 0d 07 	lds	r18, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    1674:	02 2e       	mov	r0, r18
    1676:	00 0c       	add	r0, r0
    1678:	33 0b       	sbc	r19, r19
    167a:	22 0f       	add	r18, r18
    167c:	33 1f       	adc	r19, r19
    167e:	2d 5b       	subi	r18, 0xBD	; 189
    1680:	3b 4f       	sbci	r19, 0xFB	; 251
    1682:	f9 01       	movw	r30, r18
    1684:	20 81       	ld	r18, Z
    1686:	31 81       	ldd	r19, Z+1	; 0x01
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	89 5e       	subi	r24, 0xE9	; 233
    168e:	9e 4f       	sbci	r25, 0xFE	; 254
    1690:	fc 01       	movw	r30, r24
    1692:	31 83       	std	Z+1, r19	; 0x01
    1694:	20 83       	st	Z, r18
			ADMUX = (ADMUX & 0xF0) | activeADC[indexConversionInProcess];                                                       /* index through all active channels */
    1696:	8c e7       	ldi	r24, 0x7C	; 124
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	2c e7       	ldi	r18, 0x7C	; 124
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	f9 01       	movw	r30, r18
    16a0:	20 81       	ld	r18, Z
    16a2:	42 2f       	mov	r20, r18
    16a4:	40 7f       	andi	r20, 0xF0	; 240
    16a6:	20 91 0d 07 	lds	r18, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    16aa:	02 2e       	mov	r0, r18
    16ac:	00 0c       	add	r0, r0
    16ae:	33 0b       	sbc	r19, r19
    16b0:	2f 5b       	subi	r18, 0xBF	; 191
    16b2:	3b 4f       	sbci	r19, 0xFB	; 251
    16b4:	f9 01       	movw	r30, r18
    16b6:	20 81       	ld	r18, Z
    16b8:	24 2b       	or	r18, r20
    16ba:	fc 01       	movw	r30, r24
    16bc:	20 83       	st	Z, r18
			ADCSRA |= (1 << ADSC);                                                                                              /*single conversion mode */
    16be:	8a e7       	ldi	r24, 0x7A	; 122
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	2a e7       	ldi	r18, 0x7A	; 122
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	f9 01       	movw	r30, r18
    16c8:	20 81       	ld	r18, Z
    16ca:	20 64       	ori	r18, 0x40	; 64
    16cc:	fc 01       	movw	r30, r24
    16ce:	20 83       	st	Z, r18
			conversionInProcess = TRUE;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <conversionInProcess.3210>

		g_lastConversionResult[indexConversionInProcess] = lastResult;

		conversionInProcess = FALSE;
	}
}/* ISR */
    16d6:	d5 c0       	rjmp	.+426    	; 0x1882 <__vector_8+0x43c>
			ADMUX = (ADMUX & 0xF0) | activeADC[indexConversionInProcess];                                                       /* index through all active channels */
			ADCSRA |= (1 << ADSC);                                                                                              /*single conversion mode */
			conversionInProcess = TRUE;
		}
	}
	else if(!( ADCSRA & (1 << ADSC) ))                                                                                          /* wait for conversion to complete */
    16d8:	8a e7       	ldi	r24, 0x7A	; 122
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	fc 01       	movw	r30, r24
    16de:	80 81       	ld	r24, Z
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	80 74       	andi	r24, 0x40	; 64
    16e6:	99 27       	eor	r25, r25
    16e8:	89 2b       	or	r24, r25
    16ea:	09 f0       	breq	.+2      	; 0x16ee <__vector_8+0x2a8>
    16ec:	ca c0       	rjmp	.+404    	; 0x1882 <__vector_8+0x43c>
	{
		uint16_t hold = ADC;
    16ee:	88 e7       	ldi	r24, 0x78	; 120
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	fc 01       	movw	r30, r24
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	9c 83       	std	Y+4, r25	; 0x04
    16fa:	8b 83       	std	Y+3, r24	; 0x03
		uint16_t holdConversionResult = (uint16_t)(((uint32_t)hold * ADC_REF_VOLTAGE_mV) >> 10);                                /* millivolts at ADC pin */
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	9c 01       	movw	r18, r24
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	8c e4       	ldi	r24, 0x4C	; 76
    1708:	94 e0       	ldi	r25, 0x04	; 4
    170a:	dc 01       	movw	r26, r24
    170c:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__muluhisi3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	07 2e       	mov	r0, r23
    1716:	7a e0       	ldi	r23, 0x0A	; 10
    1718:	b6 95       	lsr	r27
    171a:	a7 95       	ror	r26
    171c:	97 95       	ror	r25
    171e:	87 95       	ror	r24
    1720:	7a 95       	dec	r23
    1722:	d1 f7       	brne	.-12     	; 0x1718 <__vector_8+0x2d2>
    1724:	70 2d       	mov	r23, r0
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
		uint16_t lastResult = g_lastConversionResult[indexConversionInProcess];
    172a:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    172e:	08 2e       	mov	r0, r24
    1730:	00 0c       	add	r0, r0
    1732:	99 0b       	sbc	r25, r25
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	83 50       	subi	r24, 0x03	; 3
    173a:	99 4f       	sbci	r25, 0xF9	; 249
    173c:	fc 01       	movw	r30, r24
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
		BOOL directionUP = holdConversionResult > lastResult;
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	2d 81       	ldd	r18, Y+5	; 0x05
    174a:	3e 81       	ldd	r19, Y+6	; 0x06
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	82 17       	cp	r24, r18
    1752:	93 07       	cpc	r25, r19
    1754:	08 f0       	brcs	.+2      	; 0x1758 <__vector_8+0x312>
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	4f 83       	std	Y+7, r20	; 0x07
		uint16_t delta = directionUP ? holdConversionResult - lastResult : lastResult - holdConversionResult;
    175a:	8f 81       	ldd	r24, Y+7	; 0x07
    175c:	88 23       	and	r24, r24
    175e:	49 f0       	breq	.+18     	; 0x1772 <__vector_8+0x32c>
    1760:	2d 81       	ldd	r18, Y+5	; 0x05
    1762:	3e 81       	ldd	r19, Y+6	; 0x06
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	a9 01       	movw	r20, r18
    176a:	48 1b       	sub	r20, r24
    176c:	59 0b       	sbc	r21, r25
    176e:	ca 01       	movw	r24, r20
    1770:	08 c0       	rjmp	.+16     	; 0x1782 <__vector_8+0x33c>
    1772:	29 81       	ldd	r18, Y+1	; 0x01
    1774:	3a 81       	ldd	r19, Y+2	; 0x02
    1776:	8d 81       	ldd	r24, Y+5	; 0x05
    1778:	9e 81       	ldd	r25, Y+6	; 0x06
    177a:	f9 01       	movw	r30, r18
    177c:	e8 1b       	sub	r30, r24
    177e:	f9 0b       	sbc	r31, r25
    1780:	cf 01       	movw	r24, r30
    1782:	99 87       	std	Y+9, r25	; 0x09
    1784:	88 87       	std	Y+8, r24	; 0x08

		g_adcUpdated[indexConversionInProcess] = TRUE;
    1786:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    178a:	08 2e       	mov	r0, r24
    178c:	00 0c       	add	r0, r0
    178e:	99 0b       	sbc	r25, r25
    1790:	85 50       	subi	r24, 0x05	; 5
    1792:	99 4f       	sbci	r25, 0xF9	; 249
    1794:	21 e0       	ldi	r18, 0x01	; 1
    1796:	fc 01       	movw	r30, r24
    1798:	20 83       	st	Z, r18

		if(indexConversionInProcess == BATTERY_READING)
    179a:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    179e:	88 23       	and	r24, r24
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <__vector_8+0x35e>
    17a2:	4a c0       	rjmp	.+148    	; 0x1838 <__vector_8+0x3f2>
		{
			if(delta > g_filterADCValue[indexConversionInProcess])
    17a4:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    17a8:	08 2e       	mov	r0, r24
    17aa:	00 0c       	add	r0, r0
    17ac:	99 0b       	sbc	r25, r25
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	85 5e       	subi	r24, 0xE5	; 229
    17b4:	9e 4f       	sbci	r25, 0xFE	; 254
    17b6:	fc 01       	movw	r30, r24
    17b8:	20 81       	ld	r18, Z
    17ba:	31 81       	ldd	r19, Z+1	; 0x01
    17bc:	88 85       	ldd	r24, Y+8	; 0x08
    17be:	99 85       	ldd	r25, Y+9	; 0x09
    17c0:	28 17       	cp	r18, r24
    17c2:	39 07       	cpc	r19, r25
    17c4:	98 f4       	brcc	.+38     	; 0x17ec <__vector_8+0x3a6>
			{
				lastResult = holdConversionResult;
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ca:	9a 83       	std	Y+2, r25	; 0x02
    17cc:	89 83       	std	Y+1, r24	; 0x01
				g_tickCountdownADCFlag[indexConversionInProcess] = 100; /* speed up next conversion */
    17ce:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    17d2:	08 2e       	mov	r0, r24
    17d4:	00 0c       	add	r0, r0
    17d6:	99 0b       	sbc	r25, r25
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	89 5e       	subi	r24, 0xE9	; 233
    17de:	9e 4f       	sbci	r25, 0xFE	; 254
    17e0:	24 e6       	ldi	r18, 0x64	; 100
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	fc 01       	movw	r30, r24
    17e6:	31 83       	std	Z+1, r19	; 0x01
    17e8:	20 83       	st	Z, r18
    17ea:	3b c0       	rjmp	.+118    	; 0x1862 <__vector_8+0x41c>
			}
			else
			{
				if(directionUP)
    17ec:	8f 81       	ldd	r24, Y+7	; 0x07
    17ee:	88 23       	and	r24, r24
    17f0:	31 f0       	breq	.+12     	; 0x17fe <__vector_8+0x3b8>
				{
					lastResult++;
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <__vector_8+0x3ca>
				}
				else if(delta)
    17fe:	88 85       	ldd	r24, Y+8	; 0x08
    1800:	99 85       	ldd	r25, Y+9	; 0x09
    1802:	89 2b       	or	r24, r25
    1804:	29 f0       	breq	.+10     	; 0x1810 <__vector_8+0x3ca>
				{
					lastResult--;
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	9a 81       	ldd	r25, Y+2	; 0x02
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9a 83       	std	Y+2, r25	; 0x02
    180e:	89 83       	std	Y+1, r24	; 0x01
				}

				g_battery_measurements_active = TRUE;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	80 93 ae 06 	sts	0x06AE, r24	; 0x8006ae <g_battery_measurements_active>
	
				if(lastResult > VOLTS_5)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	9a 81       	ldd	r25, Y+2	; 0x02
    181a:	80 3a       	cpi	r24, 0xA0	; 160
    181c:	94 40       	sbci	r25, 0x04	; 4
    181e:	18 f0       	brcs	.+6      	; 0x1826 <__vector_8+0x3e0>
				{
					g_battery_type = BATTERY_9V;
    1820:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <g_battery_type>
    1824:	1e c0       	rjmp	.+60     	; 0x1862 <__vector_8+0x41c>
				}
				else if(lastResult > VOLTS_3_0)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	89 3b       	cpi	r24, 0xB9	; 185
    182c:	92 40       	sbci	r25, 0x02	; 2
    182e:	c8 f0       	brcs	.+50     	; 0x1862 <__vector_8+0x41c>
				{
					g_battery_type = BATTERY_4r2V;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_battery_type>
    1836:	15 c0       	rjmp	.+42     	; 0x1862 <__vector_8+0x41c>
				}
			}
		}
		else if(indexConversionInProcess == PA_VOLTAGE_READING)
    1838:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	89 f4       	brne	.+34     	; 0x1862 <__vector_8+0x41c>
		{
			lastResult = holdConversionResult;
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
			g_PA_voltage = holdConversionResult;
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	cc 01       	movw	r24, r24
    184e:	a0 e0       	ldi	r26, 0x00	; 0
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <g_PA_voltage>
    1856:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <g_PA_voltage+0x1>
    185a:	a0 93 03 07 	sts	0x0703, r26	; 0x800703 <g_PA_voltage+0x2>
    185e:	b0 93 04 07 	sts	0x0704, r27	; 0x800704 <g_PA_voltage+0x3>
		}

		g_lastConversionResult[indexConversionInProcess] = lastResult;
    1862:	80 91 0d 07 	lds	r24, 0x070D	; 0x80070d <indexConversionInProcess.3211>
    1866:	08 2e       	mov	r0, r24
    1868:	00 0c       	add	r0, r0
    186a:	99 0b       	sbc	r25, r25
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	83 50       	subi	r24, 0x03	; 3
    1872:	99 4f       	sbci	r25, 0xF9	; 249
    1874:	29 81       	ldd	r18, Y+1	; 0x01
    1876:	3a 81       	ldd	r19, Y+2	; 0x02
    1878:	fc 01       	movw	r30, r24
    187a:	31 83       	std	Z+1, r19	; 0x01
    187c:	20 83       	st	Z, r18

		conversionInProcess = FALSE;
    187e:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <conversionInProcess.3210>
	}
}/* ISR */
    1882:	00 00       	nop
    1884:	2c 96       	adiw	r28, 0x0c	; 12
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	ff 91       	pop	r31
    1896:	ef 91       	pop	r30
    1898:	bf 91       	pop	r27
    189a:	af 91       	pop	r26
    189c:	9f 91       	pop	r25
    189e:	8f 91       	pop	r24
    18a0:	7f 91       	pop	r23
    18a2:	6f 91       	pop	r22
    18a4:	5f 91       	pop	r21
    18a6:	4f 91       	pop	r20
    18a8:	3f 91       	pop	r19
    18aa:	2f 91       	pop	r18
    18ac:	0f 90       	pop	r0
    18ae:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <__vector_3>:
 *
 * Note: For quadrature reading the interrupt is set for "Any logical
 * change on INT0 generates an interrupt request."
 ************************************************************************/
ISR( PCINT0_vect )
{
    18b8:	1f 92       	push	r1
    18ba:	0f 92       	push	r0
    18bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	af 93       	push	r26
    18d6:	bf 93       	push	r27
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	if(g_terminal_mode)
    18e4:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    18e8:	88 23       	and	r24, r24
    18ea:	21 f0       	breq	.+8      	; 0x18f4 <__vector_3+0x3c>
	{
		lb_send_string("\nError: PCINT0 occurred!\n");
    18ec:	87 e4       	ldi	r24, 0x47	; 71
    18ee:	94 e0       	ldi	r25, 0x04	; 4
    18f0:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
	}
}
    18f4:	00 00       	nop
    18f6:	df 91       	pop	r29
    18f8:	cf 91       	pop	r28
    18fa:	ff 91       	pop	r31
    18fc:	ef 91       	pop	r30
    18fe:	bf 91       	pop	r27
    1900:	af 91       	pop	r26
    1902:	9f 91       	pop	r25
    1904:	8f 91       	pop	r24
    1906:	7f 91       	pop	r23
    1908:	6f 91       	pop	r22
    190a:	5f 91       	pop	r21
    190c:	4f 91       	pop	r20
    190e:	3f 91       	pop	r19
    1910:	2f 91       	pop	r18
    1912:	0f 90       	pop	r0
    1914:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <__vector_4>:
 * interrupts. Pin change interrupts on PCINT23...0 are detected
 * asynchronously. This implies that these interrupts can be used for
 * waking the part from sleep modes other than Idle mode.
 ************************************************************************/
	ISR( PCINT1_vect )
	{
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1926:	0f 92       	push	r0
    1928:	11 24       	eor	r1, r1
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	1f 92       	push	r1
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
		static uint8_t portChistory = 0xFF; /* default is high because the pull-up */

		uint8_t changedbits;

		if(!g_initialization_complete)
    193c:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <g_initialization_complete>
    1940:	88 23       	and	r24, r24
    1942:	31 f1       	breq	.+76     	; 0x1990 <__vector_4+0x72>
		{
			return; /* ignore keypresses before initialization completes */

		}
		changedbits = PINC ^ portChistory;
    1944:	86 e2       	ldi	r24, 0x26	; 38
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	fc 01       	movw	r30, r24
    194a:	90 81       	ld	r25, Z
    194c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <portChistory.3236>
    1950:	89 27       	eor	r24, r25
    1952:	89 83       	std	Y+1, r24	; 0x01
		portChistory = PINC;
    1954:	86 e2       	ldi	r24, 0x26	; 38
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	fc 01       	movw	r30, r24
    195a:	80 81       	ld	r24, Z
    195c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <portChistory.3236>

		if(!changedbits)    /* noise? */
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	88 23       	and	r24, r24
    1964:	b9 f0       	breq	.+46     	; 0x1994 <__vector_4+0x76>
		{
			return;
		}

		if(changedbits & (1 << PORTC2)) /* Receiver port changed */
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	84 70       	andi	r24, 0x04	; 4
    196e:	99 27       	eor	r25, r25
    1970:	89 2b       	or	r24, r25
    1972:	89 f0       	breq	.+34     	; 0x1996 <__vector_4+0x78>
		{
			if(PINC & (1 << PORTC2))    /* rising edge */
    1974:	86 e2       	ldi	r24, 0x26	; 38
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	fc 01       	movw	r30, r24
    197a:	80 81       	ld	r24, Z
    197c:	88 2f       	mov	r24, r24
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	84 70       	andi	r24, 0x04	; 4
    1982:	99 27       	eor	r25, r25
    1984:	89 2b       	or	r24, r25
    1986:	39 f4       	brne	.+14     	; 0x1996 <__vector_4+0x78>
			{
			}
			else
			{
				g_radio_port_changed = TRUE;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <g_radio_port_changed>
    198e:	03 c0       	rjmp	.+6      	; 0x1996 <__vector_4+0x78>

		uint8_t changedbits;

		if(!g_initialization_complete)
		{
			return; /* ignore keypresses before initialization completes */
    1990:	00 00       	nop
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <__vector_4+0x78>
		changedbits = PINC ^ portChistory;
		portChistory = PINC;

		if(!changedbits)    /* noise? */
		{
			return;
    1994:	00 00       	nop
			else
			{
				g_radio_port_changed = TRUE;
			}
		}
	}
    1996:	0f 90       	pop	r0
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	ff 91       	pop	r31
    199e:	ef 91       	pop	r30
    19a0:	9f 91       	pop	r25
    19a2:	8f 91       	pop	r24
    19a4:	0f 90       	pop	r0
    19a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <__vector_6>:
 * The Watchdog timer helps prevent lockups due to hardware problems.
 * It is especially helpful in this application for preventing I2C bus
 * errors from locking up the foreground process.
 ************************************************************************/
ISR(WDT_vect)
{
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    19b8:	0f 92       	push	r0
    19ba:	11 24       	eor	r1, r1
    19bc:	2f 93       	push	r18
    19be:	3f 93       	push	r19
    19c0:	4f 93       	push	r20
    19c2:	5f 93       	push	r21
    19c4:	6f 93       	push	r22
    19c6:	7f 93       	push	r23
    19c8:	8f 93       	push	r24
    19ca:	9f 93       	push	r25
    19cc:	af 93       	push	r26
    19ce:	bf 93       	push	r27
    19d0:	ef 93       	push	r30
    19d2:	ff 93       	push	r31
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	static uint8_t limit = 10;

	g_i2c_not_timed_out = FALSE;    /* unstick I2C */
    19dc:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <g_i2c_not_timed_out>
	saveAllEEPROM();                /* Make sure changed values get saved */
    19e0:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <saveAllEEPROM>

	/* Don't allow an unlimited number of WD interrupts to occur without enabling
	 * hardware resets. But a limited number might be required during hardware
	 * initialization. */
	if(!g_enableHardwareWDResets && limit)
    19e4:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <g_enableHardwareWDResets>
    19e8:	88 23       	and	r24, r24
    19ea:	69 f4       	brne	.+26     	; 0x1a06 <__vector_6+0x56>
    19ec:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <limit.3243>
    19f0:	88 23       	and	r24, r24
    19f2:	49 f0       	breq	.+18     	; 0x1a06 <__vector_6+0x56>
	{
		WDTCSR |= (1 << WDIE);  /* this prevents hardware resets from occurring */
    19f4:	80 e6       	ldi	r24, 0x60	; 96
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	20 e6       	ldi	r18, 0x60	; 96
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	f9 01       	movw	r30, r18
    19fe:	20 81       	ld	r18, Z
    1a00:	20 64       	ori	r18, 0x40	; 64
    1a02:	fc 01       	movw	r30, r24
    1a04:	20 83       	st	Z, r18
	}

	if(limit)
    1a06:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <limit.3243>
    1a0a:	88 23       	and	r24, r24
    1a0c:	59 f0       	breq	.+22     	; 0x1a24 <__vector_6+0x74>
	{
		limit--;
    1a0e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <limit.3243>
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <limit.3243>

		if(g_terminal_mode)
    1a18:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    1a1c:	88 23       	and	r24, r24
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <__vector_6+0x74>
		{
			lb_send_WDTError();
    1a20:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <lb_send_WDTError>
		}
	}
}
    1a24:	00 00       	nop
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	ff 91       	pop	r31
    1a2c:	ef 91       	pop	r30
    1a2e:	bf 91       	pop	r27
    1a30:	af 91       	pop	r26
    1a32:	9f 91       	pop	r25
    1a34:	8f 91       	pop	r24
    1a36:	7f 91       	pop	r23
    1a38:	6f 91       	pop	r22
    1a3a:	5f 91       	pop	r21
    1a3c:	4f 91       	pop	r20
    1a3e:	3f 91       	pop	r19
    1a40:	2f 91       	pop	r18
    1a42:	0f 90       	pop	r0
    1a44:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a48:	0f 90       	pop	r0
    1a4a:	1f 90       	pop	r1
    1a4c:	18 95       	reti

00001a4e <__vector_18>:
 *                      id = Linkbus MessageID
 *                      fn = variable length fields
 *                      ; = end of message flag
 ************************************************************************/
ISR(USART_RX_vect)
{
    1a4e:	1f 92       	push	r1
    1a50:	0f 92       	push	r0
    1a52:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a56:	0f 92       	push	r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	ef 92       	push	r14
    1a5c:	ff 92       	push	r15
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	2f 93       	push	r18
    1a64:	3f 93       	push	r19
    1a66:	4f 93       	push	r20
    1a68:	5f 93       	push	r21
    1a6a:	6f 93       	push	r22
    1a6c:	7f 93       	push	r23
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	af 93       	push	r26
    1a74:	bf 93       	push	r27
    1a76:	ef 93       	push	r30
    1a78:	ff 93       	push	r31
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	2a 97       	sbiw	r28, 0x0a	; 10
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	cd bf       	out	0x3d, r28	; 61
	static uint8_t field_len = 0;
	static uint32_t msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = UDR0;
    1a88:	86 ec       	ldi	r24, 0xC6	; 198
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	80 81       	ld	r24, Z
    1a90:	89 83       	std	Y+1, r24	; 0x01

	if(!buff)
    1a92:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <buff.3250>
    1a96:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <buff.3250+0x1>
    1a9a:	89 2b       	or	r24, r25
    1a9c:	31 f4       	brne	.+12     	; 0x1aaa <__vector_18+0x5c>
	{
		buff = nextEmptyRxBuffer();
    1a9e:	0e 94 35 01 	call	0x26a	; 0x26a <nextEmptyRxBuffer>
    1aa2:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <buff.3250+0x1>
    1aa6:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <buff.3250>
	}

	if(buff)
    1aaa:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <buff.3250>
    1aae:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <buff.3250+0x1>
    1ab2:	89 2b       	or	r24, r25
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <__vector_18+0x6a>
    1ab6:	6a c3       	rjmp	.+1748   	; 0x218c <__vector_18+0x73e>
	{
		rx_char = toupper(rx_char);
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 07 38 	call	0x700e	; 0x700e <toupper>
    1ac2:	89 83       	std	Y+1, r24	; 0x01
		SMCR = 0x00; // exit power-down mode
    1ac4:	83 e5       	ldi	r24, 0x53	; 83
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	fc 01       	movw	r30, r24
    1aca:	10 82       	st	Z, r1
		
		if(g_terminal_mode)
    1acc:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    1ad0:	88 23       	and	r24, r24
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <__vector_18+0x88>
    1ad4:	24 c2       	rjmp	.+1096   	; 0x1f1e <__vector_18+0x4d0>
		{
			static uint8_t ignoreCount = 0;
			
			if(ignoreCount)
    1ad6:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <ignoreCount.3257>
    1ada:	88 23       	and	r24, r24
    1adc:	39 f0       	breq	.+14     	; 0x1aec <__vector_18+0x9e>
			{
				rx_char = '\0';
    1ade:	19 82       	std	Y+1, r1	; 0x01
				ignoreCount--;
    1ae0:	80 91 10 07 	lds	r24, 0x0710	; 0x800710 <ignoreCount.3257>
    1ae4:	81 50       	subi	r24, 0x01	; 1
    1ae6:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <ignoreCount.3257>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <__vector_18+0xc6>
			}
			else if(rx_char == 0x1B)    /* ESC sequence start */
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	8b 31       	cpi	r24, 0x1B	; 27
    1af0:	89 f4       	brne	.+34     	; 0x1b14 <__vector_18+0xc6>
			{
				rx_char = '\0';
    1af2:	19 82       	std	Y+1, r1	; 0x01

				if(charIndex < LINKBUS_MAX_MSG_FIELD_LENGTH)
    1af4:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1af8:	85 31       	cpi	r24, 0x15	; 21
    1afa:	48 f4       	brcc	.+18     	; 0x1b0e <__vector_18+0xc0>
				{
					rx_char = textBuff[charIndex];
    1afc:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	8e 5e       	subi	r24, 0xEE	; 238
    1b06:	98 4f       	sbci	r25, 0xF8	; 248
    1b08:	fc 01       	movw	r30, r24
    1b0a:	80 81       	ld	r24, Z
    1b0c:	89 83       	std	Y+1, r24	; 0x01
				}

				ignoreCount = 2;                            /* throw out the next two characters */
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	80 93 10 07 	sts	0x0710, r24	; 0x800710 <ignoreCount.3257>
			}

			if(rx_char == 0x0D)                             /* Handle carriage return */
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	8d 30       	cpi	r24, 0x0D	; 13
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <__vector_18+0xce>
    1b1a:	69 c0       	rjmp	.+210    	; 0x1bee <__vector_18+0x1a0>
			{
				if(receiving_msg)
    1b1c:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <receiving_msg.3255>
    1b20:	88 23       	and	r24, r24
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <__vector_18+0xd8>
    1b24:	46 c0       	rjmp	.+140    	; 0x1bb2 <__vector_18+0x164>
				{
					if(charIndex > 0)
    1b26:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1b2a:	88 23       	and	r24, r24
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <__vector_18+0xe2>
    1b2e:	3e c0       	rjmp	.+124    	; 0x1bac <__vector_18+0x15e>
					{
						buff->type = LINKBUS_MSG_QUERY;
    1b30:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <buff.3250>
    1b34:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <buff.3250+0x1>
    1b38:	22 e0       	ldi	r18, 0x02	; 2
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	20 83       	st	Z, r18
						buff->id = msg_ID;
    1b3e:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <buff.3250>
    1b42:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <buff.3250+0x1>
    1b46:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <msg_ID.3254>
    1b4a:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <msg_ID.3254+0x1>
    1b4e:	a0 91 2a 07 	lds	r26, 0x072A	; 0x80072a <msg_ID.3254+0x2>
    1b52:	b0 91 2b 07 	lds	r27, 0x072B	; 0x80072b <msg_ID.3254+0x3>
    1b56:	f9 01       	movw	r30, r18
    1b58:	92 83       	std	Z+2, r25	; 0x02
    1b5a:	81 83       	std	Z+1, r24	; 0x01

						if(field_index > 0) /* terminate the last field */
    1b5c:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1b60:	88 23       	and	r24, r24
    1b62:	e1 f0       	breq	.+56     	; 0x1b9c <__vector_18+0x14e>
						{
							buff->fields[field_index - 1][field_len] = 0;
    1b64:	40 91 0e 07 	lds	r20, 0x070E	; 0x80070e <buff.3250>
    1b68:	50 91 0f 07 	lds	r21, 0x070F	; 0x80070f <buff.3250+0x1>
    1b6c:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	bc 01       	movw	r22, r24
    1b76:	61 50       	subi	r22, 0x01	; 1
    1b78:	71 09       	sbc	r23, r1
    1b7a:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <field_len.3253>
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	e5 e1       	ldi	r30, 0x15	; 21
    1b84:	e6 9f       	mul	r30, r22
    1b86:	90 01       	movw	r18, r0
    1b88:	e7 9f       	mul	r30, r23
    1b8a:	30 0d       	add	r19, r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	24 0f       	add	r18, r20
    1b90:	35 1f       	adc	r19, r21
    1b92:	82 0f       	add	r24, r18
    1b94:	93 1f       	adc	r25, r19
    1b96:	03 96       	adiw	r24, 0x03	; 3
    1b98:	fc 01       	movw	r30, r24
    1b9a:	10 82       	st	Z, r1
						}

						textBuff[charIndex] = '\0'; /* terminate last-message buffer */
    1b9c:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	8e 5e       	subi	r24, 0xEE	; 238
    1ba6:	98 4f       	sbci	r25, 0xF8	; 248
    1ba8:	fc 01       	movw	r30, r24
    1baa:	10 82       	st	Z, r1
					}

					lb_send_NewLine();
    1bac:	0e 94 8b 03 	call	0x716	; 0x716 <lb_send_NewLine>
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <__vector_18+0x176>
				}
				else
				{
					buff->id = INVALID_MESSAGE; /* print help message */
    1bb2:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <buff.3250>
    1bb6:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <buff.3250+0x1>
    1bba:	2f ef       	ldi	r18, 0xFF	; 255
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	32 83       	std	Z+2, r19	; 0x02
    1bc2:	21 83       	std	Z+1, r18	; 0x01
				}

				charIndex = 0;
    1bc4:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <charIndex.3251>
				field_len = 0;
    1bc8:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <field_len.3253>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    1bcc:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <msg_ID.3254>
    1bd0:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <msg_ID.3254+0x1>
    1bd4:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <msg_ID.3254+0x2>
    1bd8:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <msg_ID.3254+0x3>

				field_index = 0;
    1bdc:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <field_index.3252>
				buff = NULL;
    1be0:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <buff.3250+0x1>
    1be4:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <buff.3250>

				receiving_msg = FALSE;
    1be8:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <receiving_msg.3255>
				receiving_msg = FALSE;
				charIndex = 0;
			}
		}
	}
}
    1bec:	cf c2       	rjmp	.+1438   	; 0x218c <__vector_18+0x73e>
				field_index = 0;
				buff = NULL;

				receiving_msg = FALSE;
			}
			else if(rx_char)
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	88 23       	and	r24, r24
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <__vector_18+0x1a8>
    1bf4:	cb c2       	rjmp	.+1430   	; 0x218c <__vector_18+0x73e>
			{
				textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    1bf6:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	8e 5e       	subi	r24, 0xEE	; 238
    1c00:	98 4f       	sbci	r25, 0xF8	; 248
    1c02:	29 81       	ldd	r18, Y+1	; 0x01
    1c04:	fc 01       	movw	r30, r24
    1c06:	20 83       	st	Z, r18

				if(charIndex)
    1c08:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1c0c:	88 23       	and	r24, r24
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <__vector_18+0x1c4>
    1c10:	0f c1       	rjmp	.+542    	; 0x1e30 <__vector_18+0x3e2>
				{
					if(rx_char == 0x7F)         /* Handle backspace */
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	8f 37       	cpi	r24, 0x7F	; 127
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <__vector_18+0x1cc>
    1c18:	6c c0       	rjmp	.+216    	; 0x1cf2 <__vector_18+0x2a4>
					{
						charIndex--;
    1c1a:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1c1e:	81 50       	subi	r24, 0x01	; 1
    1c20:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <charIndex.3251>
						if(field_index == 0)
    1c24:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <__vector_18+0x1e0>
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <__vector_18+0x25e>
						{
							msg_ID -= textBuff[charIndex];
    1c2e:	20 91 28 07 	lds	r18, 0x0728	; 0x800728 <msg_ID.3254>
    1c32:	30 91 29 07 	lds	r19, 0x0729	; 0x800729 <msg_ID.3254+0x1>
    1c36:	40 91 2a 07 	lds	r20, 0x072A	; 0x80072a <msg_ID.3254+0x2>
    1c3a:	50 91 2b 07 	lds	r21, 0x072B	; 0x80072b <msg_ID.3254+0x3>
    1c3e:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	8e 5e       	subi	r24, 0xEE	; 238
    1c48:	98 4f       	sbci	r25, 0xF8	; 248
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 2f       	mov	r24, r24
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	79 01       	movw	r14, r18
    1c58:	8a 01       	movw	r16, r20
    1c5a:	e8 1a       	sub	r14, r24
    1c5c:	f9 0a       	sbc	r15, r25
    1c5e:	0a 0b       	sbc	r16, r26
    1c60:	1b 0b       	sbc	r17, r27
    1c62:	d8 01       	movw	r26, r16
    1c64:	c7 01       	movw	r24, r14
    1c66:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <msg_ID.3254>
    1c6a:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <msg_ID.3254+0x1>
    1c6e:	a0 93 2a 07 	sts	0x072A, r26	; 0x80072a <msg_ID.3254+0x2>
    1c72:	b0 93 2b 07 	sts	0x072B, r27	; 0x80072b <msg_ID.3254+0x3>
							msg_ID /= 10;
    1c76:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <msg_ID.3254>
    1c7a:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <msg_ID.3254+0x1>
    1c7e:	a0 91 2a 07 	lds	r26, 0x072A	; 0x80072a <msg_ID.3254+0x2>
    1c82:	b0 91 2b 07 	lds	r27, 0x072B	; 0x80072b <msg_ID.3254+0x3>
    1c86:	2a e0       	ldi	r18, 0x0A	; 10
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 67 37 	call	0x6ece	; 0x6ece <__udivmodsi4>
    1c96:	da 01       	movw	r26, r20
    1c98:	c9 01       	movw	r24, r18
    1c9a:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <msg_ID.3254>
    1c9e:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <msg_ID.3254+0x1>
    1ca2:	a0 93 2a 07 	sts	0x072A, r26	; 0x80072a <msg_ID.3254+0x2>
    1ca6:	b0 93 2b 07 	sts	0x072B, r27	; 0x80072b <msg_ID.3254+0x3>
    1caa:	31 c1       	rjmp	.+610    	; 0x1f0e <__vector_18+0x4c0>
						}
						else if(field_len)
    1cac:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <field_len.3253>
    1cb0:	88 23       	and	r24, r24
    1cb2:	31 f0       	breq	.+12     	; 0x1cc0 <__vector_18+0x272>
						{
							field_len--;
    1cb4:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <field_len.3253>
    1cb8:	81 50       	subi	r24, 0x01	; 1
    1cba:	80 93 2d 07 	sts	0x072D, r24	; 0x80072d <field_len.3253>
    1cbe:	27 c1       	rjmp	.+590    	; 0x1f0e <__vector_18+0x4c0>
						}
						else
						{
							buff->fields[field_index][0] = '\0';
    1cc0:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <buff.3250>
    1cc4:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <buff.3250+0x1>
    1cc8:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1ccc:	48 2f       	mov	r20, r24
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	65 e1       	ldi	r22, 0x15	; 21
    1cd2:	64 9f       	mul	r22, r20
    1cd4:	c0 01       	movw	r24, r0
    1cd6:	65 9f       	mul	r22, r21
    1cd8:	90 0d       	add	r25, r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	82 0f       	add	r24, r18
    1cde:	93 1f       	adc	r25, r19
    1ce0:	03 96       	adiw	r24, 0x03	; 3
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	10 82       	st	Z, r1
							field_index--;
    1ce6:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1cea:	81 50       	subi	r24, 0x01	; 1
    1cec:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <field_index.3252>
    1cf0:	0e c1       	rjmp	.+540    	; 0x1f0e <__vector_18+0x4c0>
						}
					}
					else
					{
						if(rx_char == ' ')
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	80 32       	cpi	r24, 0x20	; 32
    1cf6:	a9 f5       	brne	.+106    	; 0x1d62 <__vector_18+0x314>
						{
							if(textBuff[charIndex - 1] == ' ')
    1cf8:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1cfc:	88 2f       	mov	r24, r24
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	8e 5e       	subi	r24, 0xEE	; 238
    1d04:	98 4f       	sbci	r25, 0xF8	; 248
    1d06:	fc 01       	movw	r30, r24
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 32       	cpi	r24, 0x20	; 32
    1d0c:	11 f4       	brne	.+4      	; 0x1d12 <__vector_18+0x2c4>
							{
								rx_char = '\0';
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    1d10:	79 c0       	rjmp	.+242    	; 0x1e04 <__vector_18+0x3b6>
							}
							else
							{
								/* if(field_index == 0) // message ID received */
								if(field_index > 0)
    1d12:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1d16:	88 23       	and	r24, r24
    1d18:	e1 f0       	breq	.+56     	; 0x1d52 <__vector_18+0x304>
								{
									buff->fields[field_index - 1][field_len] = 0;
    1d1a:	40 91 0e 07 	lds	r20, 0x070E	; 0x80070e <buff.3250>
    1d1e:	50 91 0f 07 	lds	r21, 0x070F	; 0x80070f <buff.3250+0x1>
    1d22:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	61 50       	subi	r22, 0x01	; 1
    1d2e:	71 09       	sbc	r23, r1
    1d30:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <field_len.3253>
    1d34:	88 2f       	mov	r24, r24
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	e5 e1       	ldi	r30, 0x15	; 21
    1d3a:	e6 9f       	mul	r30, r22
    1d3c:	90 01       	movw	r18, r0
    1d3e:	e7 9f       	mul	r30, r23
    1d40:	30 0d       	add	r19, r0
    1d42:	11 24       	eor	r1, r1
    1d44:	24 0f       	add	r18, r20
    1d46:	35 1f       	adc	r19, r21
    1d48:	82 0f       	add	r24, r18
    1d4a:	93 1f       	adc	r25, r19
    1d4c:	03 96       	adiw	r24, 0x03	; 3
    1d4e:	fc 01       	movw	r30, r24
    1d50:	10 82       	st	Z, r1
								}

								field_index++;
    1d52:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1d56:	8f 5f       	subi	r24, 0xFF	; 255
    1d58:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <field_index.3252>
								field_len = 0;
    1d5c:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <field_len.3253>
    1d60:	51 c0       	rjmp	.+162    	; 0x1e04 <__vector_18+0x3b6>
							}
						}
						else
						{
							if(field_index == 0)    /* message ID received */
    1d62:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1d66:	88 23       	and	r24, r24
    1d68:	61 f5       	brne	.+88     	; 0x1dc2 <__vector_18+0x374>
							{
								msg_ID = msg_ID * 10 + rx_char;
    1d6a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <msg_ID.3254>
    1d6e:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <msg_ID.3254+0x1>
    1d72:	a0 91 2a 07 	lds	r26, 0x072A	; 0x80072a <msg_ID.3254+0x2>
    1d76:	b0 91 2b 07 	lds	r27, 0x072B	; 0x80072b <msg_ID.3254+0x3>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	aa 1f       	adc	r26, r26
    1d80:	bb 1f       	adc	r27, r27
    1d82:	9c 01       	movw	r18, r24
    1d84:	ad 01       	movw	r20, r26
    1d86:	22 0f       	add	r18, r18
    1d88:	33 1f       	adc	r19, r19
    1d8a:	44 1f       	adc	r20, r20
    1d8c:	55 1f       	adc	r21, r21
    1d8e:	22 0f       	add	r18, r18
    1d90:	33 1f       	adc	r19, r19
    1d92:	44 1f       	adc	r20, r20
    1d94:	55 1f       	adc	r21, r21
    1d96:	28 0f       	add	r18, r24
    1d98:	39 1f       	adc	r19, r25
    1d9a:	4a 1f       	adc	r20, r26
    1d9c:	5b 1f       	adc	r21, r27
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	88 2f       	mov	r24, r24
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e0       	ldi	r26, 0x00	; 0
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	a4 1f       	adc	r26, r20
    1dae:	b5 1f       	adc	r27, r21
    1db0:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <msg_ID.3254>
    1db4:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <msg_ID.3254+0x1>
    1db8:	a0 93 2a 07 	sts	0x072A, r26	; 0x80072a <msg_ID.3254+0x2>
    1dbc:	b0 93 2b 07 	sts	0x072B, r27	; 0x80072b <msg_ID.3254+0x3>
    1dc0:	21 c0       	rjmp	.+66     	; 0x1e04 <__vector_18+0x3b6>
							}
							else
							{
								buff->fields[field_index - 1][field_len++] = rx_char;
    1dc2:	40 91 0e 07 	lds	r20, 0x070E	; 0x80070e <buff.3250>
    1dc6:	50 91 0f 07 	lds	r21, 0x070F	; 0x80070f <buff.3250+0x1>
    1dca:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	bc 01       	movw	r22, r24
    1dd4:	61 50       	subi	r22, 0x01	; 1
    1dd6:	71 09       	sbc	r23, r1
    1dd8:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <field_len.3253>
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	98 0f       	add	r25, r24
    1de0:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <field_len.3253>
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	e5 e1       	ldi	r30, 0x15	; 21
    1dea:	e6 9f       	mul	r30, r22
    1dec:	90 01       	movw	r18, r0
    1dee:	e7 9f       	mul	r30, r23
    1df0:	30 0d       	add	r19, r0
    1df2:	11 24       	eor	r1, r1
    1df4:	24 0f       	add	r18, r20
    1df6:	35 1f       	adc	r19, r21
    1df8:	82 0f       	add	r24, r18
    1dfa:	93 1f       	adc	r25, r19
    1dfc:	03 96       	adiw	r24, 0x03	; 3
    1dfe:	29 81       	ldd	r18, Y+1	; 0x01
    1e00:	fc 01       	movw	r30, r24
    1e02:	20 83       	st	Z, r18
							}
						}

						charIndex = MIN(charIndex+1, LINKBUS_MAX_MSG_FIELD_LENGTH);
    1e04:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	9c 83       	std	Y+4, r25	; 0x04
    1e10:	8b 83       	std	Y+3, r24	; 0x03
    1e12:	85 e1       	ldi	r24, 0x15	; 21
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	28 17       	cp	r18, r24
    1e24:	39 07       	cpc	r19, r25
    1e26:	0c f4       	brge	.+2      	; 0x1e2a <__vector_18+0x3dc>
    1e28:	c9 01       	movw	r24, r18
    1e2a:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <charIndex.3251>
    1e2e:	6f c0       	rjmp	.+222    	; 0x1f0e <__vector_18+0x4c0>
					}
				}
				else
				{
					if((rx_char == 0x7F) || (rx_char == ' '))   /* Handle backspace and Space */
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	8f 37       	cpi	r24, 0x7F	; 127
    1e34:	19 f0       	breq	.+6      	; 0x1e3c <__vector_18+0x3ee>
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	80 32       	cpi	r24, 0x20	; 32
    1e3a:	11 f4       	brne	.+4      	; 0x1e40 <__vector_18+0x3f2>
					{
						rx_char = '\0';
    1e3c:	19 82       	std	Y+1, r1	; 0x01
    1e3e:	67 c0       	rjmp	.+206    	; 0x1f0e <__vector_18+0x4c0>
					}
					else                                        /* start of new message */
					{
						uint8_t i;
						field_index = 0;
    1e40:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <field_index.3252>
						msg_ID = 0;
    1e44:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <msg_ID.3254>
    1e48:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <msg_ID.3254+0x1>
    1e4c:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <msg_ID.3254+0x2>
    1e50:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <msg_ID.3254+0x3>

						msg_ID = msg_ID * 10 + rx_char;
    1e54:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <msg_ID.3254>
    1e58:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <msg_ID.3254+0x1>
    1e5c:	a0 91 2a 07 	lds	r26, 0x072A	; 0x80072a <msg_ID.3254+0x2>
    1e60:	b0 91 2b 07 	lds	r27, 0x072B	; 0x80072b <msg_ID.3254+0x3>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	aa 1f       	adc	r26, r26
    1e6a:	bb 1f       	adc	r27, r27
    1e6c:	9c 01       	movw	r18, r24
    1e6e:	ad 01       	movw	r20, r26
    1e70:	22 0f       	add	r18, r18
    1e72:	33 1f       	adc	r19, r19
    1e74:	44 1f       	adc	r20, r20
    1e76:	55 1f       	adc	r21, r21
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	44 1f       	adc	r20, r20
    1e7e:	55 1f       	adc	r21, r21
    1e80:	28 0f       	add	r18, r24
    1e82:	39 1f       	adc	r19, r25
    1e84:	4a 1f       	adc	r20, r26
    1e86:	5b 1f       	adc	r21, r27
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e0       	ldi	r26, 0x00	; 0
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	82 0f       	add	r24, r18
    1e94:	93 1f       	adc	r25, r19
    1e96:	a4 1f       	adc	r26, r20
    1e98:	b5 1f       	adc	r27, r21
    1e9a:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <msg_ID.3254>
    1e9e:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <msg_ID.3254+0x1>
    1ea2:	a0 93 2a 07 	sts	0x072A, r26	; 0x80072a <msg_ID.3254+0x2>
    1ea6:	b0 93 2b 07 	sts	0x072B, r27	; 0x80072b <msg_ID.3254+0x3>

						/* Empty the field buffers */
						for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1eaa:	1a 82       	std	Y+2, r1	; 0x02
    1eac:	15 c0       	rjmp	.+42     	; 0x1ed8 <__vector_18+0x48a>
						{
							buff->fields[i][0] = '\0';
    1eae:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <buff.3250>
    1eb2:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <buff.3250+0x1>
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	48 2f       	mov	r20, r24
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	65 e1       	ldi	r22, 0x15	; 21
    1ebe:	64 9f       	mul	r22, r20
    1ec0:	c0 01       	movw	r24, r0
    1ec2:	65 9f       	mul	r22, r21
    1ec4:	90 0d       	add	r25, r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	82 0f       	add	r24, r18
    1eca:	93 1f       	adc	r25, r19
    1ecc:	03 96       	adiw	r24, 0x03	; 3
    1ece:	fc 01       	movw	r30, r24
    1ed0:	10 82       	st	Z, r1
						msg_ID = 0;

						msg_ID = msg_ID * 10 + rx_char;

						/* Empty the field buffers */
						for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	83 30       	cpi	r24, 0x03	; 3
    1edc:	40 f3       	brcs	.-48     	; 0x1eae <__vector_18+0x460>
						{
							buff->fields[i][0] = '\0';
						}

						receiving_msg = TRUE;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <receiving_msg.3255>
						charIndex = MIN(charIndex+1, LINKBUS_MAX_MSG_FIELD_LENGTH);
    1ee4:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    1ee8:	88 2f       	mov	r24, r24
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	98 87       	std	Y+8, r25	; 0x08
    1ef0:	8f 83       	std	Y+7, r24	; 0x07
    1ef2:	85 e1       	ldi	r24, 0x15	; 21
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9a 87       	std	Y+10, r25	; 0x0a
    1ef8:	89 87       	std	Y+9, r24	; 0x09
    1efa:	2f 81       	ldd	r18, Y+7	; 0x07
    1efc:	38 85       	ldd	r19, Y+8	; 0x08
    1efe:	89 85       	ldd	r24, Y+9	; 0x09
    1f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f02:	28 17       	cp	r18, r24
    1f04:	39 07       	cpc	r19, r25
    1f06:	0c f4       	brge	.+2      	; 0x1f0a <__vector_18+0x4bc>
    1f08:	c9 01       	movw	r24, r18
    1f0a:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <charIndex.3251>
					}
				}

				if(rx_char)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	88 23       	and	r24, r24
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <__vector_18+0x4c8>
    1f14:	3b c1       	rjmp	.+630    	; 0x218c <__vector_18+0x73e>
				{
					lb_echo_char(rx_char);
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	0e 94 b4 03 	call	0x768	; 0x768 <lb_echo_char>
				receiving_msg = FALSE;
				charIndex = 0;
			}
		}
	}
}
    1f1c:	37 c1       	rjmp	.+622    	; 0x218c <__vector_18+0x73e>
				}
			}
		}
		else
		{
			if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	84 32       	cpi	r24, 0x24	; 36
    1f22:	19 f0       	breq	.+6      	; 0x1f2a <__vector_18+0x4dc>
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	81 32       	cpi	r24, 0x21	; 33
    1f28:	e9 f5       	brne	.+122    	; 0x1fa4 <__vector_18+0x556>
			{
				charIndex = 0;
    1f2a:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <charIndex.3251>
				buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    1f2e:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <buff.3250>
    1f32:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <buff.3250+0x1>
    1f36:	29 81       	ldd	r18, Y+1	; 0x01
    1f38:	21 32       	cpi	r18, 0x21	; 33
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <__vector_18+0x4f2>
    1f3c:	23 e0       	ldi	r18, 0x03	; 3
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <__vector_18+0x4f4>
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	fc 01       	movw	r30, r24
    1f44:	20 83       	st	Z, r18
				field_len = 0;
    1f46:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <field_len.3253>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    1f4a:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <msg_ID.3254>
    1f4e:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <msg_ID.3254+0x1>
    1f52:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <msg_ID.3254+0x2>
    1f56:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <msg_ID.3254+0x3>
				receiving_msg = TRUE;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	80 93 27 07 	sts	0x0727, r24	; 0x800727 <receiving_msg.3255>

				/* Empty the field buffers */
				for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1f60:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <field_index.3252>
    1f64:	18 c0       	rjmp	.+48     	; 0x1f96 <__vector_18+0x548>
				{
					buff->fields[field_index][0] = '\0';
    1f66:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <buff.3250>
    1f6a:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <buff.3250+0x1>
    1f6e:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1f72:	48 2f       	mov	r20, r24
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	65 e1       	ldi	r22, 0x15	; 21
    1f78:	64 9f       	mul	r22, r20
    1f7a:	c0 01       	movw	r24, r0
    1f7c:	65 9f       	mul	r22, r21
    1f7e:	90 0d       	add	r25, r0
    1f80:	11 24       	eor	r1, r1
    1f82:	82 0f       	add	r24, r18
    1f84:	93 1f       	adc	r25, r19
    1f86:	03 96       	adiw	r24, 0x03	; 3
    1f88:	fc 01       	movw	r30, r24
    1f8a:	10 82       	st	Z, r1
				field_len = 0;
				msg_ID = LINKBUS_MSG_UNKNOWN;
				receiving_msg = TRUE;

				/* Empty the field buffers */
				for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
    1f8c:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <field_index.3252>
    1f96:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1f9a:	83 30       	cpi	r24, 0x03	; 3
    1f9c:	20 f3       	brcs	.-56     	; 0x1f66 <__vector_18+0x518>
				{
					buff->fields[field_index][0] = '\0';
				}

				field_index = 0;
    1f9e:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <field_index.3252>
    1fa2:	e7 c0       	rjmp	.+462    	; 0x2172 <__vector_18+0x724>
			}
			else if(receiving_msg)
    1fa4:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <receiving_msg.3255>
    1fa8:	88 23       	and	r24, r24
    1faa:	09 f4       	brne	.+2      	; 0x1fae <__vector_18+0x560>
    1fac:	c5 c0       	rjmp	.+394    	; 0x2138 <__vector_18+0x6ea>
			{
				if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	8c 32       	cpi	r24, 0x2C	; 44
    1fb2:	39 f0       	breq	.+14     	; 0x1fc2 <__vector_18+0x574>
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	8b 33       	cpi	r24, 0x3B	; 59
    1fb8:	21 f0       	breq	.+8      	; 0x1fc2 <__vector_18+0x574>
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	8f 33       	cpi	r24, 0x3F	; 63
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <__vector_18+0x574>
    1fc0:	69 c0       	rjmp	.+210    	; 0x2094 <__vector_18+0x646>
				{
					/* if(field_index == 0) // message ID received */
					if(field_index > 0)
    1fc2:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1fc6:	88 23       	and	r24, r24
    1fc8:	e1 f0       	breq	.+56     	; 0x2002 <__vector_18+0x5b4>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1fca:	40 91 0e 07 	lds	r20, 0x070E	; 0x80070e <buff.3250>
    1fce:	50 91 0f 07 	lds	r21, 0x070F	; 0x80070f <buff.3250+0x1>
    1fd2:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	bc 01       	movw	r22, r24
    1fdc:	61 50       	subi	r22, 0x01	; 1
    1fde:	71 09       	sbc	r23, r1
    1fe0:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <field_len.3253>
    1fe4:	88 2f       	mov	r24, r24
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	e5 e1       	ldi	r30, 0x15	; 21
    1fea:	e6 9f       	mul	r30, r22
    1fec:	90 01       	movw	r18, r0
    1fee:	e7 9f       	mul	r30, r23
    1ff0:	30 0d       	add	r19, r0
    1ff2:	11 24       	eor	r1, r1
    1ff4:	24 0f       	add	r18, r20
    1ff6:	35 1f       	adc	r19, r21
    1ff8:	82 0f       	add	r24, r18
    1ffa:	93 1f       	adc	r25, r19
    1ffc:	03 96       	adiw	r24, 0x03	; 3
    1ffe:	fc 01       	movw	r30, r24
    2000:	10 82       	st	Z, r1
					}

					field_index++;
    2002:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    2006:	8f 5f       	subi	r24, 0xFF	; 255
    2008:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <field_index.3252>
					field_len = 0;
    200c:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <field_len.3253>

					if(rx_char == ';')
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	8b 33       	cpi	r24, 0x3B	; 59
    2014:	b1 f4       	brne	.+44     	; 0x2042 <__vector_18+0x5f4>
					{
						if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    2016:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	78 f0       	brcs	.+30     	; 0x203c <__vector_18+0x5ee>
						{
							buff->id = msg_ID;
    201e:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <buff.3250>
    2022:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <buff.3250+0x1>
    2026:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <msg_ID.3254>
    202a:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <msg_ID.3254+0x1>
    202e:	a0 91 2a 07 	lds	r26, 0x072A	; 0x80072a <msg_ID.3254+0x2>
    2032:	b0 91 2b 07 	lds	r27, 0x072B	; 0x80072b <msg_ID.3254+0x3>
    2036:	f9 01       	movw	r30, r18
    2038:	92 83       	std	Z+2, r25	; 0x02
    203a:	81 83       	std	Z+1, r24	; 0x01
						}
						receiving_msg = FALSE;
    203c:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <receiving_msg.3255>
    2040:	1f c0       	rjmp	.+62     	; 0x2080 <__vector_18+0x632>
					}
					else if(rx_char == '?')
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	8f 33       	cpi	r24, 0x3F	; 63
    2046:	e1 f4       	brne	.+56     	; 0x2080 <__vector_18+0x632>
					{
						buff->type = LINKBUS_MSG_QUERY;
    2048:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <buff.3250>
    204c:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <buff.3250+0x1>
    2050:	22 e0       	ldi	r18, 0x02	; 2
    2052:	fc 01       	movw	r30, r24
    2054:	20 83       	st	Z, r18
						if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    2056:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    205a:	84 30       	cpi	r24, 0x04	; 4
    205c:	78 f0       	brcs	.+30     	; 0x207c <__vector_18+0x62e>
						{
							buff->id = msg_ID;
    205e:	20 91 0e 07 	lds	r18, 0x070E	; 0x80070e <buff.3250>
    2062:	30 91 0f 07 	lds	r19, 0x070F	; 0x80070f <buff.3250+0x1>
    2066:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <msg_ID.3254>
    206a:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <msg_ID.3254+0x1>
    206e:	a0 91 2a 07 	lds	r26, 0x072A	; 0x80072a <msg_ID.3254+0x2>
    2072:	b0 91 2b 07 	lds	r27, 0x072B	; 0x80072b <msg_ID.3254+0x3>
    2076:	f9 01       	movw	r30, r18
    2078:	92 83       	std	Z+2, r25	; 0x02
    207a:	81 83       	std	Z+1, r24	; 0x01
						}
						receiving_msg = FALSE;
    207c:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <receiving_msg.3255>
					}

					if(!receiving_msg)
    2080:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <receiving_msg.3255>
    2084:	88 23       	and	r24, r24
    2086:	09 f0       	breq	.+2      	; 0x208a <__vector_18+0x63c>
    2088:	74 c0       	rjmp	.+232    	; 0x2172 <__vector_18+0x724>
					{
						buff = 0;
    208a:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <buff.3250+0x1>
    208e:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <buff.3250>
							buff->id = msg_ID;
						}
						receiving_msg = FALSE;
					}

					if(!receiving_msg)
    2092:	6f c0       	rjmp	.+222    	; 0x2172 <__vector_18+0x724>
						buff = 0;
					}
				}
				else
				{
					if(field_index == 0)    /* message ID received */
    2094:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    2098:	88 23       	and	r24, r24
    209a:	61 f5       	brne	.+88     	; 0x20f4 <__vector_18+0x6a6>
					{
						msg_ID = msg_ID * 10 + rx_char;
    209c:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <msg_ID.3254>
    20a0:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <msg_ID.3254+0x1>
    20a4:	a0 91 2a 07 	lds	r26, 0x072A	; 0x80072a <msg_ID.3254+0x2>
    20a8:	b0 91 2b 07 	lds	r27, 0x072B	; 0x80072b <msg_ID.3254+0x3>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	aa 1f       	adc	r26, r26
    20b2:	bb 1f       	adc	r27, r27
    20b4:	9c 01       	movw	r18, r24
    20b6:	ad 01       	movw	r20, r26
    20b8:	22 0f       	add	r18, r18
    20ba:	33 1f       	adc	r19, r19
    20bc:	44 1f       	adc	r20, r20
    20be:	55 1f       	adc	r21, r21
    20c0:	22 0f       	add	r18, r18
    20c2:	33 1f       	adc	r19, r19
    20c4:	44 1f       	adc	r20, r20
    20c6:	55 1f       	adc	r21, r21
    20c8:	28 0f       	add	r18, r24
    20ca:	39 1f       	adc	r19, r25
    20cc:	4a 1f       	adc	r20, r26
    20ce:	5b 1f       	adc	r21, r27
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a0 e0       	ldi	r26, 0x00	; 0
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	82 0f       	add	r24, r18
    20dc:	93 1f       	adc	r25, r19
    20de:	a4 1f       	adc	r26, r20
    20e0:	b5 1f       	adc	r27, r21
    20e2:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <msg_ID.3254>
    20e6:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <msg_ID.3254+0x1>
    20ea:	a0 93 2a 07 	sts	0x072A, r26	; 0x80072a <msg_ID.3254+0x2>
    20ee:	b0 93 2b 07 	sts	0x072B, r27	; 0x80072b <msg_ID.3254+0x3>
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <__vector_18+0x724>
					}
					else
					{
						buff->fields[field_index - 1][field_len++] = rx_char;
    20f4:	40 91 0e 07 	lds	r20, 0x070E	; 0x80070e <buff.3250>
    20f8:	50 91 0f 07 	lds	r21, 0x070F	; 0x80070f <buff.3250+0x1>
    20fc:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <field_index.3252>
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	bc 01       	movw	r22, r24
    2106:	61 50       	subi	r22, 0x01	; 1
    2108:	71 09       	sbc	r23, r1
    210a:	80 91 2d 07 	lds	r24, 0x072D	; 0x80072d <field_len.3253>
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	98 0f       	add	r25, r24
    2112:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <field_len.3253>
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	e5 e1       	ldi	r30, 0x15	; 21
    211c:	e6 9f       	mul	r30, r22
    211e:	90 01       	movw	r18, r0
    2120:	e7 9f       	mul	r30, r23
    2122:	30 0d       	add	r19, r0
    2124:	11 24       	eor	r1, r1
    2126:	24 0f       	add	r18, r20
    2128:	35 1f       	adc	r19, r21
    212a:	82 0f       	add	r24, r18
    212c:	93 1f       	adc	r25, r19
    212e:	03 96       	adiw	r24, 0x03	; 3
    2130:	29 81       	ldd	r18, Y+1	; 0x01
    2132:	fc 01       	movw	r30, r24
    2134:	20 83       	st	Z, r18
    2136:	1d c0       	rjmp	.+58     	; 0x2172 <__vector_18+0x724>
					}
				}
			}
			else if(rx_char == 0x0D)    /* Handle carriage return */
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	8d 30       	cpi	r24, 0x0D	; 13
    213c:	d1 f4       	brne	.+52     	; 0x2172 <__vector_18+0x724>
			{
				buff->id = LINKBUS_MSG_UNKNOWN;
    213e:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <buff.3250>
    2142:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <buff.3250+0x1>
    2146:	fc 01       	movw	r30, r24
    2148:	12 82       	std	Z+2, r1	; 0x02
    214a:	11 82       	std	Z+1, r1	; 0x01
				charIndex = LINKBUS_MAX_MSG_LENGTH;
    214c:	82 e3       	ldi	r24, 0x32	; 50
    214e:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <charIndex.3251>
				field_len = 0;
    2152:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <field_len.3253>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    2156:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <msg_ID.3254>
    215a:	10 92 29 07 	sts	0x0729, r1	; 0x800729 <msg_ID.3254+0x1>
    215e:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <msg_ID.3254+0x2>
    2162:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <msg_ID.3254+0x3>
				field_index = 0;
    2166:	10 92 2c 07 	sts	0x072C, r1	; 0x80072c <field_index.3252>
				buff = NULL;
    216a:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <buff.3250+0x1>
    216e:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <buff.3250>
			}

			if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    2172:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	80 93 11 07 	sts	0x0711, r24	; 0x800711 <charIndex.3251>
    217c:	80 91 11 07 	lds	r24, 0x0711	; 0x800711 <charIndex.3251>
    2180:	82 33       	cpi	r24, 0x32	; 50
    2182:	20 f0       	brcs	.+8      	; 0x218c <__vector_18+0x73e>
			{
				receiving_msg = FALSE;
    2184:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <receiving_msg.3255>
				charIndex = 0;
    2188:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <charIndex.3251>
			}
		}
	}
}
    218c:	00 00       	nop
    218e:	2a 96       	adiw	r28, 0x0a	; 10
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	ff 91       	pop	r31
    21a0:	ef 91       	pop	r30
    21a2:	bf 91       	pop	r27
    21a4:	af 91       	pop	r26
    21a6:	9f 91       	pop	r25
    21a8:	8f 91       	pop	r24
    21aa:	7f 91       	pop	r23
    21ac:	6f 91       	pop	r22
    21ae:	5f 91       	pop	r21
    21b0:	4f 91       	pop	r20
    21b2:	3f 91       	pop	r19
    21b4:	2f 91       	pop	r18
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	0f 90       	pop	r0
    21c0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    21c4:	0f 90       	pop	r0
    21c6:	1f 90       	pop	r1
    21c8:	18 95       	reti

000021ca <__vector_19>:
 *
 * This ISR is responsible for filling the USART transmit buffer. It
 * implements the transmit function of the Linkbus.
 ************************************************************************/
ISR(USART_UDRE_vect)
{
    21ca:	1f 92       	push	r1
    21cc:	0f 92       	push	r0
    21ce:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    21d2:	0f 92       	push	r0
    21d4:	11 24       	eor	r1, r1
    21d6:	2f 93       	push	r18
    21d8:	3f 93       	push	r19
    21da:	4f 93       	push	r20
    21dc:	5f 93       	push	r21
    21de:	6f 93       	push	r22
    21e0:	7f 93       	push	r23
    21e2:	8f 93       	push	r24
    21e4:	9f 93       	push	r25
    21e6:	af 93       	push	r26
    21e8:	bf 93       	push	r27
    21ea:	ef 93       	push	r30
    21ec:	ff 93       	push	r31
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
    21f6:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <buff.3276>
    21fa:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <buff.3276+0x1>
    21fe:	89 2b       	or	r24, r25
    2200:	31 f4       	brne	.+12     	; 0x220e <__vector_19+0x44>
	{
		buff = nextFullTxBuffer();
    2202:	0e 94 af 00 	call	0x15e	; 0x15e <nextFullTxBuffer>
    2206:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <buff.3276+0x1>
    220a:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <buff.3276>
	}

	if((*buff)[charIndex])
    220e:	20 91 2e 07 	lds	r18, 0x072E	; 0x80072e <buff.3276>
    2212:	30 91 2f 07 	lds	r19, 0x072F	; 0x80072f <buff.3276+0x1>
    2216:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <charIndex.3277>
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	82 0f       	add	r24, r18
    2220:	93 1f       	adc	r25, r19
    2222:	fc 01       	movw	r30, r24
    2224:	80 81       	ld	r24, Z
    2226:	88 23       	and	r24, r24
    2228:	a9 f0       	breq	.+42     	; 0x2254 <__vector_19+0x8a>
	{
		/* Put data into buffer, sends the data */
		UDR0 = (*buff)[charIndex++];
    222a:	86 ec       	ldi	r24, 0xC6	; 198
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	40 91 2e 07 	lds	r20, 0x072E	; 0x80072e <buff.3276>
    2232:	50 91 2f 07 	lds	r21, 0x072F	; 0x80072f <buff.3276+0x1>
    2236:	20 91 30 07 	lds	r18, 0x0730	; 0x800730 <charIndex.3277>
    223a:	31 e0       	ldi	r19, 0x01	; 1
    223c:	32 0f       	add	r19, r18
    223e:	30 93 30 07 	sts	0x0730, r19	; 0x800730 <charIndex.3277>
    2242:	22 2f       	mov	r18, r18
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	24 0f       	add	r18, r20
    2248:	35 1f       	adc	r19, r21
    224a:	f9 01       	movw	r30, r18
    224c:	20 81       	ld	r18, Z
    224e:	fc 01       	movw	r30, r24
    2250:	20 83       	st	Z, r18
		if(!buff)
		{
			linkbus_end_tx();
		}
	}
}
    2252:	16 c0       	rjmp	.+44     	; 0x2280 <__vector_19+0xb6>
		/* Put data into buffer, sends the data */
		UDR0 = (*buff)[charIndex++];
	}
	else
	{
		charIndex = 0;
    2254:	10 92 30 07 	sts	0x0730, r1	; 0x800730 <charIndex.3277>
		(*buff)[0] = '\0';
    2258:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <buff.3276>
    225c:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <buff.3276+0x1>
    2260:	fc 01       	movw	r30, r24
    2262:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
    2264:	0e 94 af 00 	call	0x15e	; 0x15e <nextFullTxBuffer>
    2268:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <buff.3276+0x1>
    226c:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <buff.3276>
		if(!buff)
    2270:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <buff.3276>
    2274:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <buff.3276+0x1>
    2278:	89 2b       	or	r24, r25
    227a:	11 f4       	brne	.+4      	; 0x2280 <__vector_19+0xb6>
		{
			linkbus_end_tx();
    227c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <linkbus_end_tx>
		}
	}
}
    2280:	00 00       	nop
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	ff 91       	pop	r31
    2288:	ef 91       	pop	r30
    228a:	bf 91       	pop	r27
    228c:	af 91       	pop	r26
    228e:	9f 91       	pop	r25
    2290:	8f 91       	pop	r24
    2292:	7f 91       	pop	r23
    2294:	6f 91       	pop	r22
    2296:	5f 91       	pop	r21
    2298:	4f 91       	pop	r20
    229a:	3f 91       	pop	r19
    229c:	2f 91       	pop	r18
    229e:	0f 90       	pop	r0
    22a0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    22a4:	0f 90       	pop	r0
    22a6:	1f 90       	pop	r1
    22a8:	18 95       	reti

000022aa <__vector_5>:
 * PCINT23...0 are detected asynchronously. This implies that these
 * interrupts can be used for waking the part from sleep modes other
 * than Idle mode.
 ************************************************************************/
ISR( PCINT2_vect )
{
    22aa:	1f 92       	push	r1
    22ac:	0f 92       	push	r0
    22ae:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    22b2:	0f 92       	push	r0
    22b4:	11 24       	eor	r1, r1
    22b6:	2f 93       	push	r18
    22b8:	3f 93       	push	r19
    22ba:	4f 93       	push	r20
    22bc:	5f 93       	push	r21
    22be:	6f 93       	push	r22
    22c0:	7f 93       	push	r23
    22c2:	8f 93       	push	r24
    22c4:	9f 93       	push	r25
    22c6:	af 93       	push	r26
    22c8:	bf 93       	push	r27
    22ca:	ef 93       	push	r30
    22cc:	ff 93       	push	r31
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
	if(g_terminal_mode)
    22d6:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    22da:	88 23       	and	r24, r24
    22dc:	21 f0       	breq	.+8      	; 0x22e6 <__vector_5+0x3c>
	{
		lb_send_string("\nError: PCINT2 occurred!\n");
    22de:	81 e6       	ldi	r24, 0x61	; 97
    22e0:	94 e0       	ldi	r25, 0x04	; 4
    22e2:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
	}
}
    22e6:	00 00       	nop
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	ff 91       	pop	r31
    22ee:	ef 91       	pop	r30
    22f0:	bf 91       	pop	r27
    22f2:	af 91       	pop	r26
    22f4:	9f 91       	pop	r25
    22f6:	8f 91       	pop	r24
    22f8:	7f 91       	pop	r23
    22fa:	6f 91       	pop	r22
    22fc:	5f 91       	pop	r21
    22fe:	4f 91       	pop	r20
    2300:	3f 91       	pop	r19
    2302:	2f 91       	pop	r18
    2304:	0f 90       	pop	r0
    2306:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    230a:	0f 90       	pop	r0
    230c:	1f 90       	pop	r1
    230e:	18 95       	reti

00002310 <hw_init>:


BOOL hw_init(void)
{
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	1f 92       	push	r1
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
	BOOL err = FALSE;
    231a:	19 82       	std	Y+1, r1	; 0x01
	
	/**
	 * Initialize the transmitter */
	err = init_transmitter();
    231c:	0e 94 6b 24 	call	0x48d6	; 0x48d6 <init_transmitter>
    2320:	89 83       	std	Y+1, r24	; 0x01

	/**
	 * The watchdog must be petted periodically to keep it from barking */
	wdt_reset();                /* HW watchdog */
    2322:	a8 95       	wdr

	if(!err)
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	88 23       	and	r24, r24
    2328:	19 f5       	brne	.+70     	; 0x2370 <hw_init+0x60>
	{
		#ifdef INCLUDE_DS3231_SUPPORT
			g_tx_epoch_time = ds3231_get_epoch(&err);
    232a:	ce 01       	movw	r24, r28
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <ds3231_get_epoch>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <g_tx_epoch_time>
    233a:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <g_tx_epoch_time+0x1>
    233e:	a0 93 b8 06 	sts	0x06B8, r26	; 0x8006b8 <g_tx_epoch_time+0x2>
    2342:	b0 93 b9 06 	sts	0x06B9, r27	; 0x8006b9 <g_tx_epoch_time+0x3>
			
			if(!err) 
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	88 23       	and	r24, r24
    234a:	91 f4       	brne	.+36     	; 0x2370 <hw_init+0x60>
			{
				set_system_time(g_tx_epoch_time);
    234c:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2350:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2354:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2358:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    235c:	bc 01       	movw	r22, r24
    235e:	cd 01       	movw	r24, r26
    2360:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <set_system_time>
				#ifdef ENABLE_1_SEC_INTERRUPTS
					g_wifi_enable_delay = 5;
    2364:	85 e0       	ldi	r24, 0x05	; 5
    2366:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <g_wifi_enable_delay>
					ds3231_1s_sqw(ON);
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	0e 94 66 29 	call	0x52cc	; 0x52cc <ds3231_1s_sqw>
				#endif    /* #ifdef ENABLE_1_SEC_INTERRUPTS */
			}
		#endif
	}
	
	return err;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
}
    2372:	0f 90       	pop	r0
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	08 95       	ret

0000237a <set_ports>:

void __attribute__((optimize("O1"))) set_ports(InitActionType initType)
{
	if(initType == POWER_UP)
    237a:	81 11       	cpse	r24, r1
    237c:	30 c0       	rjmp	.+96     	; 0x23de <set_ports+0x64>
		// PB4 = MISO
		// PB5 = SCK
		// PB6 = Tx Final Voltage Enable
		// PB7 = Main Power Enable

		DDRB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB6) | (1 << PORTB7);      
    237e:	84 b1       	in	r24, 0x04	; 4
    2380:	83 6c       	ori	r24, 0xC3	; 195
    2382:	84 b9       	out	0x04, r24	; 4
		PORTB |= (1 << PORTB2) | (1 << PORTB7); /* Turn on main power */
    2384:	85 b1       	in	r24, 0x05	; 5
    2386:	84 68       	ori	r24, 0x84	; 132
    2388:	85 b9       	out	0x05, r24	; 5
		// PD5 = n/c
		// PD6 = WIFI_RESET
		// PD7 = WIFI_ENABLE

	//	DDRD  = 0b00000010;     /* Set PORTD pin data directions */
		DDRD  |= (1 << PORTD4) | (1 << PORTD6) | (1 << PORTD7);     /* Set PORTD pin data directions */
    238a:	8a b1       	in	r24, 0x0a	; 10
    238c:	80 6d       	ori	r24, 0xD0	; 208
    238e:	8a b9       	out	0x0a, r24	; 10
		PORTD = (1 << PORTD2) | (1 << PORTD3) | (1 << PORTD4) | (1 << PORTD5);     /* Enable pull-ups on input pins, and set output levels on all outputs */
    2390:	8c e3       	ldi	r24, 0x3C	; 60
    2392:	8b b9       	out	0x0b, r24	; 11
		// PC4 = SDA
		// PC5 = SCL
		// PC6 = Reset
		// PC7 = N/A

		DDRC = 0b00000000;        
    2394:	17 b8       	out	0x07, r1	; 7
		PORTC = I2C_PINS | (1 << PORTC2) | (1 << PORTC3);     
    2396:	88 b9       	out	0x08, r24	; 8
	//	TCCR1A |= (1 << COM1B1); /* Non-inverting mode */
	//	TCCR1B |= (1 << CS11) | (1 << CS10); /* Prescaler */

		/**
		 * TIMER2 is for periodic interrupts */
		OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    2398:	8c e0       	ldi	r24, 0x0C	; 12
    239a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		TCCR2A |= (1 << WGM01);                             /* set CTC with OCRA */
    239e:	e0 eb       	ldi	r30, 0xB0	; 176
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	82 60       	ori	r24, 0x02	; 2
    23a6:	80 83       	st	Z, r24
		TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler - why are we setting CS21?? */
    23a8:	e1 eb       	ldi	r30, 0xB1	; 177
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	87 60       	ori	r24, 0x07	; 7
    23b0:	80 83       	st	Z, r24
		TIMSK2 |= (1 << OCIE0B);                            /* enable compare interrupt */
    23b2:	e0 e7       	ldi	r30, 0x70	; 112
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	84 60       	ori	r24, 0x04	; 4
    23ba:	80 83       	st	Z, r24

		/**
		 * Set up ADC */
		ADMUX |= (1 << REFS0) | (1 << REFS1);
    23bc:	ec e7       	ldi	r30, 0x7C	; 124
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	80 6c       	ori	r24, 0xC0	; 192
    23c4:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
    23c6:	ea e7       	ldi	r30, 0x7A	; 122
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	87 68       	ori	r24, 0x87	; 135
    23ce:	80 83       	st	Z, r24
	//	PCICR |= (1 << PCIE2) | (1 << PCIE1) | (1 << PCIE0);  /* Enable pin change interrupts PCI2, PCI1 and PCI0 */
	//	PCMSK2 |= 0b10001000;                                   /* Enable port D pin change interrupts */
	//	PCMSK1 |= (1 << PCINT10);                               /* Enable port C pin change interrupts on pin PC2 */
	//	PCMSK0 |= (1 << PORTB2);                                /* Do not enable interrupts until HW is ready */

		EICRA  |= ((1 << ISC01) | (1 << ISC00));	/* Configure INT0 for RTC 1-second interrupts */
    23d0:	e9 e6       	ldi	r30, 0x69	; 105
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	83 60       	ori	r24, 0x03	; 3
    23d8:	80 83       	st	Z, r24
		EIMSK |= (1 << INT0);		
    23da:	e8 9a       	sbi	0x1d, 0	; 29
    23dc:	08 95       	ret
		// PB4 = MISO
		// PB5 = SCK
		// PB6 = Tx Final Voltage Enable
		// PB7 = Main Power Enable

		DDRB = 0x00;     /* Set PORTD pin data directions */
    23de:	14 b8       	out	0x04, r1	; 4
		PORTB = 0x00;
    23e0:	15 b8       	out	0x05, r1	; 5
		// PD4 = n/c
		// PD5 = n/c
		// PD6 = WIFI_RESET
		// PD7 = WIFI_ENABLE

		DDRD = 0x00;
    23e2:	1a b8       	out	0x0a, r1	; 10
		PORTD = 0x00;
    23e4:	1b b8       	out	0x0b, r1	; 11
		// PC4 = SDA
		// PC5 = SCL
		// PC6 = Reset
		// PC7 = N/A
		
		DDRC = 0x00;
    23e6:	17 b8       	out	0x07, r1	; 7
		PORTC = 0x00;
    23e8:	18 b8       	out	0x08, r1	; 8
	//	TCCR1A |= (1 << COM1B1); /* Non-inverting mode */
	//	TCCR1B |= (1 << CS11) | (1 << CS10); /* Prescaler */

		/**
		 * TIMER2 is for periodic interrupts */
		TIMSK2 &= ~(1 << OCIE0B);                            /* disable compare interrupt */
    23ea:	e0 e7       	ldi	r30, 0x70	; 112
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	8b 7f       	andi	r24, 0xFB	; 251
    23f2:	80 83       	st	Z, r24
		OCR2A = 0x00;                                       /* set frequency to ~300 Hz (0x0c) */
    23f4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		TCCR2A &= ~(1 << WGM01);                             /* set CTC with OCRA */
    23f8:	e0 eb       	ldi	r30, 0xB0	; 176
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8d 7f       	andi	r24, 0xFD	; 253
    2400:	80 83       	st	Z, r24
		TCCR2B &= ~((1 << CS22) | (1 << CS21) | (1 << CS20));  /* Prescalar */
    2402:	e1 eb       	ldi	r30, 0xB1	; 177
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	88 7f       	andi	r24, 0xF8	; 248
    240a:	80 83       	st	Z, r24

		/**
		 * Set up ADC */
		ADMUX &= ~((1 << REFS0) | (1 << REFS1));
    240c:	ec e7       	ldi	r30, 0x7C	; 124
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	8f 73       	andi	r24, 0x3F	; 63
    2414:	80 83       	st	Z, r24
		// ADCSRA &= ~((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN));
		ADCSRA = 0;
    2416:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
		
		DIDR0 = 0x3f; // disable ADC pins
    241a:	8f e3       	ldi	r24, 0x3F	; 63
    241c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
		DIDR1 = 0x03; // disable analog inputs
    2420:	83 e0       	ldi	r24, 0x03	; 3
    2422:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7e007f>
		/**
		* Set up pin interrupts */
		/* Enable pin change interrupts PCINT8, PCINT9, */
		// TODO
	
		PCICR = 0;
    2426:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
		PCMSK0 = 0;
    242a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
		PCMSK1 = 0;
    242e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
		PCMSK2 = 0;
    2432:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	//	PCICR |= (1 << PCIE2) | (1 << PCIE1) | (1 << PCIE0);  /* Enable pin change interrupts PCI2, PCI1 and PCI0 */
	//	PCMSK2 |= 0b10001000;                                   /* Enable port D pin change interrupts */
	//	PCMSK1 |= (1 << PCINT10);                               /* Enable port C pin change interrupts on pin PC2 */
	//	PCMSK0 |= (1 << PORTB2);                                /* Do not enable interrupts until HW is ready */

		EICRA = 0;
    2436:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
		EIMSK = 0;
    243a:	1d ba       	out	0x1d, r1	; 29
		// TODO
		
		/**
		Turn off UART
		*/
		linkbus_disable();
    243c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <linkbus_disable>
		
		/* Disable brown-out detection
		**/
		PRR = 0xff;		
    2440:	8f ef       	ldi	r24, 0xFF	; 255
    2442:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		cli();
    2446:	f8 94       	cli
		MCUCR = (1 << BODS) | (1 << BODSE);  // turn on brown-out enable select
    2448:	80 e6       	ldi	r24, 0x60	; 96
    244a:	85 bf       	out	0x35, r24	; 53
		MCUCR = (1 << BODS);        // this must be done within 4 clock cycles of above
    244c:	80 e4       	ldi	r24, 0x40	; 64
    244e:	85 bf       	out	0x35, r24	; 53
		SMCR = 0x09; // set power-down mode
    2450:	89 e0       	ldi	r24, 0x09	; 9
    2452:	83 bf       	out	0x33, r24	; 51
		asm("sleep"); /* enter power-down mode */
    2454:	88 95       	sleep
		sei();
    2456:	78 94       	sei
    2458:	08 95       	ret

0000245a <main>:
 * need to be handled in the foreground, not in ISRs. This includes
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
    2462:	e4 97       	sbiw	r28, 0x34	; 52
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
	BOOL err = FALSE;
    246e:	19 86       	std	Y+9, r1	; 0x09
	LinkbusRxBuffer* lb_buff = 0;
    2470:	1b 86       	std	Y+11, r1	; 0x0b
    2472:	1a 86       	std	Y+10, r1	; 0x0a

	/**
	 * Initialize internal EEPROM if needed */
	initializeEEPROMVars();
    2474:	0e 94 b4 1c 	call	0x3968	; 0x3968 <initializeEEPROMVars>
	
	/**
	 * Initialize port pins and timers */
	set_ports(POWER_UP);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	7f df       	rcall	.-258    	; 0x237a <set_ports>
	
	cpu_irq_enable();                                           /* same as sei(); */
    247c:	78 94       	sei

	/**
	 * Enable watchdog interrupts before performing I2C calls that might cause a lockup */
#ifndef TRANQUILIZE_WATCHDOG
	wdt_init(WD_SW_RESETS);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 49 07 	call	0xe92	; 0xe92 <wdt_init>
	wdt_reset();                                    /* HW watchdog */
    2484:	a8 95       	wdr

//	wifi_power(ON); // power on WiFi
//	wifi_reset(OFF); // bring WiFi out of reset
	// Uncomment the two lines above and set a breakpoint after this line to permit serial access to ESP8266 serial lines for programming
	// You can then set a breakpoint on the line below to keep the serial port from being initialized
	linkbus_init(BAUD);
    2486:	60 e8       	ldi	r22, 0x80	; 128
    2488:	75 e2       	ldi	r23, 0x25	; 37
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 29 02 	call	0x452	; 0x452 <linkbus_init>

	wdt_reset();                                    /* HW watchdog */
    2492:	a8 95       	wdr

	if(g_terminal_mode)
    2494:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    2498:	88 23       	and	r24, r24
    249a:	99 f0       	breq	.+38     	; 0x24c2 <main+0x68>
	{
		if(err)
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	88 23       	and	r24, r24
    24a0:	49 f0       	breq	.+18     	; 0x24b4 <main+0x5a>
		{
			lb_send_NewLine();
    24a2:	0e 94 8b 03 	call	0x716	; 0x716 <lb_send_NewLine>
			lb_send_string("Init error!");
    24a6:	8b e7       	ldi	r24, 0x7B	; 123
    24a8:	94 e0       	ldi	r25, 0x04	; 4
    24aa:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
			lb_send_NewPrompt();		
    24ae:	0e 94 78 03 	call	0x6f0	; 0x6f0 <lb_send_NewPrompt>
    24b2:	09 c0       	rjmp	.+18     	; 0x24c6 <main+0x6c>
			
		}
		else
		{
			lb_send_NewLine();
    24b4:	0e 94 8b 03 	call	0x716	; 0x716 <lb_send_NewLine>
			lb_send_Help();
    24b8:	0e 94 07 03 	call	0x60e	; 0x60e <lb_send_Help>
			lb_send_NewPrompt();		
    24bc:	0e 94 78 03 	call	0x6f0	; 0x6f0 <lb_send_NewPrompt>
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <main+0x6c>
		}
	}
	else 
	{
		lb_send_sync();                                 /* send test pattern to help synchronize baud rate with any attached device */
    24c2:	0e 94 76 06 	call	0xcec	; 0xcec <lb_send_sync>
	}
	
	wdt_reset();
    24c6:	a8 95       	wdr
	
	while(linkbusTxInProgress())
    24c8:	00 00       	nop
    24ca:	0e 94 bd 01 	call	0x37a	; 0x37a <linkbusTxInProgress>
    24ce:	88 23       	and	r24, r24
    24d0:	e1 f7       	brne	.-8      	; 0x24ca <main+0x70>
	{
		;                                           /* wait until transmit finishes */
	}
		
	while(linkbusTxInProgress())
    24d2:	00 00       	nop
    24d4:	0e 94 bd 01 	call	0x37a	; 0x37a <linkbusTxInProgress>
    24d8:	88 23       	and	r24, r24
    24da:	e1 f7       	brne	.-8      	; 0x24d4 <main+0x7a>
	{
	}               /* wait until transmit finishes */

#ifndef TRANQUILIZE_WATCHDOG
	wdt_init(WD_HW_RESETS); /* enable hardware interrupts */
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	0e 94 49 07 	call	0xe92	; 0xe92 <wdt_init>
#endif // TRANQUILIZE_WATCHDOG

	g_am_modulation_enabled = txAMModulationEnabled();
    24e2:	0e 94 62 24 	call	0x48c4	; 0x48c4 <txAMModulationEnabled>
    24e6:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <g_am_modulation_enabled>
	while(1)
	{
		/**************************************
		* The watchdog must be petted periodically to keep it from barking
		**************************************/
		cli(); wdt_reset(); /* HW watchdog */ sei();
    24ea:	f8 94       	cli
    24ec:	a8 95       	wdr
    24ee:	78 94       	sei

		/***************************************
		* Check for Power 
		***************************************/
		if(g_battery_measurements_active)                                                                           /* if ADC battery measurements have stabilized */
    24f0:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <g_battery_measurements_active>
    24f4:	88 23       	and	r24, r24
    24f6:	11 f4       	brne	.+4      	; 0x24fc <main+0xa2>
    24f8:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <main+0x120a>
		{
			if(!g_sufficient_power_detected)
    24fc:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <g_sufficient_power_detected>
    2500:	88 23       	and	r24, r24
    2502:	11 f0       	breq	.+4      	; 0x2508 <main+0xae>
    2504:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <main+0x120a>
			{
				if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)  /* Battery measurement indicates sufficient voltage */
    2508:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <g_lastConversionResult>
    250c:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <g_lastConversionResult+0x1>
    2510:	89 3b       	cpi	r24, 0xB9	; 185
    2512:	92 40       	sbci	r25, 0x02	; 2
    2514:	10 f4       	brcc	.+4      	; 0x251a <main+0xc0>
    2516:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <main+0x120a>
				{
					if(!hw_init()) // initialize hardware that depends on i2c communications
    251a:	fa de       	rcall	.-524    	; 0x2310 <hw_init>
    251c:	88 23       	and	r24, r24
    251e:	11 f0       	breq	.+4      	; 0x2524 <main+0xca>
    2520:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <main+0x120a>
					{
						g_sufficient_power_detected = TRUE;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <g_sufficient_power_detected>
		}

		/***********************************************************************
		 *  Handle arriving Linkbus messages
		 ************************************************************************/
		while((lb_buff = nextFullRxBuffer()))
    252a:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <main+0x120a>
		{
			LBMessageID msg_id = lb_buff->id;
    252e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2530:	9b 85       	ldd	r25, Y+11	; 0x0b
    2532:	fc 01       	movw	r30, r24
    2534:	81 81       	ldd	r24, Z+1	; 0x01
    2536:	92 81       	ldd	r25, Z+2	; 0x02
    2538:	9d 87       	std	Y+13, r25	; 0x0d
    253a:	8c 87       	std	Y+12, r24	; 0x0c

			switch(msg_id)
    253c:	8c 85       	ldd	r24, Y+12	; 0x0c
    253e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2540:	88 31       	cpi	r24, 0x18	; 24
    2542:	fd e1       	ldi	r31, 0x1D	; 29
    2544:	9f 07       	cpc	r25, r31
    2546:	09 f4       	brne	.+2      	; 0x254a <main+0xf0>
    2548:	2e c7       	rjmp	.+3676   	; 0x33a6 <main+0xf4c>
    254a:	89 31       	cpi	r24, 0x19	; 25
    254c:	2d e1       	ldi	r18, 0x1D	; 29
    254e:	92 07       	cpc	r25, r18
    2550:	c8 f5       	brcc	.+114    	; 0x25c4 <main+0x16a>
    2552:	8e 31       	cpi	r24, 0x1E	; 30
    2554:	e3 e0       	ldi	r30, 0x03	; 3
    2556:	9e 07       	cpc	r25, r30
    2558:	09 f4       	brne	.+2      	; 0x255c <main+0x102>
    255a:	09 c5       	rjmp	.+2578   	; 0x2f6e <main+0xb14>
    255c:	8f 31       	cpi	r24, 0x1F	; 31
    255e:	f3 e0       	ldi	r31, 0x03	; 3
    2560:	9f 07       	cpc	r25, r31
    2562:	b0 f4       	brcc	.+44     	; 0x2590 <main+0x136>
    2564:	80 35       	cpi	r24, 0x50	; 80
    2566:	91 05       	cpc	r25, r1
    2568:	09 f4       	brne	.+2      	; 0x256c <main+0x112>
    256a:	20 c2       	rjmp	.+1088   	; 0x29ac <main+0x552>
    256c:	81 35       	cpi	r24, 0x51	; 81
    256e:	91 05       	cpc	r25, r1
    2570:	28 f4       	brcc	.+10     	; 0x257c <main+0x122>
    2572:	cf 97       	sbiw	r24, 0x3f	; 63
    2574:	09 f4       	brne	.+2      	; 0x2578 <main+0x11e>
    2576:	7c c7       	rjmp	.+3832   	; 0x3470 <main+0x1016>
    2578:	0c 94 06 1b 	jmp	0x360c	; 0x360c <main+0x11b2>
    257c:	84 35       	cpi	r24, 0x54	; 84
    257e:	91 05       	cpc	r25, r1
    2580:	09 f4       	brne	.+2      	; 0x2584 <main+0x12a>
    2582:	f6 c5       	rjmp	.+3052   	; 0x3170 <main+0xd16>
    2584:	85 31       	cpi	r24, 0x15	; 21
    2586:	93 40       	sbci	r25, 0x03	; 3
    2588:	09 f4       	brne	.+2      	; 0x258c <main+0x132>
    258a:	15 c2       	rjmp	.+1066   	; 0x29b6 <main+0x55c>
    258c:	0c 94 06 1b 	jmp	0x360c	; 0x360c <main+0x11b2>
    2590:	84 38       	cpi	r24, 0x84	; 132
    2592:	e3 e0       	ldi	r30, 0x03	; 3
    2594:	9e 07       	cpc	r25, r30
    2596:	09 f4       	brne	.+2      	; 0x259a <main+0x140>
    2598:	8a c2       	rjmp	.+1300   	; 0x2aae <main+0x654>
    259a:	85 38       	cpi	r24, 0x85	; 133
    259c:	f3 e0       	ldi	r31, 0x03	; 3
    259e:	9f 07       	cpc	r25, r31
    25a0:	30 f4       	brcc	.+12     	; 0x25ae <main+0x154>
    25a2:	81 36       	cpi	r24, 0x61	; 97
    25a4:	93 40       	sbci	r25, 0x03	; 3
    25a6:	09 f4       	brne	.+2      	; 0x25aa <main+0x150>
    25a8:	8a c6       	rjmp	.+3348   	; 0x32be <main+0xe64>
    25aa:	0c 94 06 1b 	jmp	0x360c	; 0x360c <main+0x11b2>
    25ae:	8f 3a       	cpi	r24, 0xAF	; 175
    25b0:	e3 e0       	ldi	r30, 0x03	; 3
    25b2:	9e 07       	cpc	r25, r30
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <main+0x15e>
    25b6:	aa c0       	rjmp	.+340    	; 0x270c <main+0x2b2>
    25b8:	86 3a       	cpi	r24, 0xA6	; 166
    25ba:	9c 41       	sbci	r25, 0x1C	; 28
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <main+0x166>
    25be:	41 c7       	rjmp	.+3714   	; 0x3442 <main+0xfe8>
    25c0:	0c 94 06 1b 	jmp	0x360c	; 0x360c <main+0x11b2>
    25c4:	8d 3a       	cpi	r24, 0xAD	; 173
    25c6:	22 e2       	ldi	r18, 0x22	; 34
    25c8:	92 07       	cpc	r25, r18
    25ca:	09 f4       	brne	.+2      	; 0x25ce <main+0x174>
    25cc:	87 c1       	rjmp	.+782    	; 0x28dc <main+0x482>
    25ce:	8e 3a       	cpi	r24, 0xAE	; 174
    25d0:	e2 e2       	ldi	r30, 0x22	; 34
    25d2:	9e 07       	cpc	r25, r30
    25d4:	c8 f4       	brcc	.+50     	; 0x2608 <main+0x1ae>
    25d6:	82 38       	cpi	r24, 0x82	; 130
    25d8:	fe e1       	ldi	r31, 0x1E	; 30
    25da:	9f 07       	cpc	r25, r31
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <main+0x186>
    25de:	d8 c0       	rjmp	.+432    	; 0x2790 <main+0x336>
    25e0:	83 38       	cpi	r24, 0x83	; 131
    25e2:	2e e1       	ldi	r18, 0x1E	; 30
    25e4:	92 07       	cpc	r25, r18
    25e6:	28 f4       	brcc	.+10     	; 0x25f2 <main+0x198>
    25e8:	8d 30       	cpi	r24, 0x0D	; 13
    25ea:	9e 41       	sbci	r25, 0x1E	; 30
    25ec:	51 f1       	breq	.+84     	; 0x2642 <main+0x1e8>
    25ee:	0c 94 06 1b 	jmp	0x360c	; 0x360c <main+0x11b2>
    25f2:	81 3d       	cpi	r24, 0xD1	; 209
    25f4:	fe e1       	ldi	r31, 0x1E	; 30
    25f6:	9f 07       	cpc	r25, r31
    25f8:	09 f4       	brne	.+2      	; 0x25fc <main+0x1a2>
    25fa:	80 c6       	rjmp	.+3328   	; 0x32fc <main+0xea2>
    25fc:	8e 36       	cpi	r24, 0x6E	; 110
    25fe:	91 42       	sbci	r25, 0x21	; 33
    2600:	09 f4       	brne	.+2      	; 0x2604 <main+0x1aa>
    2602:	22 c1       	rjmp	.+580    	; 0x2848 <main+0x3ee>
    2604:	0c 94 06 1b 	jmp	0x360c	; 0x360c <main+0x11b2>
    2608:	80 3d       	cpi	r24, 0xD0	; 208
    260a:	e3 e2       	ldi	r30, 0x23	; 35
    260c:	9e 07       	cpc	r25, r30
    260e:	09 f4       	brne	.+2      	; 0x2612 <main+0x1b8>
    2610:	f0 c4       	rjmp	.+2528   	; 0x2ff2 <main+0xb98>
    2612:	81 3d       	cpi	r24, 0xD1	; 209
    2614:	f3 e2       	ldi	r31, 0x23	; 35
    2616:	9f 07       	cpc	r25, r31
    2618:	50 f4       	brcc	.+20     	; 0x262e <main+0x1d4>
    261a:	8a 39       	cpi	r24, 0x9A	; 154
    261c:	23 e2       	ldi	r18, 0x23	; 35
    261e:	92 07       	cpc	r25, r18
    2620:	09 f4       	brne	.+2      	; 0x2624 <main+0x1ca>
    2622:	b2 c0       	rjmp	.+356    	; 0x2788 <main+0x32e>
    2624:	8f 3c       	cpi	r24, 0xCF	; 207
    2626:	93 42       	sbci	r25, 0x23	; 35
    2628:	09 f4       	brne	.+2      	; 0x262c <main+0x1d2>
    262a:	14 c7       	rjmp	.+3624   	; 0x3454 <main+0xffa>
    262c:	ef c7       	rjmp	.+4062   	; 0x360c <main+0x11b2>
    262e:	87 3f       	cpi	r24, 0xF7	; 247
    2630:	f3 e2       	ldi	r31, 0x23	; 35
    2632:	9f 07       	cpc	r25, r31
    2634:	09 f4       	brne	.+2      	; 0x2638 <main+0x1de>
    2636:	d4 c2       	rjmp	.+1448   	; 0x2be0 <main+0x786>
    2638:	81 37       	cpi	r24, 0x71	; 113
    263a:	94 42       	sbci	r25, 0x24	; 36
    263c:	09 f4       	brne	.+2      	; 0x2640 <main+0x1e6>
    263e:	e5 c6       	rjmp	.+3530   	; 0x340a <main+0xfb0>
    2640:	e5 c7       	rjmp	.+4042   	; 0x360c <main+0x11b2>
				break;
#endif //DEBUG_FUNCTIONS_ENABLE		

				case MESSAGE_DRIVE_LEVEL:
				{
					uint8_t setting = 0;
    2642:	1e 86       	std	Y+14, r1	; 0x0e
					
					if(lb_buff->fields[FIELD1][0] && lb_buff->fields[FIELD2][0])
    2644:	8a 85       	ldd	r24, Y+10	; 0x0a
    2646:	9b 85       	ldd	r25, Y+11	; 0x0b
    2648:	fc 01       	movw	r30, r24
    264a:	83 81       	ldd	r24, Z+3	; 0x03
    264c:	88 23       	and	r24, r24
    264e:	91 f1       	breq	.+100    	; 0x26b4 <main+0x25a>
    2650:	8a 85       	ldd	r24, Y+10	; 0x0a
    2652:	9b 85       	ldd	r25, Y+11	; 0x0b
    2654:	fc 01       	movw	r30, r24
    2656:	80 8d       	ldd	r24, Z+24	; 0x18
    2658:	88 23       	and	r24, r24
    265a:	61 f1       	breq	.+88     	; 0x26b4 <main+0x25a>
					{
						char ud = lb_buff->fields[FIELD1][0];
    265c:	8a 85       	ldd	r24, Y+10	; 0x0a
    265e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2660:	fc 01       	movw	r30, r24
    2662:	83 81       	ldd	r24, Z+3	; 0x03
    2664:	8f 87       	std	Y+15, r24	; 0x0f
						setting = atoi(lb_buff->fields[FIELD2]);
    2666:	8a 85       	ldd	r24, Y+10	; 0x0a
    2668:	9b 85       	ldd	r25, Y+11	; 0x0b
    266a:	48 96       	adiw	r24, 0x18	; 24
    266c:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <atoi>
    2670:	8e 87       	std	Y+14, r24	; 0x0e
						
						if(ud == 'U')
    2672:	8f 85       	ldd	r24, Y+15	; 0x0f
    2674:	85 35       	cpi	r24, 0x55	; 85
    2676:	59 f4       	brne	.+22     	; 0x268e <main+0x234>
						{
							g_mod_up = setting;
    2678:	8e 85       	ldd	r24, Y+14	; 0x0e
    267a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <g_mod_up>
							lb_broadcast_num(setting, "DRI U");
    267e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2680:	88 2f       	mov	r24, r24
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	67 e8       	ldi	r22, 0x87	; 135
    2686:	74 e0       	ldi	r23, 0x04	; 4
    2688:	0e 94 8a 06 	call	0xd14	; 0xd14 <lb_broadcast_num>
				case MESSAGE_DRIVE_LEVEL:
				{
					uint8_t setting = 0;
					
					if(lb_buff->fields[FIELD1][0] && lb_buff->fields[FIELD2][0])
					{
    268c:	3e c0       	rjmp	.+124    	; 0x270a <main+0x2b0>
						if(ud == 'U')
						{
							g_mod_up = setting;
							lb_broadcast_num(setting, "DRI U");
						}
						else if(ud == 'D')
    268e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2690:	84 34       	cpi	r24, 0x44	; 68
    2692:	59 f4       	brne	.+22     	; 0x26aa <main+0x250>
						{
							g_mod_down = setting;
    2694:	8e 85       	ldd	r24, Y+14	; 0x0e
    2696:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <g_mod_down>
							lb_broadcast_num(setting, "DRI D");
    269a:	8e 85       	ldd	r24, Y+14	; 0x0e
    269c:	88 2f       	mov	r24, r24
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	6d e8       	ldi	r22, 0x8D	; 141
    26a2:	74 e0       	ldi	r23, 0x04	; 4
    26a4:	0e 94 8a 06 	call	0xd14	; 0xd14 <lb_broadcast_num>
				case MESSAGE_DRIVE_LEVEL:
				{
					uint8_t setting = 0;
					
					if(lb_buff->fields[FIELD1][0] && lb_buff->fields[FIELD2][0])
					{
    26a8:	30 c0       	rjmp	.+96     	; 0x270a <main+0x2b0>
							g_mod_down = setting;
							lb_broadcast_num(setting, "DRI D");
						}
						else
						{
							lb_send_string("DRI U|D 0-255\n");
    26aa:	83 e9       	ldi	r24, 0x93	; 147
    26ac:	94 e0       	ldi	r25, 0x04	; 4
    26ae:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
				case MESSAGE_DRIVE_LEVEL:
				{
					uint8_t setting = 0;
					
					if(lb_buff->fields[FIELD1][0] && lb_buff->fields[FIELD2][0])
					{
    26b2:	2b c0       	rjmp	.+86     	; 0x270a <main+0x2b0>
							lb_send_string("DRI U|D 0-255\n");
						}
					}
					else
					{
						sprintf(g_tempStr, "U/D = %d/%d\n", g_mod_up, g_mod_down);
    26b4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_mod_down>
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <g_mod_up>
    26c0:	88 2f       	mov	r24, r24
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	43 2f       	mov	r20, r19
    26c6:	4f 93       	push	r20
    26c8:	2f 93       	push	r18
    26ca:	29 2f       	mov	r18, r25
    26cc:	2f 93       	push	r18
    26ce:	8f 93       	push	r24
    26d0:	82 ea       	ldi	r24, 0xA2	; 162
    26d2:	94 e0       	ldi	r25, 0x04	; 4
    26d4:	89 2f       	mov	r24, r25
    26d6:	8f 93       	push	r24
    26d8:	82 ea       	ldi	r24, 0xA2	; 162
    26da:	94 e0       	ldi	r25, 0x04	; 4
    26dc:	8f 93       	push	r24
    26de:	84 e9       	ldi	r24, 0x94	; 148
    26e0:	96 e0       	ldi	r25, 0x06	; 6
    26e2:	89 2f       	mov	r24, r25
    26e4:	8f 93       	push	r24
    26e6:	84 e9       	ldi	r24, 0x94	; 148
    26e8:	96 e0       	ldi	r25, 0x06	; 6
    26ea:	8f 93       	push	r24
    26ec:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
    26f0:	8d b7       	in	r24, 0x3d	; 61
    26f2:	9e b7       	in	r25, 0x3e	; 62
    26f4:	08 96       	adiw	r24, 0x08	; 8
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
						lb_send_string(g_tempStr);
    2700:	84 e9       	ldi	r24, 0x94	; 148
    2702:	96 e0       	ldi	r25, 0x06	; 6
					}

				}
				break;
    2704:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
    2708:	a2 c7       	rjmp	.+3908   	; 0x364e <main+0x11f4>
    270a:	a1 c7       	rjmp	.+3906   	; 0x364e <main+0x11f4>
				
				case MESSAGE_WIFI:
				{
					BOOL result = wifi_enabled();
    270c:	0e 94 89 29 	call	0x5312	; 0x5312 <wifi_enabled>
    2710:	89 83       	std	Y+1, r24	; 0x01
					
					if(lb_buff->fields[FIELD1][0])
    2712:	8a 85       	ldd	r24, Y+10	; 0x0a
    2714:	9b 85       	ldd	r25, Y+11	; 0x0b
    2716:	fc 01       	movw	r30, r24
    2718:	83 81       	ldd	r24, Z+3	; 0x03
    271a:	88 23       	and	r24, r24
    271c:	41 f1       	breq	.+80     	; 0x276e <main+0x314>
					{
						result = atoi(lb_buff->fields[FIELD1]);
    271e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2720:	9b 85       	ldd	r25, Y+11	; 0x0b
    2722:	03 96       	adiw	r24, 0x03	; 3
    2724:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <atoi>
    2728:	89 83       	std	Y+1, r24	; 0x01
						
						cli(); 
    272a:	f8 94       	cli
						linkbus_disable();
    272c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <linkbus_disable>
						sei();	
    2730:	78 94       	sei
						wifi_power(result);
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	0e 94 b6 29 	call	0x536c	; 0x536c <wifi_power>
						g_terminal_mode = !result;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	99 81       	ldd	r25, Y+1	; 0x01
    273c:	99 23       	and	r25, r25
    273e:	09 f0       	breq	.+2      	; 0x2742 <main+0x2e8>
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <g_terminal_mode>
						wifi_reset(g_terminal_mode);
    2746:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    274a:	0e 94 95 29 	call	0x532a	; 0x532a <wifi_reset>
						linkbus_setTerminalMode(g_terminal_mode);
    274e:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    2752:	0e 94 9f 02 	call	0x53e	; 0x53e <linkbus_setTerminalMode>

						if(result == 2)
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	82 30       	cpi	r24, 0x02	; 2
    275a:	19 f4       	brne	.+6      	; 0x2762 <main+0x308>
						{
							g_WiFi_shutdown_seconds = 0; // disable shutdown
    275c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_WiFi_shutdown_seconds>
    2760:	06 c0       	rjmp	.+12     	; 0x276e <main+0x314>
						}
						else
						{
							linkbus_init(BAUD);
    2762:	60 e8       	ldi	r22, 0x80	; 128
    2764:	75 e2       	ldi	r23, 0x25	; 37
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 29 02 	call	0x452	; 0x452 <linkbus_init>
						}
					}
					
					if(g_terminal_mode) lb_broadcast_num((uint16_t)result, NULL);
    276e:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    2772:	88 23       	and	r24, r24
    2774:	09 f4       	brne	.+2      	; 0x2778 <main+0x31e>
    2776:	54 c7       	rjmp	.+3752   	; 0x3620 <main+0x11c6>
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	88 2f       	mov	r24, r24
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	60 e0       	ldi	r22, 0x00	; 0
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	0e 94 8a 06 	call	0xd14	; 0xd14 <lb_broadcast_num>

				}
				break;
    2786:	4c c7       	rjmp	.+3736   	; 0x3620 <main+0x11c6>

				case MESSAGE_RESET:
				{
#ifndef TRANQUILIZE_WATCHDOG
					wdt_init(WD_FORCE_RESET);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	0e 94 49 07 	call	0xe92	; 0xe92 <wdt_init>
					while(1);
    278e:	ff cf       	rjmp	.-2      	; 0x278e <main+0x334>
				}
				break;
				
				case MESSAGE_ESP_COMM:
				{
					uint8_t f1 = lb_buff->fields[FIELD1][0];
    2790:	8a 85       	ldd	r24, Y+10	; 0x0a
    2792:	9b 85       	ldd	r25, Y+11	; 0x0b
    2794:	fc 01       	movw	r30, r24
    2796:	83 81       	ldd	r24, Z+3	; 0x03
    2798:	88 8b       	std	Y+16, r24	; 0x10
					
					if(f1 == '0') /* I'm awake message */
    279a:	88 89       	ldd	r24, Y+16	; 0x10
    279c:	80 33       	cpi	r24, 0x30	; 48
    279e:	69 f5       	brne	.+90     	; 0x27fa <main+0x3a0>
					{
						/* WiFi is awake. Send it the current time */
						sprintf(g_tempStr, "%lu", time(NULL));
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 ef 36 	call	0x6dde	; 0x6dde <time>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	2b 2f       	mov	r18, r27
    27ae:	2f 93       	push	r18
    27b0:	2a 2f       	mov	r18, r26
    27b2:	2f 93       	push	r18
    27b4:	29 2f       	mov	r18, r25
    27b6:	2f 93       	push	r18
    27b8:	8f 93       	push	r24
    27ba:	8f ea       	ldi	r24, 0xAF	; 175
    27bc:	94 e0       	ldi	r25, 0x04	; 4
    27be:	89 2f       	mov	r24, r25
    27c0:	8f 93       	push	r24
    27c2:	8f ea       	ldi	r24, 0xAF	; 175
    27c4:	94 e0       	ldi	r25, 0x04	; 4
    27c6:	8f 93       	push	r24
    27c8:	84 e9       	ldi	r24, 0x94	; 148
    27ca:	96 e0       	ldi	r25, 0x06	; 6
    27cc:	89 2f       	mov	r24, r25
    27ce:	8f 93       	push	r24
    27d0:	84 e9       	ldi	r24, 0x94	; 148
    27d2:	96 e0       	ldi	r25, 0x06	; 6
    27d4:	8f 93       	push	r24
    27d6:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
    27da:	8d b7       	in	r24, 0x3d	; 61
    27dc:	9e b7       	in	r25, 0x3e	; 62
    27de:	08 96       	adiw	r24, 0x08	; 8
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    27ea:	44 e9       	ldi	r20, 0x94	; 148
    27ec:	56 e0       	ldi	r21, 0x06	; 6
    27ee:	63 eb       	ldi	r22, 0xB3	; 179
    27f0:	74 e0       	ldi	r23, 0x04	; 4
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lb_send_msg>
					{
						/* shut down WiFi after 2 minutes of inactivity */
						g_WiFi_shutdown_seconds = 120; // wait 2 more minutes before shutting down WiFi
					}
				}
				break;
    27f8:	15 c7       	rjmp	.+3626   	; 0x3624 <main+0x11ca>
					{
						/* WiFi is awake. Send it the current time */
						sprintf(g_tempStr, "%lu", time(NULL));
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
					}
					else if(f1 == '1')
    27fa:	88 89       	ldd	r24, Y+16	; 0x10
    27fc:	81 33       	cpi	r24, 0x31	; 49
    27fe:	41 f4       	brne	.+16     	; 0x2810 <main+0x3b6>
					{
						/* ESP8266 is ready with event data */
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_ESP_LABEL, "1");
    2800:	47 eb       	ldi	r20, 0xB7	; 183
    2802:	54 e0       	ldi	r21, 0x04	; 4
    2804:	69 eb       	ldi	r22, 0xB9	; 185
    2806:	74 e0       	ldi	r23, 0x04	; 4
    2808:	83 e0       	ldi	r24, 0x03	; 3
    280a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lb_send_msg>
					{
						/* shut down WiFi after 2 minutes of inactivity */
						g_WiFi_shutdown_seconds = 120; // wait 2 more minutes before shutting down WiFi
					}
				}
				break;
    280e:	0a c7       	rjmp	.+3604   	; 0x3624 <main+0x11ca>
					else if(f1 == '1')
					{
						/* ESP8266 is ready with event data */
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_ESP_LABEL, "1");
					}
					else if(f1 == '2') /* ESP module needs continuous power to save data */
    2810:	88 89       	ldd	r24, Y+16	; 0x10
    2812:	82 33       	cpi	r24, 0x32	; 50
    2814:	51 f4       	brne	.+20     	; 0x282a <main+0x3d0>
					{
						g_WiFi_shutdown_seconds = 0; // disable shutdown
    2816:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <g_WiFi_shutdown_seconds>
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_ESP_LABEL, "2"); /* Save data now */
    281a:	4d eb       	ldi	r20, 0xBD	; 189
    281c:	54 e0       	ldi	r21, 0x04	; 4
    281e:	69 eb       	ldi	r22, 0xB9	; 185
    2820:	74 e0       	ldi	r23, 0x04	; 4
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lb_send_msg>
					{
						/* shut down WiFi after 2 minutes of inactivity */
						g_WiFi_shutdown_seconds = 120; // wait 2 more minutes before shutting down WiFi
					}
				}
				break;
    2828:	fd c6       	rjmp	.+3578   	; 0x3624 <main+0x11ca>
					else if(f1 == '2') /* ESP module needs continuous power to save data */
					{
						g_WiFi_shutdown_seconds = 0; // disable shutdown
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_ESP_LABEL, "2"); /* Save data now */
					}
					else if(f1 == '3')
    282a:	88 89       	ldd	r24, Y+16	; 0x10
    282c:	83 33       	cpi	r24, 0x33	; 51
    282e:	21 f4       	brne	.+8      	; 0x2838 <main+0x3de>
					{
						g_WiFi_shutdown_seconds = 3; /* Shut down WiFi in 3 seconds */
    2830:	83 e0       	ldi	r24, 0x03	; 3
    2832:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_WiFi_shutdown_seconds>
					{
						/* shut down WiFi after 2 minutes of inactivity */
						g_WiFi_shutdown_seconds = 120; // wait 2 more minutes before shutting down WiFi
					}
				}
				break;
    2836:	f6 c6       	rjmp	.+3564   	; 0x3624 <main+0x11ca>
					}
					else if(f1 == '3')
					{
						g_WiFi_shutdown_seconds = 3; /* Shut down WiFi in 3 seconds */
					}
					else if(f1 == 'Z') /* No scheduled events - keep alive */
    2838:	88 89       	ldd	r24, Y+16	; 0x10
    283a:	8a 35       	cpi	r24, 0x5A	; 90
    283c:	09 f0       	breq	.+2      	; 0x2840 <main+0x3e6>
    283e:	f2 c6       	rjmp	.+3556   	; 0x3624 <main+0x11ca>
					{
						/* shut down WiFi after 2 minutes of inactivity */
						g_WiFi_shutdown_seconds = 120; // wait 2 more minutes before shutting down WiFi
    2840:	88 e7       	ldi	r24, 0x78	; 120
    2842:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <g_WiFi_shutdown_seconds>
					}
				}
				break;
    2846:	ee c6       	rjmp	.+3548   	; 0x3624 <main+0x11ca>
				
				case MESSAGE_TX_MOD:
				{
					Modulation m;
					
					if(lb_buff->fields[FIELD1][0] == 'A') // AM
    2848:	8a 85       	ldd	r24, Y+10	; 0x0a
    284a:	9b 85       	ldd	r25, Y+11	; 0x0b
    284c:	fc 01       	movw	r30, r24
    284e:	83 81       	ldd	r24, Z+3	; 0x03
    2850:	81 34       	cpi	r24, 0x41	; 65
    2852:	31 f4       	brne	.+12     	; 0x2860 <main+0x406>
					{
						txSetModulation(MODE_AM);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	0e 94 2c 24 	call	0x4858	; 0x4858 <txSetModulation>
						saveAllEEPROM();
    285a:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <saveAllEEPROM>
    285e:	0b c0       	rjmp	.+22     	; 0x2876 <main+0x41c>
					}
					else if(lb_buff->fields[FIELD1][0] == 'C') // CW
    2860:	8a 85       	ldd	r24, Y+10	; 0x0a
    2862:	9b 85       	ldd	r25, Y+11	; 0x0b
    2864:	fc 01       	movw	r30, r24
    2866:	83 81       	ldd	r24, Z+3	; 0x03
    2868:	83 34       	cpi	r24, 0x43	; 67
    286a:	29 f4       	brne	.+10     	; 0x2876 <main+0x41c>
					{
						txSetModulation(MODE_CW);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	0e 94 2c 24 	call	0x4858	; 0x4858 <txSetModulation>
						saveAllEEPROM();
    2872:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <saveAllEEPROM>
					}
					
					g_am_modulation_enabled = txAMModulationEnabled();
    2876:	0e 94 62 24 	call	0x48c4	; 0x48c4 <txAMModulationEnabled>
    287a:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <g_am_modulation_enabled>
					
					m = txGetModulation();
    287e:	0e 94 53 24 	call	0x48a6	; 0x48a6 <txGetModulation>
    2882:	89 8b       	std	Y+17, r24	; 0x11
					
					sprintf(g_tempStr, "MOD=%s\n", m == MODE_AM ? "AM": m == MODE_CW ? "CW":"N/A");
    2884:	89 89       	ldd	r24, Y+17	; 0x11
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	49 f0       	breq	.+18     	; 0x289c <main+0x442>
    288a:	89 89       	ldd	r24, Y+17	; 0x11
    288c:	88 23       	and	r24, r24
    288e:	19 f4       	brne	.+6      	; 0x2896 <main+0x43c>
    2890:	8f eb       	ldi	r24, 0xBF	; 191
    2892:	94 e0       	ldi	r25, 0x04	; 4
    2894:	05 c0       	rjmp	.+10     	; 0x28a0 <main+0x446>
    2896:	82 ec       	ldi	r24, 0xC2	; 194
    2898:	94 e0       	ldi	r25, 0x04	; 4
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <main+0x446>
    289c:	86 ec       	ldi	r24, 0xC6	; 198
    289e:	94 e0       	ldi	r25, 0x04	; 4
    28a0:	29 2f       	mov	r18, r25
    28a2:	2f 93       	push	r18
    28a4:	8f 93       	push	r24
    28a6:	89 ec       	ldi	r24, 0xC9	; 201
    28a8:	94 e0       	ldi	r25, 0x04	; 4
    28aa:	89 2f       	mov	r24, r25
    28ac:	8f 93       	push	r24
    28ae:	89 ec       	ldi	r24, 0xC9	; 201
    28b0:	94 e0       	ldi	r25, 0x04	; 4
    28b2:	8f 93       	push	r24
    28b4:	84 e9       	ldi	r24, 0x94	; 148
    28b6:	96 e0       	ldi	r25, 0x06	; 6
    28b8:	89 2f       	mov	r24, r25
    28ba:	8f 93       	push	r24
    28bc:	84 e9       	ldi	r24, 0x94	; 148
    28be:	96 e0       	ldi	r25, 0x06	; 6
    28c0:	8f 93       	push	r24
    28c2:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0
    28d0:	0f 90       	pop	r0
					lb_send_string(g_tempStr);
    28d2:	84 e9       	ldi	r24, 0x94	; 148
    28d4:	96 e0       	ldi	r25, 0x06	; 6
    28d6:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
				}
				break;
    28da:	b9 c6       	rjmp	.+3442   	; 0x364e <main+0x11f4>
				
				case MESSAGE_TX_POWER:
				{
					static uint8_t pwr;
					
					PORTB |= (1 << PORTB7); /* Turn on main power */
    28dc:	85 e2       	ldi	r24, 0x25	; 37
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	25 e2       	ldi	r18, 0x25	; 37
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	f9 01       	movw	r30, r18
    28e6:	20 81       	ld	r18, Z
    28e8:	20 68       	ori	r18, 0x80	; 128
    28ea:	fc 01       	movw	r30, r24
    28ec:	20 83       	st	Z, r18
						
					if(lb_buff->fields[FIELD1][0])
    28ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    28f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f2:	fc 01       	movw	r30, r24
    28f4:	83 81       	ldd	r24, Z+3	; 0x03
    28f6:	88 23       	and	r24, r24
    28f8:	09 f4       	brne	.+2      	; 0x28fc <main+0x4a2>
    28fa:	4b c0       	rjmp	.+150    	; 0x2992 <main+0x538>
					{
						if((lb_buff->fields[FIELD1][0] == 'M') && (lb_buff->fields[FIELD2][0]))
    28fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2900:	fc 01       	movw	r30, r24
    2902:	83 81       	ldd	r24, Z+3	; 0x03
    2904:	8d 34       	cpi	r24, 0x4D	; 77
    2906:	c1 f5       	brne	.+112    	; 0x2978 <main+0x51e>
    2908:	8a 85       	ldd	r24, Y+10	; 0x0a
    290a:	9b 85       	ldd	r25, Y+11	; 0x0b
    290c:	fc 01       	movw	r30, r24
    290e:	80 8d       	ldd	r24, Z+24	; 0x18
    2910:	88 23       	and	r24, r24
    2912:	91 f1       	breq	.+100    	; 0x2978 <main+0x51e>
						{
							static int16_t mW;
							mW = atoi(lb_buff->fields[FIELD2]);
    2914:	8a 85       	ldd	r24, Y+10	; 0x0a
    2916:	9b 85       	ldd	r25, Y+11	; 0x0b
    2918:	48 96       	adiw	r24, 0x18	; 24
    291a:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <atoi>
    291e:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <mW.3316+0x1>
    2922:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <mW.3316>
							mW = CLAMP(0, mW, 255);
    2926:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <mW.3316>
    292a:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <mW.3316+0x1>
    292e:	9b 8b       	std	Y+19, r25	; 0x13
    2930:	8a 8b       	std	Y+18, r24	; 0x12
    2932:	1d 8a       	std	Y+21, r1	; 0x15
    2934:	1c 8a       	std	Y+20, r1	; 0x14
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9f 8b       	std	Y+23, r25	; 0x17
    293c:	8e 8b       	std	Y+22, r24	; 0x16
    293e:	2a 89       	ldd	r18, Y+18	; 0x12
    2940:	3b 89       	ldd	r19, Y+19	; 0x13
    2942:	8e 89       	ldd	r24, Y+22	; 0x16
    2944:	9f 89       	ldd	r25, Y+23	; 0x17
    2946:	82 17       	cp	r24, r18
    2948:	93 07       	cpc	r25, r19
    294a:	4c f0       	brlt	.+18     	; 0x295e <main+0x504>
    294c:	2c 89       	ldd	r18, Y+20	; 0x14
    294e:	3d 89       	ldd	r19, Y+21	; 0x15
    2950:	8a 89       	ldd	r24, Y+18	; 0x12
    2952:	9b 89       	ldd	r25, Y+19	; 0x13
    2954:	82 17       	cp	r24, r18
    2956:	93 07       	cpc	r25, r19
    2958:	24 f4       	brge	.+8      	; 0x2962 <main+0x508>
    295a:	c9 01       	movw	r24, r18
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <main+0x508>
    295e:	8e 89       	ldd	r24, Y+22	; 0x16
    2960:	9f 89       	ldd	r25, Y+23	; 0x17
    2962:	90 93 32 07 	sts	0x0732, r25	; 0x800732 <mW.3316+0x1>
    2966:	80 93 31 07 	sts	0x0731, r24	; 0x800731 <mW.3316>
							/* TODO: convert milliwatts to power setting */
							pwr = (uint8_t)mW;
    296a:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <mW.3316>
    296e:	90 91 32 07 	lds	r25, 0x0732	; 0x800732 <mW.3316+0x1>
    2972:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <pwr.3315>
					PORTB |= (1 << PORTB7); /* Turn on main power */
						
					if(lb_buff->fields[FIELD1][0])
					{
						if((lb_buff->fields[FIELD1][0] == 'M') && (lb_buff->fields[FIELD2][0]))
						{
    2976:	07 c0       	rjmp	.+14     	; 0x2986 <main+0x52c>
							/* TODO: convert milliwatts to power setting */
							pwr = (uint8_t)mW;
						}
						else
						{
							pwr = atoi(lb_buff->fields[FIELD1]);
    2978:	8a 85       	ldd	r24, Y+10	; 0x0a
    297a:	9b 85       	ldd	r25, Y+11	; 0x0b
    297c:	03 96       	adiw	r24, 0x03	; 3
    297e:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <atoi>
    2982:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <pwr.3315>
						}
						
						txSetPowerLevel(pwr);
    2986:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <pwr.3315>
    298a:	0e 94 be 23 	call	0x477c	; 0x477c <txSetPowerLevel>
						//txGetModulationLevels(&g_mod_up, &g_mod_down);
						saveAllEEPROM();
    298e:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <saveAllEEPROM>
					}
					
					pwr = txGetPowerLevel();
    2992:	0e 94 1a 24 	call	0x4834	; 0x4834 <txGetPowerLevel>
    2996:	80 93 33 07 	sts	0x0733, r24	; 0x800733 <pwr.3315>
					lb_send_value(pwr, "POW");
    299a:	80 91 33 07 	lds	r24, 0x0733	; 0x800733 <pwr.3315>
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	61 ed       	ldi	r22, 0xD1	; 209
    29a4:	74 e0       	ldi	r23, 0x04	; 4
    29a6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <lb_send_value>
				}
				break;
    29aa:	51 c6       	rjmp	.+3234   	; 0x364e <main+0x11f4>
				
				case MESSAGE_PERM:
				{
					storeTtransmitterValues();
    29ac:	0e 94 9f 24 	call	0x493e	; 0x493e <storeTtransmitterValues>
					saveAllEEPROM();
    29b0:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <saveAllEEPROM>
				}
				break;
    29b4:	4c c6       	rjmp	.+3224   	; 0x364e <main+0x11f4>
				
				case MESSAGE_GO:
				{
					if(lb_buff->fields[FIELD1][0] == '1')
    29b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    29b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ba:	fc 01       	movw	r30, r24
    29bc:	83 81       	ldd	r24, Z+3	; 0x03
    29be:	81 33       	cpi	r24, 0x31	; 49
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <main+0x56a>
    29c2:	44 c0       	rjmp	.+136    	; 0x2a4c <main+0x5f2>
					{
						/* Set the Morse code pattern and speed */
						cli();
    29c4:	f8 94       	cli
						BOOL repeat = TRUE;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	8e a7       	std	Y+46, r24	; 0x2e
						makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    29ca:	ce 01       	movw	r24, r28
    29cc:	8e 96       	adiw	r24, 0x2e	; 46
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	50 e0       	ldi	r21, 0x00	; 0
    29d2:	bc 01       	movw	r22, r24
    29d4:	8b eb       	ldi	r24, 0xBB	; 187
    29d6:	96 e0       	ldi	r25, 0x06	; 6
    29d8:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <makeMorse>
						g_code_throttle = throttleValue(g_pattern_codespeed);
    29dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    29e0:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <throttleValue>
    29e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_code_throttle+0x1>
    29e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_code_throttle>
						sei();
    29ec:	78 94       	sei
						g_event_finish_time = 999999999; // run for a long long time
    29ee:	8f ef       	ldi	r24, 0xFF	; 255
    29f0:	99 ec       	ldi	r25, 0xC9	; 201
    29f2:	aa e9       	ldi	r26, 0x9A	; 154
    29f4:	bb e3       	ldi	r27, 0x3B	; 59
    29f6:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <g_event_finish_time>
    29fa:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <g_event_finish_time+0x1>
    29fe:	a0 93 ed 06 	sts	0x06ED, r26	; 0x8006ed <g_event_finish_time+0x2>
    2a02:	b0 93 ee 06 	sts	0x06EE, r27	; 0x8006ee <g_event_finish_time+0x3>
						g_on_air_seconds = 9999; // on period is very long
    2a06:	8f e0       	ldi	r24, 0x0F	; 15
    2a08:	97 e2       	ldi	r25, 0x27	; 39
    2a0a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_on_air_seconds+0x1>
    2a0e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_on_air_seconds>
						g_off_air_seconds = 0; // off period is very short
    2a12:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <g_off_air_seconds+0x1>
    2a16:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <g_off_air_seconds>
						g_on_the_air = 9999; //  start out transmitting
    2a1a:	8f e0       	ldi	r24, 0x0F	; 15
    2a1c:	97 e2       	ldi	r25, 0x27	; 39
    2a1e:	a0 e0       	ldi	r26, 0x00	; 0
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    2a26:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    2a2a:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    2a2e:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
						g_time_to_send_ID_countdown = 9999; // wait a long time to send the ID
    2a32:	8f e0       	ldi	r24, 0x0F	; 15
    2a34:	97 e2       	ldi	r25, 0x27	; 39
    2a36:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <g_time_to_send_ID_countdown+0x1>
    2a3a:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <g_time_to_send_ID_countdown>
						g_event_commenced = TRUE; // get things running immediately
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <g_event_commenced>
						g_event_enabled = TRUE; // get things running immediately
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <g_event_enabled>
							wdt_init(WD_HW_RESETS);
							ds3231_1s_sqw(ON);
						}
					}
				}
				break;
    2a4a:	ee c5       	rjmp	.+3036   	; 0x3628 <main+0x11ce>
						g_event_commenced = TRUE; // get things running immediately
						g_event_enabled = TRUE; // get things running immediately
					}
					else
					{
						g_on_the_air = 0; //  stop transmitting
    2a4c:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <g_on_the_air>
    2a50:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <g_on_the_air+0x1>
    2a54:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <g_on_the_air+0x2>
    2a58:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <g_on_the_air+0x3>
						g_event_commenced = FALSE; // get things stopped immediately
    2a5c:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <g_event_commenced>
						g_event_enabled = FALSE; // get things stopped immediately
    2a60:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <g_event_enabled>
						keyTransmitter(OFF);
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	0e 94 28 23 	call	0x4650	; 0x4650 <keyTransmitter>
						powerToTransmitter(OFF);
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	0e 94 e7 22 	call	0x45ce	; 0x45ce <powerToTransmitter>
						if(lb_buff->fields[FIELD1][0] == '0')
    2a70:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a72:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a74:	fc 01       	movw	r30, r24
    2a76:	83 81       	ldd	r24, Z+3	; 0x03
    2a78:	80 33       	cpi	r24, 0x30	; 48
    2a7a:	49 f4       	brne	.+18     	; 0x2a8e <main+0x634>
						{
							ds3231_1s_sqw(OFF);
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	0e 94 66 29 	call	0x52cc	; 0x52cc <ds3231_1s_sqw>
							wdt_init(WD_DISABLE);
    2a82:	83 e0       	ldi	r24, 0x03	; 3
    2a84:	0e 94 49 07 	call	0xe92	; 0xe92 <wdt_init>
							set_ports(POWER_SLEEP);	
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	77 dc       	rcall	.-1810   	; 0x237a <set_ports>
							wdt_init(WD_HW_RESETS);
							ds3231_1s_sqw(ON);
						}
					}
				}
				break;
    2a8c:	cd c5       	rjmp	.+2970   	; 0x3628 <main+0x11ce>
						{
							ds3231_1s_sqw(OFF);
							wdt_init(WD_DISABLE);
							set_ports(POWER_SLEEP);	
						}
						else if(lb_buff->fields[FIELD1][0] == '+')
    2a8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a90:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a92:	fc 01       	movw	r30, r24
    2a94:	83 81       	ldd	r24, Z+3	; 0x03
    2a96:	8b 32       	cpi	r24, 0x2B	; 43
    2a98:	09 f0       	breq	.+2      	; 0x2a9c <main+0x642>
						{
							set_ports(POWER_UP);
    2a9a:	c6 c5       	rjmp	.+2956   	; 0x3628 <main+0x11ce>
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	6d dc       	rcall	.-1830   	; 0x237a <set_ports>
							wdt_init(WD_HW_RESETS);
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	0e 94 49 07 	call	0xe92	; 0xe92 <wdt_init>
							ds3231_1s_sqw(ON);
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	0e 94 66 29 	call	0x52cc	; 0x52cc <ds3231_1s_sqw>
						}
					}
				}
				break;
    2aac:	bd c5       	rjmp	.+2938   	; 0x3628 <main+0x11ce>
				
				case MESSAGE_TIME:
				{
					time_t mtime = 0;
    2aae:	1a 82       	std	Y+2, r1	; 0x02
    2ab0:	1b 82       	std	Y+3, r1	; 0x03
    2ab2:	1c 82       	std	Y+4, r1	; 0x04
    2ab4:	1d 82       	std	Y+5, r1	; 0x05
					
					if(lb_buff->fields[FIELD1][0] == 'S')
    2ab6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ab8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aba:	fc 01       	movw	r30, r24
    2abc:	83 81       	ldd	r24, Z+3	; 0x03
    2abe:	83 35       	cpi	r24, 0x53	; 83
    2ac0:	11 f5       	brne	.+68     	; 0x2b06 <main+0x6ac>
					{
						if(lb_buff->fields[FIELD2][0])
    2ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ac4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	80 8d       	ldd	r24, Z+24	; 0x18
    2aca:	88 23       	and	r24, r24
    2acc:	59 f0       	breq	.+22     	; 0x2ae4 <main+0x68a>
						{
							mtime = atol(lb_buff->fields[FIELD2]);
    2ace:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ad0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ad2:	48 96       	adiw	r24, 0x18	; 24
    2ad4:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	8a 83       	std	Y+2, r24	; 0x02
    2ade:	9b 83       	std	Y+3, r25	; 0x03
    2ae0:	ac 83       	std	Y+4, r26	; 0x04
    2ae2:	bd 83       	std	Y+5, r27	; 0x05
						}
		
						if(mtime) 
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae8:	ac 81       	ldd	r26, Y+4	; 0x04
    2aea:	bd 81       	ldd	r27, Y+5	; 0x05
    2aec:	89 2b       	or	r24, r25
    2aee:	8a 2b       	or	r24, r26
    2af0:	8b 2b       	or	r24, r27
    2af2:	09 f4       	brne	.+2      	; 0x2af6 <main+0x69c>
						{							
							initializeTxWithSettings(mtime);
    2af4:	61 c0       	rjmp	.+194    	; 0x2bb8 <main+0x75e>
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	9b 81       	ldd	r25, Y+3	; 0x03
    2afa:	ac 81       	ldd	r26, Y+4	; 0x04
    2afc:	bd 81       	ldd	r27, Y+5	; 0x05
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	c4 d5       	rcall	.+2952   	; 0x368c <initializeTxWithSettings>
    2b04:	59 c0       	rjmp	.+178    	; 0x2bb8 <main+0x75e>
						}
					}
					else if(lb_buff->fields[FIELD1][0] == 'F')
    2b06:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b08:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	83 81       	ldd	r24, Z+3	; 0x03
    2b0e:	86 34       	cpi	r24, 0x46	; 70
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <main+0x6ba>
    2b12:	52 c0       	rjmp	.+164    	; 0x2bb8 <main+0x75e>
					{
						if(lb_buff->fields[FIELD2][0])
    2b14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b16:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b18:	fc 01       	movw	r30, r24
    2b1a:	80 8d       	ldd	r24, Z+24	; 0x18
    2b1c:	88 23       	and	r24, r24
    2b1e:	59 f0       	breq	.+22     	; 0x2b36 <main+0x6dc>
						{
							mtime = atol(lb_buff->fields[FIELD2]);
    2b20:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b22:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b24:	48 96       	adiw	r24, 0x18	; 24
    2b26:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	8a 83       	std	Y+2, r24	; 0x02
    2b30:	9b 83       	std	Y+3, r25	; 0x03
    2b32:	ac 83       	std	Y+4, r26	; 0x04
    2b34:	bd 83       	std	Y+5, r27	; 0x05
						}
						
						if(mtime) g_event_finish_time = mtime;
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3a:	ac 81       	ldd	r26, Y+4	; 0x04
    2b3c:	bd 81       	ldd	r27, Y+5	; 0x05
    2b3e:	89 2b       	or	r24, r25
    2b40:	8a 2b       	or	r24, r26
    2b42:	8b 2b       	or	r24, r27
    2b44:	61 f0       	breq	.+24     	; 0x2b5e <main+0x704>
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4a:	ac 81       	ldd	r26, Y+4	; 0x04
    2b4c:	bd 81       	ldd	r27, Y+5	; 0x05
    2b4e:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <g_event_finish_time>
    2b52:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <g_event_finish_time+0x1>
    2b56:	a0 93 ed 06 	sts	0x06ED, r26	; 0x8006ed <g_event_finish_time+0x2>
    2b5a:	b0 93 ee 06 	sts	0x06EE, r27	; 0x8006ee <g_event_finish_time+0x3>
						
						cli();
    2b5e:	f8 94       	cli
						g_event_enabled = FALSE;  // enabled when starttime is set
    2b60:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <g_event_enabled>
						g_event_commenced = FALSE; // commences when starttime is reached
    2b64:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <g_event_commenced>
						g_on_the_air = 0; // turn off all transmissions
    2b68:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <g_on_the_air>
    2b6c:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <g_on_the_air+0x1>
    2b70:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <g_on_the_air+0x2>
    2b74:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <g_on_the_air+0x3>
						sei();
    2b78:	78 94       	sei
						g_event_start_time = 0;
    2b7a:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <g_event_start_time>
    2b7e:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <g_event_start_time+0x1>
    2b82:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <g_event_start_time+0x2>
    2b86:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <g_event_start_time+0x3>
						g_on_air_seconds = 0;
    2b8a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <g_on_air_seconds+0x1>
    2b8e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <g_on_air_seconds>
						g_off_air_seconds = 0;
    2b92:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <g_off_air_seconds+0x1>
    2b96:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <g_off_air_seconds>
						g_intra_cycle_delay_time = 0;
    2b9a:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    2b9e:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <g_intra_cycle_delay_time>
						g_messages_text[PATTERN_TEXT][0] = '\0';
    2ba2:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <g_messages_text>
						g_pattern_codespeed = 0;
    2ba6:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <g_pattern_codespeed>
						g_ID_time = 0;
    2baa:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <g_ID_time+0x1>
    2bae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <g_ID_time>
						
						keyTransmitter(OFF);
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	0e 94 28 23 	call	0x4650	; 0x4650 <keyTransmitter>
					}
						
					if(mtime)
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbc:	ac 81       	ldd	r26, Y+4	; 0x04
    2bbe:	bd 81       	ldd	r27, Y+5	; 0x05
    2bc0:	89 2b       	or	r24, r25
    2bc2:	8a 2b       	or	r24, r26
    2bc4:	8b 2b       	or	r24, r27
					{
						saveAllEEPROM(); 
    2bc6:	11 f0       	breq	.+4      	; 0x2bcc <main+0x772>
    2bc8:	b7 d7       	rcall	.+3950   	; 0x3b38 <saveAllEEPROM>
					else if(g_terminal_mode)
					{
						lb_send_string("Usage: SF F|S epoch\n");
					}
				}
				break;
    2bca:	30 c5       	rjmp	.+2656   	; 0x362c <main+0x11d2>
						
					if(mtime)
					{
						saveAllEEPROM(); 
					}
					else if(g_terminal_mode)
    2bcc:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    2bd0:	88 23       	and	r24, r24
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <main+0x77c>
    2bd4:	2b c5       	rjmp	.+2646   	; 0x362c <main+0x11d2>
					{
						lb_send_string("Usage: SF F|S epoch\n");
    2bd6:	85 ed       	ldi	r24, 0xD5	; 213
    2bd8:	94 e0       	ldi	r25, 0x04	; 4
    2bda:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
					}
				}
				break;
    2bde:	26 c5       	rjmp	.+2636   	; 0x362c <main+0x11d2>
				
				case MESSAGE_CLOCK:
				{
					if(g_terminal_mode)
    2be0:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    2be4:	88 23       	and	r24, r24
    2be6:	09 f4       	brne	.+2      	; 0x2bea <main+0x790>
    2be8:	96 c0       	rjmp	.+300    	; 0x2d16 <main+0x8bc>
					{
						if(lb_buff->fields[FIELD1][0])
    2bea:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bec:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bee:	fc 01       	movw	r30, r24
    2bf0:	83 81       	ldd	r24, Z+3	; 0x03
    2bf2:	88 23       	and	r24, r24
    2bf4:	01 f1       	breq	.+64     	; 0x2c36 <main+0x7dc>
						{ /* Expected format:  2018-03-23T18:00:00 */
							if((lb_buff->fields[FIELD1][13] == ':') && (lb_buff->fields[FIELD1][16] == ':'))
    2bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	80 89       	ldd	r24, Z+16	; 0x10
    2bfe:	8a 33       	cpi	r24, 0x3A	; 58
    2c00:	41 f5       	brne	.+80     	; 0x2c52 <main+0x7f8>
    2c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c06:	fc 01       	movw	r30, r24
    2c08:	83 89       	ldd	r24, Z+19	; 0x13
    2c0a:	8a 33       	cpi	r24, 0x3A	; 58
    2c0c:	11 f5       	brne	.+68     	; 0x2c52 <main+0x7f8>
							{
								strncpy(g_tempStr, lb_buff->fields[FIELD1], 20);
    2c0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c10:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c12:	03 96       	adiw	r24, 0x03	; 3
    2c14:	44 e1       	ldi	r20, 0x14	; 20
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	bc 01       	movw	r22, r24
    2c1a:	84 e9       	ldi	r24, 0x94	; 148
    2c1c:	96 e0       	ldi	r25, 0x06	; 6
    2c1e:	0e 94 26 38 	call	0x704c	; 0x704c <strncpy>
								#ifdef INCLUDE_DS3231_SUPPORT
								ds3231_set_date_time(g_tempStr, RTC_CLOCK);
    2c22:	60 e0       	ldi	r22, 0x00	; 0
    2c24:	84 e9       	ldi	r24, 0x94	; 148
    2c26:	96 e0       	ldi	r25, 0x06	; 6
    2c28:	0e 94 4d 28 	call	0x509a	; 0x509a <ds3231_set_date_time>
								#endif
								initializeTxWithSettings(0);
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	cb 01       	movw	r24, r22
    2c32:	2c d5       	rcall	.+2648   	; 0x368c <initializeTxWithSettings>
    2c34:	0e c0       	rjmp	.+28     	; 0x2c52 <main+0x7f8>
							}
						}
						else
						{
							g_tx_epoch_time = ds3231_get_epoch(NULL);
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <ds3231_get_epoch>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <g_tx_epoch_time>
    2c46:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <g_tx_epoch_time+0x1>
    2c4a:	a0 93 b8 06 	sts	0x06B8, r26	; 0x8006b8 <g_tx_epoch_time+0x2>
    2c4e:	b0 93 b9 06 	sts	0x06B9, r27	; 0x8006b9 <g_tx_epoch_time+0x3>
						}
						
						g_temp_time = time(NULL);
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	0e 94 ef 36 	call	0x6dde	; 0x6dde <time>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    2c62:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    2c66:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    2c6a:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
						
						if(g_temp_time != g_tx_epoch_time)
    2c6e:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
    2c72:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    2c76:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    2c7a:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    2c7e:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2c82:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2c86:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2c8a:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    2c8e:	28 17       	cp	r18, r24
    2c90:	39 07       	cpc	r19, r25
    2c92:	4a 07       	cpc	r20, r26
    2c94:	5b 07       	cpc	r21, r27
    2c96:	81 f0       	breq	.+32     	; 0x2cb8 <main+0x85e>
						{
							g_temp_time = g_tx_epoch_time;
    2c98:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2c9c:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2ca0:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2ca4:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    2ca8:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    2cac:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    2cb0:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    2cb4:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
						}
						
						sprintf(g_tempStr, "%lu", g_temp_time);
    2cb8:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <g_temp_time>
    2cbc:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    2cc0:	a0 91 b4 06 	lds	r26, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    2cc4:	b0 91 b5 06 	lds	r27, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    2cc8:	2b 2f       	mov	r18, r27
    2cca:	2f 93       	push	r18
    2ccc:	2a 2f       	mov	r18, r26
    2cce:	2f 93       	push	r18
    2cd0:	29 2f       	mov	r18, r25
    2cd2:	2f 93       	push	r18
    2cd4:	8f 93       	push	r24
    2cd6:	8f ea       	ldi	r24, 0xAF	; 175
    2cd8:	94 e0       	ldi	r25, 0x04	; 4
    2cda:	89 2f       	mov	r24, r25
    2cdc:	8f 93       	push	r24
    2cde:	8f ea       	ldi	r24, 0xAF	; 175
    2ce0:	94 e0       	ldi	r25, 0x04	; 4
    2ce2:	8f 93       	push	r24
    2ce4:	84 e9       	ldi	r24, 0x94	; 148
    2ce6:	96 e0       	ldi	r25, 0x06	; 6
    2ce8:	89 2f       	mov	r24, r25
    2cea:	8f 93       	push	r24
    2cec:	84 e9       	ldi	r24, 0x94	; 148
    2cee:	96 e0       	ldi	r25, 0x06	; 6
    2cf0:	8f 93       	push	r24
    2cf2:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
    2cf6:	8d b7       	in	r24, 0x3d	; 61
    2cf8:	9e b7       	in	r25, 0x3e	; 62
    2cfa:	08 96       	adiw	r24, 0x08	; 8
    2cfc:	0f b6       	in	r0, 0x3f	; 63
    2cfe:	f8 94       	cli
    2d00:	de bf       	out	0x3e, r29	; 62
    2d02:	0f be       	out	0x3f, r0	; 63
    2d04:	cd bf       	out	0x3d, r28	; 61
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    2d06:	44 e9       	ldi	r20, 0x94	; 148
    2d08:	56 e0       	ldi	r21, 0x06	; 6
    2d0a:	63 eb       	ldi	r22, 0xB3	; 179
    2d0c:	74 e0       	ldi	r23, 0x04	; 4
    2d0e:	83 e0       	ldi	r24, 0x03	; 3
    2d10:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lb_send_msg>
							lastTime = g_temp_time;
						}
						#endif
					}
				}
				break;
    2d14:	8d c4       	rjmp	.+2330   	; 0x3630 <main+0x11d6>
						}
						
						sprintf(g_tempStr, "%lu", g_temp_time);
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
					}
					else if(lb_buff->type == LINKBUS_MSG_COMMAND) // ignore replies since, as the time source, we should never be sending queries anyway
    2d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	80 81       	ld	r24, Z
    2d1e:	81 30       	cpi	r24, 0x01	; 1
    2d20:	09 f0       	breq	.+2      	; 0x2d24 <main+0x8ca>
    2d22:	96 c0       	rjmp	.+300    	; 0x2e50 <main+0x9f6>
					{
						if(lb_buff->fields[FIELD1][0])
    2d24:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d26:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d28:	fc 01       	movw	r30, r24
    2d2a:	83 81       	ldd	r24, Z+3	; 0x03
    2d2c:	88 23       	and	r24, r24
    2d2e:	71 f1       	breq	.+92     	; 0x2d8c <main+0x932>
						{
							strncpy(g_tempStr, lb_buff->fields[FIELD1], 20);
    2d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d32:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d34:	03 96       	adiw	r24, 0x03	; 3
    2d36:	44 e1       	ldi	r20, 0x14	; 20
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	84 e9       	ldi	r24, 0x94	; 148
    2d3e:	96 e0       	ldi	r25, 0x06	; 6
    2d40:	0e 94 26 38 	call	0x704c	; 0x704c <strncpy>
							#ifdef INCLUDE_DS3231_SUPPORT
								ds3231_set_date_time(g_tempStr, RTC_CLOCK);
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	84 e9       	ldi	r24, 0x94	; 148
    2d48:	96 e0       	ldi	r25, 0x06	; 6
    2d4a:	0e 94 4d 28 	call	0x509a	; 0x509a <ds3231_set_date_time>
								g_tx_epoch_time = ds3231_get_epoch(NULL);
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <ds3231_get_epoch>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <g_tx_epoch_time>
    2d5e:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <g_tx_epoch_time+0x1>
    2d62:	a0 93 b8 06 	sts	0x06B8, r26	; 0x8006b8 <g_tx_epoch_time+0x2>
    2d66:	b0 93 b9 06 	sts	0x06B9, r27	; 0x8006b9 <g_tx_epoch_time+0x3>
								set_system_time(g_tx_epoch_time); // update system clock
    2d6a:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2d6e:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2d72:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2d76:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <set_system_time>
							#endif
							initializeTxWithSettings(0);
    2d82:	60 e0       	ldi	r22, 0x00	; 0
    2d84:	70 e0       	ldi	r23, 0x00	; 0
    2d86:	cb 01       	movw	r24, r22
    2d88:	81 d4       	rcall	.+2306   	; 0x368c <initializeTxWithSettings>
							lastTime = g_temp_time;
						}
						#endif
					}
				}
				break;
    2d8a:	52 c4       	rjmp	.+2212   	; 0x3630 <main+0x11d6>
							initializeTxWithSettings(0);
						}
						else
						{
							#ifdef INCLUDE_DS3231_SUPPORT
							g_temp_time = time(NULL);
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 ef 36 	call	0x6dde	; 0x6dde <time>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    2d9c:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    2da0:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    2da4:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
							
							if(g_temp_time != g_tx_epoch_time)
    2da8:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
    2dac:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    2db0:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    2db4:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    2db8:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2dbc:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2dc0:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2dc4:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    2dc8:	28 17       	cp	r18, r24
    2dca:	39 07       	cpc	r19, r25
    2dcc:	4a 07       	cpc	r20, r26
    2dce:	5b 07       	cpc	r21, r27
    2dd0:	81 f0       	breq	.+32     	; 0x2df2 <main+0x998>
							{
								g_temp_time = g_tx_epoch_time;
    2dd2:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2dd6:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2dda:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2dde:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    2de2:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    2de6:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    2dea:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    2dee:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
							}
							
							sprintf(g_tempStr, "%lu", g_tx_epoch_time);
    2df2:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2df6:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2dfa:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2dfe:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    2e02:	2b 2f       	mov	r18, r27
    2e04:	2f 93       	push	r18
    2e06:	2a 2f       	mov	r18, r26
    2e08:	2f 93       	push	r18
    2e0a:	29 2f       	mov	r18, r25
    2e0c:	2f 93       	push	r18
    2e0e:	8f 93       	push	r24
    2e10:	8f ea       	ldi	r24, 0xAF	; 175
    2e12:	94 e0       	ldi	r25, 0x04	; 4
    2e14:	89 2f       	mov	r24, r25
    2e16:	8f 93       	push	r24
    2e18:	8f ea       	ldi	r24, 0xAF	; 175
    2e1a:	94 e0       	ldi	r25, 0x04	; 4
    2e1c:	8f 93       	push	r24
    2e1e:	84 e9       	ldi	r24, 0x94	; 148
    2e20:	96 e0       	ldi	r25, 0x06	; 6
    2e22:	89 2f       	mov	r24, r25
    2e24:	8f 93       	push	r24
    2e26:	84 e9       	ldi	r24, 0x94	; 148
    2e28:	96 e0       	ldi	r25, 0x06	; 6
    2e2a:	8f 93       	push	r24
    2e2c:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
    2e30:	8d b7       	in	r24, 0x3d	; 61
    2e32:	9e b7       	in	r25, 0x3e	; 62
    2e34:	08 96       	adiw	r24, 0x08	; 8
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
							lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    2e40:	44 e9       	ldi	r20, 0x94	; 148
    2e42:	56 e0       	ldi	r21, 0x06	; 6
    2e44:	63 eb       	ldi	r22, 0xB3	; 179
    2e46:	74 e0       	ldi	r23, 0x04	; 4
    2e48:	83 e0       	ldi	r24, 0x03	; 3
    2e4a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lb_send_msg>
							lastTime = g_temp_time;
						}
						#endif
					}
				}
				break;
    2e4e:	f0 c3       	rjmp	.+2016   	; 0x3630 <main+0x11d6>
							sprintf(g_tempStr, "%lu", g_tx_epoch_time);
							lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
							#endif
						}
					}
					else if(lb_buff->type == LINKBUS_MSG_QUERY)
    2e50:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e52:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e54:	fc 01       	movw	r30, r24
    2e56:	80 81       	ld	r24, Z
    2e58:	82 30       	cpi	r24, 0x02	; 2
    2e5a:	09 f0       	breq	.+2      	; 0x2e5e <main+0xa04>
    2e5c:	e9 c3       	rjmp	.+2002   	; 0x3630 <main+0x11d6>
					{
						static volatile int32_t lastTime = 0;
						
						#ifdef INCLUDE_DS3231_SUPPORT	
						
						g_temp_time	 = time(NULL);
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	0e 94 ef 36 	call	0x6dde	; 0x6dde <time>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    2e6e:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    2e72:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    2e76:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
						
						if(g_temp_time != g_tx_epoch_time)
    2e7a:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
    2e7e:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    2e82:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    2e86:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    2e8a:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2e8e:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2e92:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2e96:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    2e9a:	28 17       	cp	r18, r24
    2e9c:	39 07       	cpc	r19, r25
    2e9e:	4a 07       	cpc	r20, r26
    2ea0:	5b 07       	cpc	r21, r27
    2ea2:	81 f0       	breq	.+32     	; 0x2ec4 <main+0xa6a>
						{
							g_temp_time = g_tx_epoch_time;
    2ea4:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    2ea8:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    2eac:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    2eb0:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    2eb4:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    2eb8:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    2ebc:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    2ec0:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
						}						
						
						if(g_temp_time != lastTime)
    2ec4:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <g_temp_time>
    2ec8:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    2ecc:	a0 91 b4 06 	lds	r26, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    2ed0:	b0 91 b5 06 	lds	r27, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    2ed4:	20 91 34 07 	lds	r18, 0x0734	; 0x800734 <lastTime.3327>
    2ed8:	30 91 35 07 	lds	r19, 0x0735	; 0x800735 <lastTime.3327+0x1>
    2edc:	40 91 36 07 	lds	r20, 0x0736	; 0x800736 <lastTime.3327+0x2>
    2ee0:	50 91 37 07 	lds	r21, 0x0737	; 0x800737 <lastTime.3327+0x3>
    2ee4:	82 17       	cp	r24, r18
    2ee6:	93 07       	cpc	r25, r19
    2ee8:	a4 07       	cpc	r26, r20
    2eea:	b5 07       	cpc	r27, r21
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <main+0xa96>
    2eee:	a0 c3       	rjmp	.+1856   	; 0x3630 <main+0x11d6>
						{
							sprintf(g_tempStr, "%lu", g_temp_time);
    2ef0:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <g_temp_time>
    2ef4:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    2ef8:	a0 91 b4 06 	lds	r26, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    2efc:	b0 91 b5 06 	lds	r27, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    2f00:	2b 2f       	mov	r18, r27
    2f02:	2f 93       	push	r18
    2f04:	2a 2f       	mov	r18, r26
    2f06:	2f 93       	push	r18
    2f08:	29 2f       	mov	r18, r25
    2f0a:	2f 93       	push	r18
    2f0c:	8f 93       	push	r24
    2f0e:	8f ea       	ldi	r24, 0xAF	; 175
    2f10:	94 e0       	ldi	r25, 0x04	; 4
    2f12:	89 2f       	mov	r24, r25
    2f14:	8f 93       	push	r24
    2f16:	8f ea       	ldi	r24, 0xAF	; 175
    2f18:	94 e0       	ldi	r25, 0x04	; 4
    2f1a:	8f 93       	push	r24
    2f1c:	84 e9       	ldi	r24, 0x94	; 148
    2f1e:	96 e0       	ldi	r25, 0x06	; 6
    2f20:	89 2f       	mov	r24, r25
    2f22:	8f 93       	push	r24
    2f24:	84 e9       	ldi	r24, 0x94	; 148
    2f26:	96 e0       	ldi	r25, 0x06	; 6
    2f28:	8f 93       	push	r24
    2f2a:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
    2f2e:	8d b7       	in	r24, 0x3d	; 61
    2f30:	9e b7       	in	r25, 0x3e	; 62
    2f32:	08 96       	adiw	r24, 0x08	; 8
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
							lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    2f3e:	44 e9       	ldi	r20, 0x94	; 148
    2f40:	56 e0       	ldi	r21, 0x06	; 6
    2f42:	63 eb       	ldi	r22, 0xB3	; 179
    2f44:	74 e0       	ldi	r23, 0x04	; 4
    2f46:	83 e0       	ldi	r24, 0x03	; 3
    2f48:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lb_send_msg>
							lastTime = g_temp_time;
    2f4c:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <g_temp_time>
    2f50:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    2f54:	a0 91 b4 06 	lds	r26, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    2f58:	b0 91 b5 06 	lds	r27, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    2f5c:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <lastTime.3327>
    2f60:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <lastTime.3327+0x1>
    2f64:	a0 93 36 07 	sts	0x0736, r26	; 0x800736 <lastTime.3327+0x2>
    2f68:	b0 93 37 07 	sts	0x0737, r27	; 0x800737 <lastTime.3327+0x3>
						}
						#endif
					}
				}
				break;
    2f6c:	61 c3       	rjmp	.+1730   	; 0x3630 <main+0x11d6>
				
				case MESSAGE_SET_STATION_ID:
				{
					if(lb_buff->fields[FIELD1][0])
    2f6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f70:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f72:	fc 01       	movw	r30, r24
    2f74:	83 81       	ldd	r24, Z+3	; 0x03
    2f76:	88 23       	and	r24, r24
					{
						strncpy(g_messages_text[STATION_ID], lb_buff->fields[FIELD1], MAX_PATTERN_TEXT_LENGTH);
    2f78:	71 f1       	breq	.+92     	; 0x2fd6 <main+0xb7c>
    2f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f7e:	03 96       	adiw	r24, 0x03	; 3
    2f80:	44 e1       	ldi	r20, 0x14	; 20
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	bc 01       	movw	r22, r24
    2f86:	8f ec       	ldi	r24, 0xCF	; 207
    2f88:	96 e0       	ldi	r25, 0x06	; 6
    2f8a:	0e 94 26 38 	call	0x704c	; 0x704c <strncpy>
						saveAllEEPROM(); 
						
						if(g_messages_text[STATION_ID][0])
    2f8e:	d4 d5       	rcall	.+2984   	; 0x3b38 <saveAllEEPROM>
    2f90:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <g_messages_text+0x14>
    2f94:	88 23       	and	r24, r24
						{
							g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    2f96:	f9 f0       	breq	.+62     	; 0x2fd6 <main+0xb7c>
    2f98:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_id_codespeed>
    2f9c:	88 2f       	mov	r24, r24
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	8f ec       	ldi	r24, 0xCF	; 207
    2fa4:	96 e0       	ldi	r25, 0x06	; 6
    2fa6:	cc d7       	rcall	.+3992   	; 0x3f40 <timeRequiredToSendStrAtWPM>
    2fa8:	8c 50       	subi	r24, 0x0C	; 12
    2faa:	9e 4f       	sbci	r25, 0xFE	; 254
    2fac:	96 95       	lsr	r25
    2fae:	87 95       	ror	r24
    2fb0:	96 95       	lsr	r25
    2fb2:	87 95       	ror	r24
    2fb4:	96 95       	lsr	r25
    2fb6:	87 95       	ror	r24
    2fb8:	9c 01       	movw	r18, r24
    2fba:	a5 ec       	ldi	r26, 0xC5	; 197
    2fbc:	b0 e2       	ldi	r27, 0x20	; 32
    2fbe:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <__umulhisi3>
    2fc2:	92 95       	swap	r25
    2fc4:	82 95       	swap	r24
    2fc6:	8f 70       	andi	r24, 0x0F	; 15
    2fc8:	89 27       	eor	r24, r25
    2fca:	9f 70       	andi	r25, 0x0F	; 15
    2fcc:	89 27       	eor	r24, r25
    2fce:	90 93 e4 06 	sts	0x06E4, r25	; 0x8006e4 <g_time_needed_for_ID+0x1>
    2fd2:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <g_time_needed_for_ID>
						}
					}
					
					if(g_terminal_mode)  {
    2fd6:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    2fda:	88 23       	and	r24, r24
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <main+0xb86>
    2fde:	2a c3       	rjmp	.+1620   	; 0x3634 <main+0x11da>
						lb_send_string(g_messages_text[STATION_ID]);
    2fe0:	8f ec       	ldi	r24, 0xCF	; 207
    2fe2:	96 e0       	ldi	r25, 0x06	; 6
    2fe4:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
						lb_send_string("\n");
    2fe8:	81 ef       	ldi	r24, 0xF1	; 241
    2fea:	94 e0       	ldi	r25, 0x04	; 4
    2fec:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
                    }
				}
				break;
    2ff0:	21 c3       	rjmp	.+1602   	; 0x3634 <main+0x11da>
				
				case MESSAGE_CODE_SPEED:
				{
					uint8_t speed = g_pattern_codespeed;
    2ff2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    2ff6:	8e 83       	std	Y+6, r24	; 0x06
					
					if(lb_buff->fields[FIELD1][0] == 'I')
    2ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ffa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	83 81       	ldd	r24, Z+3	; 0x03
    3000:	89 34       	cpi	r24, 0x49	; 73
    3002:	09 f0       	breq	.+2      	; 0x3006 <main+0xbac>
    3004:	59 c0       	rjmp	.+178    	; 0x30b8 <main+0xc5e>
					{
						if(lb_buff->fields[FIELD2][0])
    3006:	8a 85       	ldd	r24, Y+10	; 0x0a
    3008:	9b 85       	ldd	r25, Y+11	; 0x0b
    300a:	fc 01       	movw	r30, r24
    300c:	80 8d       	ldd	r24, Z+24	; 0x18
    300e:	88 23       	and	r24, r24
    3010:	09 f4       	brne	.+2      	; 0x3014 <main+0xbba>
    3012:	4e c0       	rjmp	.+156    	; 0x30b0 <main+0xc56>
						{
							speed = atol(lb_buff->fields[FIELD2]);
    3014:	8a 85       	ldd	r24, Y+10	; 0x0a
    3016:	9b 85       	ldd	r25, Y+11	; 0x0b
    3018:	48 96       	adiw	r24, 0x18	; 24
    301a:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8e 83       	std	Y+6, r24	; 0x06
							g_id_codespeed = CLAMP(5, speed, 20);
    3024:	8e 81       	ldd	r24, Y+6	; 0x06
    3026:	88 8f       	std	Y+24, r24	; 0x18
    3028:	85 e0       	ldi	r24, 0x05	; 5
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9a 8f       	std	Y+26, r25	; 0x1a
    302e:	89 8f       	std	Y+25, r24	; 0x19
    3030:	84 e1       	ldi	r24, 0x14	; 20
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9c 8f       	std	Y+28, r25	; 0x1c
    3036:	8b 8f       	std	Y+27, r24	; 0x1b
    3038:	88 8d       	ldd	r24, Y+24	; 0x18
    303a:	28 2f       	mov	r18, r24
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3042:	82 17       	cp	r24, r18
    3044:	93 07       	cpc	r25, r19
    3046:	54 f0       	brlt	.+20     	; 0x305c <main+0xc02>
    3048:	88 8d       	ldd	r24, Y+24	; 0x18
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	29 8d       	ldd	r18, Y+25	; 0x19
    3050:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3052:	82 17       	cp	r24, r18
    3054:	93 07       	cpc	r25, r19
    3056:	24 f4       	brge	.+8      	; 0x3060 <main+0xc06>
    3058:	c9 01       	movw	r24, r18
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <main+0xc06>
    305c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    305e:	9c 8d       	ldd	r25, Y+28	; 0x1c
							saveAllEEPROM(); 
    3060:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_id_codespeed>
							if(g_messages_text[STATION_ID][0])
    3064:	69 d5       	rcall	.+2770   	; 0x3b38 <saveAllEEPROM>
    3066:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <g_messages_text+0x14>
    306a:	88 23       	and	r24, r24
    306c:	09 f4       	brne	.+2      	; 0x3070 <main+0xc16>
							{
								g_time_needed_for_ID = (500 + timeRequiredToSendStrAtWPM(g_messages_text[STATION_ID], g_id_codespeed)) / 1000;
    306e:	73 c0       	rjmp	.+230    	; 0x3156 <main+0xcfc>
    3070:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_id_codespeed>
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	bc 01       	movw	r22, r24
    307a:	8f ec       	ldi	r24, 0xCF	; 207
    307c:	96 e0       	ldi	r25, 0x06	; 6
    307e:	60 d7       	rcall	.+3776   	; 0x3f40 <timeRequiredToSendStrAtWPM>
    3080:	8c 50       	subi	r24, 0x0C	; 12
    3082:	9e 4f       	sbci	r25, 0xFE	; 254
    3084:	96 95       	lsr	r25
    3086:	87 95       	ror	r24
    3088:	96 95       	lsr	r25
    308a:	87 95       	ror	r24
    308c:	96 95       	lsr	r25
    308e:	87 95       	ror	r24
    3090:	9c 01       	movw	r18, r24
    3092:	a5 ec       	ldi	r26, 0xC5	; 197
    3094:	b0 e2       	ldi	r27, 0x20	; 32
    3096:	0e 94 ab 37 	call	0x6f56	; 0x6f56 <__umulhisi3>
    309a:	92 95       	swap	r25
    309c:	82 95       	swap	r24
    309e:	8f 70       	andi	r24, 0x0F	; 15
    30a0:	89 27       	eor	r24, r25
    30a2:	9f 70       	andi	r25, 0x0F	; 15
    30a4:	89 27       	eor	r24, r25
    30a6:	90 93 e4 06 	sts	0x06E4, r25	; 0x8006e4 <g_time_needed_for_ID+0x1>
    30aa:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <g_time_needed_for_ID>
    30ae:	53 c0       	rjmp	.+166    	; 0x3156 <main+0xcfc>
							}
						}
						else
						{
							speed = g_id_codespeed;
    30b0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_id_codespeed>
    30b4:	8e 83       	std	Y+6, r24	; 0x06
    30b6:	4f c0       	rjmp	.+158    	; 0x3156 <main+0xcfc>
						}
						
					}
					else if(lb_buff->fields[FIELD1][0] == 'P')
    30b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    30ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    30bc:	fc 01       	movw	r30, r24
    30be:	83 81       	ldd	r24, Z+3	; 0x03
    30c0:	80 35       	cpi	r24, 0x50	; 80
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <main+0xc6c>
    30c4:	48 c0       	rjmp	.+144    	; 0x3156 <main+0xcfc>
					{
						if(lb_buff->fields[FIELD2][0]) 
    30c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30ca:	fc 01       	movw	r30, r24
    30cc:	80 8d       	ldd	r24, Z+24	; 0x18
    30ce:	88 23       	and	r24, r24
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <main+0xc7a>
    30d2:	3e c0       	rjmp	.+124    	; 0x3150 <main+0xcf6>
						{
							speed = atol(lb_buff->fields[FIELD2]);
    30d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    30d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    30d8:	48 96       	adiw	r24, 0x18	; 24
    30da:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	8e 83       	std	Y+6, r24	; 0x06
							g_pattern_codespeed = CLAMP(5, speed, 20);
    30e4:	8e 81       	ldd	r24, Y+6	; 0x06
    30e6:	8d 8f       	std	Y+29, r24	; 0x1d
    30e8:	85 e0       	ldi	r24, 0x05	; 5
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	9f 8f       	std	Y+31, r25	; 0x1f
    30ee:	8e 8f       	std	Y+30, r24	; 0x1e
    30f0:	84 e1       	ldi	r24, 0x14	; 20
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	99 a3       	std	Y+33, r25	; 0x21
    30f6:	88 a3       	std	Y+32, r24	; 0x20
    30f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	88 a1       	ldd	r24, Y+32	; 0x20
    3100:	99 a1       	ldd	r25, Y+33	; 0x21
    3102:	82 17       	cp	r24, r18
    3104:	93 07       	cpc	r25, r19
    3106:	54 f0       	brlt	.+20     	; 0x311c <main+0xcc2>
    3108:	8d 8d       	ldd	r24, Y+29	; 0x1d
    310a:	88 2f       	mov	r24, r24
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3110:	3f 8d       	ldd	r19, Y+31	; 0x1f
    3112:	82 17       	cp	r24, r18
    3114:	93 07       	cpc	r25, r19
    3116:	24 f4       	brge	.+8      	; 0x3120 <main+0xcc6>
    3118:	c9 01       	movw	r24, r18
    311a:	02 c0       	rjmp	.+4      	; 0x3120 <main+0xcc6>
    311c:	88 a1       	ldd	r24, Y+32	; 0x20
    311e:	99 a1       	ldd	r25, Y+33	; 0x21
    3120:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_pattern_codespeed>
							saveAllEEPROM();
    3124:	09 d5       	rcall	.+2578   	; 0x3b38 <saveAllEEPROM>
							g_code_throttle = (7042 / g_pattern_codespeed) / 10;
    3126:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    312a:	28 2f       	mov	r18, r24
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	82 e8       	ldi	r24, 0x82	; 130
    3130:	9b e1       	ldi	r25, 0x1B	; 27
    3132:	b9 01       	movw	r22, r18
    3134:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <__divmodhi4>
    3138:	cb 01       	movw	r24, r22
    313a:	2a e0       	ldi	r18, 0x0A	; 10
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	b9 01       	movw	r22, r18
    3140:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <__divmodhi4>
    3144:	cb 01       	movw	r24, r22
    3146:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_code_throttle+0x1>
    314a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_code_throttle>
    314e:	03 c0       	rjmp	.+6      	; 0x3156 <main+0xcfc>
						}
						else
						{
							speed = g_pattern_codespeed;
    3150:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    3154:	8e 83       	std	Y+6, r24	; 0x06
						}
					}
					
					if(g_terminal_mode)  {
    3156:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    315a:	88 23       	and	r24, r24
    315c:	09 f4       	brne	.+2      	; 0x3160 <main+0xd06>
    315e:	6c c2       	rjmp	.+1240   	; 0x3638 <main+0x11de>
						lb_send_value(speed, "spd");
    3160:	8e 81       	ldd	r24, Y+6	; 0x06
    3162:	88 2f       	mov	r24, r24
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	6a ee       	ldi	r22, 0xEA	; 234
    3168:	74 e0       	ldi	r23, 0x04	; 4
    316a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <lb_send_value>
                    }
				}
				break;
    316e:	64 c2       	rjmp	.+1224   	; 0x3638 <main+0x11de>
				
				case MESSAGE_TIME_INTERVAL:
				{
					uint16_t time = g_on_air_seconds;
    3170:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_on_air_seconds>
    3174:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    3178:	98 87       	std	Y+8, r25	; 0x08
    317a:	8f 83       	std	Y+7, r24	; 0x07
					
					if(lb_buff->fields[FIELD1][0] == '0')
    317c:	8a 85       	ldd	r24, Y+10	; 0x0a
    317e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3180:	fc 01       	movw	r30, r24
    3182:	83 81       	ldd	r24, Z+3	; 0x03
    3184:	80 33       	cpi	r24, 0x30	; 48
    3186:	21 f5       	brne	.+72     	; 0x31d0 <main+0xd76>
					{
						time = g_off_air_seconds;
    3188:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_off_air_seconds>
    318c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_off_air_seconds+0x1>
    3190:	98 87       	std	Y+8, r25	; 0x08
    3192:	8f 83       	std	Y+7, r24	; 0x07
						if(lb_buff->fields[FIELD2][0])
    3194:	8a 85       	ldd	r24, Y+10	; 0x0a
    3196:	9b 85       	ldd	r25, Y+11	; 0x0b
    3198:	fc 01       	movw	r30, r24
    319a:	80 8d       	ldd	r24, Z+24	; 0x18
    319c:	88 23       	and	r24, r24
						{
							time = atol(lb_buff->fields[FIELD2]);
    319e:	89 f0       	breq	.+34     	; 0x31c2 <main+0xd68>
    31a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    31a4:	48 96       	adiw	r24, 0x18	; 24
    31a6:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	98 87       	std	Y+8, r25	; 0x08
							g_off_air_seconds = time;
    31b0:	8f 83       	std	Y+7, r24	; 0x07
    31b2:	8f 81       	ldd	r24, Y+7	; 0x07
    31b4:	98 85       	ldd	r25, Y+8	; 0x08
    31b6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_off_air_seconds+0x1>
    31ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_off_air_seconds>
							saveAllEEPROM(); 
    31be:	bc d4       	rcall	.+2424   	; 0x3b38 <saveAllEEPROM>
    31c0:	72 c0       	rjmp	.+228    	; 0x32a6 <main+0xe4c>
						}
						else
						{
							time = g_off_air_seconds;
    31c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_off_air_seconds>
    31c6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_off_air_seconds+0x1>
    31ca:	98 87       	std	Y+8, r25	; 0x08
    31cc:	8f 83       	std	Y+7, r24	; 0x07
    31ce:	6b c0       	rjmp	.+214    	; 0x32a6 <main+0xe4c>
						}
					}
					else if(lb_buff->fields[FIELD1][0] == '1')
    31d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d4:	fc 01       	movw	r30, r24
    31d6:	83 81       	ldd	r24, Z+3	; 0x03
    31d8:	81 33       	cpi	r24, 0x31	; 49
    31da:	f1 f4       	brne	.+60     	; 0x3218 <main+0xdbe>
					{
						if(lb_buff->fields[FIELD2][0])
    31dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    31de:	9b 85       	ldd	r25, Y+11	; 0x0b
    31e0:	fc 01       	movw	r30, r24
    31e2:	80 8d       	ldd	r24, Z+24	; 0x18
    31e4:	88 23       	and	r24, r24
						{
							time = atol(lb_buff->fields[FIELD2]);
    31e6:	89 f0       	breq	.+34     	; 0x320a <main+0xdb0>
    31e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    31ec:	48 96       	adiw	r24, 0x18	; 24
    31ee:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	98 87       	std	Y+8, r25	; 0x08
							g_on_air_seconds = time;
    31f8:	8f 83       	std	Y+7, r24	; 0x07
    31fa:	8f 81       	ldd	r24, Y+7	; 0x07
    31fc:	98 85       	ldd	r25, Y+8	; 0x08
    31fe:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_on_air_seconds+0x1>
    3202:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_on_air_seconds>
							saveAllEEPROM();
    3206:	98 d4       	rcall	.+2352   	; 0x3b38 <saveAllEEPROM>
    3208:	4e c0       	rjmp	.+156    	; 0x32a6 <main+0xe4c>
						}
						else
						{
							time = g_on_air_seconds;
    320a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_on_air_seconds>
    320e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    3212:	98 87       	std	Y+8, r25	; 0x08
    3214:	8f 83       	std	Y+7, r24	; 0x07
    3216:	47 c0       	rjmp	.+142    	; 0x32a6 <main+0xe4c>
						}
					}
					else if(lb_buff->fields[FIELD1][0] == 'I')
    3218:	8a 85       	ldd	r24, Y+10	; 0x0a
    321a:	9b 85       	ldd	r25, Y+11	; 0x0b
    321c:	fc 01       	movw	r30, r24
    321e:	83 81       	ldd	r24, Z+3	; 0x03
    3220:	89 34       	cpi	r24, 0x49	; 73
    3222:	f1 f4       	brne	.+60     	; 0x3260 <main+0xe06>
					{
						if(lb_buff->fields[FIELD2][0]) 
    3224:	8a 85       	ldd	r24, Y+10	; 0x0a
    3226:	9b 85       	ldd	r25, Y+11	; 0x0b
    3228:	fc 01       	movw	r30, r24
    322a:	80 8d       	ldd	r24, Z+24	; 0x18
    322c:	88 23       	and	r24, r24
						{
							time = atol(lb_buff->fields[FIELD2]);
    322e:	89 f0       	breq	.+34     	; 0x3252 <main+0xdf8>
    3230:	8a 85       	ldd	r24, Y+10	; 0x0a
    3232:	9b 85       	ldd	r25, Y+11	; 0x0b
    3234:	48 96       	adiw	r24, 0x18	; 24
    3236:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	98 87       	std	Y+8, r25	; 0x08
							g_ID_time = time;
    3240:	8f 83       	std	Y+7, r24	; 0x07
    3242:	8f 81       	ldd	r24, Y+7	; 0x07
    3244:	98 85       	ldd	r25, Y+8	; 0x08
    3246:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_ID_time+0x1>
    324a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_ID_time>
							saveAllEEPROM();
    324e:	74 d4       	rcall	.+2280   	; 0x3b38 <saveAllEEPROM>
    3250:	2a c0       	rjmp	.+84     	; 0x32a6 <main+0xe4c>
						}
						else
						{
							time = g_ID_time;
    3252:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_ID_time>
    3256:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_ID_time+0x1>
    325a:	98 87       	std	Y+8, r25	; 0x08
    325c:	8f 83       	std	Y+7, r24	; 0x07
    325e:	23 c0       	rjmp	.+70     	; 0x32a6 <main+0xe4c>
						}
					}
					else if(lb_buff->fields[FIELD1][0] == 'D')
    3260:	8a 85       	ldd	r24, Y+10	; 0x0a
    3262:	9b 85       	ldd	r25, Y+11	; 0x0b
    3264:	fc 01       	movw	r30, r24
    3266:	83 81       	ldd	r24, Z+3	; 0x03
    3268:	84 34       	cpi	r24, 0x44	; 68
    326a:	e9 f4       	brne	.+58     	; 0x32a6 <main+0xe4c>
					{
						if(lb_buff->fields[FIELD2][0])
    326c:	8a 85       	ldd	r24, Y+10	; 0x0a
    326e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3270:	fc 01       	movw	r30, r24
    3272:	80 8d       	ldd	r24, Z+24	; 0x18
    3274:	88 23       	and	r24, r24
						{
							time = atol(lb_buff->fields[FIELD2]);
    3276:	89 f0       	breq	.+34     	; 0x329a <main+0xe40>
    3278:	8a 85       	ldd	r24, Y+10	; 0x0a
    327a:	9b 85       	ldd	r25, Y+11	; 0x0b
    327c:	48 96       	adiw	r24, 0x18	; 24
    327e:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	98 87       	std	Y+8, r25	; 0x08
							g_intra_cycle_delay_time = time;
    3288:	8f 83       	std	Y+7, r24	; 0x07
    328a:	8f 81       	ldd	r24, Y+7	; 0x07
    328c:	98 85       	ldd	r25, Y+8	; 0x08
    328e:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    3292:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <g_intra_cycle_delay_time>
							saveAllEEPROM();
    3296:	50 d4       	rcall	.+2208   	; 0x3b38 <saveAllEEPROM>
    3298:	06 c0       	rjmp	.+12     	; 0x32a6 <main+0xe4c>
						}
						else
						{
							time = g_intra_cycle_delay_time;							
    329a:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <g_intra_cycle_delay_time>
    329e:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    32a2:	98 87       	std	Y+8, r25	; 0x08
    32a4:	8f 83       	std	Y+7, r24	; 0x07
						}
					}
					
					if(g_terminal_mode) {
    32a6:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    32aa:	88 23       	and	r24, r24
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <main+0xe56>
    32ae:	c6 c1       	rjmp	.+908    	; 0x363c <main+0x11e2>
						lb_send_value(time, "t");
    32b0:	8f 81       	ldd	r24, Y+7	; 0x07
    32b2:	98 85       	ldd	r25, Y+8	; 0x08
    32b4:	6e ee       	ldi	r22, 0xEE	; 238
    32b6:	74 e0       	ldi	r23, 0x04	; 4
    32b8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <lb_send_value>
				}
				break;
				
				case MESSAGE_SET_PATTERN:
				{
					if(lb_buff->fields[FIELD1][0])
    32bc:	bf c1       	rjmp	.+894    	; 0x363c <main+0x11e2>
    32be:	8a 85       	ldd	r24, Y+10	; 0x0a
    32c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32c2:	fc 01       	movw	r30, r24
    32c4:	83 81       	ldd	r24, Z+3	; 0x03
    32c6:	88 23       	and	r24, r24
					{
						strncpy(g_messages_text[PATTERN_TEXT], lb_buff->fields[FIELD1], MAX_PATTERN_TEXT_LENGTH);
    32c8:	59 f0       	breq	.+22     	; 0x32e0 <main+0xe86>
    32ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    32cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ce:	03 96       	adiw	r24, 0x03	; 3
    32d0:	44 e1       	ldi	r20, 0x14	; 20
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	bc 01       	movw	r22, r24
    32d6:	8b eb       	ldi	r24, 0xBB	; 187
    32d8:	96 e0       	ldi	r25, 0x06	; 6
    32da:	0e 94 26 38 	call	0x704c	; 0x704c <strncpy>
						saveAllEEPROM(); 
    32de:	2c d4       	rcall	.+2136   	; 0x3b38 <saveAllEEPROM>
					}
					
					if(g_terminal_mode) {
    32e0:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    32e4:	88 23       	and	r24, r24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <main+0xe90>
    32e8:	ab c1       	rjmp	.+854    	; 0x3640 <main+0x11e6>
						lb_send_string(g_messages_text[PATTERN_TEXT]);
    32ea:	8b eb       	ldi	r24, 0xBB	; 187
    32ec:	96 e0       	ldi	r25, 0x06	; 6
    32ee:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
						lb_send_string("\n");
    32f2:	81 ef       	ldi	r24, 0xF1	; 241
    32f4:	94 e0       	ldi	r25, 0x04	; 4
    32f6:	0e 94 c7 03 	call	0x78e	; 0x78e <lb_send_string>
					}
				}
				break;
    32fa:	a2 c1       	rjmp	.+836    	; 0x3640 <main+0x11e6>

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;
    32fc:	1a a2       	std	Y+34, r1	; 0x22

						if(lb_buff->fields[FIELD1][0])
    32fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3300:	9b 85       	ldd	r25, Y+11	; 0x0b
    3302:	fc 01       	movw	r30, r24
    3304:	83 81       	ldd	r24, Z+3	; 0x03
    3306:	88 23       	and	r24, r24
    3308:	31 f1       	breq	.+76     	; 0x3356 <main+0xefc>
						{
							Frequency_Hz f = atol(lb_buff->fields[FIELD1]); // Prevent optimizer from breaking this							
    330a:	8a 85       	ldd	r24, Y+10	; 0x0a
    330c:	9b 85       	ldd	r25, Y+11	; 0x0b
    330e:	03 96       	adiw	r24, 0x03	; 3
    3310:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <atol>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	8b a3       	std	Y+35, r24	; 0x23
    331a:	9c a3       	std	Y+36, r25	; 0x24
    331c:	ad a3       	std	Y+37, r26	; 0x25
    331e:	be a3       	std	Y+38, r27	; 0x26
								
							Frequency_Hz ff = f;
    3320:	8b a1       	ldd	r24, Y+35	; 0x23
    3322:	9c a1       	ldd	r25, Y+36	; 0x24
    3324:	ad a1       	ldd	r26, Y+37	; 0x25
    3326:	be a1       	ldd	r27, Y+38	; 0x26
    3328:	8f a7       	std	Y+47, r24	; 0x2f
    332a:	98 ab       	std	Y+48, r25	; 0x30
    332c:	a9 ab       	std	Y+49, r26	; 0x31
    332e:	ba ab       	std	Y+50, r27	; 0x32
							if(txSetFrequency(&ff))
    3330:	ce 01       	movw	r24, r28
    3332:	8f 96       	adiw	r24, 0x2f	; 47
    3334:	0e 94 ab 21 	call	0x4356	; 0x4356 <txSetFrequency>
    3338:	88 23       	and	r24, r24
    333a:	c9 f0       	breq	.+50     	; 0x336e <main+0xf14>
							{
								g_transmitter_freq = ff;
    333c:	8f a5       	ldd	r24, Y+47	; 0x2f
    333e:	98 a9       	ldd	r25, Y+48	; 0x30
    3340:	a9 a9       	ldd	r26, Y+49	; 0x31
    3342:	ba a9       	ldd	r27, Y+50	; 0x32
    3344:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <g_transmitter_freq>
    3348:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <g_transmitter_freq+0x1>
    334c:	a0 93 f9 06 	sts	0x06F9, r26	; 0x8006f9 <g_transmitter_freq+0x2>
    3350:	b0 93 fa 06 	sts	0x06FA, r27	; 0x8006fa <g_transmitter_freq+0x3>
    3354:	0c c0       	rjmp	.+24     	; 0x336e <main+0xf14>
							}
						}
						else
						{
							g_transmitter_freq = txGetFrequency();
    3356:	0e 94 40 22 	call	0x4480	; 0x4480 <txGetFrequency>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	80 93 f7 06 	sts	0x06F7, r24	; 0x8006f7 <g_transmitter_freq>
    3362:	90 93 f8 06 	sts	0x06F8, r25	; 0x8006f8 <g_transmitter_freq+0x1>
    3366:	a0 93 f9 06 	sts	0x06F9, r26	; 0x8006f9 <g_transmitter_freq+0x2>
    336a:	b0 93 fa 06 	sts	0x06FA, r27	; 0x8006fa <g_transmitter_freq+0x3>
						}

						if(g_transmitter_freq)
    336e:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <g_transmitter_freq>
    3372:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <g_transmitter_freq+0x1>
    3376:	a0 91 f9 06 	lds	r26, 0x06F9	; 0x8006f9 <g_transmitter_freq+0x2>
    337a:	b0 91 fa 06 	lds	r27, 0x06FA	; 0x8006fa <g_transmitter_freq+0x3>
    337e:	89 2b       	or	r24, r25
    3380:	8a 2b       	or	r24, r26
    3382:	8b 2b       	or	r24, r27
    3384:	09 f4       	brne	.+2      	; 0x3388 <main+0xf2e>
    3386:	5e c1       	rjmp	.+700    	; 0x3644 <main+0x11ea>
						{
							lb_send_FRE(LINKBUS_MSG_REPLY, g_transmitter_freq, isMem);
    3388:	80 91 f7 06 	lds	r24, 0x06F7	; 0x8006f7 <g_transmitter_freq>
    338c:	90 91 f8 06 	lds	r25, 0x06F8	; 0x8006f8 <g_transmitter_freq+0x1>
    3390:	a0 91 f9 06 	lds	r26, 0x06F9	; 0x8006f9 <g_transmitter_freq+0x2>
    3394:	b0 91 fa 06 	lds	r27, 0x06FA	; 0x8006fa <g_transmitter_freq+0x3>
    3398:	2a a1       	ldd	r18, Y+34	; 0x22
    339a:	ac 01       	movw	r20, r24
    339c:	bd 01       	movw	r22, r26
    339e:	83 e0       	ldi	r24, 0x03	; 3
    33a0:	0e 94 2a 04 	call	0x854	; 0x854 <lb_send_FRE>
						}
				}
				break;
    33a4:	4f c1       	rjmp	.+670    	; 0x3644 <main+0x11ea>

				case MESSAGE_BAND:
				{
					RadioBand band;

					if(lb_buff->fields[FIELD1][0])  /* band field */
    33a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    33aa:	fc 01       	movw	r30, r24
    33ac:	83 81       	ldd	r24, Z+3	; 0x03
    33ae:	88 23       	and	r24, r24
    33b0:	e9 f0       	breq	.+58     	; 0x33ec <main+0xf92>
					{
						int b = atoi(lb_buff->fields[FIELD1]);
    33b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    33b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    33b6:	03 96       	adiw	r24, 0x03	; 3
    33b8:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <atoi>
    33bc:	98 a7       	std	Y+40, r25	; 0x28
    33be:	8f a3       	std	Y+39, r24	; 0x27
							
						if(b == 80)
    33c0:	8f a1       	ldd	r24, Y+39	; 0x27
    33c2:	98 a5       	ldd	r25, Y+40	; 0x28
    33c4:	80 35       	cpi	r24, 0x50	; 80
    33c6:	91 05       	cpc	r25, r1
    33c8:	29 f4       	brne	.+10     	; 0x33d4 <main+0xf7a>
						{
							txSetBand(BAND_80M, ON);
    33ca:	61 e0       	ldi	r22, 0x01	; 1
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	0e 94 8a 22 	call	0x4514	; 0x4514 <txSetBand>
    33d2:	08 c0       	rjmp	.+16     	; 0x33e4 <main+0xf8a>
						}
						else if(b == 2)
    33d4:	8f a1       	ldd	r24, Y+39	; 0x27
    33d6:	98 a5       	ldd	r25, Y+40	; 0x28
    33d8:	02 97       	sbiw	r24, 0x02	; 2
    33da:	21 f4       	brne	.+8      	; 0x33e4 <main+0xf8a>
						{
							txSetBand(BAND_2M, ON);
    33dc:	61 e0       	ldi	r22, 0x01	; 1
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	0e 94 8a 22 	call	0x4514	; 0x4514 <txSetBand>
						}
						
						g_am_modulation_enabled = txAMModulationEnabled();
    33e4:	0e 94 62 24 	call	0x48c4	; 0x48c4 <txAMModulationEnabled>
    33e8:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <g_am_modulation_enabled>
					}

					band = txGetBand();
    33ec:	0e 94 de 22 	call	0x45bc	; 0x45bc <txGetBand>
    33f0:	89 a7       	std	Y+41, r24	; 0x29

					if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    33f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    33f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    33f6:	fc 01       	movw	r30, r24
    33f8:	80 81       	ld	r24, Z
    33fa:	82 30       	cpi	r24, 0x02	; 2
    33fc:	09 f0       	breq	.+2      	; 0x3400 <main+0xfa6>
    33fe:	24 c1       	rjmp	.+584    	; 0x3648 <main+0x11ee>
					{
						/* Send a reply */
						lb_send_BND(LINKBUS_MSG_REPLY, band);
    3400:	69 a5       	ldd	r22, Y+41	; 0x29
    3402:	83 e0       	ldi	r24, 0x03	; 3
    3404:	0e 94 c2 05 	call	0xb84	; 0xb84 <lb_send_BND>
					}
				}
				break;
    3408:	1f c1       	rjmp	.+574    	; 0x3648 <main+0x11ee>

				case MESSAGE_TTY:
				{
					g_terminal_mode = TRUE;
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <g_terminal_mode>
					linkbus_setTerminalMode(g_terminal_mode);
    3410:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    3414:	0e 94 9f 02 	call	0x53e	; 0x53e <linkbus_setTerminalMode>
					
					cli(); 
    3418:	f8 94       	cli
					linkbus_disable();
    341a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <linkbus_disable>
					sei();	
    341e:	78 94       	sei
					wifi_reset(ON);
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	0e 94 95 29 	call	0x532a	; 0x532a <wifi_reset>
					wifi_power(OFF);
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	0e 94 b6 29 	call	0x536c	; 0x536c <wifi_power>

					linkbus_setLineTerm("\n\n");
    342c:	80 ef       	ldi	r24, 0xF0	; 240
    342e:	94 e0       	ldi	r25, 0x04	; 4
    3430:	0e 94 96 03 	call	0x72c	; 0x72c <linkbus_setLineTerm>
					
					linkbus_init(BAUD);
    3434:	60 e8       	ldi	r22, 0x80	; 128
    3436:	75 e2       	ldi	r23, 0x25	; 37
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	0e 94 29 02 	call	0x452	; 0x452 <linkbus_init>
				}
				break;
    3440:	06 c1       	rjmp	.+524    	; 0x364e <main+0x11f4>

				case MESSAGE_BAT:
				{
					lb_broadcast_num(g_lastConversionResult[BATTERY_READING], "!BAT");
    3442:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <g_lastConversionResult>
    3446:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <g_lastConversionResult+0x1>
    344a:	63 ef       	ldi	r22, 0xF3	; 243
    344c:	74 e0       	ldi	r23, 0x04	; 4
    344e:	0e 94 8a 06 	call	0xd14	; 0xd14 <lb_broadcast_num>
				}
				break;
    3452:	fd c0       	rjmp	.+506    	; 0x364e <main+0x11f4>

				case MESSAGE_TEMP:
				{
					int16_t v;
					if(!ds3231_get_temp(&v)) lb_broadcast_num(v, "!TEM");
    3454:	ce 01       	movw	r24, r28
    3456:	c3 96       	adiw	r24, 0x33	; 51
    3458:	0e 94 0b 28 	call	0x5016	; 0x5016 <ds3231_get_temp>
    345c:	88 23       	and	r24, r24
    345e:	09 f0       	breq	.+2      	; 0x3462 <main+0x1008>
    3460:	f5 c0       	rjmp	.+490    	; 0x364c <main+0x11f2>
    3462:	8b a9       	ldd	r24, Y+51	; 0x33
    3464:	9c a9       	ldd	r25, Y+52	; 0x34
    3466:	68 ef       	ldi	r22, 0xF8	; 248
    3468:	74 e0       	ldi	r23, 0x04	; 4
    346a:	0e 94 8a 06 	call	0xd14	; 0xd14 <lb_broadcast_num>
				break;
				
				case MESSAGE_ALL_INFO:
				{
					uint32_t temp;
					cli(); wdt_reset(); /* HW watchdog */ sei();
    346e:	ee c0       	rjmp	.+476    	; 0x364c <main+0x11f2>
    3470:	f8 94       	cli
    3472:	a8 95       	wdr
					linkbus_setLineTerm("\n");
    3474:	78 94       	sei
    3476:	81 ef       	ldi	r24, 0xF1	; 241
    3478:	94 e0       	ldi	r25, 0x04	; 4
    347a:	0e 94 96 03 	call	0x72c	; 0x72c <linkbus_setLineTerm>
					lb_send_BND(LINKBUS_MSG_REPLY, txGetBand());
    347e:	0e 94 de 22 	call	0x45bc	; 0x45bc <txGetBand>
    3482:	68 2f       	mov	r22, r24
    3484:	83 e0       	ldi	r24, 0x03	; 3
    3486:	0e 94 c2 05 	call	0xb84	; 0xb84 <lb_send_BND>
					lb_send_FRE(LINKBUS_MSG_REPLY, txGetFrequency(), FALSE);
    348a:	fa d7       	rcall	.+4084   	; 0x4480 <txGetFrequency>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	ac 01       	movw	r20, r24
    3494:	bd 01       	movw	r22, r26
    3496:	83 e0       	ldi	r24, 0x03	; 3
    3498:	0e 94 2a 04 	call	0x854	; 0x854 <lb_send_FRE>
					cli(); wdt_reset(); /* HW watchdog */ sei();
    349c:	f8 94       	cli
    349e:	a8 95       	wdr
    34a0:	78 94       	sei
					temp = VBAT(g_lastConversionResult[BATTERY_READING]);
    34a2:	80 91 fd 06 	lds	r24, 0x06FD	; 0x8006fd <g_lastConversionResult>
    34a6:	90 91 fe 06 	lds	r25, 0x06FE	; 0x8006fe <g_lastConversionResult+0x1>
    34aa:	9c 01       	movw	r18, r24
    34ac:	40 e0       	ldi	r20, 0x00	; 0
    34ae:	50 e0       	ldi	r21, 0x00	; 0
    34b0:	88 e6       	ldi	r24, 0x68	; 104
    34b2:	90 e1       	ldi	r25, 0x10	; 16
    34b4:	dc 01       	movw	r26, r24
    34b6:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__muluhisi3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	2f ef       	ldi	r18, 0xFF	; 255
    34c0:	33 e0       	ldi	r19, 0x03	; 3
    34c2:	40 e0       	ldi	r20, 0x00	; 0
    34c4:	50 e0       	ldi	r21, 0x00	; 0
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 67 37 	call	0x6ece	; 0x6ece <__udivmodsi4>
    34ce:	da 01       	movw	r26, r20
    34d0:	c9 01       	movw	r24, r18
    34d2:	84 57       	subi	r24, 0x74	; 116
    34d4:	9f 4f       	sbci	r25, 0xFF	; 255
    34d6:	af 4f       	sbci	r26, 0xFF	; 255
    34d8:	bf 4f       	sbci	r27, 0xFF	; 255
    34da:	8a a7       	std	Y+42, r24	; 0x2a
    34dc:	9b a7       	std	Y+43, r25	; 0x2b
    34de:	ac a7       	std	Y+44, r26	; 0x2c
    34e0:	bd a7       	std	Y+45, r27	; 0x2d
					lb_broadcast_num(temp, "BAT");
    34e2:	8a a5       	ldd	r24, Y+42	; 0x2a
    34e4:	9b a5       	ldd	r25, Y+43	; 0x2b
    34e6:	64 ef       	ldi	r22, 0xF4	; 244
    34e8:	74 e0       	ldi	r23, 0x04	; 4
    34ea:	0e 94 8a 06 	call	0xd14	; 0xd14 <lb_broadcast_num>
					temp = VPA(g_PA_voltage);
    34ee:	20 91 01 07 	lds	r18, 0x0701	; 0x800701 <g_PA_voltage>
    34f2:	30 91 02 07 	lds	r19, 0x0702	; 0x800702 <g_PA_voltage+0x1>
    34f6:	40 91 03 07 	lds	r20, 0x0703	; 0x800703 <g_PA_voltage+0x2>
    34fa:	50 91 04 07 	lds	r21, 0x0704	; 0x800704 <g_PA_voltage+0x3>
    34fe:	84 e1       	ldi	r24, 0x14	; 20
    3500:	97 e3       	ldi	r25, 0x37	; 55
    3502:	dc 01       	movw	r26, r24
    3504:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__muluhisi3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	2f ef       	ldi	r18, 0xFF	; 255
    350e:	33 e0       	ldi	r19, 0x03	; 3
    3510:	40 e0       	ldi	r20, 0x00	; 0
    3512:	50 e0       	ldi	r21, 0x00	; 0
    3514:	bc 01       	movw	r22, r24
    3516:	cd 01       	movw	r24, r26
    3518:	0e 94 67 37 	call	0x6ece	; 0x6ece <__udivmodsi4>
    351c:	da 01       	movw	r26, r20
    351e:	c9 01       	movw	r24, r18
    3520:	8a a7       	std	Y+42, r24	; 0x2a
    3522:	9b a7       	std	Y+43, r25	; 0x2b
    3524:	ac a7       	std	Y+44, r26	; 0x2c
    3526:	bd a7       	std	Y+45, r27	; 0x2d
					lb_broadcast_num(temp, "Vpa");
    3528:	8a a5       	ldd	r24, Y+42	; 0x2a
    352a:	9b a5       	ldd	r25, Y+43	; 0x2b
    352c:	6d ef       	ldi	r22, 0xFD	; 253
    352e:	74 e0       	ldi	r23, 0x04	; 4
    3530:	0e 94 8a 06 	call	0xd14	; 0xd14 <lb_broadcast_num>
					linkbus_setLineTerm("\n\n");
    3534:	80 ef       	ldi	r24, 0xF0	; 240
    3536:	94 e0       	ldi	r25, 0x04	; 4
    3538:	0e 94 96 03 	call	0x72c	; 0x72c <linkbus_setLineTerm>
					cli(); wdt_reset(); /* HW watchdog */ sei();
    353c:	f8 94       	cli
    353e:	a8 95       	wdr
    3540:	78 94       	sei
					#ifdef INCLUDE_DS3231_SUPPORT
					    g_temp_time = time(NULL);
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 ef 36 	call	0x6dde	; 0x6dde <time>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    3552:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    3556:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    355a:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
						
						if(g_temp_time != g_tx_epoch_time)
    355e:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
    3562:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    3566:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    356a:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    356e:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    3572:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    3576:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    357a:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    357e:	28 17       	cp	r18, r24
    3580:	39 07       	cpc	r19, r25
    3582:	4a 07       	cpc	r20, r26
    3584:	5b 07       	cpc	r21, r27
    3586:	81 f0       	breq	.+32     	; 0x35a8 <main+0x114e>
						{
							g_temp_time = g_tx_epoch_time;						
    3588:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    358c:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    3590:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    3594:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    3598:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    359c:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    35a0:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    35a4:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
						}
						
						sprintf(g_tempStr, "%lu", g_temp_time);
    35a8:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <g_temp_time>
    35ac:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    35b0:	a0 91 b4 06 	lds	r26, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    35b4:	b0 91 b5 06 	lds	r27, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    35b8:	2b 2f       	mov	r18, r27
    35ba:	2f 93       	push	r18
    35bc:	2a 2f       	mov	r18, r26
    35be:	2f 93       	push	r18
    35c0:	29 2f       	mov	r18, r25
    35c2:	2f 93       	push	r18
    35c4:	8f 93       	push	r24
    35c6:	8f ea       	ldi	r24, 0xAF	; 175
    35c8:	94 e0       	ldi	r25, 0x04	; 4
    35ca:	89 2f       	mov	r24, r25
    35cc:	8f 93       	push	r24
    35ce:	8f ea       	ldi	r24, 0xAF	; 175
    35d0:	94 e0       	ldi	r25, 0x04	; 4
    35d2:	8f 93       	push	r24
    35d4:	84 e9       	ldi	r24, 0x94	; 148
    35d6:	96 e0       	ldi	r25, 0x06	; 6
    35d8:	89 2f       	mov	r24, r25
    35da:	8f 93       	push	r24
    35dc:	84 e9       	ldi	r24, 0x94	; 148
    35de:	96 e0       	ldi	r25, 0x06	; 6
    35e0:	8f 93       	push	r24
    35e2:	0e 94 52 38 	call	0x70a4	; 0x70a4 <sprintf>
    35e6:	8d b7       	in	r24, 0x3d	; 61
    35e8:	9e b7       	in	r25, 0x3e	; 62
    35ea:	08 96       	adiw	r24, 0x08	; 8
    35ec:	0f b6       	in	r0, 0x3f	; 63
    35ee:	f8 94       	cli
    35f0:	de bf       	out	0x3e, r29	; 62
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	cd bf       	out	0x3d, r28	; 61
						lb_send_msg(LINKBUS_MSG_REPLY, MESSAGE_TIME_LABEL, g_tempStr);
    35f6:	44 e9       	ldi	r20, 0x94	; 148
    35f8:	56 e0       	ldi	r21, 0x06	; 6
    35fa:	63 eb       	ldi	r22, 0xB3	; 179
    35fc:	74 e0       	ldi	r23, 0x04	; 4
    35fe:	83 e0       	ldi	r24, 0x03	; 3
    3600:	0e 94 3f 05 	call	0xa7e	; 0xa7e <lb_send_msg>
						cli(); wdt_reset(); /* HW watchdog */ sei();
    3604:	f8 94       	cli
    3606:	a8 95       	wdr
    3608:	78 94       	sei
					#endif
				}
				break;
    360a:	21 c0       	rjmp	.+66     	; 0x364e <main+0x11f4>

				default:
				{
					if(g_terminal_mode)
    360c:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    3610:	88 23       	and	r24, r24
    3612:	19 f0       	breq	.+6      	; 0x361a <main+0x11c0>
					{
						lb_send_Help();
    3614:	0e 94 07 03 	call	0x60e	; 0x60e <lb_send_Help>
					else
					{
						linkbus_reset_rx(); /* flush buffer */
					}
				}
				break;
    3618:	1a c0       	rjmp	.+52     	; 0x364e <main+0x11f4>
					{
						lb_send_Help();
					}
					else
					{
						linkbus_reset_rx(); /* flush buffer */
    361a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <linkbus_reset_rx>
					}
				}
				break;
    361e:	17 c0       	rjmp	.+46     	; 0x364e <main+0x11f4>
					}
					
					if(g_terminal_mode) lb_broadcast_num((uint16_t)result, NULL);

				}
				break;
    3620:	00 00       	nop
    3622:	15 c0       	rjmp	.+42     	; 0x364e <main+0x11f4>
					{
						/* shut down WiFi after 2 minutes of inactivity */
						g_WiFi_shutdown_seconds = 120; // wait 2 more minutes before shutting down WiFi
					}
				}
				break;
    3624:	00 00       	nop
    3626:	13 c0       	rjmp	.+38     	; 0x364e <main+0x11f4>
							wdt_init(WD_HW_RESETS);
							ds3231_1s_sqw(ON);
						}
					}
				}
				break;
    3628:	00 00       	nop
    362a:	11 c0       	rjmp	.+34     	; 0x364e <main+0x11f4>
					else if(g_terminal_mode)
					{
						lb_send_string("Usage: SF F|S epoch\n");
					}
				}
				break;
    362c:	00 00       	nop
    362e:	0f c0       	rjmp	.+30     	; 0x364e <main+0x11f4>
							lastTime = g_temp_time;
						}
						#endif
					}
				}
				break;
    3630:	00 00       	nop
    3632:	0d c0       	rjmp	.+26     	; 0x364e <main+0x11f4>
					if(g_terminal_mode)  {
						lb_send_string(g_messages_text[STATION_ID]);
						lb_send_string("\n");
                    }
				}
				break;
    3634:	00 00       	nop
    3636:	0b c0       	rjmp	.+22     	; 0x364e <main+0x11f4>
					
					if(g_terminal_mode)  {
						lb_send_value(speed, "spd");
                    }
				}
				break;
    3638:	00 00       	nop
    363a:	09 c0       	rjmp	.+18     	; 0x364e <main+0x11f4>
					
					if(g_terminal_mode) {
						lb_send_value(time, "t");
					}
				}
				break;
    363c:	00 00       	nop
    363e:	07 c0       	rjmp	.+14     	; 0x364e <main+0x11f4>
					if(g_terminal_mode) {
						lb_send_string(g_messages_text[PATTERN_TEXT]);
						lb_send_string("\n");
					}
				}
				break;
    3640:	00 00       	nop
    3642:	05 c0       	rjmp	.+10     	; 0x364e <main+0x11f4>
						if(g_transmitter_freq)
						{
							lb_send_FRE(LINKBUS_MSG_REPLY, g_transmitter_freq, isMem);
						}
				}
				break;
    3644:	00 00       	nop
    3646:	03 c0       	rjmp	.+6      	; 0x364e <main+0x11f4>
					{
						/* Send a reply */
						lb_send_BND(LINKBUS_MSG_REPLY, band);
					}
				}
				break;
    3648:	00 00       	nop
    364a:	01 c0       	rjmp	.+2      	; 0x364e <main+0x11f4>
				case MESSAGE_TEMP:
				{
					int16_t v;
					if(!ds3231_get_temp(&v)) lb_broadcast_num(v, "!TEM");
				}
				break;
    364c:	00 00       	nop
					}
				}
				break;
			}

			if(g_terminal_mode)
    364e:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <g_terminal_mode>
    3652:	88 23       	and	r24, r24
    3654:	11 f0       	breq	.+4      	; 0x365a <main+0x1200>
			{
				lb_send_NewPrompt();
    3656:	0e 94 78 03 	call	0x6f0	; 0x6f0 <lb_send_NewPrompt>
			}

			lb_buff->id = MESSAGE_EMPTY;
    365a:	8a 85       	ldd	r24, Y+10	; 0x0a
    365c:	9b 85       	ldd	r25, Y+11	; 0x0b
    365e:	fc 01       	movw	r30, r24
    3660:	12 82       	std	Z+2, r1	; 0x02
    3662:	11 82       	std	Z+1, r1	; 0x01
		}

		/***********************************************************************
		 *  Handle arriving Linkbus messages
		 ************************************************************************/
		while((lb_buff = nextFullRxBuffer()))
    3664:	0e 94 79 01 	call	0x2f2	; 0x2f2 <nextFullRxBuffer>
    3668:	9b 87       	std	Y+11, r25	; 0x0b
    366a:	8a 87       	std	Y+10, r24	; 0x0a
    366c:	8a 85       	ldd	r24, Y+10	; 0x0a
    366e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3670:	89 2b       	or	r24, r25
    3672:	11 f0       	breq	.+4      	; 0x3678 <main+0x121e>
    3674:	0c 94 97 12 	jmp	0x252e	; 0x252e <main+0xd4>
		}


			/* ////////////////////////////////////
			 * Handle Receiver interrupts (e.g., trigger button presses) */
			if(g_radio_port_changed)
    3678:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <g_radio_port_changed>
    367c:	88 23       	and	r24, r24
    367e:	11 f4       	brne	.+4      	; 0x3684 <main+0x122a>
    3680:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <main+0x90>
			{
				g_radio_port_changed = FALSE;
    3684:	10 92 aa 06 	sts	0x06AA, r1	; 0x8006aa <g_radio_port_changed>
			 * Handle periodic tasks triggered by the tick count */
//			if(hold_tick_count != g_tick_count)
//			{
//				hold_tick_count = g_tick_count;
//			}
	}       /* while(1) */
    3688:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <main+0x90>

0000368c <initializeTxWithSettings>:
}/* main */

void initializeTxWithSettings(time_t startTime) 
{
    368c:	cf 93       	push	r28
    368e:	df 93       	push	r29
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	60 97       	sbiw	r28, 0x10	; 16
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	6d 87       	std	Y+13, r22	; 0x0d
    36a2:	7e 87       	std	Y+14, r23	; 0x0e
    36a4:	8f 87       	std	Y+15, r24	; 0x0f
    36a6:	98 8b       	std	Y+16, r25	; 0x10
	if(startTime > 0)
    36a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ac:	af 85       	ldd	r26, Y+15	; 0x0f
    36ae:	b8 89       	ldd	r27, Y+16	; 0x10
    36b0:	89 2b       	or	r24, r25
    36b2:	8a 2b       	or	r24, r26
    36b4:	8b 2b       	or	r24, r27
    36b6:	79 f0       	breq	.+30     	; 0x36d6 <initializeTxWithSettings+0x4a>
	{
		g_event_start_time = startTime;
    36b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    36bc:	af 85       	ldd	r26, Y+15	; 0x0f
    36be:	b8 89       	ldd	r27, Y+16	; 0x10
    36c0:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <g_event_start_time>
    36c4:	90 93 e8 06 	sts	0x06E8, r25	; 0x8006e8 <g_event_start_time+0x1>
    36c8:	a0 93 e9 06 	sts	0x06E9, r26	; 0x8006e9 <g_event_start_time+0x2>
    36cc:	b0 93 ea 06 	sts	0x06EA, r27	; 0x8006ea <g_event_start_time+0x3>
		g_event_enabled = TRUE;
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <g_event_enabled>
	}
	
	// Make sure everything has been initialized
	if(!g_event_start_time) return;
    36d6:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <g_event_start_time>
    36da:	90 91 e8 06 	lds	r25, 0x06E8	; 0x8006e8 <g_event_start_time+0x1>
    36de:	a0 91 e9 06 	lds	r26, 0x06E9	; 0x8006e9 <g_event_start_time+0x2>
    36e2:	b0 91 ea 06 	lds	r27, 0x06EA	; 0x8006ea <g_event_start_time+0x3>
    36e6:	89 2b       	or	r24, r25
    36e8:	8a 2b       	or	r24, r26
    36ea:	8b 2b       	or	r24, r27
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <initializeTxWithSettings+0x64>
    36ee:	2c c1       	rjmp	.+600    	; 0x3948 <initializeTxWithSettings+0x2bc>
	if(!g_on_air_seconds) return;
    36f0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_on_air_seconds>
    36f4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    36f8:	89 2b       	or	r24, r25
    36fa:	09 f4       	brne	.+2      	; 0x36fe <initializeTxWithSettings+0x72>
    36fc:	27 c1       	rjmp	.+590    	; 0x394c <initializeTxWithSettings+0x2c0>
	//if(!g_off_air_seconds) return;
	if(g_messages_text[PATTERN_TEXT][0] == '\0') return;
    36fe:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <g_messages_text>
    3702:	88 23       	and	r24, r24
    3704:	09 f4       	brne	.+2      	; 0x3708 <initializeTxWithSettings+0x7c>
    3706:	24 c1       	rjmp	.+584    	; 0x3950 <initializeTxWithSettings+0x2c4>
	if(!g_pattern_codespeed) return;
    3708:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    370c:	88 23       	and	r24, r24
    370e:	09 f4       	brne	.+2      	; 0x3712 <initializeTxWithSettings+0x86>
    3710:	21 c1       	rjmp	.+578    	; 0x3954 <initializeTxWithSettings+0x2c8>
	//if(!g_transmitter_freq) return;
	//if(!modulation_format) return;
	//if(!power_level) return;
	//if(!callsign) return;
	//if(!csllsign_speed) return;
	g_time_to_send_ID_countdown = g_ID_time;
    3712:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_ID_time>
    3716:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_ID_time+0x1>
    371a:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <g_time_to_send_ID_countdown+0x1>
    371e:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <g_time_to_send_ID_countdown>

	if(startTime > 0) 
    3722:	8d 85       	ldd	r24, Y+13	; 0x0d
    3724:	9e 85       	ldd	r25, Y+14	; 0x0e
    3726:	af 85       	ldd	r26, Y+15	; 0x0f
    3728:	b8 89       	ldd	r27, Y+16	; 0x10
    372a:	89 2b       	or	r24, r25
    372c:	8a 2b       	or	r24, r26
    372e:	8b 2b       	or	r24, r27
    3730:	e1 f0       	breq	.+56     	; 0x376a <initializeTxWithSettings+0xde>
	{
		cli(); 
    3732:	f8 94       	cli
		g_tx_epoch_time = ds3231_get_epoch(NULL);
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <ds3231_get_epoch>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <g_tx_epoch_time>
    3744:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <g_tx_epoch_time+0x1>
    3748:	a0 93 b8 06 	sts	0x06B8, r26	; 0x8006b8 <g_tx_epoch_time+0x2>
    374c:	b0 93 b9 06 	sts	0x06B9, r27	; 0x8006b9 <g_tx_epoch_time+0x3>
		set_system_time(g_tx_epoch_time); // update system clock
    3750:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    3754:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    3758:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    375c:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <set_system_time>
		sei();
    3768:	78 94       	sei
	}
	
	g_temp_time = time(NULL);
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	0e 94 ef 36 	call	0x6dde	; 0x6dde <time>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    377a:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    377e:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    3782:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
	if(g_temp_time != g_tx_epoch_time)
    3786:	20 91 b2 06 	lds	r18, 0x06B2	; 0x8006b2 <g_temp_time>
    378a:	30 91 b3 06 	lds	r19, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    378e:	40 91 b4 06 	lds	r20, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    3792:	50 91 b5 06 	lds	r21, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    3796:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    379a:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    379e:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    37a2:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    37a6:	28 17       	cp	r18, r24
    37a8:	39 07       	cpc	r19, r25
    37aa:	4a 07       	cpc	r20, r26
    37ac:	5b 07       	cpc	r21, r27
    37ae:	81 f0       	breq	.+32     	; 0x37d0 <initializeTxWithSettings+0x144>
	{
		g_temp_time = g_tx_epoch_time;
    37b0:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <g_tx_epoch_time>
    37b4:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <g_tx_epoch_time+0x1>
    37b8:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <g_tx_epoch_time+0x2>
    37bc:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <g_tx_epoch_time+0x3>
    37c0:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <g_temp_time>
    37c4:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <g_temp_time+0x1>
    37c8:	a0 93 b4 06 	sts	0x06B4, r26	; 0x8006b4 <g_temp_time+0x2>
    37cc:	b0 93 b5 06 	sts	0x06B5, r27	; 0x8006b5 <g_temp_time+0x3>
	}
	
	int32_t dif = difftime(g_temp_time, g_event_start_time); // returns arg1 - arg2
    37d0:	20 91 e7 06 	lds	r18, 0x06E7	; 0x8006e7 <g_event_start_time>
    37d4:	30 91 e8 06 	lds	r19, 0x06E8	; 0x8006e8 <g_event_start_time+0x1>
    37d8:	40 91 e9 06 	lds	r20, 0x06E9	; 0x8006e9 <g_event_start_time+0x2>
    37dc:	50 91 ea 06 	lds	r21, 0x06EA	; 0x8006ea <g_event_start_time+0x3>
    37e0:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <g_temp_time>
    37e4:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <g_temp_time+0x1>
    37e8:	a0 91 b4 06 	lds	r26, 0x06B4	; 0x8006b4 <g_temp_time+0x2>
    37ec:	b0 91 b5 06 	lds	r27, 0x06B5	; 0x8006b5 <g_temp_time+0x3>
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <difftime>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	8a 83       	std	Y+2, r24	; 0x02
    37fe:	9b 83       	std	Y+3, r25	; 0x03
    3800:	ac 83       	std	Y+4, r26	; 0x04
    3802:	bd 83       	std	Y+5, r27	; 0x05
		
	if(dif >= 0) // start time is in the past
    3804:	8a 81       	ldd	r24, Y+2	; 0x02
    3806:	9b 81       	ldd	r25, Y+3	; 0x03
    3808:	ac 81       	ldd	r26, Y+4	; 0x04
    380a:	bd 81       	ldd	r27, Y+5	; 0x05
    380c:	bb 23       	and	r27, r27
    380e:	0c f4       	brge	.+2      	; 0x3812 <initializeTxWithSettings+0x186>
    3810:	98 c0       	rjmp	.+304    	; 0x3942 <initializeTxWithSettings+0x2b6>
	{
		BOOL turnOnTransmitter = FALSE;
    3812:	19 82       	std	Y+1, r1	; 0x01
		int cyclePeriod = g_on_air_seconds + g_off_air_seconds;
    3814:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <g_on_air_seconds>
    3818:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    381c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_off_air_seconds>
    3820:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_off_air_seconds+0x1>
    3824:	82 0f       	add	r24, r18
    3826:	93 1f       	adc	r25, r19
    3828:	9f 83       	std	Y+7, r25	; 0x07
    382a:	8e 83       	std	Y+6, r24	; 0x06
		int secondsIntoCycle = dif % cyclePeriod;
    382c:	8e 81       	ldd	r24, Y+6	; 0x06
    382e:	9f 81       	ldd	r25, Y+7	; 0x07
    3830:	9c 01       	movw	r18, r24
    3832:	99 0f       	add	r25, r25
    3834:	44 0b       	sbc	r20, r20
    3836:	55 0b       	sbc	r21, r21
    3838:	8a 81       	ldd	r24, Y+2	; 0x02
    383a:	9b 81       	ldd	r25, Y+3	; 0x03
    383c:	ac 81       	ldd	r26, Y+4	; 0x04
    383e:	bd 81       	ldd	r27, Y+5	; 0x05
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 89 37 	call	0x6f12	; 0x6f12 <__divmodsi4>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	99 87       	std	Y+9, r25	; 0x09
    384e:	88 87       	std	Y+8, r24	; 0x08
		int timeTillTransmit = g_intra_cycle_delay_time - secondsIntoCycle;
    3850:	20 91 e5 06 	lds	r18, 0x06E5	; 0x8006e5 <g_intra_cycle_delay_time>
    3854:	30 91 e6 06 	lds	r19, 0x06E6	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    3858:	88 85       	ldd	r24, Y+8	; 0x08
    385a:	99 85       	ldd	r25, Y+9	; 0x09
    385c:	a9 01       	movw	r20, r18
    385e:	48 1b       	sub	r20, r24
    3860:	59 0b       	sbc	r21, r25
    3862:	ca 01       	movw	r24, r20
    3864:	9b 87       	std	Y+11, r25	; 0x0b
    3866:	8a 87       	std	Y+10, r24	; 0x0a
								
		if(timeTillTransmit <= 0) // we should have started transmitting already
    3868:	8a 85       	ldd	r24, Y+10	; 0x0a
    386a:	9b 85       	ldd	r25, Y+11	; 0x0b
    386c:	18 16       	cp	r1, r24
    386e:	19 06       	cpc	r1, r25
    3870:	d4 f1       	brlt	.+116    	; 0x38e6 <initializeTxWithSettings+0x25a>
		{
			if(g_on_air_seconds <= -timeTillTransmit) // we should have finished transmitting in this cycle
    3872:	8a 85       	ldd	r24, Y+10	; 0x0a
    3874:	9b 85       	ldd	r25, Y+11	; 0x0b
    3876:	22 27       	eor	r18, r18
    3878:	33 27       	eor	r19, r19
    387a:	28 1b       	sub	r18, r24
    387c:	39 0b       	sbc	r19, r25
    387e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_on_air_seconds>
    3882:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    3886:	28 17       	cp	r18, r24
    3888:	39 07       	cpc	r19, r25
    388a:	b4 f0       	brlt	.+44     	; 0x38b8 <initializeTxWithSettings+0x22c>
			{
				g_on_the_air = -(cyclePeriod + timeTillTransmit);
    388c:	2e 81       	ldd	r18, Y+6	; 0x06
    388e:	3f 81       	ldd	r19, Y+7	; 0x07
    3890:	8a 85       	ldd	r24, Y+10	; 0x0a
    3892:	9b 85       	ldd	r25, Y+11	; 0x0b
    3894:	82 0f       	add	r24, r18
    3896:	93 1f       	adc	r25, r19
    3898:	91 95       	neg	r25
    389a:	81 95       	neg	r24
    389c:	91 09       	sbc	r25, r1
    389e:	09 2e       	mov	r0, r25
    38a0:	00 0c       	add	r0, r0
    38a2:	aa 0b       	sbc	r26, r26
    38a4:	bb 0b       	sbc	r27, r27
    38a6:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    38aa:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    38ae:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    38b2:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
    38b6:	28 c0       	rjmp	.+80     	; 0x3908 <initializeTxWithSettings+0x27c>
			}
			else // we should be transmitting right now
			{
				g_on_the_air = g_on_air_seconds + timeTillTransmit;
    38b8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <g_on_air_seconds>
    38bc:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    38c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    38c4:	82 0f       	add	r24, r18
    38c6:	93 1f       	adc	r25, r19
    38c8:	09 2e       	mov	r0, r25
    38ca:	00 0c       	add	r0, r0
    38cc:	aa 0b       	sbc	r26, r26
    38ce:	bb 0b       	sbc	r27, r27
    38d0:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    38d4:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    38d8:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
    38dc:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
				turnOnTransmitter = TRUE;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	89 83       	std	Y+1, r24	; 0x01
    38e4:	11 c0       	rjmp	.+34     	; 0x3908 <initializeTxWithSettings+0x27c>
			}
		}
		else // not yet time time to transmit in this cycle
		{
			g_on_the_air = -timeTillTransmit;
    38e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    38e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    38ea:	91 95       	neg	r25
    38ec:	81 95       	neg	r24
    38ee:	91 09       	sbc	r25, r1
    38f0:	09 2e       	mov	r0, r25
    38f2:	00 0c       	add	r0, r0
    38f4:	aa 0b       	sbc	r26, r26
    38f6:	bb 0b       	sbc	r27, r27
    38f8:	80 93 f1 06 	sts	0x06F1, r24	; 0x8006f1 <g_on_the_air>
    38fc:	90 93 f2 06 	sts	0x06F2, r25	; 0x8006f2 <g_on_the_air+0x1>
    3900:	a0 93 f3 06 	sts	0x06F3, r26	; 0x8006f3 <g_on_the_air+0x2>
		}
								
		if(turnOnTransmitter)
    3904:	b0 93 f4 06 	sts	0x06F4, r27	; 0x8006f4 <g_on_the_air+0x3>
		{
			cli();
    3908:	89 81       	ldd	r24, Y+1	; 0x01
			BOOL repeat = TRUE;
    390a:	88 23       	and	r24, r24
    390c:	a1 f0       	breq	.+40     	; 0x3936 <initializeTxWithSettings+0x2aa>
			makeMorse(g_messages_text[PATTERN_TEXT], &repeat, NULL);
    390e:	f8 94       	cli
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	8c 87       	std	Y+12, r24	; 0x0c
    3914:	ce 01       	movw	r24, r28
    3916:	0c 96       	adiw	r24, 0x0c	; 12
    3918:	40 e0       	ldi	r20, 0x00	; 0
    391a:	50 e0       	ldi	r21, 0x00	; 0
    391c:	bc 01       	movw	r22, r24
			g_code_throttle = throttleValue(g_pattern_codespeed);
    391e:	8b eb       	ldi	r24, 0xBB	; 187
    3920:	96 e0       	ldi	r25, 0x06	; 6
    3922:	d6 d1       	rcall	.+940    	; 0x3cd0 <makeMorse>
    3924:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    3928:	a9 d1       	rcall	.+850    	; 0x3c7c <throttleValue>
    392a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <g_code_throttle+0x1>
			sei();
    392e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <g_code_throttle>
		}
		else
		{
			keyTransmitter(OFF);
    3932:	78 94       	sei
    3934:	02 c0       	rjmp	.+4      	; 0x393a <initializeTxWithSettings+0x2ae>
    3936:	80 e0       	ldi	r24, 0x00	; 0
		}

		g_event_commenced = TRUE;
    3938:	8b d6       	rcall	.+3350   	; 0x4650 <keyTransmitter>
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <g_event_commenced>
	}
	else // start time is in the future
	{
		keyTransmitter(OFF);
    3940:	0a c0       	rjmp	.+20     	; 0x3956 <initializeTxWithSettings+0x2ca>
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	85 d6       	rcall	.+3338   	; 0x4650 <keyTransmitter>
    3946:	07 c0       	rjmp	.+14     	; 0x3956 <initializeTxWithSettings+0x2ca>
		g_event_start_time = startTime;
		g_event_enabled = TRUE;
	}
	
	// Make sure everything has been initialized
	if(!g_event_start_time) return;
    3948:	00 00       	nop
    394a:	05 c0       	rjmp	.+10     	; 0x3956 <initializeTxWithSettings+0x2ca>
	if(!g_on_air_seconds) return;
    394c:	00 00       	nop
    394e:	03 c0       	rjmp	.+6      	; 0x3956 <initializeTxWithSettings+0x2ca>
	//if(!g_off_air_seconds) return;
	if(g_messages_text[PATTERN_TEXT][0] == '\0') return;
    3950:	00 00       	nop
    3952:	01 c0       	rjmp	.+2      	; 0x3956 <initializeTxWithSettings+0x2ca>
	if(!g_pattern_codespeed) return;
    3954:	00 00       	nop
	}
	else // start time is in the future
	{
		keyTransmitter(OFF);
	}
}
    3956:	60 96       	adiw	r28, 0x10	; 16
    3958:	0f b6       	in	r0, 0x3f	; 63
    395a:	f8 94       	cli
    395c:	de bf       	out	0x3e, r29	; 62
    395e:	0f be       	out	0x3f, r0	; 63
    3960:	cd bf       	out	0x3d, r28	; 61
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	08 95       	ret

00003968 <initializeEEPROMVars>:

/**********************
**********************/

void initializeEEPROMVars(void)
{
    3968:	0f 93       	push	r16
    396a:	1f 93       	push	r17
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	1f 92       	push	r1
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	
	if(eeprom_read_byte(&ee_interface_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
    397e:	8a 3a       	cpi	r24, 0xAA	; 170
    3980:	09 f0       	breq	.+2      	; 0x3984 <initializeEEPROMVars+0x1c>
    3982:	8e c0       	rjmp	.+284    	; 0x3aa0 <initializeEEPROMVars+0x138>
	{
		g_event_start_time = eeprom_read_dword((uint32_t*)(&ee_start_time));
    3984:	83 e3       	ldi	r24, 0x33	; 51
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <eeprom_read_dword>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	80 93 e7 06 	sts	0x06E7, r24	; 0x8006e7 <g_event_start_time>
    3994:	90 93 e8 06 	sts	0x06E8, r25	; 0x8006e8 <g_event_start_time+0x1>
    3998:	a0 93 e9 06 	sts	0x06E9, r26	; 0x8006e9 <g_event_start_time+0x2>
    399c:	b0 93 ea 06 	sts	0x06EA, r27	; 0x8006ea <g_event_start_time+0x3>
		g_event_finish_time = eeprom_read_dword((uint32_t*)(&ee_finish_time));
    39a0:	87 e3       	ldi	r24, 0x37	; 55
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <eeprom_read_dword>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	80 93 eb 06 	sts	0x06EB, r24	; 0x8006eb <g_event_finish_time>
    39b0:	90 93 ec 06 	sts	0x06EC, r25	; 0x8006ec <g_event_finish_time+0x1>
    39b4:	a0 93 ed 06 	sts	0x06ED, r26	; 0x8006ed <g_event_finish_time+0x2>
    39b8:	b0 93 ee 06 	sts	0x06EE, r27	; 0x8006ee <g_event_finish_time+0x3>
		
		g_pattern_codespeed = eeprom_read_byte(&ee_pattern_codespeed);
    39bc:	89 e2       	ldi	r24, 0x29	; 41
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
    39c4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_pattern_codespeed>
		g_id_codespeed = eeprom_read_byte(&ee_id_codespeed);
    39c8:	8a e2       	ldi	r24, 0x2A	; 42
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
    39d0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_id_codespeed>
		g_on_air_seconds = eeprom_read_word(&ee_on_air_time);
    39d4:	8b e2       	ldi	r24, 0x2B	; 43
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	0e 94 00 3b 	call	0x7600	; 0x7600 <eeprom_read_word>
    39dc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_on_air_seconds+0x1>
    39e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_on_air_seconds>
		g_off_air_seconds = eeprom_read_word(&ee_off_air_time);
    39e4:	8d e2       	ldi	r24, 0x2D	; 45
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	0e 94 00 3b 	call	0x7600	; 0x7600 <eeprom_read_word>
    39ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_off_air_seconds+0x1>
    39f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_off_air_seconds>
		g_intra_cycle_delay_time = eeprom_read_word(&ee_intra_cycle_delay_time);
    39f4:	8f e2       	ldi	r24, 0x2F	; 47
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	0e 94 00 3b 	call	0x7600	; 0x7600 <eeprom_read_word>
    39fc:	90 93 e6 06 	sts	0x06E6, r25	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    3a00:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <g_intra_cycle_delay_time>
		g_ID_time = eeprom_read_word(&ee_ID_time);
    3a04:	81 e3       	ldi	r24, 0x31	; 49
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 00 3b 	call	0x7600	; 0x7600 <eeprom_read_word>
    3a0c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_ID_time+0x1>
    3a10:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_ID_time>
		
		for(i=0; i<20; i++)
    3a14:	19 82       	std	Y+1, r1	; 0x01
    3a16:	1c c0       	rjmp	.+56     	; 0x3a50 <initializeEEPROMVars+0xe8>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
    3a18:	89 81       	ldd	r24, Y+1	; 0x01
    3a1a:	08 2f       	mov	r16, r24
    3a1c:	10 e0       	ldi	r17, 0x00	; 0
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	88 2f       	mov	r24, r24
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	8f 5f       	subi	r24, 0xFF	; 255
    3a26:	9f 4f       	sbci	r25, 0xFF	; 255
    3a28:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
    3a2c:	28 2f       	mov	r18, r24
    3a2e:	c8 01       	movw	r24, r16
    3a30:	81 53       	subi	r24, 0x31	; 49
    3a32:	99 4f       	sbci	r25, 0xF9	; 249
    3a34:	fc 01       	movw	r30, r24
    3a36:	20 83       	st	Z, r18
			if(!g_messages_text[STATION_ID][i]) break;
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	88 2f       	mov	r24, r24
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	81 53       	subi	r24, 0x31	; 49
    3a40:	99 4f       	sbci	r25, 0xF9	; 249
    3a42:	fc 01       	movw	r30, r24
    3a44:	80 81       	ld	r24, Z
    3a46:	88 23       	and	r24, r24
    3a48:	39 f0       	breq	.+14     	; 0x3a58 <initializeEEPROMVars+0xf0>
		g_on_air_seconds = eeprom_read_word(&ee_on_air_time);
		g_off_air_seconds = eeprom_read_word(&ee_off_air_time);
		g_intra_cycle_delay_time = eeprom_read_word(&ee_intra_cycle_delay_time);
		g_ID_time = eeprom_read_word(&ee_ID_time);
		
		for(i=0; i<20; i++)
    3a4a:	89 81       	ldd	r24, Y+1	; 0x01
    3a4c:	8f 5f       	subi	r24, 0xFF	; 255
    3a4e:	89 83       	std	Y+1, r24	; 0x01
    3a50:	89 81       	ldd	r24, Y+1	; 0x01
    3a52:	84 31       	cpi	r24, 0x14	; 20
    3a54:	08 f3       	brcs	.-62     	; 0x3a18 <initializeEEPROMVars+0xb0>
    3a56:	01 c0       	rjmp	.+2      	; 0x3a5a <initializeEEPROMVars+0xf2>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
			if(!g_messages_text[STATION_ID][i]) break;
    3a58:	00 00       	nop
		}
		
		for(i=0; i<20; i++)
    3a5a:	19 82       	std	Y+1, r1	; 0x01
    3a5c:	1d c0       	rjmp	.+58     	; 0x3a98 <initializeEEPROMVars+0x130>
		{
			g_messages_text[PATTERN_TEXT][i] = (char)eeprom_read_byte((uint8_t*)(&ee_pattern_text[i]));
    3a5e:	89 81       	ldd	r24, Y+1	; 0x01
    3a60:	08 2f       	mov	r16, r24
    3a62:	10 e0       	ldi	r17, 0x00	; 0
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	88 2f       	mov	r24, r24
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	8b 5e       	subi	r24, 0xEB	; 235
    3a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6e:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
    3a72:	28 2f       	mov	r18, r24
    3a74:	c8 01       	movw	r24, r16
    3a76:	85 54       	subi	r24, 0x45	; 69
    3a78:	99 4f       	sbci	r25, 0xF9	; 249
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	20 83       	st	Z, r18
			if(!g_messages_text[PATTERN_TEXT][i]) break;
    3a7e:	89 81       	ldd	r24, Y+1	; 0x01
    3a80:	88 2f       	mov	r24, r24
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	85 54       	subi	r24, 0x45	; 69
    3a86:	99 4f       	sbci	r25, 0xF9	; 249
    3a88:	fc 01       	movw	r30, r24
    3a8a:	80 81       	ld	r24, Z
    3a8c:	88 23       	and	r24, r24
    3a8e:	09 f4       	brne	.+2      	; 0x3a92 <initializeEEPROMVars+0x12a>
    3a90:	4b c0       	rjmp	.+150    	; 0x3b28 <initializeEEPROMVars+0x1c0>
		{
			g_messages_text[STATION_ID][i] = (char)eeprom_read_byte((uint8_t*)(&ee_stationID_text[i]));
			if(!g_messages_text[STATION_ID][i]) break;
		}
		
		for(i=0; i<20; i++)
    3a92:	89 81       	ldd	r24, Y+1	; 0x01
    3a94:	8f 5f       	subi	r24, 0xFF	; 255
    3a96:	89 83       	std	Y+1, r24	; 0x01
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	84 31       	cpi	r24, 0x14	; 20
    3a9c:	00 f3       	brcs	.-64     	; 0x3a5e <initializeEEPROMVars+0xf6>

		saveAllEEPROM();
		eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
		wdt_reset();                                    /* HW watchdog */
	}
}
    3a9e:	45 c0       	rjmp	.+138    	; 0x3b2a <initializeEEPROMVars+0x1c2>
			if(!g_messages_text[PATTERN_TEXT][i]) break;
		}
	}
	else
	{
		g_event_start_time = EEPROM_START_TIME_DEFAULT;
    3aa0:	10 92 e7 06 	sts	0x06E7, r1	; 0x8006e7 <g_event_start_time>
    3aa4:	10 92 e8 06 	sts	0x06E8, r1	; 0x8006e8 <g_event_start_time+0x1>
    3aa8:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <g_event_start_time+0x2>
    3aac:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <g_event_start_time+0x3>
		g_event_finish_time = EEPROM_FINISH_TIME_DEFAULT;
    3ab0:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <g_event_finish_time>
    3ab4:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <g_event_finish_time+0x1>
    3ab8:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <g_event_finish_time+0x2>
    3abc:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <g_event_finish_time+0x3>
		
		g_id_codespeed = EEPROM_ID_CODE_SPEED_DEFAULT;
    3ac0:	84 e1       	ldi	r24, 0x14	; 20
    3ac2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_id_codespeed>
		g_pattern_codespeed = EEPROM_PATTERN_CODE_SPEED_DEFAULT;
    3ac6:	88 e0       	ldi	r24, 0x08	; 8
    3ac8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_pattern_codespeed>
		g_on_air_seconds = EEPROM_ON_AIR_TIME_DEFAULT;
    3acc:	8c e3       	ldi	r24, 0x3C	; 60
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_on_air_seconds+0x1>
    3ad4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_on_air_seconds>
		g_off_air_seconds = EEPROM_OFF_AIR_TIME_DEFAULT;
    3ad8:	80 ef       	ldi	r24, 0xF0	; 240
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_off_air_seconds+0x1>
    3ae0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_off_air_seconds>
		g_intra_cycle_delay_time = EEPROM_INTRA_CYCLE_DELAY_TIME_DEFAULT;
    3ae4:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    3ae8:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <g_intra_cycle_delay_time>
		g_ID_time = EEPROM_ID_TIME_INTERVAL_DEFAULT;
    3aec:	8c e2       	ldi	r24, 0x2C	; 44
    3aee:	91 e0       	ldi	r25, 0x01	; 1
    3af0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_ID_time+0x1>
    3af4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_ID_time>
		
		strncpy(g_messages_text[STATION_ID], EEPROM_STATION_ID_DEFAULT, MAX_PATTERN_TEXT_LENGTH);
    3af8:	44 e1       	ldi	r20, 0x14	; 20
    3afa:	50 e0       	ldi	r21, 0x00	; 0
    3afc:	61 e0       	ldi	r22, 0x01	; 1
    3afe:	75 e0       	ldi	r23, 0x05	; 5
    3b00:	8f ec       	ldi	r24, 0xCF	; 207
    3b02:	96 e0       	ldi	r25, 0x06	; 6
    3b04:	0e 94 26 38 	call	0x704c	; 0x704c <strncpy>
		strncpy(g_messages_text[PATTERN_TEXT], EEPROM_PATTERN_TEXT_DEFAULT, MAX_PATTERN_TEXT_LENGTH);
    3b08:	44 e1       	ldi	r20, 0x14	; 20
    3b0a:	50 e0       	ldi	r21, 0x00	; 0
    3b0c:	68 e0       	ldi	r22, 0x08	; 8
    3b0e:	75 e0       	ldi	r23, 0x05	; 5
    3b10:	8b eb       	ldi	r24, 0xBB	; 187
    3b12:	96 e0       	ldi	r25, 0x06	; 6
    3b14:	0e 94 26 38 	call	0x704c	; 0x704c <strncpy>

		saveAllEEPROM();
    3b18:	0f d0       	rcall	.+30     	; 0x3b38 <saveAllEEPROM>
		eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    3b1a:	6a ea       	ldi	r22, 0xAA	; 170
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 05 3b 	call	0x760a	; 0x760a <eeprom_write_byte>
		wdt_reset();                                    /* HW watchdog */
    3b24:	a8 95       	wdr
	}
}
    3b26:	01 c0       	rjmp	.+2      	; 0x3b2a <initializeEEPROMVars+0x1c2>
		}
		
		for(i=0; i<20; i++)
		{
			g_messages_text[PATTERN_TEXT][i] = (char)eeprom_read_byte((uint8_t*)(&ee_pattern_text[i]));
			if(!g_messages_text[PATTERN_TEXT][i]) break;
    3b28:	00 00       	nop

		saveAllEEPROM();
		eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
		wdt_reset();                                    /* HW watchdog */
	}
}
    3b2a:	00 00       	nop
    3b2c:	0f 90       	pop	r0
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

00003b38 <saveAllEEPROM>:

void saveAllEEPROM()
{
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <saveAllEEPROM+0x6>
    3b3e:	cd b7       	in	r28, 0x3d	; 61
    3b40:	de b7       	in	r29, 0x3e	; 62
	int i;
	wdt_reset();                                    /* HW watchdog */
    3b42:	a8 95       	wdr
	
	storeEEdwordIfChanged((uint32_t*)&ee_start_time, g_event_start_time);
    3b44:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <g_event_start_time>
    3b48:	90 91 e8 06 	lds	r25, 0x06E8	; 0x8006e8 <g_event_start_time+0x1>
    3b4c:	a0 91 e9 06 	lds	r26, 0x06E9	; 0x8006e9 <g_event_start_time+0x2>
    3b50:	b0 91 ea 06 	lds	r27, 0x06EA	; 0x8006ea <g_event_start_time+0x3>
    3b54:	ac 01       	movw	r20, r24
    3b56:	bd 01       	movw	r22, r26
    3b58:	83 e3       	ldi	r24, 0x33	; 51
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <storeEEdwordIfChanged>
	storeEEdwordIfChanged((uint32_t*)&ee_finish_time, g_event_finish_time);
    3b60:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <g_event_finish_time>
    3b64:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <g_event_finish_time+0x1>
    3b68:	a0 91 ed 06 	lds	r26, 0x06ED	; 0x8006ed <g_event_finish_time+0x2>
    3b6c:	b0 91 ee 06 	lds	r27, 0x06EE	; 0x8006ee <g_event_finish_time+0x3>
    3b70:	ac 01       	movw	r20, r24
    3b72:	bd 01       	movw	r22, r26
    3b74:	87 e3       	ldi	r24, 0x37	; 55
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <storeEEdwordIfChanged>
	
	storeEEbyteIfChanged(&ee_id_codespeed, g_id_codespeed);
    3b7c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <g_id_codespeed>
    3b80:	68 2f       	mov	r22, r24
    3b82:	8a e2       	ldi	r24, 0x2A	; 42
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_pattern_codespeed, g_pattern_codespeed);
    3b8a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_pattern_codespeed>
    3b8e:	68 2f       	mov	r22, r24
    3b90:	89 e2       	ldi	r24, 0x29	; 41
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <storeEEbyteIfChanged>
	storeEEwordIfChanged(&ee_on_air_time, g_on_air_seconds);
    3b98:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_on_air_seconds>
    3b9c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_on_air_seconds+0x1>
    3ba0:	bc 01       	movw	r22, r24
    3ba2:	8b e2       	ldi	r24, 0x2B	; 43
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <storeEEwordIfChanged>
	storeEEwordIfChanged(&ee_off_air_time, g_off_air_seconds);
    3baa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_off_air_seconds>
    3bae:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_off_air_seconds+0x1>
    3bb2:	bc 01       	movw	r22, r24
    3bb4:	8d e2       	ldi	r24, 0x2D	; 45
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <storeEEwordIfChanged>
	storeEEwordIfChanged(&ee_intra_cycle_delay_time, g_intra_cycle_delay_time);
    3bbc:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <g_intra_cycle_delay_time>
    3bc0:	90 91 e6 06 	lds	r25, 0x06E6	; 0x8006e6 <g_intra_cycle_delay_time+0x1>
    3bc4:	bc 01       	movw	r22, r24
    3bc6:	8f e2       	ldi	r24, 0x2F	; 47
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <storeEEwordIfChanged>
	storeEEwordIfChanged(&ee_ID_time, g_ID_time);
    3bce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_ID_time>
    3bd2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_ID_time+0x1>
    3bd6:	bc 01       	movw	r22, r24
    3bd8:	81 e3       	ldi	r24, 0x31	; 49
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <storeEEwordIfChanged>

	for(i=0; i<strlen(g_messages_text[STATION_ID]); i++)
    3be0:	1a 82       	std	Y+2, r1	; 0x02
    3be2:	19 82       	std	Y+1, r1	; 0x01
	{
		storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
    3be4:	11 c0       	rjmp	.+34     	; 0x3c08 <saveAllEEPROM+0xd0>
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
    3be8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bea:	81 53       	subi	r24, 0x31	; 49
    3bec:	99 4f       	sbci	r25, 0xF9	; 249
    3bee:	fc 01       	movw	r30, r24
    3bf0:	20 81       	ld	r18, Z
    3bf2:	89 81       	ldd	r24, Y+1	; 0x01
    3bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf6:	8f 5f       	subi	r24, 0xFF	; 255
    3bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bfa:	62 2f       	mov	r22, r18
	storeEEwordIfChanged(&ee_on_air_time, g_on_air_seconds);
	storeEEwordIfChanged(&ee_off_air_time, g_off_air_seconds);
	storeEEwordIfChanged(&ee_intra_cycle_delay_time, g_intra_cycle_delay_time);
	storeEEwordIfChanged(&ee_ID_time, g_ID_time);

	for(i=0; i<strlen(g_messages_text[STATION_ID]); i++)
    3bfc:	dd d7       	rcall	.+4026   	; 0x4bb8 <storeEEbyteIfChanged>
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	9a 81       	ldd	r25, Y+2	; 0x02
    3c02:	01 96       	adiw	r24, 0x01	; 1
    3c04:	9a 83       	std	Y+2, r25	; 0x02
    3c06:	89 83       	std	Y+1, r24	; 0x01
    3c08:	8f ec       	ldi	r24, 0xCF	; 207
    3c0a:	96 e0       	ldi	r25, 0x06	; 6
    3c0c:	0e 94 1d 38 	call	0x703a	; 0x703a <strlen>
    3c10:	9c 01       	movw	r18, r24
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	9a 81       	ldd	r25, Y+2	; 0x02
    3c16:	82 17       	cp	r24, r18
	{
		storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
	}

	storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], 0);
    3c18:	93 07       	cpc	r25, r19
    3c1a:	28 f3       	brcs	.-54     	; 0x3be6 <saveAllEEPROM+0xae>
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c20:	8f 5f       	subi	r24, 0xFF	; 255
    3c22:	9f 4f       	sbci	r25, 0xFF	; 255
    3c24:	60 e0       	ldi	r22, 0x00	; 0
	
	for(i=0; i<strlen(g_messages_text[PATTERN_TEXT]); i++)
    3c26:	c8 d7       	rcall	.+3984   	; 0x4bb8 <storeEEbyteIfChanged>
    3c28:	1a 82       	std	Y+2, r1	; 0x02
    3c2a:	19 82       	std	Y+1, r1	; 0x01
	{
		storeEEbyteIfChanged((uint8_t*)&ee_pattern_text[i], (uint8_t)g_messages_text[PATTERN_TEXT][i]);
    3c2c:	11 c0       	rjmp	.+34     	; 0x3c50 <saveAllEEPROM+0x118>
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	9a 81       	ldd	r25, Y+2	; 0x02
    3c32:	85 54       	subi	r24, 0x45	; 69
    3c34:	99 4f       	sbci	r25, 0xF9	; 249
    3c36:	fc 01       	movw	r30, r24
    3c38:	20 81       	ld	r18, Z
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
    3c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c3e:	8b 5e       	subi	r24, 0xEB	; 235
    3c40:	9f 4f       	sbci	r25, 0xFF	; 255
    3c42:	62 2f       	mov	r22, r18
		storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], (uint8_t)g_messages_text[STATION_ID][i]);
	}

	storeEEbyteIfChanged((uint8_t*)&ee_stationID_text[i], 0);
	
	for(i=0; i<strlen(g_messages_text[PATTERN_TEXT]); i++)
    3c44:	b9 d7       	rcall	.+3954   	; 0x4bb8 <storeEEbyteIfChanged>
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	9a 81       	ldd	r25, Y+2	; 0x02
    3c4a:	01 96       	adiw	r24, 0x01	; 1
    3c4c:	9a 83       	std	Y+2, r25	; 0x02
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    3c50:	8b eb       	ldi	r24, 0xBB	; 187
    3c52:	96 e0       	ldi	r25, 0x06	; 6
    3c54:	0e 94 1d 38 	call	0x703a	; 0x703a <strlen>
    3c58:	9c 01       	movw	r18, r24
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c5e:	82 17       	cp	r24, r18
    3c60:	93 07       	cpc	r25, r19
	{
		storeEEbyteIfChanged((uint8_t*)&ee_pattern_text[i], (uint8_t)g_messages_text[PATTERN_TEXT][i]);
	}
	
	storeEEbyteIfChanged((uint8_t*)&ee_pattern_text[i], 0);
    3c62:	28 f3       	brcs	.-54     	; 0x3c2e <saveAllEEPROM+0xf6>
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	9a 81       	ldd	r25, Y+2	; 0x02
    3c68:	8b 5e       	subi	r24, 0xEB	; 235
    3c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6c:	60 e0       	ldi	r22, 0x00	; 0
    3c6e:	a4 d7       	rcall	.+3912   	; 0x4bb8 <storeEEbyteIfChanged>
}
    3c70:	00 00       	nop
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	df 91       	pop	r29
    3c78:	cf 91       	pop	r28
    3c7a:	08 95       	ret

00003c7c <throttleValue>:

uint16_t throttleValue(uint8_t speed)
{
    3c7c:	cf 93       	push	r28
    3c7e:	df 93       	push	r29
    3c80:	00 d0       	rcall	.+0      	; 0x3c82 <throttleValue+0x6>
    3c82:	1f 92       	push	r1
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t temp = (7042L / (uint16_t)speed) / 10L;
    3c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8c:	28 2f       	mov	r18, r24
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e0       	ldi	r20, 0x00	; 0
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	82 e8       	ldi	r24, 0x82	; 130
    3c96:	9b e1       	ldi	r25, 0x1B	; 27
    3c98:	a0 e0       	ldi	r26, 0x00	; 0
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	bc 01       	movw	r22, r24
    3c9e:	cd 01       	movw	r24, r26
    3ca0:	0e 94 89 37 	call	0x6f12	; 0x6f12 <__divmodsi4>
    3ca4:	da 01       	movw	r26, r20
    3ca6:	c9 01       	movw	r24, r18
    3ca8:	2a e0       	ldi	r18, 0x0A	; 10
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	50 e0       	ldi	r21, 0x00	; 0
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	0e 94 89 37 	call	0x6f12	; 0x6f12 <__divmodsi4>
    3cb8:	da 01       	movw	r26, r20
    3cba:	c9 01       	movw	r24, r18
    3cbc:	9a 83       	std	Y+2, r25	; 0x02
    3cbe:	89 83       	std	Y+1, r24	; 0x01
	return temp;
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	df 91       	pop	r29
    3ccc:	cf 91       	pop	r28
    3cce:	08 95       	ret

00003cd0 <makeMorse>:
Call this function with a NULL argument at intervals of 1 element of time to generate Morse code. 
Once loaded with a string each call to this function returns a BOOL indicating whether a CW carrier should be sent
Pass in a pointer to a BOOL in the second and third arguments:  
*/
BOOL makeMorse(char* s, BOOL* repeating, BOOL* finished)
{
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	28 97       	sbiw	r28, 0x08	; 8
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	de bf       	out	0x3e, r29	; 62
    3ce0:	0f be       	out	0x3f, r0	; 63
    3ce2:	cd bf       	out	0x3d, r28	; 61
    3ce4:	9c 83       	std	Y+4, r25	; 0x04
    3ce6:	8b 83       	std	Y+3, r24	; 0x03
    3ce8:	7e 83       	std	Y+6, r23	; 0x06
    3cea:	6d 83       	std	Y+5, r22	; 0x05
    3cec:	58 87       	std	Y+8, r21	; 0x08
    3cee:	4f 83       	std	Y+7, r20	; 0x07
	static uint8_t elementIndex; /* units of time: dit = 1, dah = 3, intersymbol = 1, intercharacter = 3, etc. */
	static uint8_t addedSpace; /* adds additional time to make an inter-character space */
	static BOOL completedString = FALSE;
	static BOOL carrierOn = FALSE;
	
	if(s) /* load a new NULL-terminated string to send */
    3cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf4:	89 2b       	or	r24, r25
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <makeMorse+0x2a>
    3cf8:	44 c0       	rjmp	.+136    	; 0x3d82 <makeMorse+0xb2>
	{
		if(repeating) repeat = *repeating;
    3cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfe:	89 2b       	or	r24, r25
    3d00:	31 f0       	breq	.+12     	; 0x3d0e <makeMorse+0x3e>
    3d02:	8d 81       	ldd	r24, Y+5	; 0x05
    3d04:	9e 81       	ldd	r25, Y+6	; 0x06
    3d06:	fc 01       	movw	r30, r24
    3d08:	80 81       	ld	r24, Z
    3d0a:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <repeat.1848>
		
		if(*s)
    3d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d10:	9c 81       	ldd	r25, Y+4	; 0x04
    3d12:	fc 01       	movw	r30, r24
    3d14:	80 81       	ld	r24, Z
    3d16:	88 23       	and	r24, r24
    3d18:	01 f1       	breq	.+64     	; 0x3d5a <makeMorse+0x8a>
		{
			str = s;
    3d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1e:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <str.1847+0x1>
    3d22:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <str.1847>
			morseInProgress = getMorseChar(*str);
    3d26:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <str.1847>
    3d2a:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <str.1847+0x1>
    3d2e:	fc 01       	movw	r30, r24
    3d30:	80 81       	ld	r24, Z
    3d32:	5c d1       	rcall	.+696    	; 0x3fec <getMorseChar>
    3d34:	a8 2f       	mov	r26, r24
    3d36:	cb 01       	movw	r24, r22
    3d38:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <morseInProgress.1849>
    3d3c:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <morseInProgress.1849+0x1>
    3d40:	a0 93 3c 07 	sts	0x073C, r26	; 0x80073c <morseInProgress.1849+0x2>
			charIndex = 0;
    3d44:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <charIndex.1850>
			symbolIndex = 0;
    3d48:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <symbolIndex.1851>
			elementIndex = 0;
    3d4c:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <elementIndex.1852>
			addedSpace = 0;
    3d50:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <addedSpace.1853>
			completedString = FALSE;
    3d54:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <completedString.1854>
    3d58:	10 c0       	rjmp	.+32     	; 0x3d7a <makeMorse+0xaa>
		}
		else /* a zero-length string shuts down makeMorse */
		{
			str = NULL;
    3d5a:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <str.1847+0x1>
    3d5e:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <str.1847>
			completedString = TRUE;
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <completedString.1854>
			if(finished) *finished = TRUE;
    3d68:	8f 81       	ldd	r24, Y+7	; 0x07
    3d6a:	98 85       	ldd	r25, Y+8	; 0x08
    3d6c:	89 2b       	or	r24, r25
    3d6e:	29 f0       	breq	.+10     	; 0x3d7a <makeMorse+0xaa>
    3d70:	8f 81       	ldd	r24, Y+7	; 0x07
    3d72:	98 85       	ldd	r25, Y+8	; 0x08
    3d74:	21 e0       	ldi	r18, 0x01	; 1
    3d76:	fc 01       	movw	r30, r24
    3d78:	20 83       	st	Z, r18
		}

		carrierOn = OFF;
    3d7a:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <carrierOn.1855>
		return OFF;
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	d6 c0       	rjmp	.+428    	; 0x3f2e <makeMorse+0x25e>
	}
	else if(str)
    3d82:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <str.1847>
    3d86:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <str.1847+0x1>
    3d8a:	89 2b       	or	r24, r25
    3d8c:	09 f4       	brne	.+2      	; 0x3d90 <makeMorse+0xc0>
    3d8e:	c3 c0       	rjmp	.+390    	; 0x3f16 <makeMorse+0x246>
	{
		if(*str == '<') // constant tone
    3d90:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <str.1847>
    3d94:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <str.1847+0x1>
    3d98:	fc 01       	movw	r30, r24
    3d9a:	80 81       	ld	r24, Z
    3d9c:	8c 33       	cpi	r24, 0x3C	; 60
    3d9e:	21 f4       	brne	.+8      	; 0x3da8 <makeMorse+0xd8>
		{
			carrierOn = TRUE;
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <carrierOn.1855>
    3da6:	b7 c0       	rjmp	.+366    	; 0x3f16 <makeMorse+0x246>
		}
		else
		{
			if(repeating) *repeating = repeat;
    3da8:	8d 81       	ldd	r24, Y+5	; 0x05
    3daa:	9e 81       	ldd	r25, Y+6	; 0x06
    3dac:	89 2b       	or	r24, r25
    3dae:	31 f0       	breq	.+12     	; 0x3dbc <makeMorse+0xec>
    3db0:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <repeat.1848>
    3db4:	8d 81       	ldd	r24, Y+5	; 0x05
    3db6:	9e 81       	ldd	r25, Y+6	; 0x06
    3db8:	fc 01       	movw	r30, r24
    3dba:	20 83       	st	Z, r18
			if(completedString)
    3dbc:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <completedString.1854>
    3dc0:	88 23       	and	r24, r24
    3dc2:	59 f0       	breq	.+22     	; 0x3dda <makeMorse+0x10a>
			{
				if(finished) *finished = TRUE;
    3dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    3dc6:	98 85       	ldd	r25, Y+8	; 0x08
    3dc8:	89 2b       	or	r24, r25
    3dca:	29 f0       	breq	.+10     	; 0x3dd6 <makeMorse+0x106>
    3dcc:	8f 81       	ldd	r24, Y+7	; 0x07
    3dce:	98 85       	ldd	r25, Y+8	; 0x08
    3dd0:	21 e0       	ldi	r18, 0x01	; 1
    3dd2:	fc 01       	movw	r30, r24
    3dd4:	20 83       	st	Z, r18
				return OFF;
    3dd6:	80 e0       	ldi	r24, 0x00	; 0
    3dd8:	aa c0       	rjmp	.+340    	; 0x3f2e <makeMorse+0x25e>
			}

			if(elementIndex)
    3dda:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <elementIndex.1852>
    3dde:	88 23       	and	r24, r24
    3de0:	31 f0       	breq	.+12     	; 0x3dee <makeMorse+0x11e>
			{
				elementIndex--;
    3de2:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <elementIndex.1852>
    3de6:	81 50       	subi	r24, 0x01	; 1
    3de8:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <elementIndex.1852>
    3dec:	94 c0       	rjmp	.+296    	; 0x3f16 <makeMorse+0x246>
			}
			else if(carrierOn) /* carrier is on, so turn it off and wait appropriate amount of space */
    3dee:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <carrierOn.1855>
    3df2:	88 23       	and	r24, r24
    3df4:	71 f0       	breq	.+28     	; 0x3e12 <makeMorse+0x142>
			{
				carrierOn = FALSE;
    3df6:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <carrierOn.1855>
				/* wait one element = inter-symbol space */
				if(addedSpace)
    3dfa:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <addedSpace.1853>
    3dfe:	88 23       	and	r24, r24
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <makeMorse+0x134>
    3e02:	89 c0       	rjmp	.+274    	; 0x3f16 <makeMorse+0x246>
				{
					elementIndex = addedSpace;
    3e04:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <addedSpace.1853>
    3e08:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <elementIndex.1852>
					addedSpace = 0;
    3e0c:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <addedSpace.1853>
    3e10:	82 c0       	rjmp	.+260    	; 0x3f16 <makeMorse+0x246>
				}
				/* wait inter-character space */
			}
			else /* carrier is off, so turn it on and get next symbol */
			{
				if(symbolIndex >= morseInProgress.lengthInSymbols)
    3e12:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <morseInProgress.1849+0x1>
    3e16:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <symbolIndex.1851>
    3e1a:	89 17       	cp	r24, r25
    3e1c:	08 f4       	brcc	.+2      	; 0x3e20 <makeMorse+0x150>
    3e1e:	43 c0       	rjmp	.+134    	; 0x3ea6 <makeMorse+0x1d6>
				{
					char c = (*(str + ++charIndex));
    3e20:	20 91 38 07 	lds	r18, 0x0738	; 0x800738 <str.1847>
    3e24:	30 91 39 07 	lds	r19, 0x0739	; 0x800739 <str.1847+0x1>
    3e28:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <charIndex.1850>
    3e2c:	8f 5f       	subi	r24, 0xFF	; 255
    3e2e:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <charIndex.1850>
    3e32:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <charIndex.1850>
    3e36:	88 2f       	mov	r24, r24
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	82 0f       	add	r24, r18
    3e3c:	93 1f       	adc	r25, r19
    3e3e:	fc 01       	movw	r30, r24
    3e40:	80 81       	ld	r24, Z
    3e42:	89 83       	std	Y+1, r24	; 0x01
				
					if(!c) /* wrap to beginning of text */
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	88 23       	and	r24, r24
    3e48:	11 f5       	brne	.+68     	; 0x3e8e <makeMorse+0x1be>
					{
						if(repeat)
    3e4a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <repeat.1848>
    3e4e:	88 23       	and	r24, r24
    3e50:	51 f0       	breq	.+20     	; 0x3e66 <makeMorse+0x196>
						{
							c = *str;
    3e52:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <str.1847>
    3e56:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <str.1847+0x1>
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	80 81       	ld	r24, Z
    3e5e:	89 83       	std	Y+1, r24	; 0x01
							charIndex = 0;
    3e60:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <charIndex.1850>
    3e64:	14 c0       	rjmp	.+40     	; 0x3e8e <makeMorse+0x1be>
						}
						else
						{
							str = NULL;
    3e66:	10 92 39 07 	sts	0x0739, r1	; 0x800739 <str.1847+0x1>
    3e6a:	10 92 38 07 	sts	0x0738, r1	; 0x800738 <str.1847>
							carrierOn = OFF;
    3e6e:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <carrierOn.1855>
							completedString = TRUE;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <completedString.1854>
							if(finished) *finished = TRUE;
    3e78:	8f 81       	ldd	r24, Y+7	; 0x07
    3e7a:	98 85       	ldd	r25, Y+8	; 0x08
    3e7c:	89 2b       	or	r24, r25
    3e7e:	29 f0       	breq	.+10     	; 0x3e8a <makeMorse+0x1ba>
    3e80:	8f 81       	ldd	r24, Y+7	; 0x07
    3e82:	98 85       	ldd	r25, Y+8	; 0x08
    3e84:	21 e0       	ldi	r18, 0x01	; 1
    3e86:	fc 01       	movw	r30, r24
    3e88:	20 83       	st	Z, r18
							return OFF;
    3e8a:	80 e0       	ldi	r24, 0x00	; 0
    3e8c:	50 c0       	rjmp	.+160    	; 0x3f2e <makeMorse+0x25e>
						}
					}
			
					morseInProgress = getMorseChar(c);
    3e8e:	89 81       	ldd	r24, Y+1	; 0x01
    3e90:	ad d0       	rcall	.+346    	; 0x3fec <getMorseChar>
    3e92:	a8 2f       	mov	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <morseInProgress.1849>
    3e9a:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <morseInProgress.1849+0x1>
    3e9e:	a0 93 3c 07 	sts	0x073C, r26	; 0x80073c <morseInProgress.1849+0x2>
					symbolIndex = 0;
    3ea2:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <symbolIndex.1851>
				}

				if(morseInProgress.pattern < INTER_WORD_SPACE)
    3ea6:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <morseInProgress.1849>
    3eaa:	8d 3f       	cpi	r24, 0xFD	; 253
    3eac:	50 f5       	brcc	.+84     	; 0x3f02 <makeMorse+0x232>
				{
					BOOL isDah = morseInProgress.pattern & (1 << symbolIndex++);
    3eae:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <morseInProgress.1849>
    3eb2:	48 2f       	mov	r20, r24
    3eb4:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <symbolIndex.1851>
    3eb8:	91 e0       	ldi	r25, 0x01	; 1
    3eba:	98 0f       	add	r25, r24
    3ebc:	90 93 3e 07 	sts	0x073E, r25	; 0x80073e <symbolIndex.1851>
    3ec0:	28 2f       	mov	r18, r24
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	02 c0       	rjmp	.+4      	; 0x3ece <makeMorse+0x1fe>
    3eca:	88 0f       	add	r24, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	2a 95       	dec	r18
    3ed0:	e2 f7       	brpl	.-8      	; 0x3eca <makeMorse+0x1fa>
    3ed2:	84 23       	and	r24, r20
    3ed4:	8a 83       	std	Y+2, r24	; 0x02
				
					if(isDah)
    3ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed8:	88 23       	and	r24, r24
    3eda:	21 f0       	breq	.+8      	; 0x3ee4 <makeMorse+0x214>
					{
						elementIndex = 2;
    3edc:	82 e0       	ldi	r24, 0x02	; 2
    3ede:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <elementIndex.1852>
    3ee2:	02 c0       	rjmp	.+4      	; 0x3ee8 <makeMorse+0x218>
					}		
					else
					{
						elementIndex = 0;
    3ee4:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <elementIndex.1852>
					}
					
					carrierOn = TRUE;
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <carrierOn.1855>
				
					if(symbolIndex >= morseInProgress.lengthInSymbols) addedSpace = 2;
    3eee:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <morseInProgress.1849+0x1>
    3ef2:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <symbolIndex.1851>
    3ef6:	89 17       	cp	r24, r25
    3ef8:	70 f0       	brcs	.+28     	; 0x3f16 <makeMorse+0x246>
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <addedSpace.1853>
    3f00:	0a c0       	rjmp	.+20     	; 0x3f16 <makeMorse+0x246>
				} 
				else
				{
					symbolIndex = 255; /* ensure the next character gets read */
    3f02:	8f ef       	ldi	r24, 0xFF	; 255
    3f04:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <symbolIndex.1851>
					carrierOn = FALSE;
    3f08:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <carrierOn.1855>
					elementIndex = morseInProgress.lengthInSymbols-4;
    3f0c:	80 91 3b 07 	lds	r24, 0x073B	; 0x80073b <morseInProgress.1849+0x1>
    3f10:	84 50       	subi	r24, 0x04	; 4
    3f12:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <elementIndex.1852>
				}
			}
		}
	}
	
	if(finished) *finished = completedString;
    3f16:	8f 81       	ldd	r24, Y+7	; 0x07
    3f18:	98 85       	ldd	r25, Y+8	; 0x08
    3f1a:	89 2b       	or	r24, r25
    3f1c:	31 f0       	breq	.+12     	; 0x3f2a <makeMorse+0x25a>
    3f1e:	20 91 41 07 	lds	r18, 0x0741	; 0x800741 <completedString.1854>
    3f22:	8f 81       	ldd	r24, Y+7	; 0x07
    3f24:	98 85       	ldd	r25, Y+8	; 0x08
    3f26:	fc 01       	movw	r30, r24
    3f28:	20 83       	st	Z, r18
	
	return carrierOn;
    3f2a:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <carrierOn.1855>
}
    3f2e:	28 96       	adiw	r28, 0x08	; 8
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	df 91       	pop	r29
    3f3c:	cf 91       	pop	r28
    3f3e:	08 95       	ret

00003f40 <timeRequiredToSendStrAtWPM>:
/** 
Returns the number of milliseconds required to send the string pointed to by the first argument at the WPM code speed
passed in the second argument.
*/
uint16_t timeRequiredToSendStrAtWPM(char* str, uint16_t spd)
{
    3f40:	cf 93       	push	r28
    3f42:	df 93       	push	r29
    3f44:	cd b7       	in	r28, 0x3d	; 61
    3f46:	de b7       	in	r29, 0x3e	; 62
    3f48:	2b 97       	sbiw	r28, 0x0b	; 11
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	99 87       	std	Y+9, r25	; 0x09
    3f56:	88 87       	std	Y+8, r24	; 0x08
    3f58:	7b 87       	std	Y+11, r23	; 0x0b
    3f5a:	6a 87       	std	Y+10, r22	; 0x0a
	uint8_t elements = 0;
    3f5c:	19 82       	std	Y+1, r1	; 0x01
	MorseCharacter m;
	char c;
	
	for(int i=0; i<20; i++)
    3f5e:	1b 82       	std	Y+3, r1	; 0x03
    3f60:	1a 82       	std	Y+2, r1	; 0x02
    3f62:	22 c0       	rjmp	.+68     	; 0x3fa8 <timeRequiredToSendStrAtWPM+0x68>
	{
		c = str[i];
    3f64:	8a 81       	ldd	r24, Y+2	; 0x02
    3f66:	9b 81       	ldd	r25, Y+3	; 0x03
    3f68:	28 85       	ldd	r18, Y+8	; 0x08
    3f6a:	39 85       	ldd	r19, Y+9	; 0x09
    3f6c:	82 0f       	add	r24, r18
    3f6e:	93 1f       	adc	r25, r19
    3f70:	fc 01       	movw	r30, r24
    3f72:	80 81       	ld	r24, Z
    3f74:	8c 83       	std	Y+4, r24	; 0x04
		if(!c) break;
    3f76:	8c 81       	ldd	r24, Y+4	; 0x04
    3f78:	88 23       	and	r24, r24
		m = getMorseChar(c);
    3f7a:	d9 f0       	breq	.+54     	; 0x3fb2 <timeRequiredToSendStrAtWPM+0x72>
    3f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f7e:	36 d0       	rcall	.+108    	; 0x3fec <getMorseChar>
    3f80:	a8 2f       	mov	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	8d 83       	std	Y+5, r24	; 0x05
    3f86:	9e 83       	std	Y+6, r25	; 0x06
    3f88:	af 83       	std	Y+7, r26	; 0x07
		if(m.pattern < INTER_WORD_SPACE) elements += 3;
    3f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f8c:	8d 3f       	cpi	r24, 0xFD	; 253
    3f8e:	18 f4       	brcc	.+6      	; 0x3f96 <timeRequiredToSendStrAtWPM+0x56>
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	8d 5f       	subi	r24, 0xFD	; 253
    3f94:	89 83       	std	Y+1, r24	; 0x01
		elements += m.lengthInElements;
    3f96:	8f 81       	ldd	r24, Y+7	; 0x07
    3f98:	99 81       	ldd	r25, Y+1	; 0x01
    3f9a:	89 0f       	add	r24, r25
    3f9c:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t elements = 0;
	MorseCharacter m;
	char c;
	
	for(int i=0; i<20; i++)
    3f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fa2:	01 96       	adiw	r24, 0x01	; 1
    3fa4:	9b 83       	std	Y+3, r25	; 0x03
    3fa6:	8a 83       	std	Y+2, r24	; 0x02
    3fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3faa:	9b 81       	ldd	r25, Y+3	; 0x03
    3fac:	44 97       	sbiw	r24, 0x14	; 20
    3fae:	d4 f2       	brlt	.-76     	; 0x3f64 <timeRequiredToSendStrAtWPM+0x24>
    3fb0:	01 c0       	rjmp	.+2      	; 0x3fb4 <timeRequiredToSendStrAtWPM+0x74>
	{
		c = str[i];
		if(!c) break;
    3fb2:	00 00       	nop
		m = getMorseChar(c);
		if(m.pattern < INTER_WORD_SPACE) elements += 3;
		elements += m.lengthInElements;
	}
	
	return (elements * WPM_TO_MS_PER_DOT(spd));
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	28 2f       	mov	r18, r24
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	80 eb       	ldi	r24, 0xB0	; 176
    3fbc:	94 e0       	ldi	r25, 0x04	; 4
    3fbe:	4a 85       	ldd	r20, Y+10	; 0x0a
    3fc0:	5b 85       	ldd	r21, Y+11	; 0x0b
    3fc2:	ba 01       	movw	r22, r20
    3fc4:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__udivmodhi4>
    3fc8:	cb 01       	movw	r24, r22
    3fca:	ac 01       	movw	r20, r24
    3fcc:	24 9f       	mul	r18, r20
    3fce:	c0 01       	movw	r24, r0
    3fd0:	25 9f       	mul	r18, r21
    3fd2:	90 0d       	add	r25, r0
    3fd4:	34 9f       	mul	r19, r20
    3fd6:	90 0d       	add	r25, r0
    3fd8:	11 24       	eor	r1, r1
}
    3fda:	2b 96       	adiw	r28, 0x0b	; 11
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	cd bf       	out	0x3d, r28	; 61
    3fe6:	df 91       	pop	r29
    3fe8:	cf 91       	pop	r28
    3fea:	08 95       	ret

00003fec <getMorseChar>:
pattern = a sequence of up to 8 dit and dah symbols contained in an unsigned byte, sequentially read from right to left (first symbol is bit 0)
lengthInSymbols = how many symbols (dits and dahs) the character contains; this is how many pattern bits are used to represent the character
lengthInElements = how long (measured in "dit lengths") is the total character including all inter-symbol spaces. 
*/
MorseCharacter getMorseChar(char c)
{
    3fec:	cf 93       	push	r28
    3fee:	df 93       	push	r29
    3ff0:	00 d0       	rcall	.+0      	; 0x3ff2 <getMorseChar+0x6>
    3ff2:	00 d0       	rcall	.+0      	; 0x3ff4 <getMorseChar+0x8>
    3ff4:	cd b7       	in	r28, 0x3d	; 61
    3ff6:	de b7       	in	r29, 0x3e	; 62
    3ff8:	8c 83       	std	Y+4, r24	; 0x04
	MorseCharacter morse;
	
	switch( c )
    3ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    3ffc:	88 2f       	mov	r24, r24
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	09 2e       	mov	r0, r25
    4002:	00 0c       	add	r0, r0
    4004:	aa 0b       	sbc	r26, r26
    4006:	bb 0b       	sbc	r27, r27
    4008:	40 e2       	ldi	r20, 0x20	; 32
    400a:	50 e0       	ldi	r21, 0x00	; 0
    400c:	2c e5       	ldi	r18, 0x5C	; 92
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	84 1b       	sub	r24, r20
    4012:	95 0b       	sbc	r25, r21
    4014:	28 17       	cp	r18, r24
    4016:	39 07       	cpc	r19, r25
    4018:	08 f4       	brcc	.+2      	; 0x401c <getMorseChar+0x30>
    401a:	8d c1       	rjmp	.+794    	; 0x4336 <getMorseChar+0x34a>
    401c:	8c 5c       	subi	r24, 0xCC	; 204
    401e:	9f 4f       	sbci	r25, 0xFF	; 255
    4020:	fc 01       	movw	r30, r24
    4022:	0c 94 a5 37 	jmp	0x6f4a	; 0x6f4a <__tablejump2__>
	{
		case 'A':
		morse.pattern = 0x02; // 0000 0010;
    4026:	82 e0       	ldi	r24, 0x02	; 2
    4028:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 2;
    402a:	82 e0       	ldi	r24, 0x02	; 2
    402c:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 5;
    402e:	85 e0       	ldi	r24, 0x05	; 5
    4030:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4032:	85 c1       	rjmp	.+778    	; 0x433e <getMorseChar+0x352>
		
		case 'B':
		morse.pattern = 0x01; // 0000 0001;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    4038:	84 e0       	ldi	r24, 0x04	; 4
    403a:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 9;
    403c:	89 e0       	ldi	r24, 0x09	; 9
    403e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4040:	7e c1       	rjmp	.+764    	; 0x433e <getMorseChar+0x352>
		
		case 'C':
		morse.pattern = 0x05; // 0000 0101;
    4042:	85 e0       	ldi	r24, 0x05	; 5
    4044:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    4046:	84 e0       	ldi	r24, 0x04	; 4
    4048:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 11;
    404a:	8b e0       	ldi	r24, 0x0B	; 11
    404c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    404e:	77 c1       	rjmp	.+750    	; 0x433e <getMorseChar+0x352>
		
		case 'D':
		morse.pattern = 0x01; // 0000 0001;
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 3;
    4054:	83 e0       	ldi	r24, 0x03	; 3
    4056:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 7;
    4058:	87 e0       	ldi	r24, 0x07	; 7
    405a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    405c:	70 c1       	rjmp	.+736    	; 0x433e <getMorseChar+0x352>
		
		case 'E':
		morse.pattern = 0x00; // 0000 0000;
    405e:	19 82       	std	Y+1, r1	; 0x01
		morse.lengthInSymbols = 1;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 1;
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4068:	6a c1       	rjmp	.+724    	; 0x433e <getMorseChar+0x352>
		
		case 'F':
		morse.pattern = 0x04; // 0000 0100;
    406a:	84 e0       	ldi	r24, 0x04	; 4
    406c:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    406e:	84 e0       	ldi	r24, 0x04	; 4
    4070:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 9;
    4072:	89 e0       	ldi	r24, 0x09	; 9
    4074:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4076:	63 c1       	rjmp	.+710    	; 0x433e <getMorseChar+0x352>
		
		case 'G':
		morse.pattern = 0x03; // 0000 0011;
    4078:	83 e0       	ldi	r24, 0x03	; 3
    407a:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 3;
    407c:	83 e0       	ldi	r24, 0x03	; 3
    407e:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 9;
    4080:	89 e0       	ldi	r24, 0x09	; 9
    4082:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4084:	5c c1       	rjmp	.+696    	; 0x433e <getMorseChar+0x352>
		
		case 'H':
		morse.pattern = 0x00; // 0000 0000;
    4086:	19 82       	std	Y+1, r1	; 0x01
		morse.lengthInSymbols = 4;
    4088:	84 e0       	ldi	r24, 0x04	; 4
    408a:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 7;
    408c:	87 e0       	ldi	r24, 0x07	; 7
    408e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4090:	56 c1       	rjmp	.+684    	; 0x433e <getMorseChar+0x352>
		
		case 'I':
		morse.pattern = 0x00; // 0000 0000;
    4092:	19 82       	std	Y+1, r1	; 0x01
		morse.lengthInSymbols = 2;
    4094:	82 e0       	ldi	r24, 0x02	; 2
    4096:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 3;
    4098:	83 e0       	ldi	r24, 0x03	; 3
    409a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    409c:	50 c1       	rjmp	.+672    	; 0x433e <getMorseChar+0x352>
		
		case 'J':
		morse.pattern = 0x0e; // 0000 1110;
    409e:	8e e0       	ldi	r24, 0x0E	; 14
    40a0:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    40a2:	84 e0       	ldi	r24, 0x04	; 4
    40a4:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 13;
    40a6:	8d e0       	ldi	r24, 0x0D	; 13
    40a8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    40aa:	49 c1       	rjmp	.+658    	; 0x433e <getMorseChar+0x352>
		
		case 'K':
		morse.pattern = 0x05; // 0000 0101;
    40ac:	85 e0       	ldi	r24, 0x05	; 5
    40ae:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 3;
    40b0:	83 e0       	ldi	r24, 0x03	; 3
    40b2:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 9;
    40b4:	89 e0       	ldi	r24, 0x09	; 9
    40b6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    40b8:	42 c1       	rjmp	.+644    	; 0x433e <getMorseChar+0x352>
		
		case 'L':
		morse.pattern = 0x02; // 0000 0010;
    40ba:	82 e0       	ldi	r24, 0x02	; 2
    40bc:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    40be:	84 e0       	ldi	r24, 0x04	; 4
    40c0:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 9;
    40c2:	89 e0       	ldi	r24, 0x09	; 9
    40c4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    40c6:	3b c1       	rjmp	.+630    	; 0x433e <getMorseChar+0x352>
		
		case 'M':
		morse.pattern = 0x03; // 0000 0011;
    40c8:	83 e0       	ldi	r24, 0x03	; 3
    40ca:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 2;
    40cc:	82 e0       	ldi	r24, 0x02	; 2
    40ce:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 7;
    40d0:	87 e0       	ldi	r24, 0x07	; 7
    40d2:	8b 83       	std	Y+3, r24	; 0x03
		break;
    40d4:	34 c1       	rjmp	.+616    	; 0x433e <getMorseChar+0x352>
		
		case 'N':
		morse.pattern = 0x01; // 0000 0001;
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 2;
    40da:	82 e0       	ldi	r24, 0x02	; 2
    40dc:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 5;
    40de:	85 e0       	ldi	r24, 0x05	; 5
    40e0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    40e2:	2d c1       	rjmp	.+602    	; 0x433e <getMorseChar+0x352>
		
		case 'O':
		morse.pattern = 0x07; // 0000 0111;
    40e4:	87 e0       	ldi	r24, 0x07	; 7
    40e6:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 3;
    40e8:	83 e0       	ldi	r24, 0x03	; 3
    40ea:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 11;
    40ec:	8b e0       	ldi	r24, 0x0B	; 11
    40ee:	8b 83       	std	Y+3, r24	; 0x03
		break;
    40f0:	26 c1       	rjmp	.+588    	; 0x433e <getMorseChar+0x352>
		
		case 'P':
		morse.pattern = 0x06; // 0000 0110;
    40f2:	86 e0       	ldi	r24, 0x06	; 6
    40f4:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    40f6:	84 e0       	ldi	r24, 0x04	; 4
    40f8:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 11;
    40fa:	8b e0       	ldi	r24, 0x0B	; 11
    40fc:	8b 83       	std	Y+3, r24	; 0x03
		break;
    40fe:	1f c1       	rjmp	.+574    	; 0x433e <getMorseChar+0x352>
		
		case 'Q':
		morse.pattern = 0x0b; // 0000 1011;
    4100:	8b e0       	ldi	r24, 0x0B	; 11
    4102:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    4104:	84 e0       	ldi	r24, 0x04	; 4
    4106:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 13;
    4108:	8d e0       	ldi	r24, 0x0D	; 13
    410a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    410c:	18 c1       	rjmp	.+560    	; 0x433e <getMorseChar+0x352>
		
		case 'R':
		morse.pattern = 0x02; // 0000 0010;
    410e:	82 e0       	ldi	r24, 0x02	; 2
    4110:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 3;
    4112:	83 e0       	ldi	r24, 0x03	; 3
    4114:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 7;
    4116:	87 e0       	ldi	r24, 0x07	; 7
    4118:	8b 83       	std	Y+3, r24	; 0x03
		break;
    411a:	11 c1       	rjmp	.+546    	; 0x433e <getMorseChar+0x352>
		
		case 'S':
		morse.pattern = 0x00; // 0000 0000;
    411c:	19 82       	std	Y+1, r1	; 0x01
		morse.lengthInSymbols = 3;
    411e:	83 e0       	ldi	r24, 0x03	; 3
    4120:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 5;
    4122:	85 e0       	ldi	r24, 0x05	; 5
    4124:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4126:	0b c1       	rjmp	.+534    	; 0x433e <getMorseChar+0x352>
		
		case 'T':
		morse.pattern = 0x01; // 0000 0001;
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 1;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 3;
    4130:	83 e0       	ldi	r24, 0x03	; 3
    4132:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4134:	04 c1       	rjmp	.+520    	; 0x433e <getMorseChar+0x352>
		
		case 'U':
		morse.pattern = 0x04; // 0000 0100;
    4136:	84 e0       	ldi	r24, 0x04	; 4
    4138:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 3;
    413a:	83 e0       	ldi	r24, 0x03	; 3
    413c:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 7;
    413e:	87 e0       	ldi	r24, 0x07	; 7
    4140:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4142:	fd c0       	rjmp	.+506    	; 0x433e <getMorseChar+0x352>
		
		case 'V':
		morse.pattern = 0x08; // 0000 1000;
    4144:	88 e0       	ldi	r24, 0x08	; 8
    4146:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    4148:	84 e0       	ldi	r24, 0x04	; 4
    414a:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 9;
    414c:	89 e0       	ldi	r24, 0x09	; 9
    414e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4150:	f6 c0       	rjmp	.+492    	; 0x433e <getMorseChar+0x352>
		
		case 'W':
		morse.pattern = 0x06; // 0000 0110;
    4152:	86 e0       	ldi	r24, 0x06	; 6
    4154:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 3;
    4156:	83 e0       	ldi	r24, 0x03	; 3
    4158:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 9;
    415a:	89 e0       	ldi	r24, 0x09	; 9
    415c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    415e:	ef c0       	rjmp	.+478    	; 0x433e <getMorseChar+0x352>
		
		case 'X':
		morse.pattern = 0x09; // 0000 1001;
    4160:	89 e0       	ldi	r24, 0x09	; 9
    4162:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    4164:	84 e0       	ldi	r24, 0x04	; 4
    4166:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 11;
    4168:	8b e0       	ldi	r24, 0x0B	; 11
    416a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    416c:	e8 c0       	rjmp	.+464    	; 0x433e <getMorseChar+0x352>
		
		case 'Y':
		morse.pattern = 0x0d; // 0000 1101;
    416e:	8d e0       	ldi	r24, 0x0D	; 13
    4170:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    4172:	84 e0       	ldi	r24, 0x04	; 4
    4174:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 13;
    4176:	8d e0       	ldi	r24, 0x0D	; 13
    4178:	8b 83       	std	Y+3, r24	; 0x03
		break;
    417a:	e1 c0       	rjmp	.+450    	; 0x433e <getMorseChar+0x352>
		
		case 'Z':
		morse.pattern = 0x03; // 0000 0011;
    417c:	83 e0       	ldi	r24, 0x03	; 3
    417e:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 4;
    4180:	84 e0       	ldi	r24, 0x04	; 4
    4182:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 11;
    4184:	8b e0       	ldi	r24, 0x0B	; 11
    4186:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4188:	da c0       	rjmp	.+436    	; 0x433e <getMorseChar+0x352>
		
		case '0':
		morse.pattern = 0x1f; // 0001 1111;
    418a:	8f e1       	ldi	r24, 0x1F	; 31
    418c:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    418e:	85 e0       	ldi	r24, 0x05	; 5
    4190:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 19;
    4192:	83 e1       	ldi	r24, 0x13	; 19
    4194:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4196:	d3 c0       	rjmp	.+422    	; 0x433e <getMorseChar+0x352>
		
		case '1':
		morse.pattern = 0x1e; // 0001 1110;
    4198:	8e e1       	ldi	r24, 0x1E	; 30
    419a:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    419c:	85 e0       	ldi	r24, 0x05	; 5
    419e:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 17;
    41a0:	81 e1       	ldi	r24, 0x11	; 17
    41a2:	8b 83       	std	Y+3, r24	; 0x03
		break;
    41a4:	cc c0       	rjmp	.+408    	; 0x433e <getMorseChar+0x352>
		
		case '2':
		morse.pattern = 0x1c; // 0001 1100;
    41a6:	8c e1       	ldi	r24, 0x1C	; 28
    41a8:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    41aa:	85 e0       	ldi	r24, 0x05	; 5
    41ac:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 15;
    41ae:	8f e0       	ldi	r24, 0x0F	; 15
    41b0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    41b2:	c5 c0       	rjmp	.+394    	; 0x433e <getMorseChar+0x352>
		
		case '3':
		morse.pattern = 0x18; // 0001 1000;
    41b4:	88 e1       	ldi	r24, 0x18	; 24
    41b6:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    41b8:	85 e0       	ldi	r24, 0x05	; 5
    41ba:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 13;
    41bc:	8d e0       	ldi	r24, 0x0D	; 13
    41be:	8b 83       	std	Y+3, r24	; 0x03
		break;
    41c0:	be c0       	rjmp	.+380    	; 0x433e <getMorseChar+0x352>
		
		case '4':
		morse.pattern = 0x10; // 0001 0000;
    41c2:	80 e1       	ldi	r24, 0x10	; 16
    41c4:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    41c6:	85 e0       	ldi	r24, 0x05	; 5
    41c8:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 11;
    41ca:	8b e0       	ldi	r24, 0x0B	; 11
    41cc:	8b 83       	std	Y+3, r24	; 0x03
		break;
    41ce:	b7 c0       	rjmp	.+366    	; 0x433e <getMorseChar+0x352>
		
		case '5':
		morse.pattern = 0x00; // 0000 0000;
    41d0:	19 82       	std	Y+1, r1	; 0x01
		morse.lengthInSymbols = 5;
    41d2:	85 e0       	ldi	r24, 0x05	; 5
    41d4:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 9;
    41d6:	89 e0       	ldi	r24, 0x09	; 9
    41d8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    41da:	b1 c0       	rjmp	.+354    	; 0x433e <getMorseChar+0x352>
		case '6':
		morse.pattern = 0x01; // 0000 0001;
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    41e0:	85 e0       	ldi	r24, 0x05	; 5
    41e2:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 11;
    41e4:	8b e0       	ldi	r24, 0x0B	; 11
    41e6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    41e8:	aa c0       	rjmp	.+340    	; 0x433e <getMorseChar+0x352>
		
		case '7':
		morse.pattern = 0x03; // 0000 0011;
    41ea:	83 e0       	ldi	r24, 0x03	; 3
    41ec:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    41ee:	85 e0       	ldi	r24, 0x05	; 5
    41f0:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 13;
    41f2:	8d e0       	ldi	r24, 0x0D	; 13
    41f4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    41f6:	a3 c0       	rjmp	.+326    	; 0x433e <getMorseChar+0x352>
		
		case '8':
		morse.pattern = 0x07; // 0000 0111;
    41f8:	87 e0       	ldi	r24, 0x07	; 7
    41fa:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    41fc:	85 e0       	ldi	r24, 0x05	; 5
    41fe:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 15;
    4200:	8f e0       	ldi	r24, 0x0F	; 15
    4202:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4204:	9c c0       	rjmp	.+312    	; 0x433e <getMorseChar+0x352>
		
		case '9':
		morse.pattern = 0x0f; // 0000 1111;
    4206:	8f e0       	ldi	r24, 0x0F	; 15
    4208:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    420a:	85 e0       	ldi	r24, 0x05	; 5
    420c:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 17;
    420e:	81 e1       	ldi	r24, 0x11	; 17
    4210:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4212:	95 c0       	rjmp	.+298    	; 0x433e <getMorseChar+0x352>
		
		case '.':
		morse.pattern = 0x2a; // 0010 1010;
    4214:	8a e2       	ldi	r24, 0x2A	; 42
    4216:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    4218:	86 e0       	ldi	r24, 0x06	; 6
    421a:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 17;
    421c:	81 e1       	ldi	r24, 0x11	; 17
    421e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4220:	8e c0       	rjmp	.+284    	; 0x433e <getMorseChar+0x352>
		
		case ',':
		morse.pattern = 0x33; // 0011 0011;
    4222:	83 e3       	ldi	r24, 0x33	; 51
    4224:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    4226:	86 e0       	ldi	r24, 0x06	; 6
    4228:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 19;
    422a:	83 e1       	ldi	r24, 0x13	; 19
    422c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    422e:	87 c0       	rjmp	.+270    	; 0x433e <getMorseChar+0x352>
		
		case '?':
		morse.pattern = 0x0c; // 0000 1100;
    4230:	8c e0       	ldi	r24, 0x0C	; 12
    4232:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    4234:	86 e0       	ldi	r24, 0x06	; 6
    4236:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 15;
    4238:	8f e0       	ldi	r24, 0x0F	; 15
    423a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    423c:	80 c0       	rjmp	.+256    	; 0x433e <getMorseChar+0x352>
		
		case '\'':
		morse.pattern = 0x1e; // 0001 1110;
    423e:	8e e1       	ldi	r24, 0x1E	; 30
    4240:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    4242:	86 e0       	ldi	r24, 0x06	; 6
    4244:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 19;
    4246:	83 e1       	ldi	r24, 0x13	; 19
    4248:	8b 83       	std	Y+3, r24	; 0x03
		break;
    424a:	79 c0       	rjmp	.+242    	; 0x433e <getMorseChar+0x352>
		
		case '!':
		morse.pattern = 0x35; // 0011 0101;
    424c:	85 e3       	ldi	r24, 0x35	; 53
    424e:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    4250:	86 e0       	ldi	r24, 0x06	; 6
    4252:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 19;
    4254:	83 e1       	ldi	r24, 0x13	; 19
    4256:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4258:	72 c0       	rjmp	.+228    	; 0x433e <getMorseChar+0x352>
		
		case '/':
		morse.pattern = 0x09; // 0000 1001;
    425a:	89 e0       	ldi	r24, 0x09	; 9
    425c:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    425e:	85 e0       	ldi	r24, 0x05	; 5
    4260:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 13;
    4262:	8d e0       	ldi	r24, 0x0D	; 13
    4264:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4266:	6b c0       	rjmp	.+214    	; 0x433e <getMorseChar+0x352>
		
		case '(':
		morse.pattern = 0x0d; // 0000 1101;
    4268:	8d e0       	ldi	r24, 0x0D	; 13
    426a:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    426c:	85 e0       	ldi	r24, 0x05	; 5
    426e:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 15;
    4270:	8f e0       	ldi	r24, 0x0F	; 15
    4272:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4274:	64 c0       	rjmp	.+200    	; 0x433e <getMorseChar+0x352>
		
		case ')':
		morse.pattern = 0x2d; // 0010 1101;
    4276:	8d e2       	ldi	r24, 0x2D	; 45
    4278:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    427a:	86 e0       	ldi	r24, 0x06	; 6
    427c:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 19;
    427e:	83 e1       	ldi	r24, 0x13	; 19
    4280:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4282:	5d c0       	rjmp	.+186    	; 0x433e <getMorseChar+0x352>
		
		case '&':
		morse.pattern = 0x02; // 0000 0010;
    4284:	82 e0       	ldi	r24, 0x02	; 2
    4286:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    4288:	85 e0       	ldi	r24, 0x05	; 5
    428a:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 11;
    428c:	8b e0       	ldi	r24, 0x0B	; 11
    428e:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4290:	56 c0       	rjmp	.+172    	; 0x433e <getMorseChar+0x352>
		
		case ':':
		morse.pattern = 0x07; // 0000 0111;
    4292:	87 e0       	ldi	r24, 0x07	; 7
    4294:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    4296:	86 e0       	ldi	r24, 0x06	; 6
    4298:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 17;
    429a:	81 e1       	ldi	r24, 0x11	; 17
    429c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    429e:	4f c0       	rjmp	.+158    	; 0x433e <getMorseChar+0x352>
		
		case ';':
		morse.pattern = 0x15; // 0001 0101;
    42a0:	85 e1       	ldi	r24, 0x15	; 21
    42a2:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    42a4:	86 e0       	ldi	r24, 0x06	; 6
    42a6:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 12;
    42a8:	8c e0       	ldi	r24, 0x0C	; 12
    42aa:	8b 83       	std	Y+3, r24	; 0x03
		break;
    42ac:	48 c0       	rjmp	.+144    	; 0x433e <getMorseChar+0x352>
		
		case '=':
		morse.pattern = 0x11; // 0001 0001;
    42ae:	81 e1       	ldi	r24, 0x11	; 17
    42b0:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    42b2:	85 e0       	ldi	r24, 0x05	; 5
    42b4:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 13;
    42b6:	8d e0       	ldi	r24, 0x0D	; 13
    42b8:	8b 83       	std	Y+3, r24	; 0x03
		break;
    42ba:	41 c0       	rjmp	.+130    	; 0x433e <getMorseChar+0x352>
		
		case '+':
		morse.pattern = 0x0a; // 0000 1010;
    42bc:	8a e0       	ldi	r24, 0x0A	; 10
    42be:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 5;
    42c0:	85 e0       	ldi	r24, 0x05	; 5
    42c2:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 13;
    42c4:	8d e0       	ldi	r24, 0x0D	; 13
    42c6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    42c8:	3a c0       	rjmp	.+116    	; 0x433e <getMorseChar+0x352>
		
		case '-':
		morse.pattern = 0x21; // 0010 0001;
    42ca:	81 e2       	ldi	r24, 0x21	; 33
    42cc:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    42ce:	86 e0       	ldi	r24, 0x06	; 6
    42d0:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 15;
    42d2:	8f e0       	ldi	r24, 0x0F	; 15
    42d4:	8b 83       	std	Y+3, r24	; 0x03
		break;
    42d6:	33 c0       	rjmp	.+102    	; 0x433e <getMorseChar+0x352>
		
		case '_':
		morse.pattern = 0x2c; // 0010 1100;
    42d8:	8c e2       	ldi	r24, 0x2C	; 44
    42da:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    42dc:	86 e0       	ldi	r24, 0x06	; 6
    42de:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 17;
    42e0:	81 e1       	ldi	r24, 0x11	; 17
    42e2:	8b 83       	std	Y+3, r24	; 0x03
		break;
    42e4:	2c c0       	rjmp	.+88     	; 0x433e <getMorseChar+0x352>
		
		case '"':
		morse.pattern = 0x12; // 0001 0010;
    42e6:	82 e1       	ldi	r24, 0x12	; 18
    42e8:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    42ea:	86 e0       	ldi	r24, 0x06	; 6
    42ec:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 15;
    42ee:	8f e0       	ldi	r24, 0x0F	; 15
    42f0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    42f2:	25 c0       	rjmp	.+74     	; 0x433e <getMorseChar+0x352>
		
		case '$':
		morse.pattern = 0x48; // 0100 1000;
    42f4:	88 e4       	ldi	r24, 0x48	; 72
    42f6:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 7;
    42f8:	87 e0       	ldi	r24, 0x07	; 7
    42fa:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 17;
    42fc:	81 e1       	ldi	r24, 0x11	; 17
    42fe:	8b 83       	std	Y+3, r24	; 0x03
		break;
    4300:	1e c0       	rjmp	.+60     	; 0x433e <getMorseChar+0x352>
		
		case '@':
		morse.pattern = 0x16; // 0001 0110;
    4302:	86 e1       	ldi	r24, 0x16	; 22
    4304:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 6;
    4306:	86 e0       	ldi	r24, 0x06	; 6
    4308:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 17;
    430a:	81 e1       	ldi	r24, 0x11	; 17
    430c:	8b 83       	std	Y+3, r24	; 0x03
		break;
    430e:	17 c0       	rjmp	.+46     	; 0x433e <getMorseChar+0x352>
		
		case '|': // inter-word space
		morse.pattern = 0xff; // 1000 0000;
    4310:	8f ef       	ldi	r24, 0xFF	; 255
    4312:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 7;
    4314:	87 e0       	ldi	r24, 0x07	; 7
    4316:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 4; /* adjusted by -3 to account for inter-character space */
    4318:	84 e0       	ldi	r24, 0x04	; 4
    431a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    431c:	10 c0       	rjmp	.+32     	; 0x433e <getMorseChar+0x352>
		
		case ' ': // inter-word space
		morse.pattern = 0xfe; // 1000 0000;
    431e:	8e ef       	ldi	r24, 0xFE	; 254
    4320:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 7;
    4322:	87 e0       	ldi	r24, 0x07	; 7
    4324:	8a 83       	std	Y+2, r24	; 0x02
		morse.lengthInElements = 7; // 4 + 3 (character space) = 7
    4326:	87 e0       	ldi	r24, 0x07	; 7
    4328:	8b 83       	std	Y+3, r24	; 0x03
		break;
    432a:	09 c0       	rjmp	.+18     	; 0x433e <getMorseChar+0x352>
		
		case '<': // solid keydown until end of period
		morse.pattern = 0xfd; // 1111 1111;
    432c:	8d ef       	ldi	r24, 0xFD	; 253
    432e:	89 83       	std	Y+1, r24	; 0x01
		morse.lengthInSymbols = 0;
    4330:	1a 82       	std	Y+2, r1	; 0x02
		morse.lengthInElements = 0;
    4332:	1b 82       	std	Y+3, r1	; 0x03
		break;
    4334:	04 c0       	rjmp	.+8      	; 0x433e <getMorseChar+0x352>
		
		default:
		morse.pattern = 0x0000; // 0000 0000;
    4336:	19 82       	std	Y+1, r1	; 0x01
		morse.lengthInSymbols = 0;
    4338:	1a 82       	std	Y+2, r1	; 0x02
		morse.lengthInElements = 0;
    433a:	1b 82       	std	Y+3, r1	; 0x03
		break;
    433c:	00 00       	nop
	}
	
	return morse;
    433e:	89 81       	ldd	r24, Y+1	; 0x01
    4340:	9a 81       	ldd	r25, Y+2	; 0x02
    4342:	ab 81       	ldd	r26, Y+3	; 0x03
}
    4344:	bc 01       	movw	r22, r24
    4346:	8a 2f       	mov	r24, r26
    4348:	0f 90       	pop	r0
    434a:	0f 90       	pop	r0
    434c:	0f 90       	pop	r0
    434e:	0f 90       	pop	r0
    4350:	df 91       	pop	r29
    4352:	cf 91       	pop	r28
    4354:	08 95       	ret

00004356 <txSetFrequency>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended receive frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL txSetFrequency(Frequency_Hz *freq)
	{
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	00 d0       	rcall	.+0      	; 0x435c <txSetFrequency+0x6>
    435c:	00 d0       	rcall	.+0      	; 0x435e <txSetFrequency+0x8>
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
    4362:	9c 83       	std	Y+4, r25	; 0x04
    4364:	8b 83       	std	Y+3, r24	; 0x03
		BOOL activeBandSet = FALSE;
    4366:	19 82       	std	Y+1, r1	; 0x01
		RadioBand bandSet = BAND_INVALID;
    4368:	82 e0       	ldi	r24, 0x02	; 2
    436a:	8a 83       	std	Y+2, r24	; 0x02

		if((*freq < TX_MAXIMUM_80M_FREQUENCY) && (*freq > TX_MINIMUM_80M_FREQUENCY))    /* 80m */
    436c:	8b 81       	ldd	r24, Y+3	; 0x03
    436e:	9c 81       	ldd	r25, Y+4	; 0x04
    4370:	fc 01       	movw	r30, r24
    4372:	80 81       	ld	r24, Z
    4374:	91 81       	ldd	r25, Z+1	; 0x01
    4376:	a2 81       	ldd	r26, Z+2	; 0x02
    4378:	b3 81       	ldd	r27, Z+3	; 0x03
    437a:	81 15       	cp	r24, r1
    437c:	92 41       	sbci	r25, 0x12	; 18
    437e:	aa 47       	sbci	r26, 0x7A	; 122
    4380:	b1 05       	cpc	r27, r1
    4382:	f0 f4       	brcc	.+60     	; 0x43c0 <txSetFrequency+0x6a>
    4384:	8b 81       	ldd	r24, Y+3	; 0x03
    4386:	9c 81       	ldd	r25, Y+4	; 0x04
    4388:	fc 01       	movw	r30, r24
    438a:	80 81       	ld	r24, Z
    438c:	91 81       	ldd	r25, Z+1	; 0x01
    438e:	a2 81       	ldd	r26, Z+2	; 0x02
    4390:	b3 81       	ldd	r27, Z+3	; 0x03
    4392:	81 3e       	cpi	r24, 0xE1	; 225
    4394:	97 46       	sbci	r25, 0x67	; 103
    4396:	a5 43       	sbci	r26, 0x35	; 53
    4398:	b1 05       	cpc	r27, r1
    439a:	90 f0       	brcs	.+36     	; 0x43c0 <txSetFrequency+0x6a>
		{
			g_80m_frequency = *freq;
    439c:	8b 81       	ldd	r24, Y+3	; 0x03
    439e:	9c 81       	ldd	r25, Y+4	; 0x04
    43a0:	fc 01       	movw	r30, r24
    43a2:	80 81       	ld	r24, Z
    43a4:	91 81       	ldd	r25, Z+1	; 0x01
    43a6:	a2 81       	ldd	r26, Z+2	; 0x02
    43a8:	b3 81       	ldd	r27, Z+3	; 0x03
    43aa:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_80m_frequency>
    43ae:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_80m_frequency+0x1>
    43b2:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <g_80m_frequency+0x2>
    43b6:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <g_80m_frequency+0x3>
			bandSet = BAND_80M;
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	8a 83       	std	Y+2, r24	; 0x02
    43be:	28 c0       	rjmp	.+80     	; 0x4410 <txSetFrequency+0xba>
		}
		else if((*freq < TX_MAXIMUM_2M_FREQUENCY) && (*freq > TX_MINIMUM_2M_FREQUENCY)) /* 2m */
    43c0:	8b 81       	ldd	r24, Y+3	; 0x03
    43c2:	9c 81       	ldd	r25, Y+4	; 0x04
    43c4:	fc 01       	movw	r30, r24
    43c6:	80 81       	ld	r24, Z
    43c8:	91 81       	ldd	r25, Z+1	; 0x01
    43ca:	a2 81       	ldd	r26, Z+2	; 0x02
    43cc:	b3 81       	ldd	r27, Z+3	; 0x03
    43ce:	81 15       	cp	r24, r1
    43d0:	9d 44       	sbci	r25, 0x4D	; 77
    43d2:	a2 4d       	sbci	r26, 0xD2	; 210
    43d4:	b8 40       	sbci	r27, 0x08	; 8
    43d6:	e0 f4       	brcc	.+56     	; 0x4410 <txSetFrequency+0xba>
    43d8:	8b 81       	ldd	r24, Y+3	; 0x03
    43da:	9c 81       	ldd	r25, Y+4	; 0x04
    43dc:	fc 01       	movw	r30, r24
    43de:	80 81       	ld	r24, Z
    43e0:	91 81       	ldd	r25, Z+1	; 0x01
    43e2:	a2 81       	ldd	r26, Z+2	; 0x02
    43e4:	b3 81       	ldd	r27, Z+3	; 0x03
    43e6:	81 30       	cpi	r24, 0x01	; 1
    43e8:	94 44       	sbci	r25, 0x44	; 68
    43ea:	a5 49       	sbci	r26, 0x95	; 149
    43ec:	b8 40       	sbci	r27, 0x08	; 8
    43ee:	80 f0       	brcs	.+32     	; 0x4410 <txSetFrequency+0xba>
		{
			g_2m_frequency = *freq;
    43f0:	8b 81       	ldd	r24, Y+3	; 0x03
    43f2:	9c 81       	ldd	r25, Y+4	; 0x04
    43f4:	fc 01       	movw	r30, r24
    43f6:	80 81       	ld	r24, Z
    43f8:	91 81       	ldd	r25, Z+1	; 0x01
    43fa:	a2 81       	ldd	r26, Z+2	; 0x02
    43fc:	b3 81       	ldd	r27, Z+3	; 0x03
    43fe:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_2m_frequency>
    4402:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_2m_frequency+0x1>
    4406:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <g_2m_frequency+0x2>
    440a:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <g_2m_frequency+0x3>
			bandSet = BAND_2M;
    440e:	1a 82       	std	Y+2, r1	; 0x02
		}

		if(bandSet == BAND_INVALID)
    4410:	8a 81       	ldd	r24, Y+2	; 0x02
    4412:	82 30       	cpi	r24, 0x02	; 2
    4414:	41 f4       	brne	.+16     	; 0x4426 <txSetFrequency+0xd0>
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
    4416:	8b 81       	ldd	r24, Y+3	; 0x03
    4418:	9c 81       	ldd	r25, Y+4	; 0x04
    441a:	fc 01       	movw	r30, r24
    441c:	10 82       	st	Z, r1
    441e:	11 82       	std	Z+1, r1	; 0x01
    4420:	12 82       	std	Z+2, r1	; 0x02
    4422:	13 82       	std	Z+3, r1	; 0x03
    4424:	25 c0       	rjmp	.+74     	; 0x4470 <txSetFrequency+0x11a>
		}
		else if(g_activeBand == bandSet)
    4426:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <g_activeBand>
    442a:	8a 81       	ldd	r24, Y+2	; 0x02
    442c:	98 17       	cp	r25, r24
    442e:	01 f5       	brne	.+64     	; 0x4470 <txSetFrequency+0x11a>
		{
			if(bandSet == BAND_2M)
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	88 23       	and	r24, r24
    4434:	71 f4       	brne	.+28     	; 0x4452 <txSetFrequency+0xfc>
			{
				si5351_set_freq(*freq, TX_CLOCK_VHF, TRUE);
    4436:	8b 81       	ldd	r24, Y+3	; 0x03
    4438:	9c 81       	ldd	r25, Y+4	; 0x04
    443a:	fc 01       	movw	r30, r24
    443c:	80 81       	ld	r24, Z
    443e:	91 81       	ldd	r25, Z+1	; 0x01
    4440:	a2 81       	ldd	r26, Z+2	; 0x02
    4442:	b3 81       	ldd	r27, Z+3	; 0x03
    4444:	21 e0       	ldi	r18, 0x01	; 1
    4446:	40 e0       	ldi	r20, 0x00	; 0
    4448:	bc 01       	movw	r22, r24
    444a:	cd 01       	movw	r24, r26
    444c:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <si5351_set_freq>
    4450:	0d c0       	rjmp	.+26     	; 0x446c <txSetFrequency+0x116>
			}
			else
			{
				si5351_set_freq(*freq, TX_CLOCK_HF_0, TRUE);
    4452:	8b 81       	ldd	r24, Y+3	; 0x03
    4454:	9c 81       	ldd	r25, Y+4	; 0x04
    4456:	fc 01       	movw	r30, r24
    4458:	80 81       	ld	r24, Z
    445a:	91 81       	ldd	r25, Z+1	; 0x01
    445c:	a2 81       	ldd	r26, Z+2	; 0x02
    445e:	b3 81       	ldd	r27, Z+3	; 0x03
    4460:	21 e0       	ldi	r18, 0x01	; 1
    4462:	41 e0       	ldi	r20, 0x01	; 1
    4464:	bc 01       	movw	r22, r24
    4466:	cd 01       	movw	r24, r26
    4468:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <si5351_set_freq>
			}

			activeBandSet = TRUE;
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	89 83       	std	Y+1, r24	; 0x01
		}

		return( activeBandSet);
    4470:	89 81       	ldd	r24, Y+1	; 0x01
	}
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	08 95       	ret

00004480 <txGetFrequency>:

	Frequency_Hz txGetFrequency(void)
	{
    4480:	cf 93       	push	r28
    4482:	df 93       	push	r29
    4484:	cd b7       	in	r28, 0x3d	; 61
    4486:	de b7       	in	r29, 0x3e	; 62
		if(g_tx_initialized)
    4488:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <g_tx_initialized>
    448c:	88 23       	and	r24, r24
    448e:	d1 f0       	breq	.+52     	; 0x44c4 <txGetFrequency+0x44>
		{
			if(g_activeBand == BAND_2M)
    4490:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    4494:	88 23       	and	r24, r24
    4496:	49 f4       	brne	.+18     	; 0x44aa <txGetFrequency+0x2a>
			{
				return( g_2m_frequency);
    4498:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_2m_frequency>
    449c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <g_2m_frequency+0x1>
    44a0:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <g_2m_frequency+0x2>
    44a4:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <g_2m_frequency+0x3>
    44a8:	10 c0       	rjmp	.+32     	; 0x44ca <txGetFrequency+0x4a>
			}
			else if(g_activeBand == BAND_80M)
    44aa:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    44ae:	81 30       	cpi	r24, 0x01	; 1
    44b0:	49 f4       	brne	.+18     	; 0x44c4 <txGetFrequency+0x44>
			{
				return( g_80m_frequency);
    44b2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_80m_frequency>
    44b6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_80m_frequency+0x1>
    44ba:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <g_80m_frequency+0x2>
    44be:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <g_80m_frequency+0x3>
    44c2:	03 c0       	rjmp	.+6      	; 0x44ca <txGetFrequency+0x4a>
			}
		}

		return( FREQUENCY_NOT_SPECIFIED);
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	dc 01       	movw	r26, r24
	}
    44ca:	bc 01       	movw	r22, r24
    44cc:	cd 01       	movw	r24, r26
    44ce:	df 91       	pop	r29
    44d0:	cf 91       	pop	r28
    44d2:	08 95       	ret

000044d4 <txGetModulationLevels>:
	
	void txGetModulationLevels(uint8_t *high, uint8_t *low)
	{
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	00 d0       	rcall	.+0      	; 0x44da <txGetModulationLevels+0x6>
    44da:	00 d0       	rcall	.+0      	; 0x44dc <txGetModulationLevels+0x8>
    44dc:	cd b7       	in	r28, 0x3d	; 61
    44de:	de b7       	in	r29, 0x3e	; 62
    44e0:	9a 83       	std	Y+2, r25	; 0x02
    44e2:	89 83       	std	Y+1, r24	; 0x01
    44e4:	7c 83       	std	Y+4, r23	; 0x04
    44e6:	6b 83       	std	Y+3, r22	; 0x03
		*high = (uint8_t)g_am_drive_level;
    44e8:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <g_am_drive_level>
    44ec:	89 81       	ldd	r24, Y+1	; 0x01
    44ee:	9a 81       	ldd	r25, Y+2	; 0x02
    44f0:	fc 01       	movw	r30, r24
    44f2:	20 83       	st	Z, r18
		*low = (uint8_t)(g_am_drive_level >> 1);
    44f4:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_am_drive_level>
    44f8:	28 2f       	mov	r18, r24
    44fa:	26 95       	lsr	r18
    44fc:	8b 81       	ldd	r24, Y+3	; 0x03
    44fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4500:	fc 01       	movw	r30, r24
    4502:	20 83       	st	Z, r18
	}
    4504:	00 00       	nop
    4506:	0f 90       	pop	r0
    4508:	0f 90       	pop	r0
    450a:	0f 90       	pop	r0
    450c:	0f 90       	pop	r0
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	08 95       	ret

00004514 <txSetBand>:

	void __attribute__((optimize("O0"))) txSetBand(RadioBand band, BOOL enable)
	{
    4514:	cf 93       	push	r28
    4516:	df 93       	push	r29
    4518:	cd b7       	in	r28, 0x3d	; 61
    451a:	de b7       	in	r29, 0x3e	; 62
    451c:	2a 97       	sbiw	r28, 0x0a	; 10
    451e:	0f b6       	in	r0, 0x3f	; 63
    4520:	f8 94       	cli
    4522:	de bf       	out	0x3e, r29	; 62
    4524:	0f be       	out	0x3f, r0	; 63
    4526:	cd bf       	out	0x3d, r28	; 61
    4528:	89 87       	std	Y+9, r24	; 0x09
    452a:	6a 87       	std	Y+10, r22	; 0x0a
		keyTransmitter(OFF);
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	90 d0       	rcall	.+288    	; 0x4650 <keyTransmitter>
		powerToTransmitter(OFF);
    4530:	80 e0       	ldi	r24, 0x00	; 0
    4532:	4d d0       	rcall	.+154    	; 0x45ce <powerToTransmitter>
	
		if(band == BAND_80M)
    4534:	89 85       	ldd	r24, Y+9	; 0x09
    4536:	81 30       	cpi	r24, 0x01	; 1
    4538:	d1 f4       	brne	.+52     	; 0x456e <txSetBand+0x5a>
		{
			g_activeBand = band;
    453a:	89 85       	ldd	r24, Y+9	; 0x09
    453c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_activeBand>
			Frequency_Hz f = g_80m_frequency;
    4540:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_80m_frequency>
    4544:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_80m_frequency+0x1>
    4548:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <g_80m_frequency+0x2>
    454c:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <g_80m_frequency+0x3>
    4550:	89 83       	std	Y+1, r24	; 0x01
    4552:	9a 83       	std	Y+2, r25	; 0x02
    4554:	ab 83       	std	Y+3, r26	; 0x03
    4556:	bc 83       	std	Y+4, r27	; 0x04
			txSetFrequency(&f);
    4558:	ce 01       	movw	r24, r28
    455a:	01 96       	adiw	r24, 0x01	; 1
    455c:	fc de       	rcall	.-520    	; 0x4356 <txSetFrequency>
			txSetPowerLevel(g_80m_power_level);
    455e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <g_80m_power_level>
    4562:	0c d1       	rcall	.+536    	; 0x477c <txSetPowerLevel>
			txSetModulation(MODE_CW);
    4564:	80 e0       	ldi	r24, 0x00	; 0
    4566:	78 d1       	rcall	.+752    	; 0x4858 <txSetModulation>
    4568:	8a 85       	ldd	r24, Y+10	; 0x0a
			powerToTransmitter(enable);
    456a:	31 d0       	rcall	.+98     	; 0x45ce <powerToTransmitter>
    456c:	1d c0       	rjmp	.+58     	; 0x45a8 <txSetBand+0x94>
    456e:	89 85       	ldd	r24, Y+9	; 0x09
			txSetFrequency(&f);
			txSetModulation(g_2m_modulationFormat);
			txSetPowerLevel(g_2m_power_level);
			powerToTransmitter(enable);
		}
	}
    4570:	88 23       	and	r24, r24
			txSetFrequency(&f);
			txSetPowerLevel(g_80m_power_level);
			txSetModulation(MODE_CW);
			powerToTransmitter(enable);
		}
		else if(band == BAND_2M)
    4572:	d1 f4       	brne	.+52     	; 0x45a8 <txSetBand+0x94>
    4574:	89 85       	ldd	r24, Y+9	; 0x09
    4576:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_activeBand>
		{
			g_activeBand = band;
    457a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_2m_frequency>
			Frequency_Hz f = g_2m_frequency;
    457e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <g_2m_frequency+0x1>
    4582:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <g_2m_frequency+0x2>
    4586:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <g_2m_frequency+0x3>
    458a:	8d 83       	std	Y+5, r24	; 0x05
    458c:	9e 83       	std	Y+6, r25	; 0x06
    458e:	af 83       	std	Y+7, r26	; 0x07
    4590:	b8 87       	std	Y+8, r27	; 0x08
    4592:	ce 01       	movw	r24, r28
			txSetFrequency(&f);
    4594:	05 96       	adiw	r24, 0x05	; 5
    4596:	df de       	rcall	.-578    	; 0x4356 <txSetFrequency>
    4598:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_2m_modulationFormat>
			txSetModulation(g_2m_modulationFormat);
    459c:	5d d1       	rcall	.+698    	; 0x4858 <txSetModulation>
    459e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_2m_power_level>
			txSetPowerLevel(g_2m_power_level);
    45a2:	ec d0       	rcall	.+472    	; 0x477c <txSetPowerLevel>
    45a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    45a6:	13 d0       	rcall	.+38     	; 0x45ce <powerToTransmitter>
			powerToTransmitter(enable);
    45a8:	00 00       	nop
    45aa:	2a 96       	adiw	r28, 0x0a	; 10
    45ac:	0f b6       	in	r0, 0x3f	; 63
		}
	}
    45ae:	f8 94       	cli
    45b0:	de bf       	out	0x3e, r29	; 62
    45b2:	0f be       	out	0x3f, r0	; 63
    45b4:	cd bf       	out	0x3d, r28	; 61
    45b6:	df 91       	pop	r29
    45b8:	cf 91       	pop	r28
    45ba:	08 95       	ret

000045bc <txGetBand>:
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    45c0:	cd b7       	in	r28, 0x3d	; 61

	RadioBand txGetBand(void)
	{
    45c2:	de b7       	in	r29, 0x3e	; 62
    45c4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    45c8:	df 91       	pop	r29
		return(g_activeBand);
    45ca:	cf 91       	pop	r28
    45cc:	08 95       	ret

000045ce <powerToTransmitter>:
	}
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	1f 92       	push	r1
	
	void powerToTransmitter(BOOL on)
	{
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	89 83       	std	Y+1, r24	; 0x01
    45da:	89 81       	ldd	r24, Y+1	; 0x01
    45dc:	88 23       	and	r24, r24
    45de:	51 f1       	breq	.+84     	; 0x4634 <powerToTransmitter+0x66>
		if(on)
    45e0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    45e4:	81 30       	cpi	r24, 0x01	; 1
		{
			if(g_activeBand == BAND_80M)
    45e6:	99 f4       	brne	.+38     	; 0x460e <powerToTransmitter+0x40>
    45e8:	85 e2       	ldi	r24, 0x25	; 37
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	25 e2       	ldi	r18, 0x25	; 37
			{
				PORTB &= ~(1 << PORTB0); /* Turn VHF off */
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	f9 01       	movw	r30, r18
    45f2:	20 81       	ld	r18, Z
    45f4:	2e 7f       	andi	r18, 0xFE	; 254
    45f6:	fc 01       	movw	r30, r24
    45f8:	20 83       	st	Z, r18
    45fa:	85 e2       	ldi	r24, 0x25	; 37
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	25 e2       	ldi	r18, 0x25	; 37
				PORTB |= (1 << PORTB1); /* Turn HF on */
    4600:	30 e0       	ldi	r19, 0x00	; 0
    4602:	f9 01       	movw	r30, r18
    4604:	20 81       	ld	r18, Z
    4606:	22 60       	ori	r18, 0x02	; 2
    4608:	fc 01       	movw	r30, r24
    460a:	20 83       	st	Z, r18
    460c:	1c c0       	rjmp	.+56     	; 0x4646 <powerToTransmitter+0x78>
    460e:	85 e2       	ldi	r24, 0x25	; 37
    4610:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		{
			PORTB &= ~((1 << PORTB0) | (1 << PORTB1)); /* Turn off both bands */
		}
	}
    4612:	25 e2       	ldi	r18, 0x25	; 37
				PORTB &= ~(1 << PORTB0); /* Turn VHF off */
				PORTB |= (1 << PORTB1); /* Turn HF on */
			}
			else
			{
				PORTB &= ~(1 << PORTB1); /* Turn HF off */
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	f9 01       	movw	r30, r18
    4618:	20 81       	ld	r18, Z
    461a:	2d 7f       	andi	r18, 0xFD	; 253
    461c:	fc 01       	movw	r30, r24
    461e:	20 83       	st	Z, r18
    4620:	85 e2       	ldi	r24, 0x25	; 37
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	25 e2       	ldi	r18, 0x25	; 37
				PORTB |= (1 << PORTB0); /* Turn VHF on */
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	f9 01       	movw	r30, r18
    462a:	20 81       	ld	r18, Z
    462c:	21 60       	ori	r18, 0x01	; 1
    462e:	fc 01       	movw	r30, r24
    4630:	20 83       	st	Z, r18
    4632:	09 c0       	rjmp	.+18     	; 0x4646 <powerToTransmitter+0x78>
    4634:	85 e2       	ldi	r24, 0x25	; 37
    4636:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		{
			PORTB &= ~((1 << PORTB0) | (1 << PORTB1)); /* Turn off both bands */
		}
	}
    4638:	25 e2       	ldi	r18, 0x25	; 37
				PORTB |= (1 << PORTB0); /* Turn VHF on */
			}
		}
		else
		{
			PORTB &= ~((1 << PORTB0) | (1 << PORTB1)); /* Turn off both bands */
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	f9 01       	movw	r30, r18
    463e:	20 81       	ld	r18, Z
    4640:	2c 7f       	andi	r18, 0xFC	; 252
    4642:	fc 01       	movw	r30, r24
    4644:	20 83       	st	Z, r18
    4646:	00 00       	nop
    4648:	0f 90       	pop	r0
    464a:	df 91       	pop	r29
		}
	}
    464c:	cf 91       	pop	r28
    464e:	08 95       	ret

00004650 <keyTransmitter>:
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    4654:	1f 92       	push	r1
	
	void keyTransmitter(BOOL on)
	{
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	89 83       	std	Y+1, r24	; 0x01
    465c:	89 81       	ldd	r24, Y+1	; 0x01
    465e:	88 23       	and	r24, r24
    4660:	19 f1       	breq	.+70     	; 0x46a8 <keyTransmitter+0x58>
		if(on)
    4662:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <g_transmitter_keyed>
    4666:	88 23       	and	r24, r24
		{
			if(!g_transmitter_keyed)
    4668:	09 f0       	breq	.+2      	; 0x466c <keyTransmitter+0x1c>
    466a:	3e c0       	rjmp	.+124    	; 0x46e8 <keyTransmitter+0x98>
    466c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    4670:	81 30       	cpi	r24, 0x01	; 1
			{
				if(g_activeBand == BAND_80M)
    4672:	91 f4       	brne	.+36     	; 0x4698 <keyTransmitter+0x48>
    4674:	61 e0       	ldi	r22, 0x01	; 1
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
				{
					si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_ENABLED);
    467c:	61 e0       	ldi	r22, 0x01	; 1
    467e:	82 e0       	ldi	r24, 0x02	; 2
    4680:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
					si5351_clock_enable(TX_CLOCK_HF_1, SI5351_CLK_ENABLED);
    4684:	8b e2       	ldi	r24, 0x2B	; 43
    4686:	90 e0       	ldi	r25, 0x00	; 0
    4688:	2b e2       	ldi	r18, 0x2B	; 43
					PORTD |= (1 << PORTD4);
    468a:	30 e0       	ldi	r19, 0x00	; 0
    468c:	f9 01       	movw	r30, r18
    468e:	20 81       	ld	r18, Z
    4690:	20 61       	ori	r18, 0x10	; 16
    4692:	fc 01       	movw	r30, r24
    4694:	20 83       	st	Z, r18
    4696:	04 c0       	rjmp	.+8      	; 0x46a0 <keyTransmitter+0x50>
    4698:	61 e0       	ldi	r22, 0x01	; 1
    469a:	80 e0       	ldi	r24, 0x00	; 0
    469c:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
				}
				else
				{
					si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_ENABLED);
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <g_transmitter_keyed>
				}
			
				g_transmitter_keyed = TRUE;
    46a6:	20 c0       	rjmp	.+64     	; 0x46e8 <keyTransmitter+0x98>
    46a8:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <g_transmitter_keyed>
				si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_DISABLED);
			}

			g_transmitter_keyed = FALSE;
		}
	}
    46ac:	88 23       	and	r24, r24
				}
			
				g_transmitter_keyed = TRUE;
			}
		}
		else if(g_transmitter_keyed)
    46ae:	e1 f0       	breq	.+56     	; 0x46e8 <keyTransmitter+0x98>
    46b0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    46b4:	81 30       	cpi	r24, 0x01	; 1
		{
			if(g_activeBand == BAND_80M)
    46b6:	91 f4       	brne	.+36     	; 0x46dc <keyTransmitter+0x8c>
    46b8:	8b e2       	ldi	r24, 0x2B	; 43
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	2b e2       	ldi	r18, 0x2B	; 43
			{
				PORTD &= ~(1 << PORTD4);
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	f9 01       	movw	r30, r18
    46c2:	20 81       	ld	r18, Z
    46c4:	2f 7e       	andi	r18, 0xEF	; 239
    46c6:	fc 01       	movw	r30, r24
    46c8:	20 83       	st	Z, r18
    46ca:	60 e0       	ldi	r22, 0x00	; 0
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
				si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    46d2:	60 e0       	ldi	r22, 0x00	; 0
    46d4:	82 e0       	ldi	r24, 0x02	; 2
    46d6:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
				si5351_clock_enable(TX_CLOCK_HF_1, SI5351_CLK_DISABLED);
    46da:	04 c0       	rjmp	.+8      	; 0x46e4 <keyTransmitter+0x94>
    46dc:	60 e0       	ldi	r22, 0x00	; 0
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
			}
			else
			{
				si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_DISABLED);
    46e4:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <g_transmitter_keyed>
    46e8:	00 00       	nop
			}

			g_transmitter_keyed = FALSE;
    46ea:	0f 90       	pop	r0
    46ec:	df 91       	pop	r29
		}
	}
    46ee:	cf 91       	pop	r28
    46f0:	08 95       	ret

000046f2 <txSetDrive>:
    46f2:	cf 93       	push	r28
    46f4:	df 93       	push	r29
    46f6:	cd b7       	in	r28, 0x3d	; 61
	
	void txSetDrive(uint8_t drive)
	{
    46f8:	de b7       	in	r29, 0x3e	; 62
    46fa:	27 97       	sbiw	r28, 0x07	; 7
    46fc:	0f b6       	in	r0, 0x3f	; 63
    46fe:	f8 94       	cli
    4700:	de bf       	out	0x3e, r29	; 62
    4702:	0f be       	out	0x3f, r0	; 63
    4704:	cd bf       	out	0x3d, r28	; 61
    4706:	8f 83       	std	Y+7, r24	; 0x07
    4708:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    470c:	88 23       	and	r24, r24
		if(g_activeBand != BAND_2M) return;
    470e:	61 f5       	brne	.+88     	; 0x4768 <txSetDrive+0x76>
    4710:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_2m_modulationFormat>
    4714:	81 30       	cpi	r24, 0x01	; 1
		
		if(g_2m_modulationFormat == MODE_AM)
    4716:	a1 f4       	brne	.+40     	; 0x4740 <txSetDrive+0x4e>
    4718:	8f 81       	ldd	r24, Y+7	; 0x07
    471a:	89 83       	std	Y+1, r24	; 0x01
    471c:	83 ec       	ldi	r24, 0xC3	; 195
		{
			drive =  MIN(drive, MAX_2M_AM_DRIVE_LEVEL);
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	9b 83       	std	Y+3, r25	; 0x03
    4722:	8a 83       	std	Y+2, r24	; 0x02
    4724:	89 81       	ldd	r24, Y+1	; 0x01
    4726:	88 2f       	mov	r24, r24
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	2a 81       	ldd	r18, Y+2	; 0x02
    472c:	3b 81       	ldd	r19, Y+3	; 0x03
    472e:	28 17       	cp	r18, r24
    4730:	39 07       	cpc	r19, r25
    4732:	0c f4       	brge	.+2      	; 0x4736 <txSetDrive+0x44>
    4734:	c9 01       	movw	r24, r18
    4736:	8f 83       	std	Y+7, r24	; 0x07
    4738:	8f 81       	ldd	r24, Y+7	; 0x07
    473a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_am_drive_level>
			g_am_drive_level = drive;
    473e:	15 c0       	rjmp	.+42     	; 0x476a <txSetDrive+0x78>
    4740:	8f 81       	ldd	r24, Y+7	; 0x07
    4742:	8c 83       	std	Y+4, r24	; 0x04
    4744:	83 ec       	ldi	r24, 0xC3	; 195
		}
		else
		{
			drive = MIN(drive, MAX_2M_CW_DRIVE_LEVEL);
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	9e 83       	std	Y+6, r25	; 0x06
    474a:	8d 83       	std	Y+5, r24	; 0x05
    474c:	8c 81       	ldd	r24, Y+4	; 0x04
    474e:	88 2f       	mov	r24, r24
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	2d 81       	ldd	r18, Y+5	; 0x05
    4754:	3e 81       	ldd	r19, Y+6	; 0x06
    4756:	28 17       	cp	r18, r24
    4758:	39 07       	cpc	r19, r25
    475a:	0c f4       	brge	.+2      	; 0x475e <txSetDrive+0x6c>
    475c:	c9 01       	movw	r24, r18
    475e:	8f 83       	std	Y+7, r24	; 0x07
    4760:	8f 81       	ldd	r24, Y+7	; 0x07
    4762:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_cw_drive_level>
			g_cw_drive_level = drive;
    4766:	01 c0       	rjmp	.+2      	; 0x476a <txSetDrive+0x78>
    4768:	00 00       	nop
    476a:	27 96       	adiw	r28, 0x07	; 7
    476c:	0f b6       	in	r0, 0x3f	; 63
		}
	}
	
	void txSetDrive(uint8_t drive)
	{
		if(g_activeBand != BAND_2M) return;
    476e:	f8 94       	cli
		else
		{
			drive = MIN(drive, MAX_2M_CW_DRIVE_LEVEL);
			g_cw_drive_level = drive;
		}
	}
    4770:	de bf       	out	0x3e, r29	; 62
    4772:	0f be       	out	0x3f, r0	; 63
    4774:	cd bf       	out	0x3d, r28	; 61
    4776:	df 91       	pop	r29
    4778:	cf 91       	pop	r28
    477a:	08 95       	ret

0000477c <txSetPowerLevel>:
    477c:	cf 93       	push	r28
    477e:	df 93       	push	r29
    4780:	cd b7       	in	r28, 0x3d	; 61
	
	void txSetPowerLevel(uint8_t power)
	{
    4782:	de b7       	in	r29, 0x3e	; 62
    4784:	27 97       	sbiw	r28, 0x07	; 7
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	8f 83       	std	Y+7, r24	; 0x07
    4792:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    4796:	88 23       	and	r24, r24
		// Prevent possible damage to transmitter
		if(g_activeBand == BAND_2M)
    4798:	a9 f4       	brne	.+42     	; 0x47c4 <txSetPowerLevel+0x48>
    479a:	8f 81       	ldd	r24, Y+7	; 0x07
    479c:	89 83       	std	Y+1, r24	; 0x01
    479e:	88 e7       	ldi	r24, 0x78	; 120
		{
			g_2m_power_level = MIN(power, MAX_2M_PWR_SETTING);
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	9b 83       	std	Y+3, r25	; 0x03
    47a4:	8a 83       	std	Y+2, r24	; 0x02
    47a6:	89 81       	ldd	r24, Y+1	; 0x01
    47a8:	88 2f       	mov	r24, r24
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	2a 81       	ldd	r18, Y+2	; 0x02
    47ae:	3b 81       	ldd	r19, Y+3	; 0x03
    47b0:	28 17       	cp	r18, r24
    47b2:	39 07       	cpc	r19, r25
    47b4:	0c f4       	brge	.+2      	; 0x47b8 <txSetPowerLevel+0x3c>
    47b6:	c9 01       	movw	r24, r18
    47b8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_2m_power_level>
    47bc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_2m_power_level>
    47c0:	8f 83       	std	Y+7, r24	; 0x07
			power = g_2m_power_level;
    47c2:	14 c0       	rjmp	.+40     	; 0x47ec <txSetPowerLevel+0x70>
    47c4:	8f 81       	ldd	r24, Y+7	; 0x07
    47c6:	8c 83       	std	Y+4, r24	; 0x04
    47c8:	8f ef       	ldi	r24, 0xFF	; 255
			// TODO: Set modulation settings for appropriate power level
		}
		else
		{
			g_80m_power_level = MIN(power, MAX_80M_PWR_SETTING);
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	9e 83       	std	Y+6, r25	; 0x06
    47ce:	8d 83       	std	Y+5, r24	; 0x05
    47d0:	8c 81       	ldd	r24, Y+4	; 0x04
    47d2:	88 2f       	mov	r24, r24
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	2d 81       	ldd	r18, Y+5	; 0x05
    47d8:	3e 81       	ldd	r19, Y+6	; 0x06
    47da:	28 17       	cp	r18, r24
    47dc:	39 07       	cpc	r19, r25
    47de:	0c f4       	brge	.+2      	; 0x47e2 <txSetPowerLevel+0x66>
    47e0:	c9 01       	movw	r24, r18
    47e2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_80m_power_level>
    47e6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <g_80m_power_level>
    47ea:	8f 83       	std	Y+7, r24	; 0x07
			power = g_80m_power_level;
    47ec:	68 e1       	ldi	r22, 0x18	; 24
    47ee:	8f 81       	ldd	r24, Y+7	; 0x07
    47f0:	0e 94 08 2c 	call	0x5810	; 0x5810 <dac081c_set_dac>
		}
		
		dac081c_set_dac(power, PA_DAC);
    47f4:	8f 81       	ldd	r24, Y+7	; 0x07
    47f6:	88 23       	and	r24, r24
    47f8:	51 f4       	brne	.+20     	; 0x480e <txSetPowerLevel+0x92>
						
		if(power == 0)
    47fa:	85 e2       	ldi	r24, 0x25	; 37
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	25 e2       	ldi	r18, 0x25	; 37
		{
			PORTB &= ~(1 << PORTB6); /* Turn off Tx power */
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	f9 01       	movw	r30, r18
    4804:	20 81       	ld	r18, Z
    4806:	2f 7b       	andi	r18, 0xBF	; 191
    4808:	fc 01       	movw	r30, r24
    480a:	20 83       	st	Z, r18
    480c:	09 c0       	rjmp	.+18     	; 0x4820 <txSetPowerLevel+0xa4>
    480e:	85 e2       	ldi	r24, 0x25	; 37
    4810:	90 e0       	ldi	r25, 0x00	; 0
		}
		else
		{
			PORTB |= (1 << PORTB6); /* Turn on Tx power */
		}
	}
    4812:	25 e2       	ldi	r18, 0x25	; 37
		{
			PORTB &= ~(1 << PORTB6); /* Turn off Tx power */
		}
		else
		{
			PORTB |= (1 << PORTB6); /* Turn on Tx power */
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	f9 01       	movw	r30, r18
    4818:	20 81       	ld	r18, Z
    481a:	20 64       	ori	r18, 0x40	; 64
    481c:	fc 01       	movw	r30, r24
    481e:	20 83       	st	Z, r18
    4820:	00 00       	nop
    4822:	27 96       	adiw	r28, 0x07	; 7
    4824:	0f b6       	in	r0, 0x3f	; 63
		}
	}
    4826:	f8 94       	cli
    4828:	de bf       	out	0x3e, r29	; 62
    482a:	0f be       	out	0x3f, r0	; 63
    482c:	cd bf       	out	0x3d, r28	; 61
    482e:	df 91       	pop	r29
    4830:	cf 91       	pop	r28
    4832:	08 95       	ret

00004834 <txGetPowerLevel>:
    4834:	cf 93       	push	r28
    4836:	df 93       	push	r29
    4838:	1f 92       	push	r1

	uint8_t txGetPowerLevel(void)
	{
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62
    483e:	00 00       	nop
    4840:	68 e1       	ldi	r22, 0x18	; 24
    4842:	ce 01       	movw	r24, r28
		uint8_t pwr;
		while(dac081c_read_dac(&pwr, PA_DAC));
    4844:	01 96       	adiw	r24, 0x01	; 1
    4846:	0e 94 37 2c 	call	0x586e	; 0x586e <dac081c_read_dac>
    484a:	88 23       	and	r24, r24
    484c:	c9 f7       	brne	.-14     	; 0x4840 <txGetPowerLevel+0xc>
    484e:	89 81       	ldd	r24, Y+1	; 0x01
    4850:	0f 90       	pop	r0
    4852:	df 91       	pop	r29
		return pwr;
    4854:	cf 91       	pop	r28
	}
    4856:	08 95       	ret

00004858 <txSetModulation>:
    4858:	cf 93       	push	r28
    485a:	df 93       	push	r29
    485c:	1f 92       	push	r1
	
	void txSetModulation(Modulation mode)
	{
    485e:	cd b7       	in	r28, 0x3d	; 61
    4860:	de b7       	in	r29, 0x3e	; 62
    4862:	89 83       	std	Y+1, r24	; 0x01
    4864:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    4868:	88 23       	and	r24, r24
		if((g_activeBand == BAND_2M) && (mode == MODE_AM))
    486a:	69 f4       	brne	.+26     	; 0x4886 <txSetModulation+0x2e>
    486c:	89 81       	ldd	r24, Y+1	; 0x01
    486e:	81 30       	cpi	r24, 0x01	; 1
    4870:	51 f4       	brne	.+20     	; 0x4886 <txSetModulation+0x2e>
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_2m_modulationFormat>
		{
			g_2m_modulationFormat = MODE_AM;
    4878:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_am_drive_level>
			txSetDrive(g_am_drive_level);
    487c:	3a df       	rcall	.-396    	; 0x46f2 <txSetDrive>
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <g_am_modulation_enabled>
			g_am_modulation_enabled = TRUE;
    4884:	0b c0       	rjmp	.+22     	; 0x489c <txSetModulation+0x44>
    4886:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <g_am_modulation_enabled>
		}
		else
		{
			g_am_modulation_enabled = FALSE;
    488a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
			if(g_activeBand == BAND_2M) g_2m_modulationFormat = MODE_CW;
    488e:	88 23       	and	r24, r24
    4890:	11 f4       	brne	.+4      	; 0x4896 <txSetModulation+0x3e>
    4892:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <g_2m_modulationFormat>
    4896:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_cw_drive_level>
			txSetDrive(g_cw_drive_level);
    489a:	2b df       	rcall	.-426    	; 0x46f2 <txSetDrive>
    489c:	00 00       	nop
    489e:	0f 90       	pop	r0
    48a0:	df 91       	pop	r29
		}
	}
    48a2:	cf 91       	pop	r28
    48a4:	08 95       	ret

000048a6 <txGetModulation>:
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	cd b7       	in	r28, 0x3d	; 61
	
	Modulation txGetModulation(void)
	{
    48ac:	de b7       	in	r29, 0x3e	; 62
    48ae:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
    48b2:	88 23       	and	r24, r24
		if (g_activeBand == BAND_2M)
    48b4:	19 f4       	brne	.+6      	; 0x48bc <txGetModulation+0x16>
    48b6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_2m_modulationFormat>
    48ba:	01 c0       	rjmp	.+2      	; 0x48be <txGetModulation+0x18>
		{
			return g_2m_modulationFormat;
    48bc:	82 e0       	ldi	r24, 0x02	; 2
    48be:	df 91       	pop	r29
    48c0:	cf 91       	pop	r28
		}
		
		return MODE_INVALID;
    48c2:	08 95       	ret

000048c4 <txAMModulationEnabled>:
	}
    48c4:	cf 93       	push	r28
    48c6:	df 93       	push	r29
    48c8:	cd b7       	in	r28, 0x3d	; 61
	
	BOOL txAMModulationEnabled(void)
	{
    48ca:	de b7       	in	r29, 0x3e	; 62
    48cc:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <g_am_modulation_enabled>
    48d0:	df 91       	pop	r29
		return g_am_modulation_enabled;
    48d2:	cf 91       	pop	r28
    48d4:	08 95       	ret

000048d6 <init_transmitter>:
	}
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
    48da:	cd b7       	in	r28, 0x3d	; 61
	
	BOOL init_transmitter(void)
	{
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	40 e0       	ldi	r20, 0x00	; 0
    48e0:	50 e0       	ldi	r21, 0x00	; 0
		if(si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0)) return TRUE;
    48e2:	ba 01       	movw	r22, r20
    48e4:	80 e4       	ldi	r24, 0x40	; 64
    48e6:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <si5351_init>
    48ea:	88 23       	and	r24, r24
    48ec:	11 f0       	breq	.+4      	; 0x48f2 <init_transmitter+0x1c>
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	23 c0       	rjmp	.+70     	; 0x4938 <init_transmitter+0x62>

		initializeTransmitterEEPROMVars();
    48f2:	2e d0       	rcall	.+92     	; 0x4950 <initializeTransmitterEEPROMVars>
    48f4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>

		txSetBand(g_activeBand, OFF);    /* sets most tx settings leaving power to transmitter OFF */
    48f8:	60 e0       	ldi	r22, 0x00	; 0
    48fa:	0c de       	rcall	.-1000   	; 0x4514 <txSetBand>
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	3e df       	rcall	.-388    	; 0x477c <txSetPowerLevel>
		txSetPowerLevel(0);
    4900:	63 e0       	ldi	r22, 0x03	; 3
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <si5351_drive_strength>

		si5351_drive_strength(TX_CLOCK_HF_0, SI5351_DRIVE_8MA);
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	81 e0       	ldi	r24, 0x01	; 1
    490c:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
		si5351_clock_enable(TX_CLOCK_HF_0, SI5351_CLK_DISABLED);
    4910:	63 e0       	ldi	r22, 0x03	; 3
    4912:	82 e0       	ldi	r24, 0x02	; 2
    4914:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <si5351_drive_strength>

		si5351_drive_strength(TX_CLOCK_HF_1, SI5351_DRIVE_8MA);
    4918:	60 e0       	ldi	r22, 0x00	; 0
    491a:	82 e0       	ldi	r24, 0x02	; 2
    491c:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
		si5351_clock_enable(TX_CLOCK_HF_1, SI5351_CLK_DISABLED);
    4920:	63 e0       	ldi	r22, 0x03	; 3
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <si5351_drive_strength>
		
		si5351_drive_strength(TX_CLOCK_VHF, SI5351_DRIVE_8MA);
    4928:	60 e0       	ldi	r22, 0x00	; 0
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <si5351_clock_enable>
		si5351_clock_enable(TX_CLOCK_VHF, SI5351_CLK_DISABLED);
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <g_tx_initialized>
		
		g_tx_initialized = TRUE;
    4936:	80 e0       	ldi	r24, 0x00	; 0
    4938:	df 91       	pop	r29
		
		return FALSE;
    493a:	cf 91       	pop	r28
	}
    493c:	08 95       	ret

0000493e <storeTtransmitterValues>:
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
	
	void storeTtransmitterValues(void)
	{
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
    4946:	9e d0       	rcall	.+316    	; 0x4a84 <saveAllTransmitterEEPROM>
    4948:	00 00       	nop
		saveAllTransmitterEEPROM();
    494a:	df 91       	pop	r29
    494c:	cf 91       	pop	r28
	}
    494e:	08 95       	ret

00004950 <initializeTransmitterEEPROMVars>:
    4950:	cf 93       	push	r28
    4952:	df 93       	push	r29
    4954:	cd b7       	in	r28, 0x3d	; 61


	void initializeTransmitterEEPROMVars(void)
	{
    4956:	de b7       	in	r29, 0x3e	; 62
    4958:	8b e3       	ldi	r24, 0x3B	; 59
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
		if(eeprom_read_byte(&ee_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    4960:	8a 3a       	cpi	r24, 0xAA	; 170
    4962:	09 f0       	breq	.+2      	; 0x4966 <initializeTransmitterEEPROMVars+0x16>
    4964:	4f c0       	rjmp	.+158    	; 0x4a04 <initializeTransmitterEEPROMVars+0xb4>
    4966:	80 e4       	ldi	r24, 0x40	; 64
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
		{
			g_activeBand = eeprom_read_byte(&ee_active_band);
    496e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_activeBand>
    4972:	81 e4       	ldi	r24, 0x41	; 65
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <eeprom_read_dword>
			g_2m_frequency = eeprom_read_dword(&ee_active_2m_frequency);
    497a:	dc 01       	movw	r26, r24
    497c:	cb 01       	movw	r24, r22
    497e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_2m_frequency>
    4982:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_2m_frequency+0x1>
    4986:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <g_2m_frequency+0x2>
    498a:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <g_2m_frequency+0x3>
    498e:	85 e4       	ldi	r24, 0x45	; 69
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
			g_2m_power_level = eeprom_read_byte(&ee_2m_power_level);
    4996:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_2m_power_level>
    499a:	86 e4       	ldi	r24, 0x46	; 70
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <eeprom_read_dword>
			g_80m_frequency = eeprom_read_dword(&ee_active_80m_frequency);
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_80m_frequency>
    49aa:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_80m_frequency+0x1>
    49ae:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <g_80m_frequency+0x2>
    49b2:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <g_80m_frequency+0x3>
    49b6:	8a e4       	ldi	r24, 0x4A	; 74
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
			g_80m_power_level = eeprom_read_byte(&ee_80m_power_level);
    49be:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_80m_power_level>
    49c2:	8b e4       	ldi	r24, 0x4B	; 75
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <eeprom_read_dword>
			g_rtty_offset = eeprom_read_dword(&ee_cw_offset_frequency);
    49ca:	dc 01       	movw	r26, r24
    49cc:	cb 01       	movw	r24, r22
    49ce:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_rtty_offset>
    49d2:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_rtty_offset+0x1>
    49d6:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <g_rtty_offset+0x2>
    49da:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <g_rtty_offset+0x3>
    49de:	8f e4       	ldi	r24, 0x4F	; 79
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
			g_am_drive_level = eeprom_read_byte(&ee_am_drive_level);
    49e6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_am_drive_level>
    49ea:	80 e5       	ldi	r24, 0x50	; 80
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
			g_cw_drive_level = eeprom_read_byte(&ee_cw_drive_level);
    49f2:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_cw_drive_level>
    49f6:	81 e5       	ldi	r24, 0x51	; 81
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
			g_2m_modulationFormat = eeprom_read_byte(&ee_active_2m_modulation);
    49fe:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_2m_modulationFormat>
    4a02:	3c c0       	rjmp	.+120    	; 0x4a7c <initializeTransmitterEEPROMVars+0x12c>
    4a04:	6a ea       	ldi	r22, 0xAA	; 170
    4a06:	8b e3       	ldi	r24, 0x3B	; 59
			g_cw_drive_level = DEFAULT_CW_DRIVE_LEVEL;
			g_2m_modulationFormat = DEFAULT_TX_2M_MODULATION;

			saveAllTransmitterEEPROM();
		}
	}
    4a08:	90 e0       	ldi	r25, 0x00	; 0
			g_cw_drive_level = eeprom_read_byte(&ee_cw_drive_level);
			g_2m_modulationFormat = eeprom_read_byte(&ee_active_2m_modulation);
		}
		else
		{
			eeprom_write_byte(&ee_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    4a0a:	0e 94 05 3b 	call	0x760a	; 0x760a <eeprom_write_byte>
    4a0e:	81 e0       	ldi	r24, 0x01	; 1
    4a10:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_activeBand>

			g_activeBand = EEPROM_BAND_DEFAULT;
    4a14:	80 e3       	ldi	r24, 0x30	; 48
    4a16:	99 e2       	ldi	r25, 0x29	; 41
    4a18:	ad ea       	ldi	r26, 0xAD	; 173
			g_2m_frequency = DEFAULT_TX_2M_FREQUENCY;
    4a1a:	b8 e0       	ldi	r27, 0x08	; 8
    4a1c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_2m_frequency>
    4a20:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_2m_frequency+0x1>
    4a24:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <g_2m_frequency+0x2>
    4a28:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <g_2m_frequency+0x3>
    4a2c:	88 e4       	ldi	r24, 0x48	; 72
    4a2e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_2m_power_level>
			g_2m_power_level = DEFAULT_TX_2M_POWER;
    4a32:	80 e3       	ldi	r24, 0x30	; 48
    4a34:	9b e2       	ldi	r25, 0x2B	; 43
    4a36:	a6 e3       	ldi	r26, 0x36	; 54
			g_80m_frequency = DEFAULT_TX_80M_FREQUENCY;
    4a38:	b0 e0       	ldi	r27, 0x00	; 0
    4a3a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_80m_frequency>
    4a3e:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_80m_frequency+0x1>
    4a42:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <g_80m_frequency+0x2>
    4a46:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <g_80m_frequency+0x3>
    4a4a:	82 e3       	ldi	r24, 0x32	; 50
    4a4c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_80m_power_level>
			g_80m_power_level = DEFAULT_TX_80M_POWER;
    4a50:	8a ea       	ldi	r24, 0xAA	; 170
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	a0 e0       	ldi	r26, 0x00	; 0
			g_rtty_offset = DEFAULT_RTTY_OFFSET_FREQUENCY;
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_rtty_offset>
    4a5c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_rtty_offset+0x1>
    4a60:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <g_rtty_offset+0x2>
    4a64:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <g_rtty_offset+0x3>
    4a68:	83 ec       	ldi	r24, 0xC3	; 195
    4a6a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <g_am_drive_level>
			g_am_drive_level = DEFAULT_AM_DRIVE_LEVEL;
    4a6e:	83 ec       	ldi	r24, 0xC3	; 195
    4a70:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <g_cw_drive_level>
			g_cw_drive_level = DEFAULT_CW_DRIVE_LEVEL;
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_2m_modulationFormat>
			g_2m_modulationFormat = DEFAULT_TX_2M_MODULATION;
    4a7a:	04 d0       	rcall	.+8      	; 0x4a84 <saveAllTransmitterEEPROM>

			saveAllTransmitterEEPROM();
    4a7c:	00 00       	nop
    4a7e:	df 91       	pop	r29
		}
	}
    4a80:	cf 91       	pop	r28
    4a82:	08 95       	ret

00004a84 <saveAllTransmitterEEPROM>:
    4a84:	cf 93       	push	r28
    4a86:	df 93       	push	r29

	void saveAllTransmitterEEPROM(void)
	{
    4a88:	cd b7       	in	r28, 0x3d	; 61
    4a8a:	de b7       	in	r29, 0x3e	; 62
    4a8c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_activeBand>
		storeEEbyteIfChanged(&ee_active_band, g_activeBand);
    4a90:	68 2f       	mov	r22, r24
    4a92:	80 e4       	ldi	r24, 0x40	; 64
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	90 d0       	rcall	.+288    	; 0x4bb8 <storeEEbyteIfChanged>
    4a98:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_2m_frequency>
		storeEEdwordIfChanged((uint32_t*)&ee_active_2m_frequency, g_2m_frequency);
    4a9c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <g_2m_frequency+0x1>
    4aa0:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <g_2m_frequency+0x2>
    4aa4:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <g_2m_frequency+0x3>
    4aa8:	ac 01       	movw	r20, r24
    4aaa:	bd 01       	movw	r22, r26
    4aac:	81 e4       	ldi	r24, 0x41	; 65
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	c3 d0       	rcall	.+390    	; 0x4c38 <storeEEdwordIfChanged>
    4ab2:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_2m_power_level>
		storeEEbyteIfChanged(&ee_2m_power_level, g_2m_power_level);
    4ab6:	68 2f       	mov	r22, r24
    4ab8:	85 e4       	ldi	r24, 0x45	; 69
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	7d d0       	rcall	.+250    	; 0x4bb8 <storeEEbyteIfChanged>
    4abe:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_80m_frequency>
		storeEEdwordIfChanged((uint32_t*)&ee_active_80m_frequency, g_80m_frequency);
    4ac2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_80m_frequency+0x1>
    4ac6:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <g_80m_frequency+0x2>
    4aca:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <g_80m_frequency+0x3>
    4ace:	ac 01       	movw	r20, r24
    4ad0:	bd 01       	movw	r22, r26
    4ad2:	86 e4       	ldi	r24, 0x46	; 70
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	b0 d0       	rcall	.+352    	; 0x4c38 <storeEEdwordIfChanged>
    4ad8:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <g_80m_power_level>
		storeEEbyteIfChanged(&ee_80m_power_level, g_80m_power_level);
    4adc:	68 2f       	mov	r22, r24
    4ade:	8a e4       	ldi	r24, 0x4A	; 74
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	6a d0       	rcall	.+212    	; 0x4bb8 <storeEEbyteIfChanged>
    4ae4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <g_rtty_offset>
		storeEEdwordIfChanged((uint32_t*)&ee_cw_offset_frequency, g_rtty_offset);
    4ae8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <g_rtty_offset+0x1>
    4aec:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <g_rtty_offset+0x2>
    4af0:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <g_rtty_offset+0x3>
    4af4:	ac 01       	movw	r20, r24
    4af6:	bd 01       	movw	r22, r26
    4af8:	8b e4       	ldi	r24, 0x4B	; 75
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	9d d0       	rcall	.+314    	; 0x4c38 <storeEEdwordIfChanged>
    4afe:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <si5351_get_correction>
		storeEEdwordIfChanged((uint32_t*)&ee_si5351_ref_correction, si5351_get_correction());
    4b02:	dc 01       	movw	r26, r24
    4b04:	cb 01       	movw	r24, r22
    4b06:	ac 01       	movw	r20, r24
    4b08:	bd 01       	movw	r22, r26
    4b0a:	8c e3       	ldi	r24, 0x3C	; 60
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	94 d0       	rcall	.+296    	; 0x4c38 <storeEEdwordIfChanged>
    4b10:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <g_am_drive_level>
		storeEEbyteIfChanged(&ee_am_drive_level, g_am_drive_level);
    4b14:	68 2f       	mov	r22, r24
    4b16:	8f e4       	ldi	r24, 0x4F	; 79
    4b18:	90 e0       	ldi	r25, 0x00	; 0
    4b1a:	4e d0       	rcall	.+156    	; 0x4bb8 <storeEEbyteIfChanged>
    4b1c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <g_cw_drive_level>
		storeEEbyteIfChanged(&ee_cw_drive_level, g_cw_drive_level);
    4b20:	68 2f       	mov	r22, r24
    4b22:	80 e5       	ldi	r24, 0x50	; 80
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	48 d0       	rcall	.+144    	; 0x4bb8 <storeEEbyteIfChanged>
    4b28:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_2m_modulationFormat>
    4b2c:	68 2f       	mov	r22, r24
		storeEEbyteIfChanged(&ee_active_2m_modulation, g_2m_modulationFormat);
    4b2e:	81 e5       	ldi	r24, 0x51	; 81
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	42 d0       	rcall	.+132    	; 0x4bb8 <storeEEbyteIfChanged>
    4b34:	00 00       	nop
    4b36:	df 91       	pop	r29
    4b38:	cf 91       	pop	r28
    4b3a:	08 95       	ret

00004b3c <bandForFrequency>:
	}
    4b3c:	cf 93       	push	r28
    4b3e:	df 93       	push	r29
    4b40:	00 d0       	rcall	.+0      	; 0x4b42 <bandForFrequency+0x6>
    4b42:	00 d0       	rcall	.+0      	; 0x4b44 <bandForFrequency+0x8>


#endif  /*#ifdef INCLUDE_TRANSMITTER_SUPPORT */

RadioBand bandForFrequency(Frequency_Hz freq)
{
    4b44:	1f 92       	push	r1
    4b46:	cd b7       	in	r28, 0x3d	; 61
    4b48:	de b7       	in	r29, 0x3e	; 62
    4b4a:	6a 83       	std	Y+2, r22	; 0x02
    4b4c:	7b 83       	std	Y+3, r23	; 0x03
    4b4e:	8c 83       	std	Y+4, r24	; 0x04
    4b50:	9d 83       	std	Y+5, r25	; 0x05
    4b52:	82 e0       	ldi	r24, 0x02	; 2
    4b54:	89 83       	std	Y+1, r24	; 0x01
    4b56:	8a 81       	ldd	r24, Y+2	; 0x02
    4b58:	9b 81       	ldd	r25, Y+3	; 0x03
	RadioBand result = BAND_INVALID;
    4b5a:	ac 81       	ldd	r26, Y+4	; 0x04
    4b5c:	bd 81       	ldd	r27, Y+5	; 0x05

	if((freq >= TX_MINIMUM_2M_FREQUENCY) && (freq <= TX_MAXIMUM_2M_FREQUENCY))
    4b5e:	81 15       	cp	r24, r1
    4b60:	94 44       	sbci	r25, 0x44	; 68
    4b62:	a5 49       	sbci	r26, 0x95	; 149
    4b64:	b8 40       	sbci	r27, 0x08	; 8
    4b66:	58 f0       	brcs	.+22     	; 0x4b7e <bandForFrequency+0x42>
    4b68:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b6c:	ac 81       	ldd	r26, Y+4	; 0x04
    4b6e:	bd 81       	ldd	r27, Y+5	; 0x05
    4b70:	81 30       	cpi	r24, 0x01	; 1
    4b72:	9d 44       	sbci	r25, 0x4D	; 77
    4b74:	a2 4d       	sbci	r26, 0xD2	; 210
    4b76:	b8 40       	sbci	r27, 0x08	; 8
    4b78:	10 f4       	brcc	.+4      	; 0x4b7e <bandForFrequency+0x42>
    4b7a:	19 82       	std	Y+1, r1	; 0x01
    4b7c:	14 c0       	rjmp	.+40     	; 0x4ba6 <bandForFrequency+0x6a>
    4b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b80:	9b 81       	ldd	r25, Y+3	; 0x03
	{
		result = BAND_2M;
    4b82:	ac 81       	ldd	r26, Y+4	; 0x04
    4b84:	bd 81       	ldd	r27, Y+5	; 0x05
	}
	else if((freq >= TX_MINIMUM_80M_FREQUENCY) && (freq <= TX_MAXIMUM_80M_FREQUENCY))
    4b86:	80 3e       	cpi	r24, 0xE0	; 224
    4b88:	97 46       	sbci	r25, 0x67	; 103
    4b8a:	a5 43       	sbci	r26, 0x35	; 53
    4b8c:	b1 05       	cpc	r27, r1
    4b8e:	58 f0       	brcs	.+22     	; 0x4ba6 <bandForFrequency+0x6a>
    4b90:	8a 81       	ldd	r24, Y+2	; 0x02
    4b92:	9b 81       	ldd	r25, Y+3	; 0x03
    4b94:	ac 81       	ldd	r26, Y+4	; 0x04
    4b96:	bd 81       	ldd	r27, Y+5	; 0x05
    4b98:	81 30       	cpi	r24, 0x01	; 1
    4b9a:	92 41       	sbci	r25, 0x12	; 18
    4b9c:	aa 47       	sbci	r26, 0x7A	; 122
    4b9e:	b1 05       	cpc	r27, r1
    4ba0:	10 f4       	brcc	.+4      	; 0x4ba6 <bandForFrequency+0x6a>
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	89 83       	std	Y+1, r24	; 0x01
    4ba6:	89 81       	ldd	r24, Y+1	; 0x01
    4ba8:	0f 90       	pop	r0
	{
		result = BAND_80M;
    4baa:	0f 90       	pop	r0
    4bac:	0f 90       	pop	r0
	}

	return(result);
    4bae:	0f 90       	pop	r0
}
    4bb0:	0f 90       	pop	r0
    4bb2:	df 91       	pop	r29
    4bb4:	cf 91       	pop	r28
    4bb6:	08 95       	ret

00004bb8 <storeEEbyteIfChanged>:
 *  EEPROM Utility Functions
 ************************************************************************************************/


void storeEEbyteIfChanged(uint8_t* ee_var, uint8_t val)
{
    4bb8:	cf 93       	push	r28
    4bba:	df 93       	push	r29
    4bbc:	00 d0       	rcall	.+0      	; 0x4bbe <storeEEbyteIfChanged+0x6>
    4bbe:	1f 92       	push	r1
    4bc0:	cd b7       	in	r28, 0x3d	; 61
    4bc2:	de b7       	in	r29, 0x3e	; 62
    4bc4:	9a 83       	std	Y+2, r25	; 0x02
    4bc6:	89 83       	std	Y+1, r24	; 0x01
    4bc8:	6b 83       	std	Y+3, r22	; 0x03
	if(eeprom_read_byte((uint8_t*)ee_var) != val)
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
    4bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bce:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_byte>
    4bd2:	98 2f       	mov	r25, r24
    4bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd6:	98 17       	cp	r25, r24
    4bd8:	29 f0       	breq	.+10     	; 0x4be4 <storeEEbyteIfChanged+0x2c>
	{
		eeprom_write_byte(ee_var, val);
    4bda:	89 81       	ldd	r24, Y+1	; 0x01
    4bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bde:	6b 81       	ldd	r22, Y+3	; 0x03
    4be0:	0e 94 05 3b 	call	0x760a	; 0x760a <eeprom_write_byte>
	}
}
    4be4:	00 00       	nop
    4be6:	0f 90       	pop	r0
    4be8:	0f 90       	pop	r0
    4bea:	0f 90       	pop	r0
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	08 95       	ret

00004bf2 <storeEEwordIfChanged>:

void storeEEwordIfChanged(uint16_t* ee_var, uint16_t val)
{
    4bf2:	cf 93       	push	r28
    4bf4:	df 93       	push	r29
    4bf6:	00 d0       	rcall	.+0      	; 0x4bf8 <storeEEwordIfChanged+0x6>
    4bf8:	00 d0       	rcall	.+0      	; 0x4bfa <storeEEwordIfChanged+0x8>
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	9a 83       	std	Y+2, r25	; 0x02
    4c00:	89 83       	std	Y+1, r24	; 0x01
    4c02:	7c 83       	std	Y+4, r23	; 0x04
    4c04:	6b 83       	std	Y+3, r22	; 0x03
	if(eeprom_read_word(ee_var) != val)
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
    4c08:	9a 81       	ldd	r25, Y+2	; 0x02
    4c0a:	0e 94 00 3b 	call	0x7600	; 0x7600 <eeprom_read_word>
    4c0e:	9c 01       	movw	r18, r24
    4c10:	8b 81       	ldd	r24, Y+3	; 0x03
    4c12:	9c 81       	ldd	r25, Y+4	; 0x04
    4c14:	28 17       	cp	r18, r24
    4c16:	39 07       	cpc	r19, r25
    4c18:	39 f0       	breq	.+14     	; 0x4c28 <storeEEwordIfChanged+0x36>
	{
		eeprom_write_word(ee_var, val);
    4c1a:	2b 81       	ldd	r18, Y+3	; 0x03
    4c1c:	3c 81       	ldd	r19, Y+4	; 0x04
    4c1e:	89 81       	ldd	r24, Y+1	; 0x01
    4c20:	9a 81       	ldd	r25, Y+2	; 0x02
    4c22:	b9 01       	movw	r22, r18
    4c24:	0e 94 18 3b 	call	0x7630	; 0x7630 <eeprom_write_word>
	}
}
    4c28:	00 00       	nop
    4c2a:	0f 90       	pop	r0
    4c2c:	0f 90       	pop	r0
    4c2e:	0f 90       	pop	r0
    4c30:	0f 90       	pop	r0
    4c32:	df 91       	pop	r29
    4c34:	cf 91       	pop	r28
    4c36:	08 95       	ret

00004c38 <storeEEdwordIfChanged>:

void storeEEdwordIfChanged(uint32_t* ee_var, uint32_t val)
{
    4c38:	cf 93       	push	r28
    4c3a:	df 93       	push	r29
    4c3c:	00 d0       	rcall	.+0      	; 0x4c3e <storeEEdwordIfChanged+0x6>
    4c3e:	00 d0       	rcall	.+0      	; 0x4c40 <storeEEdwordIfChanged+0x8>
    4c40:	00 d0       	rcall	.+0      	; 0x4c42 <storeEEdwordIfChanged+0xa>
    4c42:	cd b7       	in	r28, 0x3d	; 61
    4c44:	de b7       	in	r29, 0x3e	; 62
    4c46:	9a 83       	std	Y+2, r25	; 0x02
    4c48:	89 83       	std	Y+1, r24	; 0x01
    4c4a:	4b 83       	std	Y+3, r20	; 0x03
    4c4c:	5c 83       	std	Y+4, r21	; 0x04
    4c4e:	6d 83       	std	Y+5, r22	; 0x05
    4c50:	7e 83       	std	Y+6, r23	; 0x06
	if(eeprom_read_dword(ee_var) != val)
    4c52:	89 81       	ldd	r24, Y+1	; 0x01
    4c54:	9a 81       	ldd	r25, Y+2	; 0x02
    4c56:	0e 94 fb 3a 	call	0x75f6	; 0x75f6 <eeprom_read_dword>
    4c5a:	9b 01       	movw	r18, r22
    4c5c:	ac 01       	movw	r20, r24
    4c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c60:	9c 81       	ldd	r25, Y+4	; 0x04
    4c62:	ad 81       	ldd	r26, Y+5	; 0x05
    4c64:	be 81       	ldd	r27, Y+6	; 0x06
    4c66:	28 17       	cp	r18, r24
    4c68:	39 07       	cpc	r19, r25
    4c6a:	4a 07       	cpc	r20, r26
    4c6c:	5b 07       	cpc	r21, r27
    4c6e:	59 f0       	breq	.+22     	; 0x4c86 <storeEEdwordIfChanged+0x4e>
	{
		eeprom_write_dword(ee_var, val);
    4c70:	8b 81       	ldd	r24, Y+3	; 0x03
    4c72:	9c 81       	ldd	r25, Y+4	; 0x04
    4c74:	ad 81       	ldd	r26, Y+5	; 0x05
    4c76:	be 81       	ldd	r27, Y+6	; 0x06
    4c78:	29 81       	ldd	r18, Y+1	; 0x01
    4c7a:	3a 81       	ldd	r19, Y+2	; 0x02
    4c7c:	ac 01       	movw	r20, r24
    4c7e:	bd 01       	movw	r22, r26
    4c80:	c9 01       	movw	r24, r18
    4c82:	0e 94 13 3b 	call	0x7626	; 0x7626 <eeprom_write_dword>
	}
}
    4c86:	00 00       	nop
    4c88:	26 96       	adiw	r28, 0x06	; 6
    4c8a:	0f b6       	in	r0, 0x3f	; 63
    4c8c:	f8 94       	cli
    4c8e:	de bf       	out	0x3e, r29	; 62
    4c90:	0f be       	out	0x3f, r0	; 63
    4c92:	cd bf       	out	0x3d, r28	; 61
    4c94:	df 91       	pop	r29
    4c96:	cf 91       	pop	r28
    4c98:	08 95       	ret

00004c9a <ad5245_set_potentiometer>:
#include <util/twi.h>

#define AD5245_I2C_SLAVE_ADDR_A0_0 0x58

void ad5245_set_potentiometer(uint8_t setting)
{
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    4c9e:	1f 92       	push	r1
    4ca0:	cd b7       	in	r28, 0x3d	; 61
    4ca2:	de b7       	in	r29, 0x3e	; 62
    4ca4:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(AD5245_I2C_SLAVE_ADDR_A0_0, 0x00, &setting, 1);
    4ca6:	21 e0       	ldi	r18, 0x01	; 1
    4ca8:	ce 01       	movw	r24, r28
    4caa:	01 96       	adiw	r24, 0x01	; 1
    4cac:	ac 01       	movw	r20, r24
    4cae:	60 e0       	ldi	r22, 0x00	; 0
    4cb0:	88 e5       	ldi	r24, 0x58	; 88
    4cb2:	82 d4       	rcall	.+2308   	; 0x55b8 <i2c_device_write>
}
    4cb4:	00 00       	nop
    4cb6:	0f 90       	pop	r0
    4cb8:	df 91       	pop	r29
    4cba:	cf 91       	pop	r28
    4cbc:	08 95       	ret

00004cbe <ds3231_get_epoch>:
	return weekdayname[JND % 7];
}
#endif

time_t ds3231_get_epoch(BOOL *result)
{
    4cbe:	ef 92       	push	r14
    4cc0:	ff 92       	push	r15
    4cc2:	0f 93       	push	r16
    4cc4:	1f 93       	push	r17
    4cc6:	cf 93       	push	r28
    4cc8:	df 93       	push	r29
    4cca:	cd b7       	in	r28, 0x3d	; 61
    4ccc:	de b7       	in	r29, 0x3e	; 62
    4cce:	a4 97       	sbiw	r28, 0x24	; 36
    4cd0:	0f b6       	in	r0, 0x3f	; 63
    4cd2:	f8 94       	cli
    4cd4:	de bf       	out	0x3e, r29	; 62
    4cd6:	0f be       	out	0x3f, r0	; 63
    4cd8:	cd bf       	out	0x3d, r28	; 61
    4cda:	9c a3       	std	Y+36, r25	; 0x24
    4cdc:	8b a3       	std	Y+35, r24	; 0x23
	time_t epoch = 0;
    4cde:	19 82       	std	Y+1, r1	; 0x01
    4ce0:	1a 82       	std	Y+2, r1	; 0x02
    4ce2:	1b 82       	std	Y+3, r1	; 0x03
    4ce4:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
    4ce6:	27 e0       	ldi	r18, 0x07	; 7
    4ce8:	ce 01       	movw	r24, r28
    4cea:	40 96       	adiw	r24, 0x10	; 16
    4cec:	fc 01       	movw	r30, r24
    4cee:	32 2f       	mov	r19, r18
    4cf0:	11 92       	st	Z+, r1
    4cf2:	3a 95       	dec	r19
    4cf4:	e9 f7       	brne	.-6      	; 0x4cf0 <ds3231_get_epoch+0x32>
	BOOL res;
	
	res = i2c_device_read(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, data, 7);
    4cf6:	ce 01       	movw	r24, r28
    4cf8:	40 96       	adiw	r24, 0x10	; 16
    4cfa:	27 e0       	ldi	r18, 0x07	; 7
    4cfc:	ac 01       	movw	r20, r24
    4cfe:	60 e0       	ldi	r22, 0x00	; 0
    4d00:	80 ed       	ldi	r24, 0xD0	; 208
    4d02:	d8 d4       	rcall	.+2480   	; 0x56b4 <i2c_device_read>
    4d04:	8f 83       	std	Y+7, r24	; 0x07
	
	if(!res)
    4d06:	8f 81       	ldd	r24, Y+7	; 0x07
    4d08:	88 23       	and	r24, r24
    4d0a:	09 f0       	breq	.+2      	; 0x4d0e <ds3231_get_epoch+0x50>
    4d0c:	68 c1       	rjmp	.+720    	; 0x4fde <ds3231_get_epoch+0x320>
	{
		struct tm ltm = {0};
    4d0e:	2c e0       	ldi	r18, 0x0C	; 12
    4d10:	ce 01       	movw	r24, r28
    4d12:	47 96       	adiw	r24, 0x17	; 23
    4d14:	fc 01       	movw	r30, r24
    4d16:	32 2f       	mov	r19, r18
    4d18:	11 92       	st	Z+, r1
    4d1a:	3a 95       	dec	r19
    4d1c:	e9 f7       	brne	.-6      	; 0x4d18 <ds3231_get_epoch+0x5a>
		int16_t year = 100; // start at 100 years past 1900
    4d1e:	84 e6       	ldi	r24, 0x64	; 100
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	99 87       	std	Y+9, r25	; 0x09
    4d24:	88 87       	std	Y+8, r24	; 0x08
		uint8_t minutes;
		uint8_t seconds;
		BOOL am_pm;
		BOOL twelvehour;
		
		year += data[6] & 0x0f;
    4d26:	8e 89       	ldd	r24, Y+22	; 0x16
    4d28:	88 2f       	mov	r24, r24
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	8f 70       	andi	r24, 0x0F	; 15
    4d2e:	99 27       	eor	r25, r25
    4d30:	28 85       	ldd	r18, Y+8	; 0x08
    4d32:	39 85       	ldd	r19, Y+9	; 0x09
    4d34:	82 0f       	add	r24, r18
    4d36:	93 1f       	adc	r25, r19
    4d38:	99 87       	std	Y+9, r25	; 0x09
    4d3a:	88 87       	std	Y+8, r24	; 0x08
		year += 10*((data[6] & 0xf0) >> 4);
    4d3c:	8e 89       	ldd	r24, Y+22	; 0x16
    4d3e:	82 95       	swap	r24
    4d40:	8f 70       	andi	r24, 0x0F	; 15
    4d42:	88 2f       	mov	r24, r24
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	88 0f       	add	r24, r24
    4d48:	99 1f       	adc	r25, r25
    4d4a:	9c 01       	movw	r18, r24
    4d4c:	22 0f       	add	r18, r18
    4d4e:	33 1f       	adc	r19, r19
    4d50:	22 0f       	add	r18, r18
    4d52:	33 1f       	adc	r19, r19
    4d54:	82 0f       	add	r24, r18
    4d56:	93 1f       	adc	r25, r19
    4d58:	28 85       	ldd	r18, Y+8	; 0x08
    4d5a:	39 85       	ldd	r19, Y+9	; 0x09
    4d5c:	82 0f       	add	r24, r18
    4d5e:	93 1f       	adc	r25, r19
    4d60:	99 87       	std	Y+9, r25	; 0x09
    4d62:	88 87       	std	Y+8, r24	; 0x08
		ltm.tm_year = year; // year since 1900
    4d64:	88 85       	ldd	r24, Y+8	; 0x08
    4d66:	99 85       	ldd	r25, Y+9	; 0x09
    4d68:	9e 8f       	std	Y+30, r25	; 0x1e
    4d6a:	8d 8f       	std	Y+29, r24	; 0x1d
		
		year += 1900; // adjust year to calendar year
    4d6c:	88 85       	ldd	r24, Y+8	; 0x08
    4d6e:	99 85       	ldd	r25, Y+9	; 0x09
    4d70:	84 59       	subi	r24, 0x94	; 148
    4d72:	98 4f       	sbci	r25, 0xF8	; 248
    4d74:	99 87       	std	Y+9, r25	; 0x09
    4d76:	88 87       	std	Y+8, r24	; 0x08
						
		month = data[5] & 0x0f;
    4d78:	8d 89       	ldd	r24, Y+21	; 0x15
    4d7a:	8f 70       	andi	r24, 0x0F	; 15
    4d7c:	8a 87       	std	Y+10, r24	; 0x0a
		month += 10*((data[5] & 0xf0) >> 4);
    4d7e:	8d 89       	ldd	r24, Y+21	; 0x15
    4d80:	82 95       	swap	r24
    4d82:	8f 70       	andi	r24, 0x0F	; 15
    4d84:	88 0f       	add	r24, r24
    4d86:	98 2f       	mov	r25, r24
    4d88:	99 0f       	add	r25, r25
    4d8a:	99 0f       	add	r25, r25
    4d8c:	89 0f       	add	r24, r25
    4d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d90:	89 0f       	add	r24, r25
    4d92:	8a 87       	std	Y+10, r24	; 0x0a
		ltm.tm_mon = month - 1; // mon 0 to 11
    4d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d96:	81 50       	subi	r24, 0x01	; 1
    4d98:	8c 8f       	std	Y+28, r24	; 0x1c

		date = data[4] & 0x0f;
    4d9a:	8c 89       	ldd	r24, Y+20	; 0x14
    4d9c:	8f 70       	andi	r24, 0x0F	; 15
    4d9e:	8b 87       	std	Y+11, r24	; 0x0b
		date += 10*((data[4] & 0xf0) >> 4);
    4da0:	8c 89       	ldd	r24, Y+20	; 0x14
    4da2:	82 95       	swap	r24
    4da4:	8f 70       	andi	r24, 0x0F	; 15
    4da6:	88 0f       	add	r24, r24
    4da8:	98 2f       	mov	r25, r24
    4daa:	99 0f       	add	r25, r25
    4dac:	99 0f       	add	r25, r25
    4dae:	89 0f       	add	r24, r25
    4db0:	9b 85       	ldd	r25, Y+11	; 0x0b
    4db2:	89 0f       	add	r24, r25
    4db4:	8b 87       	std	Y+11, r24	; 0x0b

		ltm.tm_mday = date; // month day 1 to 31
    4db6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4db8:	8a 8f       	std	Y+26, r24	; 0x1a

		ltm.tm_yday = 0;
    4dba:	18 a2       	std	Y+32, r1	; 0x20
    4dbc:	1f 8e       	std	Y+31, r1	; 0x1f
		for(uint8_t mon=1; mon<month; mon++) // months from 1 to 11 (excludes partial month)
    4dbe:	81 e0       	ldi	r24, 0x01	; 1
    4dc0:	8e 83       	std	Y+6, r24	; 0x06
    4dc2:	10 c0       	rjmp	.+32     	; 0x4de4 <ds3231_get_epoch+0x126>
		{
		  ltm.tm_yday += month_length(year, mon);;
    4dc4:	88 85       	ldd	r24, Y+8	; 0x08
    4dc6:	99 85       	ldd	r25, Y+9	; 0x09
    4dc8:	6e 81       	ldd	r22, Y+6	; 0x06
    4dca:	0e 94 d7 36 	call	0x6dae	; 0x6dae <month_length>
    4dce:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4dd0:	38 a1       	ldd	r19, Y+32	; 0x20
    4dd2:	88 2f       	mov	r24, r24
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	82 0f       	add	r24, r18
    4dd8:	93 1f       	adc	r25, r19
    4dda:	98 a3       	std	Y+32, r25	; 0x20
    4ddc:	8f 8f       	std	Y+31, r24	; 0x1f
		date += 10*((data[4] & 0xf0) >> 4);

		ltm.tm_mday = date; // month day 1 to 31

		ltm.tm_yday = 0;
		for(uint8_t mon=1; mon<month; mon++) // months from 1 to 11 (excludes partial month)
    4dde:	8e 81       	ldd	r24, Y+6	; 0x06
    4de0:	8f 5f       	subi	r24, 0xFF	; 255
    4de2:	8e 83       	std	Y+6, r24	; 0x06
    4de4:	9e 81       	ldd	r25, Y+6	; 0x06
    4de6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4de8:	98 17       	cp	r25, r24
    4dea:	60 f3       	brcs	.-40     	; 0x4dc4 <ds3231_get_epoch+0x106>
		{
		  ltm.tm_yday += month_length(year, mon);;
		}

		ltm.tm_yday += (ltm.tm_mday - 1);
    4dec:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4dee:	38 a1       	ldd	r19, Y+32	; 0x20
    4df0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4df2:	08 2e       	mov	r0, r24
    4df4:	00 0c       	add	r0, r0
    4df6:	99 0b       	sbc	r25, r25
    4df8:	01 97       	sbiw	r24, 0x01	; 1
    4dfa:	82 0f       	add	r24, r18
    4dfc:	93 1f       	adc	r25, r19
    4dfe:	98 a3       	std	Y+32, r25	; 0x20
    4e00:	8f 8f       	std	Y+31, r24	; 0x1f

		seconds = 10 * ((data[0] & 0xf0) >> 4);
    4e02:	88 89       	ldd	r24, Y+16	; 0x10
    4e04:	82 95       	swap	r24
    4e06:	8f 70       	andi	r24, 0x0F	; 15
    4e08:	88 0f       	add	r24, r24
    4e0a:	98 2f       	mov	r25, r24
    4e0c:	99 0f       	add	r25, r25
    4e0e:	99 0f       	add	r25, r25
    4e10:	89 0f       	add	r24, r25
    4e12:	8c 87       	std	Y+12, r24	; 0x0c
		seconds += (data[0] & 0x0f);
    4e14:	88 89       	ldd	r24, Y+16	; 0x10
    4e16:	8f 70       	andi	r24, 0x0F	; 15
    4e18:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e1a:	89 0f       	add	r24, r25
    4e1c:	8c 87       	std	Y+12, r24	; 0x0c

		minutes = 10 * ((data[1] & 0xf0) >> 4);
    4e1e:	89 89       	ldd	r24, Y+17	; 0x11
    4e20:	82 95       	swap	r24
    4e22:	8f 70       	andi	r24, 0x0F	; 15
    4e24:	88 0f       	add	r24, r24
    4e26:	98 2f       	mov	r25, r24
    4e28:	99 0f       	add	r25, r25
    4e2a:	99 0f       	add	r25, r25
    4e2c:	89 0f       	add	r24, r25
    4e2e:	8d 87       	std	Y+13, r24	; 0x0d
		minutes += (data[1] & 0x0f);
    4e30:	89 89       	ldd	r24, Y+17	; 0x11
    4e32:	8f 70       	andi	r24, 0x0F	; 15
    4e34:	9d 85       	ldd	r25, Y+13	; 0x0d
    4e36:	89 0f       	add	r24, r25
    4e38:	8d 87       	std	Y+13, r24	; 0x0d

		am_pm = ((data[2] >> 5) & 0x01);
    4e3a:	8a 89       	ldd	r24, Y+18	; 0x12
    4e3c:	82 95       	swap	r24
    4e3e:	86 95       	lsr	r24
    4e40:	87 70       	andi	r24, 0x07	; 7
    4e42:	81 70       	andi	r24, 0x01	; 1
    4e44:	8e 87       	std	Y+14, r24	; 0x0e
		
		hours = 10 * ((data[2] >> 4) & 0x01);
    4e46:	8a 89       	ldd	r24, Y+18	; 0x12
    4e48:	82 95       	swap	r24
    4e4a:	8f 70       	andi	r24, 0x0F	; 15
    4e4c:	81 70       	andi	r24, 0x01	; 1
    4e4e:	88 0f       	add	r24, r24
    4e50:	98 2f       	mov	r25, r24
    4e52:	99 0f       	add	r25, r25
    4e54:	99 0f       	add	r25, r25
    4e56:	89 0f       	add	r24, r25
    4e58:	8d 83       	std	Y+5, r24	; 0x05
		hours += (data[2] & 0x0f);
    4e5a:	8a 89       	ldd	r24, Y+18	; 0x12
    4e5c:	8f 70       	andi	r24, 0x0F	; 15
    4e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    4e60:	89 0f       	add	r24, r25
    4e62:	8d 83       	std	Y+5, r24	; 0x05

		twelvehour = ((data[2] >> 6) & 0x01);
    4e64:	8a 89       	ldd	r24, Y+18	; 0x12
    4e66:	82 95       	swap	r24
    4e68:	86 95       	lsr	r24
    4e6a:	86 95       	lsr	r24
    4e6c:	83 70       	andi	r24, 0x03	; 3
    4e6e:	81 70       	andi	r24, 0x01	; 1
    4e70:	8f 87       	std	Y+15, r24	; 0x0f

		if(!twelvehour && am_pm)
    4e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e74:	88 23       	and	r24, r24
    4e76:	31 f4       	brne	.+12     	; 0x4e84 <ds3231_get_epoch+0x1c6>
    4e78:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e7a:	88 23       	and	r24, r24
    4e7c:	19 f0       	breq	.+6      	; 0x4e84 <ds3231_get_epoch+0x1c6>
		{
			hours += 10;
    4e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e80:	86 5f       	subi	r24, 0xF6	; 246
    4e82:	8d 83       	std	Y+5, r24	; 0x05
		}

		ltm.tm_hour = hours;
    4e84:	8d 81       	ldd	r24, Y+5	; 0x05
    4e86:	89 8f       	std	Y+25, r24	; 0x19
		ltm.tm_min = minutes;
    4e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e8a:	88 8f       	std	Y+24, r24	; 0x18
		ltm.tm_sec = seconds;
    4e8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e8e:	8f 8b       	std	Y+23, r24	; 0x17
	  
		epoch = ltm.tm_sec + ltm.tm_min*60 + ltm.tm_hour*3600L + ltm.tm_yday*86400L +
    4e90:	8f 89       	ldd	r24, Y+23	; 0x17
    4e92:	28 2f       	mov	r18, r24
    4e94:	88 0f       	add	r24, r24
    4e96:	33 0b       	sbc	r19, r19
    4e98:	88 8d       	ldd	r24, Y+24	; 0x18
    4e9a:	48 2f       	mov	r20, r24
    4e9c:	88 0f       	add	r24, r24
    4e9e:	55 0b       	sbc	r21, r21
    4ea0:	6c e3       	ldi	r22, 0x3C	; 60
    4ea2:	64 9f       	mul	r22, r20
    4ea4:	c0 01       	movw	r24, r0
    4ea6:	65 9f       	mul	r22, r21
    4ea8:	90 0d       	add	r25, r0
    4eaa:	11 24       	eor	r1, r1
    4eac:	82 0f       	add	r24, r18
    4eae:	93 1f       	adc	r25, r19
    4eb0:	7c 01       	movw	r14, r24
    4eb2:	99 0f       	add	r25, r25
    4eb4:	00 0b       	sbc	r16, r16
    4eb6:	11 0b       	sbc	r17, r17
    4eb8:	89 8d       	ldd	r24, Y+25	; 0x19
    4eba:	28 2f       	mov	r18, r24
    4ebc:	88 0f       	add	r24, r24
    4ebe:	33 0b       	sbc	r19, r19
    4ec0:	44 0b       	sbc	r20, r20
    4ec2:	55 0b       	sbc	r21, r21
    4ec4:	80 e1       	ldi	r24, 0x10	; 16
    4ec6:	9e e0       	ldi	r25, 0x0E	; 14
    4ec8:	dc 01       	movw	r26, r24
    4eca:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__muluhisi3>
    4ece:	dc 01       	movw	r26, r24
    4ed0:	cb 01       	movw	r24, r22
    4ed2:	e8 0e       	add	r14, r24
    4ed4:	f9 1e       	adc	r15, r25
    4ed6:	0a 1f       	adc	r16, r26
    4ed8:	1b 1f       	adc	r17, r27
    4eda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4edc:	98 a1       	ldd	r25, Y+32	; 0x20
    4ede:	09 2e       	mov	r0, r25
    4ee0:	00 0c       	add	r0, r0
    4ee2:	aa 0b       	sbc	r26, r26
    4ee4:	bb 0b       	sbc	r27, r27
    4ee6:	9c 01       	movw	r18, r24
    4ee8:	ad 01       	movw	r20, r26
    4eea:	60 e8       	ldi	r22, 0x80	; 128
    4eec:	71 e5       	ldi	r23, 0x51	; 81
    4eee:	81 e0       	ldi	r24, 0x01	; 1
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__mulsi3>
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	cb 01       	movw	r24, r22
    4efa:	e8 0e       	add	r14, r24
    4efc:	f9 1e       	adc	r15, r25
    4efe:	0a 1f       	adc	r16, r26
    4f00:	1b 1f       	adc	r17, r27
		(ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    4f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f06:	86 54       	subi	r24, 0x46	; 70
    4f08:	91 09       	sbc	r25, r1
    4f0a:	09 2e       	mov	r0, r25
    4f0c:	00 0c       	add	r0, r0
    4f0e:	aa 0b       	sbc	r26, r26
    4f10:	bb 0b       	sbc	r27, r27
    4f12:	9c 01       	movw	r18, r24
    4f14:	ad 01       	movw	r20, r26
    4f16:	60 e8       	ldi	r22, 0x80	; 128
    4f18:	73 e3       	ldi	r23, 0x33	; 51
    4f1a:	81 ee       	ldi	r24, 0xE1	; 225
    4f1c:	91 e0       	ldi	r25, 0x01	; 1
    4f1e:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__mulsi3>
    4f22:	dc 01       	movw	r26, r24
    4f24:	cb 01       	movw	r24, r22

		ltm.tm_hour = hours;
		ltm.tm_min = minutes;
		ltm.tm_sec = seconds;
	  
		epoch = ltm.tm_sec + ltm.tm_min*60 + ltm.tm_hour*3600L + ltm.tm_yday*86400L +
    4f26:	e8 0e       	add	r14, r24
    4f28:	f9 1e       	adc	r15, r25
    4f2a:	0a 1f       	adc	r16, r26
    4f2c:	1b 1f       	adc	r17, r27
		(ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    4f2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f32:	85 54       	subi	r24, 0x45	; 69
    4f34:	91 09       	sbc	r25, r1
    4f36:	99 23       	and	r25, r25
    4f38:	0c f4       	brge	.+2      	; 0x4f3c <ds3231_get_epoch+0x27e>
    4f3a:	03 96       	adiw	r24, 0x03	; 3
    4f3c:	95 95       	asr	r25
    4f3e:	87 95       	ror	r24
    4f40:	95 95       	asr	r25
    4f42:	87 95       	ror	r24
    4f44:	09 2e       	mov	r0, r25
    4f46:	00 0c       	add	r0, r0
    4f48:	aa 0b       	sbc	r26, r26
    4f4a:	bb 0b       	sbc	r27, r27
    4f4c:	9c 01       	movw	r18, r24
    4f4e:	ad 01       	movw	r20, r26
    4f50:	60 e8       	ldi	r22, 0x80	; 128
    4f52:	71 e5       	ldi	r23, 0x51	; 81
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	90 e0       	ldi	r25, 0x00	; 0
    4f58:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__mulsi3>
    4f5c:	dc 01       	movw	r26, r24
    4f5e:	cb 01       	movw	r24, r22
    4f60:	e8 0e       	add	r14, r24
    4f62:	f9 1e       	adc	r15, r25
    4f64:	0a 1f       	adc	r16, r26
    4f66:	1b 1f       	adc	r17, r27
		((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
    4f68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f6c:	01 97       	sbiw	r24, 0x01	; 1
    4f6e:	24 e6       	ldi	r18, 0x64	; 100
    4f70:	30 e0       	ldi	r19, 0x00	; 0
    4f72:	b9 01       	movw	r22, r18
    4f74:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <__divmodhi4>
    4f78:	cb 01       	movw	r24, r22
    4f7a:	09 2e       	mov	r0, r25
    4f7c:	00 0c       	add	r0, r0
    4f7e:	aa 0b       	sbc	r26, r26
    4f80:	bb 0b       	sbc	r27, r27
    4f82:	9c 01       	movw	r18, r24
    4f84:	ad 01       	movw	r20, r26
    4f86:	60 e8       	ldi	r22, 0x80	; 128
    4f88:	7e ea       	ldi	r23, 0xAE	; 174
    4f8a:	8e ef       	ldi	r24, 0xFE	; 254
    4f8c:	9f ef       	ldi	r25, 0xFF	; 255
    4f8e:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__mulsi3>
    4f92:	dc 01       	movw	r26, r24
    4f94:	cb 01       	movw	r24, r22
		ltm.tm_hour = hours;
		ltm.tm_min = minutes;
		ltm.tm_sec = seconds;
	  
		epoch = ltm.tm_sec + ltm.tm_min*60 + ltm.tm_hour*3600L + ltm.tm_yday*86400L +
		(ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
    4f96:	e8 0e       	add	r14, r24
    4f98:	f9 1e       	adc	r15, r25
    4f9a:	0a 1f       	adc	r16, r26
    4f9c:	1b 1f       	adc	r17, r27
		((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
    4f9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fa2:	85 5d       	subi	r24, 0xD5	; 213
    4fa4:	9e 4f       	sbci	r25, 0xFE	; 254
    4fa6:	20 e9       	ldi	r18, 0x90	; 144
    4fa8:	31 e0       	ldi	r19, 0x01	; 1
    4faa:	b9 01       	movw	r22, r18
    4fac:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <__divmodhi4>
    4fb0:	cb 01       	movw	r24, r22
    4fb2:	09 2e       	mov	r0, r25
    4fb4:	00 0c       	add	r0, r0
    4fb6:	aa 0b       	sbc	r26, r26
    4fb8:	bb 0b       	sbc	r27, r27
    4fba:	9c 01       	movw	r18, r24
    4fbc:	ad 01       	movw	r20, r26
    4fbe:	60 e8       	ldi	r22, 0x80	; 128
    4fc0:	71 e5       	ldi	r23, 0x51	; 81
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	0e 94 31 37 	call	0x6e62	; 0x6e62 <__mulsi3>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	8e 0d       	add	r24, r14
    4fd0:	9f 1d       	adc	r25, r15
    4fd2:	a0 1f       	adc	r26, r16
    4fd4:	b1 1f       	adc	r27, r17

		ltm.tm_hour = hours;
		ltm.tm_min = minutes;
		ltm.tm_sec = seconds;
	  
		epoch = ltm.tm_sec + ltm.tm_min*60 + ltm.tm_hour*3600L + ltm.tm_yday*86400L +
    4fd6:	89 83       	std	Y+1, r24	; 0x01
    4fd8:	9a 83       	std	Y+2, r25	; 0x02
    4fda:	ab 83       	std	Y+3, r26	; 0x03
    4fdc:	bc 83       	std	Y+4, r27	; 0x04
		(ltm.tm_year-70)*31536000L + ((ltm.tm_year-69)/4)*86400L -
		((ltm.tm_year-1)/100)*86400L + ((ltm.tm_year+299)/400)*86400L;
	}
	 
	if(result) *result = res; 
    4fde:	8b a1       	ldd	r24, Y+35	; 0x23
    4fe0:	9c a1       	ldd	r25, Y+36	; 0x24
    4fe2:	89 2b       	or	r24, r25
    4fe4:	29 f0       	breq	.+10     	; 0x4ff0 <ds3231_get_epoch+0x332>
    4fe6:	8b a1       	ldd	r24, Y+35	; 0x23
    4fe8:	9c a1       	ldd	r25, Y+36	; 0x24
    4fea:	2f 81       	ldd	r18, Y+7	; 0x07
    4fec:	fc 01       	movw	r30, r24
    4fee:	20 83       	st	Z, r18
	return epoch;
    4ff0:	89 81       	ldd	r24, Y+1	; 0x01
    4ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ff4:	ab 81       	ldd	r26, Y+3	; 0x03
    4ff6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    4ff8:	bc 01       	movw	r22, r24
    4ffa:	cd 01       	movw	r24, r26
    4ffc:	a4 96       	adiw	r28, 0x24	; 36
    4ffe:	0f b6       	in	r0, 0x3f	; 63
    5000:	f8 94       	cli
    5002:	de bf       	out	0x3e, r29	; 62
    5004:	0f be       	out	0x3f, r0	; 63
    5006:	cd bf       	out	0x3d, r28	; 61
    5008:	df 91       	pop	r29
    500a:	cf 91       	pop	r28
    500c:	1f 91       	pop	r17
    500e:	0f 91       	pop	r16
    5010:	ff 90       	pop	r15
    5012:	ef 90       	pop	r14
    5014:	08 95       	ret

00005016 <ds3231_get_temp>:
	
	BOOL ds3231_get_temp(int16_t * val)
	{
    5016:	cf 93       	push	r28
    5018:	df 93       	push	r29
    501a:	00 d0       	rcall	.+0      	; 0x501c <ds3231_get_temp+0x6>
    501c:	00 d0       	rcall	.+0      	; 0x501e <ds3231_get_temp+0x8>
    501e:	1f 92       	push	r1
    5020:	cd b7       	in	r28, 0x3d	; 61
    5022:	de b7       	in	r29, 0x3e	; 62
    5024:	9d 83       	std	Y+5, r25	; 0x05
    5026:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t data[2] = { 0, 0 };
    5028:	1a 82       	std	Y+2, r1	; 0x02
    502a:	1b 82       	std	Y+3, r1	; 0x03
		BOOL result = i2c_device_read(DS3231_I2C_SLAVE_ADDR, RTC_TEMP_MSB, data, 2);
    502c:	ce 01       	movw	r24, r28
    502e:	02 96       	adiw	r24, 0x02	; 2
    5030:	22 e0       	ldi	r18, 0x02	; 2
    5032:	ac 01       	movw	r20, r24
    5034:	61 e1       	ldi	r22, 0x11	; 17
    5036:	80 ed       	ldi	r24, 0xD0	; 208
    5038:	3d d3       	rcall	.+1658   	; 0x56b4 <i2c_device_read>
    503a:	89 83       	std	Y+1, r24	; 0x01
		
		if(!result)
    503c:	89 81       	ldd	r24, Y+1	; 0x01
    503e:	88 23       	and	r24, r24
    5040:	19 f5       	brne	.+70     	; 0x5088 <ds3231_get_temp+0x72>
		{
			*val = data[0];
    5042:	8a 81       	ldd	r24, Y+2	; 0x02
    5044:	28 2f       	mov	r18, r24
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	8c 81       	ldd	r24, Y+4	; 0x04
    504a:	9d 81       	ldd	r25, Y+5	; 0x05
    504c:	fc 01       	movw	r30, r24
    504e:	31 83       	std	Z+1, r19	; 0x01
    5050:	20 83       	st	Z, r18
			*val = *val << 8;
    5052:	8c 81       	ldd	r24, Y+4	; 0x04
    5054:	9d 81       	ldd	r25, Y+5	; 0x05
    5056:	fc 01       	movw	r30, r24
    5058:	80 81       	ld	r24, Z
    505a:	91 81       	ldd	r25, Z+1	; 0x01
    505c:	38 2f       	mov	r19, r24
    505e:	22 27       	eor	r18, r18
    5060:	8c 81       	ldd	r24, Y+4	; 0x04
    5062:	9d 81       	ldd	r25, Y+5	; 0x05
    5064:	fc 01       	movw	r30, r24
    5066:	31 83       	std	Z+1, r19	; 0x01
    5068:	20 83       	st	Z, r18
			*val |= data[1];
    506a:	8c 81       	ldd	r24, Y+4	; 0x04
    506c:	9d 81       	ldd	r25, Y+5	; 0x05
    506e:	fc 01       	movw	r30, r24
    5070:	20 81       	ld	r18, Z
    5072:	31 81       	ldd	r19, Z+1	; 0x01
    5074:	8b 81       	ldd	r24, Y+3	; 0x03
    5076:	88 2f       	mov	r24, r24
    5078:	90 e0       	ldi	r25, 0x00	; 0
    507a:	28 2b       	or	r18, r24
    507c:	39 2b       	or	r19, r25
    507e:	8c 81       	ldd	r24, Y+4	; 0x04
    5080:	9d 81       	ldd	r25, Y+5	; 0x05
    5082:	fc 01       	movw	r30, r24
    5084:	31 83       	std	Z+1, r19	; 0x01
    5086:	20 83       	st	Z, r18
		}
		
		return result;
    5088:	89 81       	ldd	r24, Y+1	; 0x01
	}
    508a:	0f 90       	pop	r0
    508c:	0f 90       	pop	r0
    508e:	0f 90       	pop	r0
    5090:	0f 90       	pop	r0
    5092:	0f 90       	pop	r0
    5094:	df 91       	pop	r29
    5096:	cf 91       	pop	r28
    5098:	08 95       	ret

0000509a <ds3231_set_date_time>:
		}
	}
#endif // DATE_STRING_SUPPORT_ENABLED

void ds3231_set_date_time(char * dateString, ClockSetting setting) /* "2018-03-23T18:00:00Z" */
{
    509a:	cf 93       	push	r28
    509c:	df 93       	push	r29
    509e:	cd b7       	in	r28, 0x3d	; 61
    50a0:	de b7       	in	r29, 0x3e	; 62
    50a2:	62 97       	sbiw	r28, 0x12	; 18
    50a4:	0f b6       	in	r0, 0x3f	; 63
    50a6:	f8 94       	cli
    50a8:	de bf       	out	0x3e, r29	; 62
    50aa:	0f be       	out	0x3f, r0	; 63
    50ac:	cd bf       	out	0x3d, r28	; 61
    50ae:	99 8b       	std	Y+17, r25	; 0x11
    50b0:	88 8b       	std	Y+16, r24	; 0x10
    50b2:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t data[7] = { 0, 0, 0, 1, 0, 0, 0 };
    50b4:	19 86       	std	Y+9, r1	; 0x09
    50b6:	1a 86       	std	Y+10, r1	; 0x0a
    50b8:	1b 86       	std	Y+11, r1	; 0x0b
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	8c 87       	std	Y+12, r24	; 0x0c
    50be:	1d 86       	std	Y+13, r1	; 0x0d
    50c0:	1e 86       	std	Y+14, r1	; 0x0e
    50c2:	1f 86       	std	Y+15, r1	; 0x0f
	int temp, year=2000, month, date;
    50c4:	80 ed       	ldi	r24, 0xD0	; 208
    50c6:	97 e0       	ldi	r25, 0x07	; 7
    50c8:	9a 83       	std	Y+2, r25	; 0x02
    50ca:	89 83       	std	Y+1, r24	; 0x01
	
	data[0] = dateString[18] - '0'; /* seconds */
    50cc:	88 89       	ldd	r24, Y+16	; 0x10
    50ce:	99 89       	ldd	r25, Y+17	; 0x11
    50d0:	42 96       	adiw	r24, 0x12	; 18
    50d2:	fc 01       	movw	r30, r24
    50d4:	80 81       	ld	r24, Z
    50d6:	80 53       	subi	r24, 0x30	; 48
    50d8:	89 87       	std	Y+9, r24	; 0x09
	data[0] |= ((dateString[17] - '0') << 4); /*10s of seconds */
    50da:	89 85       	ldd	r24, Y+9	; 0x09
    50dc:	28 2f       	mov	r18, r24
    50de:	88 89       	ldd	r24, Y+16	; 0x10
    50e0:	99 89       	ldd	r25, Y+17	; 0x11
    50e2:	41 96       	adiw	r24, 0x11	; 17
    50e4:	fc 01       	movw	r30, r24
    50e6:	80 81       	ld	r24, Z
    50e8:	88 2f       	mov	r24, r24
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	c0 97       	sbiw	r24, 0x30	; 48
    50ee:	82 95       	swap	r24
    50f0:	92 95       	swap	r25
    50f2:	90 7f       	andi	r25, 0xF0	; 240
    50f4:	98 27       	eor	r25, r24
    50f6:	80 7f       	andi	r24, 0xF0	; 240
    50f8:	98 27       	eor	r25, r24
    50fa:	82 2b       	or	r24, r18
    50fc:	89 87       	std	Y+9, r24	; 0x09
	data[1] = dateString[15] - '0'; /* minutes */
    50fe:	88 89       	ldd	r24, Y+16	; 0x10
    5100:	99 89       	ldd	r25, Y+17	; 0x11
    5102:	0f 96       	adiw	r24, 0x0f	; 15
    5104:	fc 01       	movw	r30, r24
    5106:	80 81       	ld	r24, Z
    5108:	80 53       	subi	r24, 0x30	; 48
    510a:	8a 87       	std	Y+10, r24	; 0x0a
	data[1] |= ((dateString[14] - '0') << 4); /* 10s of minutes */
    510c:	8a 85       	ldd	r24, Y+10	; 0x0a
    510e:	28 2f       	mov	r18, r24
    5110:	88 89       	ldd	r24, Y+16	; 0x10
    5112:	99 89       	ldd	r25, Y+17	; 0x11
    5114:	0e 96       	adiw	r24, 0x0e	; 14
    5116:	fc 01       	movw	r30, r24
    5118:	80 81       	ld	r24, Z
    511a:	88 2f       	mov	r24, r24
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	c0 97       	sbiw	r24, 0x30	; 48
    5120:	82 95       	swap	r24
    5122:	92 95       	swap	r25
    5124:	90 7f       	andi	r25, 0xF0	; 240
    5126:	98 27       	eor	r25, r24
    5128:	80 7f       	andi	r24, 0xF0	; 240
    512a:	98 27       	eor	r25, r24
    512c:	82 2b       	or	r24, r18
    512e:	8a 87       	std	Y+10, r24	; 0x0a
	data[2] = dateString[12] - '0'; /* hours */
    5130:	88 89       	ldd	r24, Y+16	; 0x10
    5132:	99 89       	ldd	r25, Y+17	; 0x11
    5134:	0c 96       	adiw	r24, 0x0c	; 12
    5136:	fc 01       	movw	r30, r24
    5138:	80 81       	ld	r24, Z
    513a:	80 53       	subi	r24, 0x30	; 48
    513c:	8b 87       	std	Y+11, r24	; 0x0b
	data[2] |= ((dateString[11] - '0') << 4); /* 10s of hours - sets 24-hour format (not AM/PM) */
    513e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5140:	28 2f       	mov	r18, r24
    5142:	88 89       	ldd	r24, Y+16	; 0x10
    5144:	99 89       	ldd	r25, Y+17	; 0x11
    5146:	0b 96       	adiw	r24, 0x0b	; 11
    5148:	fc 01       	movw	r30, r24
    514a:	80 81       	ld	r24, Z
    514c:	88 2f       	mov	r24, r24
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	c0 97       	sbiw	r24, 0x30	; 48
    5152:	82 95       	swap	r24
    5154:	92 95       	swap	r25
    5156:	90 7f       	andi	r25, 0xF0	; 240
    5158:	98 27       	eor	r25, r24
    515a:	80 7f       	andi	r24, 0xF0	; 240
    515c:	98 27       	eor	r25, r24
    515e:	82 2b       	or	r24, r18
    5160:	8b 87       	std	Y+11, r24	; 0x0b
	//data[3] = Skip day of week
	data[4] = dateString[9] - '0'; /* day of month digit 1 */
    5162:	88 89       	ldd	r24, Y+16	; 0x10
    5164:	99 89       	ldd	r25, Y+17	; 0x11
    5166:	09 96       	adiw	r24, 0x09	; 9
    5168:	fc 01       	movw	r30, r24
    516a:	80 81       	ld	r24, Z
    516c:	80 53       	subi	r24, 0x30	; 48
    516e:	8d 87       	std	Y+13, r24	; 0x0d
	date = data[4];
    5170:	8d 85       	ldd	r24, Y+13	; 0x0d
    5172:	88 2f       	mov	r24, r24
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	9c 83       	std	Y+4, r25	; 0x04
    5178:	8b 83       	std	Y+3, r24	; 0x03
	temp = dateString[8] - '0';
    517a:	88 89       	ldd	r24, Y+16	; 0x10
    517c:	99 89       	ldd	r25, Y+17	; 0x11
    517e:	08 96       	adiw	r24, 0x08	; 8
    5180:	fc 01       	movw	r30, r24
    5182:	80 81       	ld	r24, Z
    5184:	88 2f       	mov	r24, r24
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	c0 97       	sbiw	r24, 0x30	; 48
    518a:	9e 83       	std	Y+6, r25	; 0x06
    518c:	8d 83       	std	Y+5, r24	; 0x05
	date += 10*temp;
    518e:	8d 81       	ldd	r24, Y+5	; 0x05
    5190:	9e 81       	ldd	r25, Y+6	; 0x06
    5192:	88 0f       	add	r24, r24
    5194:	99 1f       	adc	r25, r25
    5196:	9c 01       	movw	r18, r24
    5198:	22 0f       	add	r18, r18
    519a:	33 1f       	adc	r19, r19
    519c:	22 0f       	add	r18, r18
    519e:	33 1f       	adc	r19, r19
    51a0:	82 0f       	add	r24, r18
    51a2:	93 1f       	adc	r25, r19
    51a4:	2b 81       	ldd	r18, Y+3	; 0x03
    51a6:	3c 81       	ldd	r19, Y+4	; 0x04
    51a8:	82 0f       	add	r24, r18
    51aa:	93 1f       	adc	r25, r19
    51ac:	9c 83       	std	Y+4, r25	; 0x04
    51ae:	8b 83       	std	Y+3, r24	; 0x03
	data[4] |= (temp << 4); /* day of month digit 10 */
    51b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    51b2:	28 2f       	mov	r18, r24
    51b4:	8d 81       	ldd	r24, Y+5	; 0x05
    51b6:	9e 81       	ldd	r25, Y+6	; 0x06
    51b8:	82 95       	swap	r24
    51ba:	92 95       	swap	r25
    51bc:	90 7f       	andi	r25, 0xF0	; 240
    51be:	98 27       	eor	r25, r24
    51c0:	80 7f       	andi	r24, 0xF0	; 240
    51c2:	98 27       	eor	r25, r24
    51c4:	82 2b       	or	r24, r18
    51c6:	8d 87       	std	Y+13, r24	; 0x0d
	data[5] = dateString[6] - '0'; /* month digit 1 */
    51c8:	88 89       	ldd	r24, Y+16	; 0x10
    51ca:	99 89       	ldd	r25, Y+17	; 0x11
    51cc:	06 96       	adiw	r24, 0x06	; 6
    51ce:	fc 01       	movw	r30, r24
    51d0:	80 81       	ld	r24, Z
    51d2:	80 53       	subi	r24, 0x30	; 48
    51d4:	8e 87       	std	Y+14, r24	; 0x0e
	month = data[5];
    51d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    51d8:	88 2f       	mov	r24, r24
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	98 87       	std	Y+8, r25	; 0x08
    51de:	8f 83       	std	Y+7, r24	; 0x07
	temp = dateString[5] - '0';
    51e0:	88 89       	ldd	r24, Y+16	; 0x10
    51e2:	99 89       	ldd	r25, Y+17	; 0x11
    51e4:	05 96       	adiw	r24, 0x05	; 5
    51e6:	fc 01       	movw	r30, r24
    51e8:	80 81       	ld	r24, Z
    51ea:	88 2f       	mov	r24, r24
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	c0 97       	sbiw	r24, 0x30	; 48
    51f0:	9e 83       	std	Y+6, r25	; 0x06
    51f2:	8d 83       	std	Y+5, r24	; 0x05
	month += 10*temp;
    51f4:	8d 81       	ldd	r24, Y+5	; 0x05
    51f6:	9e 81       	ldd	r25, Y+6	; 0x06
    51f8:	88 0f       	add	r24, r24
    51fa:	99 1f       	adc	r25, r25
    51fc:	9c 01       	movw	r18, r24
    51fe:	22 0f       	add	r18, r18
    5200:	33 1f       	adc	r19, r19
    5202:	22 0f       	add	r18, r18
    5204:	33 1f       	adc	r19, r19
    5206:	82 0f       	add	r24, r18
    5208:	93 1f       	adc	r25, r19
    520a:	2f 81       	ldd	r18, Y+7	; 0x07
    520c:	38 85       	ldd	r19, Y+8	; 0x08
    520e:	82 0f       	add	r24, r18
    5210:	93 1f       	adc	r25, r19
    5212:	98 87       	std	Y+8, r25	; 0x08
    5214:	8f 83       	std	Y+7, r24	; 0x07
	data[5] |= (temp << 4 ); /* month digit 10; century=0 */
    5216:	8e 85       	ldd	r24, Y+14	; 0x0e
    5218:	28 2f       	mov	r18, r24
    521a:	8d 81       	ldd	r24, Y+5	; 0x05
    521c:	9e 81       	ldd	r25, Y+6	; 0x06
    521e:	82 95       	swap	r24
    5220:	92 95       	swap	r25
    5222:	90 7f       	andi	r25, 0xF0	; 240
    5224:	98 27       	eor	r25, r24
    5226:	80 7f       	andi	r24, 0xF0	; 240
    5228:	98 27       	eor	r25, r24
    522a:	82 2b       	or	r24, r18
    522c:	8e 87       	std	Y+14, r24	; 0x0e
	data[6] = dateString[3] - '0'; /* year digit 1 */
    522e:	88 89       	ldd	r24, Y+16	; 0x10
    5230:	99 89       	ldd	r25, Y+17	; 0x11
    5232:	03 96       	adiw	r24, 0x03	; 3
    5234:	fc 01       	movw	r30, r24
    5236:	80 81       	ld	r24, Z
    5238:	80 53       	subi	r24, 0x30	; 48
    523a:	8f 87       	std	Y+15, r24	; 0x0f
	year += data[6];
    523c:	8f 85       	ldd	r24, Y+15	; 0x0f
    523e:	88 2f       	mov	r24, r24
    5240:	90 e0       	ldi	r25, 0x00	; 0
    5242:	29 81       	ldd	r18, Y+1	; 0x01
    5244:	3a 81       	ldd	r19, Y+2	; 0x02
    5246:	82 0f       	add	r24, r18
    5248:	93 1f       	adc	r25, r19
    524a:	9a 83       	std	Y+2, r25	; 0x02
    524c:	89 83       	std	Y+1, r24	; 0x01
	temp = dateString[2] - '0';
    524e:	88 89       	ldd	r24, Y+16	; 0x10
    5250:	99 89       	ldd	r25, Y+17	; 0x11
    5252:	02 96       	adiw	r24, 0x02	; 2
    5254:	fc 01       	movw	r30, r24
    5256:	80 81       	ld	r24, Z
    5258:	88 2f       	mov	r24, r24
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	c0 97       	sbiw	r24, 0x30	; 48
    525e:	9e 83       	std	Y+6, r25	; 0x06
    5260:	8d 83       	std	Y+5, r24	; 0x05
	year += 10*temp;
    5262:	8d 81       	ldd	r24, Y+5	; 0x05
    5264:	9e 81       	ldd	r25, Y+6	; 0x06
    5266:	88 0f       	add	r24, r24
    5268:	99 1f       	adc	r25, r25
    526a:	9c 01       	movw	r18, r24
    526c:	22 0f       	add	r18, r18
    526e:	33 1f       	adc	r19, r19
    5270:	22 0f       	add	r18, r18
    5272:	33 1f       	adc	r19, r19
    5274:	82 0f       	add	r24, r18
    5276:	93 1f       	adc	r25, r19
    5278:	29 81       	ldd	r18, Y+1	; 0x01
    527a:	3a 81       	ldd	r19, Y+2	; 0x02
    527c:	82 0f       	add	r24, r18
    527e:	93 1f       	adc	r25, r19
    5280:	9a 83       	std	Y+2, r25	; 0x02
    5282:	89 83       	std	Y+1, r24	; 0x01
	data[6] |= (temp << 4); /* year digit 10 */
    5284:	8f 85       	ldd	r24, Y+15	; 0x0f
    5286:	28 2f       	mov	r18, r24
    5288:	8d 81       	ldd	r24, Y+5	; 0x05
    528a:	9e 81       	ldd	r25, Y+6	; 0x06
    528c:	82 95       	swap	r24
    528e:	92 95       	swap	r25
    5290:	90 7f       	andi	r25, 0xF0	; 240
    5292:	98 27       	eor	r25, r24
    5294:	80 7f       	andi	r24, 0xF0	; 240
    5296:	98 27       	eor	r25, r24
    5298:	82 2b       	or	r24, r18
    529a:	8f 87       	std	Y+15, r24	; 0x0f
	
	i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS+(setting*7), data, 7);
    529c:	9a 89       	ldd	r25, Y+18	; 0x12
    529e:	89 2f       	mov	r24, r25
    52a0:	88 0f       	add	r24, r24
    52a2:	88 0f       	add	r24, r24
    52a4:	88 0f       	add	r24, r24
    52a6:	38 2f       	mov	r19, r24
    52a8:	39 1b       	sub	r19, r25
    52aa:	ce 01       	movw	r24, r28
    52ac:	09 96       	adiw	r24, 0x09	; 9
    52ae:	27 e0       	ldi	r18, 0x07	; 7
    52b0:	ac 01       	movw	r20, r24
    52b2:	63 2f       	mov	r22, r19
    52b4:	80 ed       	ldi	r24, 0xD0	; 208
    52b6:	80 d1       	rcall	.+768    	; 0x55b8 <i2c_device_write>
}
    52b8:	00 00       	nop
    52ba:	62 96       	adiw	r28, 0x12	; 18
    52bc:	0f b6       	in	r0, 0x3f	; 63
    52be:	f8 94       	cli
    52c0:	de bf       	out	0x3e, r29	; 62
    52c2:	0f be       	out	0x3f, r0	; 63
    52c4:	cd bf       	out	0x3d, r28	; 61
    52c6:	df 91       	pop	r29
    52c8:	cf 91       	pop	r28
    52ca:	08 95       	ret

000052cc <ds3231_1s_sqw>:

	void ds3231_1s_sqw(BOOL enable)
	{
    52cc:	cf 93       	push	r28
    52ce:	df 93       	push	r29
    52d0:	00 d0       	rcall	.+0      	; 0x52d2 <ds3231_1s_sqw+0x6>
    52d2:	1f 92       	push	r1
    52d4:	cd b7       	in	r28, 0x3d	; 61
    52d6:	de b7       	in	r29, 0x3e	; 62
    52d8:	8b 83       	std	Y+3, r24	; 0x03
		if(enable)
    52da:	8b 81       	ldd	r24, Y+3	; 0x03
    52dc:	88 23       	and	r24, r24
    52de:	49 f0       	breq	.+18     	; 0x52f2 <ds3231_1s_sqw+0x26>
		{
			uint8_t byte = 0x00;
    52e0:	19 82       	std	Y+1, r1	; 0x01
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
    52e2:	21 e0       	ldi	r18, 0x01	; 1
    52e4:	ce 01       	movw	r24, r28
    52e6:	01 96       	adiw	r24, 0x01	; 1
    52e8:	ac 01       	movw	r20, r24
    52ea:	6e e0       	ldi	r22, 0x0E	; 14
    52ec:	80 ed       	ldi	r24, 0xD0	; 208
    52ee:	64 d1       	rcall	.+712    	; 0x55b8 <i2c_device_write>
		else
		{
			uint8_t byte = 0x04;
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
		}
	}
    52f0:	09 c0       	rjmp	.+18     	; 0x5304 <ds3231_1s_sqw+0x38>
			uint8_t byte = 0x00;
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
		}
		else
		{
			uint8_t byte = 0x04;
    52f2:	84 e0       	ldi	r24, 0x04	; 4
    52f4:	8a 83       	std	Y+2, r24	; 0x02
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
    52f6:	ce 01       	movw	r24, r28
    52f8:	02 96       	adiw	r24, 0x02	; 2
    52fa:	21 e0       	ldi	r18, 0x01	; 1
    52fc:	ac 01       	movw	r20, r24
    52fe:	6e e0       	ldi	r22, 0x0E	; 14
    5300:	80 ed       	ldi	r24, 0xD0	; 208
    5302:	5a d1       	rcall	.+692    	; 0x55b8 <i2c_device_write>
		}
	}
    5304:	00 00       	nop
    5306:	0f 90       	pop	r0
    5308:	0f 90       	pop	r0
    530a:	0f 90       	pop	r0
    530c:	df 91       	pop	r29
    530e:	cf 91       	pop	r28
    5310:	08 95       	ret

00005312 <wifi_enabled>:

#include "huzzah.h"
#include "mcp23017.h"

BOOL wifi_enabled(void)
{
    5312:	cf 93       	push	r28
    5314:	df 93       	push	r29
    5316:	cd b7       	in	r28, 0x3d	; 61
    5318:	de b7       	in	r29, 0x3e	; 62
	return PORTD & (1 << PORTD6);
    531a:	8b e2       	ldi	r24, 0x2B	; 43
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	fc 01       	movw	r30, r24
    5320:	80 81       	ld	r24, Z
    5322:	80 74       	andi	r24, 0x40	; 64
}
    5324:	df 91       	pop	r29
    5326:	cf 91       	pop	r28
    5328:	08 95       	ret

0000532a <wifi_reset>:

void wifi_reset(BOOL reset)
{
    532a:	cf 93       	push	r28
    532c:	df 93       	push	r29
    532e:	1f 92       	push	r1
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
    5334:	89 83       	std	Y+1, r24	; 0x01
	if(reset) // assert reset low
    5336:	89 81       	ldd	r24, Y+1	; 0x01
    5338:	88 23       	and	r24, r24
    533a:	51 f0       	breq	.+20     	; 0x5350 <wifi_reset+0x26>
	{
		PORTD &= ~(1 << PORTD6);
    533c:	8b e2       	ldi	r24, 0x2B	; 43
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	2b e2       	ldi	r18, 0x2B	; 43
    5342:	30 e0       	ldi	r19, 0x00	; 0
    5344:	f9 01       	movw	r30, r18
    5346:	20 81       	ld	r18, Z
    5348:	2f 7b       	andi	r18, 0xBF	; 191
    534a:	fc 01       	movw	r30, r24
    534c:	20 83       	st	Z, r18
	}
	else // de-assert reset high
	{
		PORTD |= (1 << PORTD6);
	}
}
    534e:	09 c0       	rjmp	.+18     	; 0x5362 <wifi_reset+0x38>
	{
		PORTD &= ~(1 << PORTD6);
	}
	else // de-assert reset high
	{
		PORTD |= (1 << PORTD6);
    5350:	8b e2       	ldi	r24, 0x2B	; 43
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	2b e2       	ldi	r18, 0x2B	; 43
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	f9 01       	movw	r30, r18
    535a:	20 81       	ld	r18, Z
    535c:	20 64       	ori	r18, 0x40	; 64
    535e:	fc 01       	movw	r30, r24
    5360:	20 83       	st	Z, r18
	}
}
    5362:	00 00       	nop
    5364:	0f 90       	pop	r0
    5366:	df 91       	pop	r29
    5368:	cf 91       	pop	r28
    536a:	08 95       	ret

0000536c <wifi_power>:

void wifi_power(BOOL on)
{
    536c:	cf 93       	push	r28
    536e:	df 93       	push	r29
    5370:	1f 92       	push	r1
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	89 83       	std	Y+1, r24	; 0x01
	if(on)
    5378:	89 81       	ldd	r24, Y+1	; 0x01
    537a:	88 23       	and	r24, r24
    537c:	51 f0       	breq	.+20     	; 0x5392 <wifi_power+0x26>
	{
		PORTD |= (1 << PORTD7);
    537e:	8b e2       	ldi	r24, 0x2B	; 43
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	2b e2       	ldi	r18, 0x2B	; 43
    5384:	30 e0       	ldi	r19, 0x00	; 0
    5386:	f9 01       	movw	r30, r18
    5388:	20 81       	ld	r18, Z
    538a:	20 68       	ori	r18, 0x80	; 128
    538c:	fc 01       	movw	r30, r24
    538e:	20 83       	st	Z, r18
	}
	else
	{
		PORTD &= ~(1 << PORTD7);
	}
}
    5390:	09 c0       	rjmp	.+18     	; 0x53a4 <wifi_power+0x38>
	{
		PORTD |= (1 << PORTD7);
	}
	else
	{
		PORTD &= ~(1 << PORTD7);
    5392:	8b e2       	ldi	r24, 0x2B	; 43
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	2b e2       	ldi	r18, 0x2B	; 43
    5398:	30 e0       	ldi	r19, 0x00	; 0
    539a:	f9 01       	movw	r30, r18
    539c:	20 81       	ld	r18, Z
    539e:	2f 77       	andi	r18, 0x7F	; 127
    53a0:	fc 01       	movw	r30, r24
    53a2:	20 83       	st	Z, r18
	}
}
    53a4:	00 00       	nop
    53a6:	0f 90       	pop	r0
    53a8:	df 91       	pop	r29
    53aa:	cf 91       	pop	r28
    53ac:	08 95       	ret

000053ae <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    53ae:	cf 93       	push	r28
    53b0:	df 93       	push	r29
    53b2:	cd b7       	in	r28, 0x3d	; 61
    53b4:	de b7       	in	r29, 0x3e	; 62
    cli();
    53b6:	f8 94       	cli
    return 1;
    53b8:	81 e0       	ldi	r24, 0x01	; 1
}
    53ba:	df 91       	pop	r29
    53bc:	cf 91       	pop	r28
    53be:	08 95       	ret

000053c0 <__iRestore>:
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    53c0:	cf 93       	push	r28
    53c2:	df 93       	push	r29
    53c4:	00 d0       	rcall	.+0      	; 0x53c6 <__iRestore+0x6>
    53c6:	cd b7       	in	r28, 0x3d	; 61
    53c8:	de b7       	in	r29, 0x3e	; 62
    53ca:	9a 83       	std	Y+2, r25	; 0x02
    53cc:	89 83       	std	Y+1, r24	; 0x01
    SREG = *__s;
    53ce:	8f e5       	ldi	r24, 0x5F	; 95
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	29 81       	ldd	r18, Y+1	; 0x01
    53d4:	3a 81       	ldd	r19, Y+2	; 0x02
    53d6:	f9 01       	movw	r30, r18
    53d8:	20 81       	ld	r18, Z
    53da:	fc 01       	movw	r30, r24
    53dc:	20 83       	st	Z, r18
    __asm__ volatile ("" ::: "memory");
}
    53de:	00 00       	nop
    53e0:	0f 90       	pop	r0
    53e2:	0f 90       	pop	r0
    53e4:	df 91       	pop	r29
    53e6:	cf 91       	pop	r28
    53e8:	08 95       	ret

000053ea <i2c_init>:
		return(0);                          /* all ok */
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
    53ea:	cf 93       	push	r28
    53ec:	df 93       	push	r29
    53ee:	cd b7       	in	r28, 0x3d	; 61
    53f0:	de b7       	in	r29, 0x3e	; 62
	power_twi_enable();
    53f2:	84 e6       	ldi	r24, 0x64	; 100
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	24 e6       	ldi	r18, 0x64	; 100
    53f8:	30 e0       	ldi	r19, 0x00	; 0
    53fa:	f9 01       	movw	r30, r18
    53fc:	20 81       	ld	r18, Z
    53fe:	2f 77       	andi	r18, 0x7F	; 127
    5400:	fc 01       	movw	r30, r24
    5402:	20 83       	st	Z, r18

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
    5404:	89 eb       	ldi	r24, 0xB9	; 185
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	fc 01       	movw	r30, r24
    540a:	10 82       	st	Z, r1
	TWBR = 0x25;
    540c:	88 eb       	ldi	r24, 0xB8	; 184
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	25 e2       	ldi	r18, 0x25	; 37
    5412:	fc 01       	movw	r30, r24
    5414:	20 83       	st	Z, r18

	/* enable I2C */
	TWCR = _BV(TWEN);
    5416:	8c eb       	ldi	r24, 0xBC	; 188
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	24 e0       	ldi	r18, 0x04	; 4
    541c:	fc 01       	movw	r30, r24
    541e:	20 83       	st	Z, r18
	g_i2c_access_semaphore = 1;
    5420:	81 e0       	ldi	r24, 0x01	; 1
    5422:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
	g_i2c_not_timed_out = TRUE;
    5426:	81 e0       	ldi	r24, 0x01	; 1
    5428:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <g_i2c_not_timed_out>
}
    542c:	00 00       	nop
    542e:	df 91       	pop	r29
    5430:	cf 91       	pop	r28
    5432:	08 95       	ret

00005434 <i2c_start>:
#ifdef I2C_TIMEOUT_SUPPORT
	BOOL i2c_start(void)
#else
	void i2c_start(void)
#endif
{
    5434:	cf 93       	push	r28
    5436:	df 93       	push	r29
    5438:	cd b7       	in	r28, 0x3d	; 61
    543a:	de b7       	in	r29, 0x3e	; 62
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    543c:	8c eb       	ldi	r24, 0xBC	; 188
    543e:	90 e0       	ldi	r25, 0x00	; 0
    5440:	24 ea       	ldi	r18, 0xA4	; 164
    5442:	fc 01       	movw	r30, r24
    5444:	20 83       	st	Z, r18
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    5446:	00 00       	nop
    5448:	8c eb       	ldi	r24, 0xBC	; 188
    544a:	90 e0       	ldi	r25, 0x00	; 0
    544c:	fc 01       	movw	r30, r24
    544e:	80 81       	ld	r24, Z
    5450:	88 23       	and	r24, r24
    5452:	24 f0       	brlt	.+8      	; 0x545c <i2c_start+0x28>
    5454:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_i2c_not_timed_out>
    5458:	88 23       	and	r24, r24
    545a:	b1 f7       	brne	.-20     	; 0x5448 <i2c_start+0x14>
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
    545c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_i2c_not_timed_out>
    5460:	88 23       	and	r24, r24
    5462:	51 f4       	brne	.+20     	; 0x5478 <i2c_start+0x44>
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
    5464:	8c eb       	ldi	r24, 0xBC	; 188
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	20 e9       	ldi	r18, 0x90	; 144
    546a:	fc 01       	movw	r30, r24
    546c:	20 83       	st	Z, r18
			g_i2c_not_timed_out = TRUE;
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <g_i2c_not_timed_out>
			return( TRUE);
    5474:	81 e0       	ldi	r24, 0x01	; 1
    5476:	01 c0       	rjmp	.+2      	; 0x547a <i2c_start+0x46>
		}

		return( FALSE);
    5478:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
    547a:	df 91       	pop	r29
    547c:	cf 91       	pop	r28
    547e:	08 95       	ret

00005480 <i2c_stop>:

void i2c_stop(void)
{
    5480:	cf 93       	push	r28
    5482:	df 93       	push	r29
    5484:	cd b7       	in	r28, 0x3d	; 61
    5486:	de b7       	in	r29, 0x3e	; 62
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    5488:	8c eb       	ldi	r24, 0xBC	; 188
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	24 e9       	ldi	r18, 0x94	; 148
    548e:	fc 01       	movw	r30, r24
    5490:	20 83       	st	Z, r18
}
    5492:	00 00       	nop
    5494:	df 91       	pop	r29
    5496:	cf 91       	pop	r28
    5498:	08 95       	ret

0000549a <i2c_write_success>:

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
    549a:	cf 93       	push	r28
    549c:	df 93       	push	r29
    549e:	00 d0       	rcall	.+0      	; 0x54a0 <i2c_write_success+0x6>
    54a0:	1f 92       	push	r1
    54a2:	cd b7       	in	r28, 0x3d	; 61
    54a4:	de b7       	in	r29, 0x3e	; 62
    54a6:	8a 83       	std	Y+2, r24	; 0x02
    54a8:	6b 83       	std	Y+3, r22	; 0x03
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
    54aa:	8b eb       	ldi	r24, 0xBB	; 187
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	2a 81       	ldd	r18, Y+2	; 0x02
    54b0:	fc 01       	movw	r30, r24
    54b2:	20 83       	st	Z, r18
		TWCR = _BV(TWINT) | _BV(TWEN);
    54b4:	8c eb       	ldi	r24, 0xBC	; 188
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	24 e8       	ldi	r18, 0x84	; 132
    54ba:	fc 01       	movw	r30, r24
    54bc:	20 83       	st	Z, r18
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    54be:	00 00       	nop
    54c0:	8c eb       	ldi	r24, 0xBC	; 188
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	fc 01       	movw	r30, r24
    54c6:	80 81       	ld	r24, Z
    54c8:	88 23       	and	r24, r24
    54ca:	24 f0       	brlt	.+8      	; 0x54d4 <i2c_write_success+0x3a>
    54cc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_i2c_not_timed_out>
    54d0:	88 23       	and	r24, r24
    54d2:	b1 f7       	brne	.-20     	; 0x54c0 <i2c_write_success+0x26>
		{
			;
		}

		uint8_t stat = TW_STATUS;
    54d4:	89 eb       	ldi	r24, 0xB9	; 185
    54d6:	90 e0       	ldi	r25, 0x00	; 0
    54d8:	fc 01       	movw	r30, r24
    54da:	80 81       	ld	r24, Z
    54dc:	88 7f       	andi	r24, 0xF8	; 248
    54de:	89 83       	std	Y+1, r24	; 0x01

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    54e0:	99 81       	ldd	r25, Y+1	; 0x01
    54e2:	8b 81       	ldd	r24, Y+3	; 0x03
    54e4:	98 17       	cp	r25, r24
    54e6:	51 f0       	breq	.+20     	; 0x54fc <i2c_write_success+0x62>
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    54e8:	8c eb       	ldi	r24, 0xBC	; 188
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	24 e9       	ldi	r18, 0x94	; 148
    54ee:	fc 01       	movw	r30, r24
    54f0:	20 83       	st	Z, r18
			g_i2c_not_timed_out = TRUE;
    54f2:	81 e0       	ldi	r24, 0x01	; 1
    54f4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <g_i2c_not_timed_out>
			return(TRUE);
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	01 c0       	rjmp	.+2      	; 0x54fe <i2c_write_success+0x64>
		}

		return( FALSE);
    54fc:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    54fe:	0f 90       	pop	r0
    5500:	0f 90       	pop	r0
    5502:	0f 90       	pop	r0
    5504:	df 91       	pop	r29
    5506:	cf 91       	pop	r28
    5508:	08 95       	ret

0000550a <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
    550a:	cf 93       	push	r28
    550c:	df 93       	push	r29
    550e:	cd b7       	in	r28, 0x3d	; 61
    5510:	de b7       	in	r29, 0x3e	; 62
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    5512:	8c eb       	ldi	r24, 0xBC	; 188
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	24 ec       	ldi	r18, 0xC4	; 196
    5518:	fc 01       	movw	r30, r24
    551a:	20 83       	st	Z, r18
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    551c:	00 00       	nop
    551e:	8c eb       	ldi	r24, 0xBC	; 188
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	fc 01       	movw	r30, r24
    5524:	80 81       	ld	r24, Z
    5526:	88 23       	and	r24, r24
    5528:	24 f0       	brlt	.+8      	; 0x5532 <i2c_read_ack+0x28>
    552a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_i2c_not_timed_out>
    552e:	88 23       	and	r24, r24
    5530:	b1 f7       	brne	.-20     	; 0x551e <i2c_read_ack+0x14>
		{
			;
		}
		
		return(TWDR);
    5532:	8b eb       	ldi	r24, 0xBB	; 187
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	fc 01       	movw	r30, r24
    5538:	80 81       	ld	r24, Z
			;
		}
		
		return( TWDR);
#endif
}
    553a:	df 91       	pop	r29
    553c:	cf 91       	pop	r28
    553e:	08 95       	ret

00005540 <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
    5540:	cf 93       	push	r28
    5542:	df 93       	push	r29
    5544:	cd b7       	in	r28, 0x3d	; 61
    5546:	de b7       	in	r29, 0x3e	; 62
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    5548:	8c eb       	ldi	r24, 0xBC	; 188
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	24 e8       	ldi	r18, 0x84	; 132
    554e:	fc 01       	movw	r30, r24
    5550:	20 83       	st	Z, r18
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    5552:	00 00       	nop
    5554:	8c eb       	ldi	r24, 0xBC	; 188
    5556:	90 e0       	ldi	r25, 0x00	; 0
    5558:	fc 01       	movw	r30, r24
    555a:	80 81       	ld	r24, Z
    555c:	88 23       	and	r24, r24
    555e:	24 f0       	brlt	.+8      	; 0x5568 <i2c_read_nack+0x28>
    5560:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <g_i2c_not_timed_out>
    5564:	88 23       	and	r24, r24
    5566:	b1 f7       	brne	.-20     	; 0x5554 <i2c_read_nack+0x14>
		{
			;
		}
		
		return( TWDR);
    5568:	8b eb       	ldi	r24, 0xBB	; 187
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	fc 01       	movw	r30, r24
    556e:	80 81       	ld	r24, Z
			;
		}
		
		return( TWDR);
#endif
}
    5570:	df 91       	pop	r29
    5572:	cf 91       	pop	r28
    5574:	08 95       	ret

00005576 <i2c_status>:

BOOL i2c_status(uint8_t status)
{
    5576:	cf 93       	push	r28
    5578:	df 93       	push	r29
    557a:	1f 92       	push	r1
    557c:	cd b7       	in	r28, 0x3d	; 61
    557e:	de b7       	in	r29, 0x3e	; 62
    5580:	89 83       	std	Y+1, r24	; 0x01
	if(TW_STATUS != status)
    5582:	89 eb       	ldi	r24, 0xB9	; 185
    5584:	90 e0       	ldi	r25, 0x00	; 0
    5586:	fc 01       	movw	r30, r24
    5588:	80 81       	ld	r24, Z
    558a:	88 2f       	mov	r24, r24
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	9c 01       	movw	r18, r24
    5590:	28 7f       	andi	r18, 0xF8	; 248
    5592:	33 27       	eor	r19, r19
    5594:	89 81       	ldd	r24, Y+1	; 0x01
    5596:	88 2f       	mov	r24, r24
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	28 17       	cp	r18, r24
    559c:	39 07       	cpc	r19, r25
    559e:	39 f0       	breq	.+14     	; 0x55ae <i2c_status+0x38>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    55a0:	8c eb       	ldi	r24, 0xBC	; 188
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	24 e9       	ldi	r18, 0x94	; 148
    55a6:	fc 01       	movw	r30, r24
    55a8:	20 83       	st	Z, r18
		return(TRUE);
    55aa:	81 e0       	ldi	r24, 0x01	; 1
    55ac:	01 c0       	rjmp	.+2      	; 0x55b0 <i2c_status+0x3a>
	}

	return(FALSE);
    55ae:	80 e0       	ldi	r24, 0x00	; 0
}
    55b0:	0f 90       	pop	r0
    55b2:	df 91       	pop	r29
    55b4:	cf 91       	pop	r28
    55b6:	08 95       	ret

000055b8 <i2c_device_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    55b8:	ef 92       	push	r14
    55ba:	ff 92       	push	r15
    55bc:	1f 93       	push	r17
    55be:	cf 93       	push	r28
    55c0:	df 93       	push	r29
    55c2:	cd b7       	in	r28, 0x3d	; 61
    55c4:	de b7       	in	r29, 0x3e	; 62
    55c6:	28 97       	sbiw	r28, 0x08	; 8
    55c8:	0f b6       	in	r0, 0x3f	; 63
    55ca:	f8 94       	cli
    55cc:	de bf       	out	0x3e, r29	; 62
    55ce:	0f be       	out	0x3f, r0	; 63
    55d0:	cd bf       	out	0x3d, r28	; 61
    55d2:	8c 83       	std	Y+4, r24	; 0x04
    55d4:	6d 83       	std	Y+5, r22	; 0x05
    55d6:	5f 83       	std	Y+7, r21	; 0x07
    55d8:	4e 83       	std	Y+6, r20	; 0x06
    55da:	28 87       	std	Y+8, r18	; 0x08
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    55dc:	8f e5       	ldi	r24, 0x5F	; 95
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	fc 01       	movw	r30, r24
    55e2:	80 81       	ld	r24, Z
    55e4:	8b 83       	std	Y+3, r24	; 0x03
    55e6:	e3 de       	rcall	.-570    	; 0x53ae <__iCliRetVal>
    55e8:	89 83       	std	Y+1, r24	; 0x01
    55ea:	0b c0       	rjmp	.+22     	; 0x5602 <i2c_device_write+0x4a>
		{
			if(!g_i2c_access_semaphore)
    55ec:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <g_i2c_access_semaphore>
    55f0:	88 23       	and	r24, r24
    55f2:	21 f4       	brne	.+8      	; 0x55fc <i2c_device_write+0x44>
			{
				return TRUE;
    55f4:	11 e0       	ldi	r17, 0x01	; 1
    55f6:	e1 2c       	mov	r14, r1
    55f8:	f1 2c       	mov	r15, r1
    55fa:	09 c0       	rjmp	.+18     	; 0x560e <i2c_device_write+0x56>
			}
		
			g_i2c_access_semaphore = 0;
    55fc:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <g_i2c_access_semaphore>
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5600:	19 82       	std	Y+1, r1	; 0x01
    5602:	89 81       	ldd	r24, Y+1	; 0x01
    5604:	88 23       	and	r24, r24
    5606:	91 f7       	brne	.-28     	; 0x55ec <i2c_device_write+0x34>
    5608:	ee 24       	eor	r14, r14
    560a:	e3 94       	inc	r14
    560c:	f1 2c       	mov	r15, r1
    560e:	ce 01       	movw	r24, r28
    5610:	03 96       	adiw	r24, 0x03	; 3
    5612:	d6 de       	rcall	.-596    	; 0x53c0 <__iRestore>
    5614:	ea 94       	dec	r14
    5616:	ef 28       	or	r14, r15
    5618:	09 f0       	breq	.+2      	; 0x561c <i2c_device_write+0x64>
    561a:	3f c0       	rjmp	.+126    	; 0x569a <i2c_device_write+0xe2>
		
			g_i2c_access_semaphore = 0;
		}
	
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    561c:	1a 82       	std	Y+2, r1	; 0x02

		i2c_start();
    561e:	0a df       	rcall	.-492    	; 0x5434 <i2c_start>
		if(i2c_status(TW_START))
    5620:	88 e0       	ldi	r24, 0x08	; 8
    5622:	a9 df       	rcall	.-174    	; 0x5576 <i2c_status>
    5624:	88 23       	and	r24, r24
    5626:	29 f0       	breq	.+10     	; 0x5632 <i2c_device_write+0x7a>
    5628:	81 e0       	ldi	r24, 0x01	; 1
		{
			g_i2c_access_semaphore = 1;
    562a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
    562e:	11 e0       	ldi	r17, 0x01	; 1
			return(TRUE);
    5630:	34 c0       	rjmp	.+104    	; 0x569a <i2c_device_write+0xe2>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    5632:	68 e1       	ldi	r22, 0x18	; 24
    5634:	8c 81       	ldd	r24, Y+4	; 0x04
    5636:	31 df       	rcall	.-414    	; 0x549a <i2c_write_success>
    5638:	88 23       	and	r24, r24
    563a:	29 f0       	breq	.+10     	; 0x5646 <i2c_device_write+0x8e>
    563c:	81 e0       	ldi	r24, 0x01	; 1
		{
			g_i2c_access_semaphore = 1;
    563e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
			return(TRUE);
    5642:	11 e0       	ldi	r17, 0x01	; 1
    5644:	2a c0       	rjmp	.+84     	; 0x569a <i2c_device_write+0xe2>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    5646:	68 e2       	ldi	r22, 0x28	; 40
    5648:	8d 81       	ldd	r24, Y+5	; 0x05
    564a:	27 df       	rcall	.-434    	; 0x549a <i2c_write_success>
    564c:	88 23       	and	r24, r24
    564e:	d1 f0       	breq	.+52     	; 0x5684 <i2c_device_write+0xcc>
    5650:	81 e0       	ldi	r24, 0x01	; 1
		{
			g_i2c_access_semaphore = 1;
    5652:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
    5656:	11 e0       	ldi	r17, 0x01	; 1
			return(TRUE);
    5658:	20 c0       	rjmp	.+64     	; 0x569a <i2c_device_write+0xe2>
    565a:	8a 81       	ldd	r24, Y+2	; 0x02
		}

		while(bytes2write--)
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    565c:	91 e0       	ldi	r25, 0x01	; 1
    565e:	98 0f       	add	r25, r24
    5660:	9a 83       	std	Y+2, r25	; 0x02
    5662:	88 2f       	mov	r24, r24
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	2e 81       	ldd	r18, Y+6	; 0x06
    5668:	3f 81       	ldd	r19, Y+7	; 0x07
    566a:	82 0f       	add	r24, r18
    566c:	93 1f       	adc	r25, r19
    566e:	fc 01       	movw	r30, r24
    5670:	80 81       	ld	r24, Z
    5672:	68 e2       	ldi	r22, 0x28	; 40
    5674:	12 df       	rcall	.-476    	; 0x549a <i2c_write_success>
    5676:	88 23       	and	r24, r24
    5678:	29 f0       	breq	.+10     	; 0x5684 <i2c_device_write+0xcc>
    567a:	81 e0       	ldi	r24, 0x01	; 1
			{
				g_i2c_access_semaphore = 1;
    567c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
    5680:	11 e0       	ldi	r17, 0x01	; 1
				return(TRUE);
    5682:	0b c0       	rjmp	.+22     	; 0x569a <i2c_device_write+0xe2>
		{
			g_i2c_access_semaphore = 1;
			return(TRUE);
		}

		while(bytes2write--)
    5684:	88 85       	ldd	r24, Y+8	; 0x08
    5686:	9f ef       	ldi	r25, 0xFF	; 255
    5688:	98 0f       	add	r25, r24
    568a:	98 87       	std	Y+8, r25	; 0x08
    568c:	88 23       	and	r24, r24
    568e:	29 f7       	brne	.-54     	; 0x565a <i2c_device_write+0xa2>
				g_i2c_access_semaphore = 1;
				return(TRUE);
			}
		}

		i2c_stop();
    5690:	f7 de       	rcall	.-530    	; 0x5480 <i2c_stop>
    5692:	81 e0       	ldi	r24, 0x01	; 1

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	g_i2c_access_semaphore = 1;
    5694:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
    5698:	10 e0       	ldi	r17, 0x00	; 0
	return(FALSE);
    569a:	81 2f       	mov	r24, r17
    569c:	28 96       	adiw	r28, 0x08	; 8
}
    569e:	0f b6       	in	r0, 0x3f	; 63
    56a0:	f8 94       	cli
    56a2:	de bf       	out	0x3e, r29	; 62
    56a4:	0f be       	out	0x3f, r0	; 63
    56a6:	cd bf       	out	0x3d, r28	; 61
    56a8:	df 91       	pop	r29
    56aa:	cf 91       	pop	r28
    56ac:	1f 91       	pop	r17
    56ae:	ff 90       	pop	r15
    56b0:	ef 90       	pop	r14
    56b2:	08 95       	ret

000056b4 <i2c_device_read>:
    56b4:	ef 92       	push	r14
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    56b6:	ff 92       	push	r15
    56b8:	0f 93       	push	r16
    56ba:	1f 93       	push	r17
    56bc:	cf 93       	push	r28
    56be:	df 93       	push	r29
    56c0:	cd b7       	in	r28, 0x3d	; 61
    56c2:	de b7       	in	r29, 0x3e	; 62
    56c4:	28 97       	sbiw	r28, 0x08	; 8
    56c6:	0f b6       	in	r0, 0x3f	; 63
    56c8:	f8 94       	cli
    56ca:	de bf       	out	0x3e, r29	; 62
    56cc:	0f be       	out	0x3f, r0	; 63
    56ce:	cd bf       	out	0x3d, r28	; 61
    56d0:	8c 83       	std	Y+4, r24	; 0x04
    56d2:	6d 83       	std	Y+5, r22	; 0x05
    56d4:	5f 83       	std	Y+7, r21	; 0x07
    56d6:	4e 83       	std	Y+6, r20	; 0x06
    56d8:	28 87       	std	Y+8, r18	; 0x08
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    56da:	8f e5       	ldi	r24, 0x5F	; 95
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	fc 01       	movw	r30, r24
    56e0:	80 81       	ld	r24, Z
    56e2:	8b 83       	std	Y+3, r24	; 0x03
    56e4:	64 de       	rcall	.-824    	; 0x53ae <__iCliRetVal>
    56e6:	89 83       	std	Y+1, r24	; 0x01
    56e8:	0b c0       	rjmp	.+22     	; 0x5700 <i2c_device_read+0x4c>
    56ea:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <g_i2c_access_semaphore>
		{
			if(!g_i2c_access_semaphore)
    56ee:	88 23       	and	r24, r24
    56f0:	21 f4       	brne	.+8      	; 0x56fa <i2c_device_read+0x46>
    56f2:	11 e0       	ldi	r17, 0x01	; 1
			{
				return TRUE;
    56f4:	e1 2c       	mov	r14, r1
    56f6:	f1 2c       	mov	r15, r1
    56f8:	09 c0       	rjmp	.+18     	; 0x570c <i2c_device_read+0x58>
    56fa:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <g_i2c_access_semaphore>
			}
		
			g_i2c_access_semaphore = 0;
    56fe:	19 82       	std	Y+1, r1	; 0x01
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5700:	89 81       	ldd	r24, Y+1	; 0x01
    5702:	88 23       	and	r24, r24
    5704:	91 f7       	brne	.-28     	; 0x56ea <i2c_device_read+0x36>
    5706:	ee 24       	eor	r14, r14
    5708:	e3 94       	inc	r14
    570a:	f1 2c       	mov	r15, r1
    570c:	ce 01       	movw	r24, r28
    570e:	03 96       	adiw	r24, 0x03	; 3
    5710:	57 de       	rcall	.-850    	; 0x53c0 <__iRestore>
    5712:	ea 94       	dec	r14
    5714:	ef 28       	or	r14, r15
    5716:	09 f0       	breq	.+2      	; 0x571a <i2c_device_read+0x66>
		
			g_i2c_access_semaphore = 0;
		}
	
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    5718:	6d c0       	rjmp	.+218    	; 0x57f4 <i2c_device_read+0x140>

		i2c_start();
    571a:	1a 82       	std	Y+2, r1	; 0x02
    571c:	8b de       	rcall	.-746    	; 0x5434 <i2c_start>
		if(i2c_status(TW_START))
    571e:	88 e0       	ldi	r24, 0x08	; 8
    5720:	2a df       	rcall	.-428    	; 0x5576 <i2c_status>
    5722:	88 23       	and	r24, r24
    5724:	29 f0       	breq	.+10     	; 0x5730 <i2c_device_read+0x7c>
		{
			g_i2c_access_semaphore = 1;
    5726:	81 e0       	ldi	r24, 0x01	; 1
    5728:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
			return(TRUE);
    572c:	11 e0       	ldi	r17, 0x01	; 1
    572e:	62 c0       	rjmp	.+196    	; 0x57f4 <i2c_device_read+0x140>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    5730:	68 e1       	ldi	r22, 0x18	; 24
    5732:	8c 81       	ldd	r24, Y+4	; 0x04
    5734:	b2 de       	rcall	.-668    	; 0x549a <i2c_write_success>
    5736:	88 23       	and	r24, r24
    5738:	29 f0       	breq	.+10     	; 0x5744 <i2c_device_read+0x90>
		{
			g_i2c_access_semaphore = 1;
    573a:	81 e0       	ldi	r24, 0x01	; 1
    573c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
			return(TRUE);
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    5740:	11 e0       	ldi	r17, 0x01	; 1
    5742:	58 c0       	rjmp	.+176    	; 0x57f4 <i2c_device_read+0x140>
    5744:	68 e2       	ldi	r22, 0x28	; 40
    5746:	8d 81       	ldd	r24, Y+5	; 0x05
    5748:	a8 de       	rcall	.-688    	; 0x549a <i2c_write_success>
    574a:	88 23       	and	r24, r24
		{
			g_i2c_access_semaphore = 1;
    574c:	29 f0       	breq	.+10     	; 0x5758 <i2c_device_read+0xa4>
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
			return(TRUE);
		}

		i2c_start();
    5754:	11 e0       	ldi	r17, 0x01	; 1
    5756:	4e c0       	rjmp	.+156    	; 0x57f4 <i2c_device_read+0x140>
		if(i2c_status(TW_REP_START))
    5758:	6d de       	rcall	.-806    	; 0x5434 <i2c_start>
    575a:	80 e1       	ldi	r24, 0x10	; 16
    575c:	0c df       	rcall	.-488    	; 0x5576 <i2c_status>
    575e:	88 23       	and	r24, r24
    5760:	29 f0       	breq	.+10     	; 0x576c <i2c_device_read+0xb8>
		{
			g_i2c_access_semaphore = 1;
    5762:	81 e0       	ldi	r24, 0x01	; 1
    5764:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
			return(TRUE);
    5768:	11 e0       	ldi	r17, 0x01	; 1
    576a:	44 c0       	rjmp	.+136    	; 0x57f4 <i2c_device_read+0x140>
		}
		
		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    576c:	8c 81       	ldd	r24, Y+4	; 0x04
    576e:	81 60       	ori	r24, 0x01	; 1
    5770:	60 e4       	ldi	r22, 0x40	; 64
    5772:	93 de       	rcall	.-730    	; 0x549a <i2c_write_success>
    5774:	88 23       	and	r24, r24
    5776:	99 f1       	breq	.+102    	; 0x57de <i2c_device_read+0x12a>
    5778:	81 e0       	ldi	r24, 0x01	; 1
		{
			g_i2c_access_semaphore = 1;
    577a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
			return(TRUE);
    577e:	11 e0       	ldi	r17, 0x01	; 1
    5780:	39 c0       	rjmp	.+114    	; 0x57f4 <i2c_device_read+0x140>
		}

		while(bytes2read--)
		{
			if(bytes2read)
    5782:	88 85       	ldd	r24, Y+8	; 0x08
    5784:	88 23       	and	r24, r24
			{
				data[index++] = i2c_read_ack();
    5786:	b9 f0       	breq	.+46     	; 0x57b6 <i2c_device_read+0x102>
    5788:	8a 81       	ldd	r24, Y+2	; 0x02
    578a:	91 e0       	ldi	r25, 0x01	; 1
    578c:	98 0f       	add	r25, r24
    578e:	9a 83       	std	Y+2, r25	; 0x02
    5790:	88 2f       	mov	r24, r24
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	2e 81       	ldd	r18, Y+6	; 0x06
    5796:	3f 81       	ldd	r19, Y+7	; 0x07
    5798:	89 01       	movw	r16, r18
    579a:	08 0f       	add	r16, r24
    579c:	19 1f       	adc	r17, r25
    579e:	b5 de       	rcall	.-662    	; 0x550a <i2c_read_ack>
    57a0:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_ACK))
    57a2:	80 83       	st	Z, r24
    57a4:	80 e5       	ldi	r24, 0x50	; 80
    57a6:	e7 de       	rcall	.-562    	; 0x5576 <i2c_status>
    57a8:	88 23       	and	r24, r24
				{
					g_i2c_access_semaphore = 1;
    57aa:	c9 f0       	breq	.+50     	; 0x57de <i2c_device_read+0x12a>
    57ac:	81 e0       	ldi	r24, 0x01	; 1
    57ae:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
					return(TRUE);
    57b2:	11 e0       	ldi	r17, 0x01	; 1
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    57b4:	1f c0       	rjmp	.+62     	; 0x57f4 <i2c_device_read+0x140>
    57b6:	8a 81       	ldd	r24, Y+2	; 0x02
    57b8:	88 2f       	mov	r24, r24
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	2e 81       	ldd	r18, Y+6	; 0x06
    57be:	3f 81       	ldd	r19, Y+7	; 0x07
    57c0:	89 01       	movw	r16, r18
    57c2:	08 0f       	add	r16, r24
    57c4:	19 1f       	adc	r17, r25
    57c6:	bc de       	rcall	.-648    	; 0x5540 <i2c_read_nack>
    57c8:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_NACK))
    57ca:	80 83       	st	Z, r24
    57cc:	88 e5       	ldi	r24, 0x58	; 88
    57ce:	d3 de       	rcall	.-602    	; 0x5576 <i2c_status>
    57d0:	88 23       	and	r24, r24
    57d2:	29 f0       	breq	.+10     	; 0x57de <i2c_device_read+0x12a>
				{
					g_i2c_access_semaphore = 1;
    57d4:	81 e0       	ldi	r24, 0x01	; 1
    57d6:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
					return(TRUE);
    57da:	11 e0       	ldi	r17, 0x01	; 1
    57dc:	0b c0       	rjmp	.+22     	; 0x57f4 <i2c_device_read+0x140>
		{
			g_i2c_access_semaphore = 1;
			return(TRUE);
		}

		while(bytes2read--)
    57de:	88 85       	ldd	r24, Y+8	; 0x08
    57e0:	9f ef       	ldi	r25, 0xFF	; 255
    57e2:	98 0f       	add	r25, r24
    57e4:	98 87       	std	Y+8, r25	; 0x08
    57e6:	88 23       	and	r24, r24
    57e8:	61 f6       	brne	.-104    	; 0x5782 <i2c_device_read+0xce>
					return(TRUE);
				}
			}
		}

		i2c_stop();
    57ea:	4a de       	rcall	.-876    	; 0x5480 <i2c_stop>
    57ec:	81 e0       	ldi	r24, 0x01	; 1

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	g_i2c_access_semaphore = 1;
    57ee:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
    57f2:	10 e0       	ldi	r17, 0x00	; 0
	return(FALSE);
    57f4:	81 2f       	mov	r24, r17
    57f6:	28 96       	adiw	r28, 0x08	; 8
}
    57f8:	0f b6       	in	r0, 0x3f	; 63
    57fa:	f8 94       	cli
    57fc:	de bf       	out	0x3e, r29	; 62
    57fe:	0f be       	out	0x3f, r0	; 63
    5800:	cd bf       	out	0x3d, r28	; 61
    5802:	df 91       	pop	r29
    5804:	cf 91       	pop	r28
    5806:	1f 91       	pop	r17
    5808:	0f 91       	pop	r16
    580a:	ff 90       	pop	r15
    580c:	ef 90       	pop	r14
    580e:	08 95       	ret

00005810 <dac081c_set_dac>:
    5810:	cf 93       	push	r28
/* DAC081C085 Support                                                                              */
/************************************************************************/


BOOL dac081c_set_dac(uint8_t setting, uint8_t addr)
{
    5812:	df 93       	push	r29
    5814:	00 d0       	rcall	.+0      	; 0x5816 <dac081c_set_dac+0x6>
    5816:	00 d0       	rcall	.+0      	; 0x5818 <dac081c_set_dac+0x8>
    5818:	1f 92       	push	r1
    581a:	cd b7       	in	r28, 0x3d	; 61
    581c:	de b7       	in	r29, 0x3e	; 62
    581e:	8c 83       	std	Y+4, r24	; 0x04
    5820:	6d 83       	std	Y+5, r22	; 0x05
    5822:	19 82       	std	Y+1, r1	; 0x01
	BOOL result;
	uint8_t byte1=0, byte2=0;
    5824:	1b 82       	std	Y+3, r1	; 0x03
    5826:	8c 81       	ldd	r24, Y+4	; 0x04

	byte1 |= (setting >> 4);
    5828:	82 95       	swap	r24
    582a:	8f 70       	andi	r24, 0x0F	; 15
    582c:	99 81       	ldd	r25, Y+1	; 0x01
    582e:	89 2b       	or	r24, r25
    5830:	89 83       	std	Y+1, r24	; 0x01
	byte2 |= (setting << 4);
    5832:	8c 81       	ldd	r24, Y+4	; 0x04
    5834:	88 2f       	mov	r24, r24
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	82 95       	swap	r24
    583a:	92 95       	swap	r25
    583c:	90 7f       	andi	r25, 0xF0	; 240
    583e:	98 27       	eor	r25, r24
    5840:	80 7f       	andi	r24, 0xF0	; 240
    5842:	98 27       	eor	r25, r24
    5844:	98 2f       	mov	r25, r24
    5846:	8b 81       	ldd	r24, Y+3	; 0x03
    5848:	89 2b       	or	r24, r25
    584a:	8b 83       	std	Y+3, r24	; 0x03
	result = i2c_device_write(addr, byte1, &byte2, 1);
    584c:	ce 01       	movw	r24, r28
    584e:	03 96       	adiw	r24, 0x03	; 3
    5850:	21 e0       	ldi	r18, 0x01	; 1
    5852:	ac 01       	movw	r20, r24
    5854:	69 81       	ldd	r22, Y+1	; 0x01
    5856:	8d 81       	ldd	r24, Y+5	; 0x05
    5858:	af de       	rcall	.-674    	; 0x55b8 <i2c_device_write>
    585a:	8a 83       	std	Y+2, r24	; 0x02
    585c:	8a 81       	ldd	r24, Y+2	; 0x02
	
	return result;
    585e:	0f 90       	pop	r0
}
    5860:	0f 90       	pop	r0
    5862:	0f 90       	pop	r0
    5864:	0f 90       	pop	r0
    5866:	0f 90       	pop	r0
    5868:	df 91       	pop	r29
    586a:	cf 91       	pop	r28
    586c:	08 95       	ret

0000586e <dac081c_read_dac>:
    586e:	ef 92       	push	r14
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
BOOL __attribute__((optimize("O0"))) dac081c_read_dac(uint8_t *val, uint8_t addr)
#else
BOOL dac081c_read_dac(uint8_t *val, addr)
#endif
{
    5870:	ff 92       	push	r15
    5872:	0f 93       	push	r16
    5874:	1f 93       	push	r17
    5876:	cf 93       	push	r28
    5878:	df 93       	push	r29
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
    587e:	29 97       	sbiw	r28, 0x09	; 9
    5880:	0f b6       	in	r0, 0x3f	; 63
    5882:	f8 94       	cli
    5884:	de bf       	out	0x3e, r29	; 62
    5886:	0f be       	out	0x3f, r0	; 63
    5888:	cd bf       	out	0x3d, r28	; 61
    588a:	98 87       	std	Y+8, r25	; 0x08
    588c:	8f 83       	std	Y+7, r24	; 0x07
    588e:	69 87       	std	Y+9, r22	; 0x09
	uint8_t bytes[2];
	uint8_t bytes2read = 2;
    5890:	82 e0       	ldi	r24, 0x02	; 2
    5892:	89 83       	std	Y+1, r24	; 0x01
	uint8_t index = 0;
    5894:	1a 82       	std	Y+2, r1	; 0x02

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5896:	8f e5       	ldi	r24, 0x5F	; 95
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	fc 01       	movw	r30, r24
    589c:	80 81       	ld	r24, Z
    589e:	8e 83       	std	Y+6, r24	; 0x06
    58a0:	86 dd       	rcall	.-1268   	; 0x53ae <__iCliRetVal>
    58a2:	8b 83       	std	Y+3, r24	; 0x03
    58a4:	0b c0       	rjmp	.+22     	; 0x58bc <dac081c_read_dac+0x4e>
	{
		if(!g_i2c_access_semaphore)
    58a6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <g_i2c_access_semaphore>
		{
			return TRUE;
    58aa:	88 23       	and	r24, r24
    58ac:	21 f4       	brne	.+8      	; 0x58b6 <dac081c_read_dac+0x48>
    58ae:	11 e0       	ldi	r17, 0x01	; 1
    58b0:	e1 2c       	mov	r14, r1
		}
		
		g_i2c_access_semaphore = 0;
    58b2:	f1 2c       	mov	r15, r1
    58b4:	09 c0       	rjmp	.+18     	; 0x58c8 <dac081c_read_dac+0x5a>
{
	uint8_t bytes[2];
	uint8_t bytes2read = 2;
	uint8_t index = 0;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    58b6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <g_i2c_access_semaphore>
    58ba:	1b 82       	std	Y+3, r1	; 0x03
    58bc:	8b 81       	ldd	r24, Y+3	; 0x03
    58be:	88 23       	and	r24, r24
    58c0:	91 f7       	brne	.-28     	; 0x58a6 <dac081c_read_dac+0x38>
    58c2:	ee 24       	eor	r14, r14
    58c4:	e3 94       	inc	r14
    58c6:	f1 2c       	mov	r15, r1
    58c8:	ce 01       	movw	r24, r28
    58ca:	06 96       	adiw	r24, 0x06	; 6
    58cc:	79 dd       	rcall	.-1294   	; 0x53c0 <__iRestore>
    58ce:	ea 94       	dec	r14
    58d0:	ef 28       	or	r14, r15
		}
		
		g_i2c_access_semaphore = 0;
	}
	
	i2c_start();
    58d2:	09 f0       	breq	.+2      	; 0x58d6 <dac081c_read_dac+0x68>
    58d4:	5d c0       	rjmp	.+186    	; 0x5990 <dac081c_read_dac+0x122>
	if(i2c_status(TW_START))
    58d6:	ae dd       	rcall	.-1188   	; 0x5434 <i2c_start>
    58d8:	88 e0       	ldi	r24, 0x08	; 8
    58da:	4d de       	rcall	.-870    	; 0x5576 <i2c_status>
    58dc:	88 23       	and	r24, r24
	{
		g_i2c_access_semaphore = 1;
    58de:	29 f0       	breq	.+10     	; 0x58ea <dac081c_read_dac+0x7c>
    58e0:	81 e0       	ldi	r24, 0x01	; 1
    58e2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
		return(TRUE);
    58e6:	11 e0       	ldi	r17, 0x01	; 1
	}

	if(i2c_write_success((addr | TW_READ), TW_MR_SLA_ACK))
    58e8:	53 c0       	rjmp	.+166    	; 0x5990 <dac081c_read_dac+0x122>
    58ea:	89 85       	ldd	r24, Y+9	; 0x09
    58ec:	81 60       	ori	r24, 0x01	; 1
    58ee:	60 e4       	ldi	r22, 0x40	; 64
    58f0:	d4 dd       	rcall	.-1112   	; 0x549a <i2c_write_success>
    58f2:	88 23       	and	r24, r24
	{
		g_i2c_access_semaphore = 1;
    58f4:	99 f1       	breq	.+102    	; 0x595c <dac081c_read_dac+0xee>
    58f6:	81 e0       	ldi	r24, 0x01	; 1
    58f8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
		return(TRUE);
    58fc:	11 e0       	ldi	r17, 0x01	; 1
	}

	while(bytes2read--)
	{
		if(bytes2read)
    58fe:	48 c0       	rjmp	.+144    	; 0x5990 <dac081c_read_dac+0x122>
    5900:	89 81       	ldd	r24, Y+1	; 0x01
		{
			bytes[index++] = i2c_read_ack();
    5902:	88 23       	and	r24, r24
    5904:	b9 f0       	breq	.+46     	; 0x5934 <dac081c_read_dac+0xc6>
    5906:	8a 81       	ldd	r24, Y+2	; 0x02
    5908:	91 e0       	ldi	r25, 0x01	; 1
    590a:	98 0f       	add	r25, r24
    590c:	9a 83       	std	Y+2, r25	; 0x02
    590e:	08 2f       	mov	r16, r24
    5910:	10 e0       	ldi	r17, 0x00	; 0
    5912:	fb dd       	rcall	.-1034   	; 0x550a <i2c_read_ack>
    5914:	28 2f       	mov	r18, r24
    5916:	ce 01       	movw	r24, r28
    5918:	04 96       	adiw	r24, 0x04	; 4
    591a:	80 0f       	add	r24, r16
    591c:	91 1f       	adc	r25, r17
			if(i2c_status(TW_MR_DATA_ACK))
    591e:	fc 01       	movw	r30, r24
    5920:	20 83       	st	Z, r18
    5922:	80 e5       	ldi	r24, 0x50	; 80
    5924:	28 de       	rcall	.-944    	; 0x5576 <i2c_status>
    5926:	88 23       	and	r24, r24
			{
				g_i2c_access_semaphore = 1;
    5928:	c9 f0       	breq	.+50     	; 0x595c <dac081c_read_dac+0xee>
    592a:	81 e0       	ldi	r24, 0x01	; 1
				return(TRUE);
    592c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
			}
		}
		else
		{
			bytes[index] = i2c_read_nack();
    5930:	11 e0       	ldi	r17, 0x01	; 1
    5932:	2e c0       	rjmp	.+92     	; 0x5990 <dac081c_read_dac+0x122>
    5934:	8a 81       	ldd	r24, Y+2	; 0x02
    5936:	08 2f       	mov	r16, r24
    5938:	10 e0       	ldi	r17, 0x00	; 0
    593a:	02 de       	rcall	.-1020   	; 0x5540 <i2c_read_nack>
    593c:	28 2f       	mov	r18, r24
    593e:	ce 01       	movw	r24, r28
    5940:	04 96       	adiw	r24, 0x04	; 4
    5942:	80 0f       	add	r24, r16
    5944:	91 1f       	adc	r25, r17
    5946:	fc 01       	movw	r30, r24
			if(i2c_status(TW_MR_DATA_NACK))
    5948:	20 83       	st	Z, r18
    594a:	88 e5       	ldi	r24, 0x58	; 88
    594c:	14 de       	rcall	.-984    	; 0x5576 <i2c_status>
    594e:	88 23       	and	r24, r24
    5950:	29 f0       	breq	.+10     	; 0x595c <dac081c_read_dac+0xee>
			{
				g_i2c_access_semaphore = 1;
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
				return(TRUE);
    5958:	11 e0       	ldi	r17, 0x01	; 1
    595a:	1a c0       	rjmp	.+52     	; 0x5990 <dac081c_read_dac+0x122>
	{
		g_i2c_access_semaphore = 1;
		return(TRUE);
	}

	while(bytes2read--)
    595c:	89 81       	ldd	r24, Y+1	; 0x01
    595e:	9f ef       	ldi	r25, 0xFF	; 255
    5960:	98 0f       	add	r25, r24
    5962:	99 83       	std	Y+1, r25	; 0x01
    5964:	88 23       	and	r24, r24
    5966:	61 f6       	brne	.-104    	; 0x5900 <dac081c_read_dac+0x92>
				return(TRUE);
			}
		}
	}

	i2c_stop();
    5968:	8b dd       	rcall	.-1258   	; 0x5480 <i2c_stop>
    596a:	8c 81       	ldd	r24, Y+4	; 0x04
	
	bytes[0] = (bytes[0] << 4);
    596c:	82 95       	swap	r24
    596e:	80 7f       	andi	r24, 0xF0	; 240
    5970:	8c 83       	std	Y+4, r24	; 0x04
    5972:	9c 81       	ldd	r25, Y+4	; 0x04
	bytes[0] |= (bytes[1] >> 4);
    5974:	8d 81       	ldd	r24, Y+5	; 0x05
    5976:	82 95       	swap	r24
    5978:	8f 70       	andi	r24, 0x0F	; 15
    597a:	89 2b       	or	r24, r25
    597c:	8c 83       	std	Y+4, r24	; 0x04
    597e:	81 e0       	ldi	r24, 0x01	; 1

	g_i2c_access_semaphore = 1;
    5980:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <g_i2c_access_semaphore>
    5984:	2c 81       	ldd	r18, Y+4	; 0x04
	*val = bytes[0];
    5986:	8f 81       	ldd	r24, Y+7	; 0x07
    5988:	98 85       	ldd	r25, Y+8	; 0x08
    598a:	fc 01       	movw	r30, r24
    598c:	20 83       	st	Z, r18
    598e:	10 e0       	ldi	r17, 0x00	; 0
	return(FALSE);
    5990:	81 2f       	mov	r24, r17
    5992:	29 96       	adiw	r28, 0x09	; 9
}
    5994:	0f b6       	in	r0, 0x3f	; 63
    5996:	f8 94       	cli
    5998:	de bf       	out	0x3e, r29	; 62
    599a:	0f be       	out	0x3f, r0	; 63
    599c:	cd bf       	out	0x3d, r28	; 61
    599e:	df 91       	pop	r29
    59a0:	cf 91       	pop	r28
    59a2:	1f 91       	pop	r17
    59a4:	0f 91       	pop	r16
    59a6:	ff 90       	pop	r15
    59a8:	ef 90       	pop	r14
    59aa:	08 95       	ret

000059ac <si5351_init>:
    59ac:	cf 93       	push	r28
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	BOOL si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    59ae:	df 93       	push	r29
    59b0:	cd b7       	in	r28, 0x3d	; 61
    59b2:	de b7       	in	r29, 0x3e	; 62
    59b4:	27 97       	sbiw	r28, 0x07	; 7
    59b6:	0f b6       	in	r0, 0x3f	; 63
    59b8:	f8 94       	cli
    59ba:	de bf       	out	0x3e, r29	; 62
    59bc:	0f be       	out	0x3f, r0	; 63
    59be:	cd bf       	out	0x3d, r28	; 61
    59c0:	8b 83       	std	Y+3, r24	; 0x03
    59c2:	4c 83       	std	Y+4, r20	; 0x04
    59c4:	5d 83       	std	Y+5, r21	; 0x05
    59c6:	6e 83       	std	Y+6, r22	; 0x06
    59c8:	7f 83       	std	Y+7, r23	; 0x07
		BOOL err = FALSE;
    59ca:	19 82       	std	Y+1, r1	; 0x01
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			i2c_init();
    59cc:	0e dd       	rcall	.-1508   	; 0x53ea <i2c_init>
			uint8_t result_val = 0x00;
			BOOL result = FALSE;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    59ce:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <freqVCOB>
    59d2:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <freqVCOB+0x1>
    59d6:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <freqVCOB+0x2>
    59da:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <freqVCOB+0x3>
		xtal_freq = SI5351_XTAL_FREQ;
    59de:	80 e4       	ldi	r24, 0x40	; 64
    59e0:	98 e7       	ldi	r25, 0x78	; 120
    59e2:	ad e7       	ldi	r26, 0x7D	; 125
    59e4:	b1 e0       	ldi	r27, 0x01	; 1
    59e6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <xtal_freq>
    59ea:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <xtal_freq+0x1>
    59ee:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <xtal_freq+0x2>
    59f2:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <xtal_freq+0x3>
		enabledClocksMask = 0x00;
    59f6:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <enabledClocksMask>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		err = si5351_write(3, 0xff);
    59fa:	6f ef       	ldi	r22, 0xFF	; 255
    59fc:	83 e0       	ldi	r24, 0x03	; 3
    59fe:	0e 94 00 35 	call	0x6a00	; 0x6a00 <si5351_write>
    5a02:	89 83       	std	Y+1, r24	; 0x01

		/* Power down clocks */
		err |= si5351_write(16, 0xCC);
    5a04:	6c ec       	ldi	r22, 0xCC	; 204
    5a06:	80 e1       	ldi	r24, 0x10	; 16
    5a08:	fb d7       	rcall	.+4086   	; 0x6a00 <si5351_write>
    5a0a:	98 2f       	mov	r25, r24
    5a0c:	89 81       	ldd	r24, Y+1	; 0x01
    5a0e:	89 2b       	or	r24, r25
    5a10:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write(17, 0xCC);
    5a12:	6c ec       	ldi	r22, 0xCC	; 204
    5a14:	81 e1       	ldi	r24, 0x11	; 17
    5a16:	f4 d7       	rcall	.+4072   	; 0x6a00 <si5351_write>
    5a18:	98 2f       	mov	r25, r24
    5a1a:	89 81       	ldd	r24, Y+1	; 0x01
    5a1c:	89 2b       	or	r24, r25
    5a1e:	89 83       	std	Y+1, r24	; 0x01
		err |= si5351_write(18, 0xCC);
    5a20:	6c ec       	ldi	r22, 0xCC	; 204
    5a22:	82 e1       	ldi	r24, 0x12	; 18
    5a24:	ed d7       	rcall	.+4058   	; 0x6a00 <si5351_write>
    5a26:	98 2f       	mov	r25, r24
    5a28:	89 81       	ldd	r24, Y+1	; 0x01
    5a2a:	89 2b       	or	r24, r25
    5a2c:	89 83       	std	Y+1, r24	; 0x01
    5a2e:	82 e1       	ldi	r24, 0x12	; 18

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
    5a30:	8a 83       	std	Y+2, r24	; 0x02
    5a32:	9a 81       	ldd	r25, Y+2	; 0x02
		reg_val |= xtal_load_c;
    5a34:	8b 81       	ldd	r24, Y+3	; 0x03
    5a36:	89 2b       	or	r24, r25
    5a38:	8a 83       	std	Y+2, r24	; 0x02

		err |= si5351_write(SI5351_CRYSTAL_LOAD, reg_val);
    5a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a3c:	68 2f       	mov	r22, r24
    5a3e:	87 eb       	ldi	r24, 0xB7	; 183
    5a40:	df d7       	rcall	.+4030   	; 0x6a00 <si5351_write>
    5a42:	98 2f       	mov	r25, r24
    5a44:	89 81       	ldd	r24, Y+1	; 0x01
    5a46:	89 2b       	or	r24, r25
    5a48:	89 83       	std	Y+1, r24	; 0x01
    5a4a:	8c 81       	ldd	r24, Y+4	; 0x04

		if(!ref_osc_freq)
    5a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    5a4e:	ae 81       	ldd	r26, Y+6	; 0x06
    5a50:	bf 81       	ldd	r27, Y+7	; 0x07
    5a52:	89 2b       	or	r24, r25
    5a54:	8a 2b       	or	r24, r26
    5a56:	8b 2b       	or	r24, r27
    5a58:	41 f4       	brne	.+16     	; 0x5a6a <si5351_init+0xbe>
    5a5a:	80 e4       	ldi	r24, 0x40	; 64
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    5a5c:	98 e7       	ldi	r25, 0x78	; 120
    5a5e:	ad e7       	ldi	r26, 0x7D	; 125
    5a60:	b1 e0       	ldi	r27, 0x01	; 1
    5a62:	8c 83       	std	Y+4, r24	; 0x04
    5a64:	9d 83       	std	Y+5, r25	; 0x05
    5a66:	ae 83       	std	Y+6, r26	; 0x06
    5a68:	bf 83       	std	Y+7, r27	; 0x07
    5a6a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <xtal_freq>
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    5a6e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <xtal_freq+0x1>
    5a72:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <xtal_freq+0x2>
    5a76:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <xtal_freq+0x3>
    5a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    5a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    5a7e:	4e 81       	ldd	r20, Y+6	; 0x06
    5a80:	5f 81       	ldd	r21, Y+7	; 0x07
    5a82:	28 17       	cp	r18, r24
    5a84:	39 07       	cpc	r19, r25
    5a86:	4a 07       	cpc	r20, r26
    5a88:	5b 07       	cpc	r21, r27
    5a8a:	11 f1       	breq	.+68     	; 0x5ad0 <si5351_init+0x124>
    5a8c:	ce 01       	movw	r24, r28
		{
			if(si5351_read(SI5351_PLL_INPUT_SOURCE, &reg_val))
    5a8e:	02 96       	adiw	r24, 0x02	; 2
    5a90:	bc 01       	movw	r22, r24
    5a92:	8f e0       	ldi	r24, 0x0F	; 15
    5a94:	c9 d7       	rcall	.+3986   	; 0x6a28 <si5351_read>
    5a96:	88 23       	and	r24, r24
    5a98:	11 f0       	breq	.+4      	; 0x5a9e <si5351_init+0xf2>
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
			{
				return TRUE;
    5a9c:	1a c0       	rjmp	.+52     	; 0x5ad2 <si5351_init+0x126>
    5a9e:	8a 81       	ldd	r24, Y+2	; 0x02
			}

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    5aa0:	8f 73       	andi	r24, 0x3F	; 63
    5aa2:	8a 83       	std	Y+2, r24	; 0x02
    5aa4:	8c 81       	ldd	r24, Y+4	; 0x04

			xtal_freq = ref_osc_freq;
    5aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    5aa8:	ae 81       	ldd	r26, Y+6	; 0x06
    5aaa:	bf 81       	ldd	r27, Y+7	; 0x07
    5aac:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <xtal_freq>
    5ab0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <xtal_freq+0x1>
    5ab4:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <xtal_freq+0x2>
    5ab8:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <xtal_freq+0x3>
    5abc:	8a 81       	ldd	r24, Y+2	; 0x02
			reg_val |= SI5351_CLKIN_DIV_1;
    5abe:	8a 83       	std	Y+2, r24	; 0x02
    5ac0:	8a 81       	ldd	r24, Y+2	; 0x02
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			err |= si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
    5ac2:	68 2f       	mov	r22, r24
    5ac4:	8f e0       	ldi	r24, 0x0F	; 15
    5ac6:	9c d7       	rcall	.+3896   	; 0x6a00 <si5351_write>
    5ac8:	98 2f       	mov	r25, r24
    5aca:	89 81       	ldd	r24, Y+1	; 0x01
    5acc:	89 2b       	or	r24, r25
    5ace:	89 83       	std	Y+1, r24	; 0x01
    5ad0:	89 81       	ldd	r24, Y+1	; 0x01
		}
		
		return err;
    5ad2:	27 96       	adiw	r28, 0x07	; 7
	}
    5ad4:	0f b6       	in	r0, 0x3f	; 63
    5ad6:	f8 94       	cli
    5ad8:	de bf       	out	0x3e, r29	; 62
    5ada:	0f be       	out	0x3f, r0	; 63
    5adc:	cd bf       	out	0x3d, r28	; 61
    5ade:	df 91       	pop	r29
    5ae0:	cf 91       	pop	r28
    5ae2:	08 95       	ret

00005ae4 <si5351_set_freq>:
    5ae4:	8f 92       	push	r8
 *
 * Returns TRUE on failure
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk, BOOL clocksOff)
	{
    5ae6:	af 92       	push	r10
    5ae8:	cf 92       	push	r12
    5aea:	df 92       	push	r13
    5aec:	ef 92       	push	r14
    5aee:	ff 92       	push	r15
    5af0:	0f 93       	push	r16
    5af2:	1f 93       	push	r17
    5af4:	cf 93       	push	r28
    5af6:	df 93       	push	r29
    5af8:	cd b7       	in	r28, 0x3d	; 61
    5afa:	de b7       	in	r29, 0x3e	; 62
    5afc:	6b 97       	sbiw	r28, 0x1b	; 27
    5afe:	0f b6       	in	r0, 0x3f	; 63
    5b00:	f8 94       	cli
    5b02:	de bf       	out	0x3e, r29	; 62
    5b04:	0f be       	out	0x3f, r0	; 63
    5b06:	cd bf       	out	0x3d, r28	; 61
    5b08:	6e 8b       	std	Y+22, r22	; 0x16
    5b0a:	7f 8b       	std	Y+23, r23	; 0x17
    5b0c:	88 8f       	std	Y+24, r24	; 0x18
    5b0e:	99 8f       	std	Y+25, r25	; 0x19
    5b10:	4a 8f       	std	Y+26, r20	; 0x1a
    5b12:	2b 8f       	std	Y+27, r18	; 0x1b
    5b14:	19 82       	std	Y+1, r1	; 0x01
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    5b16:	1a 82       	std	Y+2, r1	; 0x02
    5b18:	1b 82       	std	Y+3, r1	; 0x03
    5b1a:	1c 82       	std	Y+4, r1	; 0x04
    5b1c:	1f 82       	std	Y+7, r1	; 0x07
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
    5b1e:	1c 8a       	std	Y+20, r1	; 0x14
		BOOL int_mode = FALSE;
    5b20:	1d 8a       	std	Y+21, r1	; 0x15
		BOOL div_by_4 = FALSE;
    5b22:	8e 89       	ldd	r24, Y+22	; 0x16
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    5b24:	9f 89       	ldd	r25, Y+23	; 0x17
    5b26:	a8 8d       	ldd	r26, Y+24	; 0x18
    5b28:	b9 8d       	ldd	r27, Y+25	; 0x19
    5b2a:	80 34       	cpi	r24, 0x40	; 64
    5b2c:	92 44       	sbci	r25, 0x42	; 66
    5b2e:	af 40       	sbci	r26, 0x0F	; 15
    5b30:	b1 05       	cpc	r27, r1
    5b32:	08 f1       	brcs	.+66     	; 0x5b76 <si5351_set_freq+0x92>
    5b34:	8e 89       	ldd	r24, Y+22	; 0x16
			{
				freq_Fout /= 100;
    5b36:	9f 89       	ldd	r25, Y+23	; 0x17
    5b38:	a8 8d       	ldd	r26, Y+24	; 0x18
    5b3a:	b9 8d       	ldd	r27, Y+25	; 0x19
    5b3c:	24 e6       	ldi	r18, 0x64	; 100
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	40 e0       	ldi	r20, 0x00	; 0
    5b42:	50 e0       	ldi	r21, 0x00	; 0
    5b44:	bc 01       	movw	r22, r24
    5b46:	cd 01       	movw	r24, r26
    5b48:	0e 94 67 37 	call	0x6ece	; 0x6ece <__udivmodsi4>
    5b4c:	da 01       	movw	r26, r20
    5b4e:	c9 01       	movw	r24, r18
    5b50:	8e 8b       	std	Y+22, r24	; 0x16
    5b52:	9f 8b       	std	Y+23, r25	; 0x17
    5b54:	a8 8f       	std	Y+24, r26	; 0x18
    5b56:	b9 8f       	std	Y+25, r27	; 0x19
    5b58:	2e 89       	ldd	r18, Y+22	; 0x16
				freq_Fout *= 100;
    5b5a:	3f 89       	ldd	r19, Y+23	; 0x17
    5b5c:	48 8d       	ldd	r20, Y+24	; 0x18
    5b5e:	59 8d       	ldd	r21, Y+25	; 0x19
    5b60:	84 e6       	ldi	r24, 0x64	; 100
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	dc 01       	movw	r26, r24
    5b66:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__muluhisi3>
    5b6a:	dc 01       	movw	r26, r24
    5b6c:	cb 01       	movw	r24, r22
    5b6e:	8e 8b       	std	Y+22, r24	; 0x16
    5b70:	9f 8b       	std	Y+23, r25	; 0x17
    5b72:	a8 8f       	std	Y+24, r26	; 0x18
    5b74:	b9 8f       	std	Y+25, r27	; 0x19
    5b76:	8a 8d       	ldd	r24, Y+26	; 0x1a
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    5b78:	88 2f       	mov	r24, r24
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	81 30       	cpi	r24, 0x01	; 1
    5b7e:	91 05       	cpc	r25, r1
    5b80:	e1 f0       	breq	.+56     	; 0x5bba <si5351_set_freq+0xd6>
    5b82:	82 30       	cpi	r24, 0x02	; 2
    5b84:	91 05       	cpc	r25, r1
    5b86:	b1 f1       	breq	.+108    	; 0x5bf4 <si5351_set_freq+0x110>
    5b88:	89 2b       	or	r24, r25
    5b8a:	09 f0       	breq	.+2      	; 0x5b8e <si5351_set_freq+0xaa>
    5b8c:	50 c0       	rjmp	.+160    	; 0x5c2e <si5351_set_freq+0x14a>
    5b8e:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <enabledClocksMask>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    5b92:	81 60       	ori	r24, 0x01	; 1
    5b94:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <enabledClocksMask>
    5b98:	80 e1       	ldi	r24, 0x10	; 16
				clock_ctrl_addr = 16;
    5b9a:	8e 83       	std	Y+6, r24	; 0x06
    5b9c:	81 e0       	ldi	r24, 0x01	; 1

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    5b9e:	8d 83       	std	Y+5, r24	; 0x05
    5ba0:	8e 89       	ldd	r24, Y+22	; 0x16
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    5ba2:	9f 89       	ldd	r25, Y+23	; 0x17
    5ba4:	a8 8d       	ldd	r26, Y+24	; 0x18
    5ba6:	b9 8d       	ldd	r27, Y+25	; 0x19
    5ba8:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <clock_out>
    5bac:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <clock_out+0x1>
    5bb0:	a0 93 51 07 	sts	0x0751, r26	; 0x800751 <clock_out+0x2>
    5bb4:	b0 93 52 07 	sts	0x0752, r27	; 0x800752 <clock_out+0x3>
    5bb8:	3c c0       	rjmp	.+120    	; 0x5c32 <si5351_set_freq+0x14e>
			}
			break;
    5bba:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <enabledClocksMask>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    5bbe:	82 60       	ori	r24, 0x02	; 2
    5bc0:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <enabledClocksMask>
    5bc4:	81 e1       	ldi	r24, 0x11	; 17
				clock_ctrl_addr = 17;
    5bc6:	8e 83       	std	Y+6, r24	; 0x06
    5bc8:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <enabledClocksMask>

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */
    5bcc:	80 95       	com	r24
    5bce:	8a 6f       	ori	r24, 0xFA	; 250
    5bd0:	68 2f       	mov	r22, r24
    5bd2:	83 e0       	ldi	r24, 0x03	; 3
    5bd4:	15 d7       	rcall	.+3626   	; 0x6a00 <si5351_write>
    5bd6:	82 e0       	ldi	r24, 0x02	; 2

				target_pll = SI5351_PLLB;
    5bd8:	8d 83       	std	Y+5, r24	; 0x05
    5bda:	8e 89       	ldd	r24, Y+22	; 0x16
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    5bdc:	9f 89       	ldd	r25, Y+23	; 0x17
    5bde:	a8 8d       	ldd	r26, Y+24	; 0x18
    5be0:	b9 8d       	ldd	r27, Y+25	; 0x19
    5be2:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <clock_out+0x4>
    5be6:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <clock_out+0x5>
    5bea:	a0 93 55 07 	sts	0x0755, r26	; 0x800755 <clock_out+0x6>
    5bee:	b0 93 56 07 	sts	0x0756, r27	; 0x800756 <clock_out+0x7>
    5bf2:	1f c0       	rjmp	.+62     	; 0x5c32 <si5351_set_freq+0x14e>
			}
			break;
    5bf4:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <enabledClocksMask>
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    5bf8:	84 60       	ori	r24, 0x04	; 4
    5bfa:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <enabledClocksMask>
    5bfe:	82 e1       	ldi	r24, 0x12	; 18
				clock_ctrl_addr = 18;
    5c00:	8e 83       	std	Y+6, r24	; 0x06
    5c02:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <enabledClocksMask>

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */
    5c06:	80 95       	com	r24
    5c08:	8c 6f       	ori	r24, 0xFC	; 252
    5c0a:	68 2f       	mov	r22, r24
    5c0c:	83 e0       	ldi	r24, 0x03	; 3
    5c0e:	f8 d6       	rcall	.+3568   	; 0x6a00 <si5351_write>
    5c10:	82 e0       	ldi	r24, 0x02	; 2

				target_pll = SI5351_PLLB;
    5c12:	8d 83       	std	Y+5, r24	; 0x05
    5c14:	8e 89       	ldd	r24, Y+22	; 0x16
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    5c16:	9f 89       	ldd	r25, Y+23	; 0x17
    5c18:	a8 8d       	ldd	r26, Y+24	; 0x18
    5c1a:	b9 8d       	ldd	r27, Y+25	; 0x19
    5c1c:	80 93 57 07 	sts	0x0757, r24	; 0x800757 <clock_out+0x8>
    5c20:	90 93 58 07 	sts	0x0758, r25	; 0x800758 <clock_out+0x9>
    5c24:	a0 93 59 07 	sts	0x0759, r26	; 0x800759 <clock_out+0xa>
    5c28:	b0 93 5a 07 	sts	0x075A, r27	; 0x80075a <clock_out+0xb>
    5c2c:	02 c0       	rjmp	.+4      	; 0x5c32 <si5351_set_freq+0x14e>
			}
			break;
    5c2e:	81 e0       	ldi	r24, 0x01	; 1

			default:
			{
				return(TRUE);
    5c30:	9a c0       	rjmp	.+308    	; 0x5d66 <si5351_set_freq+0x282>
    5c32:	8d 81       	ldd	r24, Y+5	; 0x05
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    5c34:	81 30       	cpi	r24, 0x01	; 1
    5c36:	61 f0       	breq	.+24     	; 0x5c50 <si5351_set_freq+0x16c>
    5c38:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <freqVCOB>
    5c3c:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <freqVCOB+0x1>
    5c40:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <freqVCOB+0x2>
    5c44:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <freqVCOB+0x3>
    5c48:	89 2b       	or	r24, r25
    5c4a:	8a 2b       	or	r24, r26
    5c4c:	8b 2b       	or	r24, r27
    5c4e:	c1 f4       	brne	.+48     	; 0x5c80 <si5351_set_freq+0x19c>
    5c50:	be 01       	movw	r22, r28
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    5c52:	6b 5e       	subi	r22, 0xEB	; 235
    5c54:	7f 4f       	sbci	r23, 0xFF	; 255
    5c56:	9e 01       	movw	r18, r28
    5c58:	2c 5e       	subi	r18, 0xEC	; 236
    5c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c5c:	ae 01       	movw	r20, r28
    5c5e:	48 5f       	subi	r20, 0xF8	; 248
    5c60:	5f 4f       	sbci	r21, 0xFF	; 255
    5c62:	8e 89       	ldd	r24, Y+22	; 0x16
    5c64:	9f 89       	ldd	r25, Y+23	; 0x17
    5c66:	a8 8d       	ldd	r26, Y+24	; 0x18
    5c68:	b9 8d       	ldd	r27, Y+25	; 0x19
    5c6a:	8b 01       	movw	r16, r22
    5c6c:	bc 01       	movw	r22, r24
    5c6e:	cd 01       	movw	r24, r26
    5c70:	f8 d3       	rcall	.+2032   	; 0x6462 <multisynth_calc>
    5c72:	dc 01       	movw	r26, r24
    5c74:	cb 01       	movw	r24, r22
    5c76:	89 83       	std	Y+1, r24	; 0x01
    5c78:	9a 83       	std	Y+2, r25	; 0x02
    5c7a:	ab 83       	std	Y+3, r26	; 0x03
    5c7c:	bc 83       	std	Y+4, r27	; 0x04
    5c7e:	17 c0       	rjmp	.+46     	; 0x5cae <si5351_set_freq+0x1ca>
    5c80:	be 01       	movw	r22, r28
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    5c82:	6b 5e       	subi	r22, 0xEB	; 235
    5c84:	7f 4f       	sbci	r23, 0xFF	; 255
    5c86:	9e 01       	movw	r18, r28
    5c88:	2c 5e       	subi	r18, 0xEC	; 236
    5c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c8c:	ae 01       	movw	r20, r28
    5c8e:	48 5f       	subi	r20, 0xF8	; 248
    5c90:	5f 4f       	sbci	r21, 0xFF	; 255
    5c92:	8e 89       	ldd	r24, Y+22	; 0x16
    5c94:	9f 89       	ldd	r25, Y+23	; 0x17
    5c96:	a8 8d       	ldd	r26, Y+24	; 0x18
    5c98:	b9 8d       	ldd	r27, Y+25	; 0x19
    5c9a:	8b 01       	movw	r16, r22
    5c9c:	bc 01       	movw	r22, r24
    5c9e:	cd 01       	movw	r24, r26
    5ca0:	11 d5       	rcall	.+2594   	; 0x66c4 <multisynth_estimate>
    5ca2:	dc 01       	movw	r26, r24
    5ca4:	cb 01       	movw	r24, r22
    5ca6:	8e 8b       	std	Y+22, r24	; 0x16
    5ca8:	9f 8b       	std	Y+23, r25	; 0x17
    5caa:	a8 8f       	std	Y+24, r26	; 0x18
    5cac:	b9 8f       	std	Y+25, r27	; 0x19
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    5cae:	6d 81       	ldd	r22, Y+5	; 0x05
    5cb0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5cb2:	d1 d6       	rcall	.+3490   	; 0x6a56 <set_multisynth_registers_source>
    5cb4:	8d 89       	ldd	r24, Y+21	; 0x15
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    5cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    5cb8:	8f 93       	push	r24
    5cba:	8f 80       	ldd	r8, Y+7	; 0x07
    5cbc:	a9 2e       	mov	r10, r25
    5cbe:	c8 84       	ldd	r12, Y+8	; 0x08
    5cc0:	d9 84       	ldd	r13, Y+9	; 0x09
    5cc2:	ea 84       	ldd	r14, Y+10	; 0x0a
    5cc4:	fb 84       	ldd	r15, Y+11	; 0x0b
    5cc6:	0c 85       	ldd	r16, Y+12	; 0x0c
    5cc8:	1d 85       	ldd	r17, Y+13	; 0x0d
    5cca:	2e 85       	ldd	r18, Y+14	; 0x0e
    5ccc:	3f 85       	ldd	r19, Y+15	; 0x0f
    5cce:	48 89       	ldd	r20, Y+16	; 0x10
    5cd0:	59 89       	ldd	r21, Y+17	; 0x11
    5cd2:	6a 89       	ldd	r22, Y+18	; 0x12
    5cd4:	7b 89       	ldd	r23, Y+19	; 0x13
    5cd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5cd8:	ea d6       	rcall	.+3540   	; 0x6aae <set_multisynth_registers>
    5cda:	0f 90       	pop	r0
    5cdc:	89 81       	ldd	r24, Y+1	; 0x01
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    5cde:	9a 81       	ldd	r25, Y+2	; 0x02
    5ce0:	ab 81       	ldd	r26, Y+3	; 0x03
    5ce2:	bc 81       	ldd	r27, Y+4	; 0x04
    5ce4:	89 2b       	or	r24, r25
    5ce6:	8a 2b       	or	r24, r26
    5ce8:	8b 2b       	or	r24, r27
    5cea:	41 f0       	breq	.+16     	; 0x5cfc <si5351_set_freq+0x218>
			{
				set_pll(freq_VCO, target_pll);
    5cec:	89 81       	ldd	r24, Y+1	; 0x01
    5cee:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf0:	ab 81       	ldd	r26, Y+3	; 0x03
    5cf2:	bc 81       	ldd	r27, Y+4	; 0x04
    5cf4:	4d 81       	ldd	r20, Y+5	; 0x05
    5cf6:	bc 01       	movw	r22, r24
    5cf8:	cd 01       	movw	r24, r26
    5cfa:	11 d1       	rcall	.+546    	; 0x5f1e <set_pll>
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		if(clocksOff)
    5cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5cfe:	88 23       	and	r24, r24
    5d00:	31 f0       	breq	.+12     	; 0x5d0e <si5351_set_freq+0x22a>
		{
			si5351_write(3, enabledClocksMask);    /* disable clock(s) in use */
    5d02:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <enabledClocksMask>
    5d06:	68 2f       	mov	r22, r24
    5d08:	83 e0       	ldi	r24, 0x03	; 3
    5d0a:	7a d6       	rcall	.+3316   	; 0x6a00 <si5351_write>
    5d0c:	06 c0       	rjmp	.+12     	; 0x5d1a <si5351_set_freq+0x236>
		}
		else
		{
			si5351_write(3, ~enabledClocksMask);    /* only enable clock(s) in use */
    5d0e:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <enabledClocksMask>
    5d12:	80 95       	com	r24
    5d14:	68 2f       	mov	r22, r24
    5d16:	83 e0       	ldi	r24, 0x03	; 3
    5d18:	73 d6       	rcall	.+3302   	; 0x6a00 <si5351_write>
		}

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    5d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d1c:	81 30       	cpi	r24, 0x01	; 1
		{
			si5351_write(clock_ctrl_addr, 0x4C);    /* power up only clock being set, leaving that clock configured as follows: */
    5d1e:	21 f4       	brne	.+8      	; 0x5d28 <si5351_set_freq+0x244>
    5d20:	6c e4       	ldi	r22, 0x4C	; 76
    5d22:	8e 81       	ldd	r24, Y+6	; 0x06
    5d24:	6d d6       	rcall	.+3290   	; 0x6a00 <si5351_write>
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    5d26:	1e c0       	rjmp	.+60     	; 0x5d64 <si5351_set_freq+0x280>
    5d28:	8c 89       	ldd	r24, Y+20	; 0x14
    5d2a:	88 23       	and	r24, r24
			{
				si5351_write(clock_ctrl_addr, 0x6C);    /* power up only clock being set, leaving that clock configured as follows: */
    5d2c:	21 f0       	breq	.+8      	; 0x5d36 <si5351_set_freq+0x252>
    5d2e:	6c e6       	ldi	r22, 0x6C	; 108
    5d30:	8e 81       	ldd	r24, Y+6	; 0x06
    5d32:	66 d6       	rcall	.+3276   	; 0x6a00 <si5351_write>
    5d34:	03 c0       	rjmp	.+6      	; 0x5d3c <si5351_set_freq+0x258>
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
				si5351_write(clock_ctrl_addr, 0x2C);    /* power up only clock being set, leaving that clock configured as follows: */
    5d36:	6c e2       	ldi	r22, 0x2C	; 44
    5d38:	8e 81       	ldd	r24, Y+6	; 0x06
    5d3a:	62 d6       	rcall	.+3268   	; 0x6a00 <si5351_write>
    5d3c:	89 81       	ldd	r24, Y+1	; 0x01
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    5d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d40:	ab 81       	ldd	r26, Y+3	; 0x03
    5d42:	bc 81       	ldd	r27, Y+4	; 0x04
    5d44:	89 2b       	or	r24, r25
    5d46:	8a 2b       	or	r24, r26
    5d48:	8b 2b       	or	r24, r27
    5d4a:	61 f0       	breq	.+24     	; 0x5d64 <si5351_set_freq+0x280>
    5d4c:	89 81       	ldd	r24, Y+1	; 0x01
			{
				freqVCOB = freq_VCO;
    5d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d50:	ab 81       	ldd	r26, Y+3	; 0x03
    5d52:	bc 81       	ldd	r27, Y+4	; 0x04
    5d54:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <freqVCOB>
    5d58:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <freqVCOB+0x1>
    5d5c:	a0 93 4c 07 	sts	0x074C, r26	; 0x80074c <freqVCOB+0x2>
    5d60:	b0 93 4d 07 	sts	0x074D, r27	; 0x80074d <freqVCOB+0x3>
    5d64:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		return(FALSE);
    5d66:	6b 96       	adiw	r28, 0x1b	; 27
	}
    5d68:	0f b6       	in	r0, 0x3f	; 63
    5d6a:	f8 94       	cli
    5d6c:	de bf       	out	0x3e, r29	; 62
    5d6e:	0f be       	out	0x3f, r0	; 63
    5d70:	cd bf       	out	0x3d, r28	; 61
    5d72:	df 91       	pop	r29
    5d74:	cf 91       	pop	r28
    5d76:	1f 91       	pop	r17
    5d78:	0f 91       	pop	r16
    5d7a:	ff 90       	pop	r15
    5d7c:	ef 90       	pop	r14
    5d7e:	df 90       	pop	r13
    5d80:	cf 90       	pop	r12
    5d82:	af 90       	pop	r10
    5d84:	8f 90       	pop	r8
    5d86:	08 95       	ret

00005d88 <si5351_get_frequency>:
    5d88:	cf 93       	push	r28
 *
 * Returns TRUE on failure
 *
 */
	Frequency_Hz si5351_get_frequency(Si5351_clock clock)
	{
    5d8a:	df 93       	push	r29
    5d8c:	1f 92       	push	r1
    5d8e:	cd b7       	in	r28, 0x3d	; 61
    5d90:	de b7       	in	r29, 0x3e	; 62
    5d92:	89 83       	std	Y+1, r24	; 0x01
    5d94:	89 81       	ldd	r24, Y+1	; 0x01
		return(clock_out[clock]);
    5d96:	88 2f       	mov	r24, r24
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	88 0f       	add	r24, r24
    5d9c:	99 1f       	adc	r25, r25
    5d9e:	88 0f       	add	r24, r24
    5da0:	99 1f       	adc	r25, r25
    5da2:	81 5b       	subi	r24, 0xB1	; 177
    5da4:	98 4f       	sbci	r25, 0xF8	; 248
    5da6:	fc 01       	movw	r30, r24
    5da8:	80 81       	ld	r24, Z
    5daa:	91 81       	ldd	r25, Z+1	; 0x01
    5dac:	a2 81       	ldd	r26, Z+2	; 0x02
    5dae:	b3 81       	ldd	r27, Z+3	; 0x03
    5db0:	bc 01       	movw	r22, r24
	}
    5db2:	cd 01       	movw	r24, r26
    5db4:	0f 90       	pop	r0
    5db6:	df 91       	pop	r29
    5db8:	cf 91       	pop	r28
    5dba:	08 95       	ret

00005dbc <si5351_clock_enable>:
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	void si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    5dbc:	cf 93       	push	r28
    5dbe:	df 93       	push	r29
    5dc0:	00 d0       	rcall	.+0      	; 0x5dc2 <si5351_clock_enable+0x6>
    5dc2:	1f 92       	push	r1
    5dc4:	cd b7       	in	r28, 0x3d	; 61
    5dc6:	de b7       	in	r29, 0x3e	; 62
    5dc8:	8a 83       	std	Y+2, r24	; 0x02
    5dca:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t reg_val;

		if(si5351_read(SI5351_OUTPUT_ENABLE_CTRL, &reg_val))
    5dcc:	ce 01       	movw	r24, r28
    5dce:	01 96       	adiw	r24, 0x01	; 1
    5dd0:	bc 01       	movw	r22, r24
    5dd2:	83 e0       	ldi	r24, 0x03	; 3
    5dd4:	29 d6       	rcall	.+3154   	; 0x6a28 <si5351_read>
    5dd6:	88 23       	and	r24, r24
    5dd8:	29 f5       	brne	.+74     	; 0x5e24 <si5351_clock_enable+0x68>
    5dda:	8b 81       	ldd	r24, Y+3	; 0x03
		{
			return;
		}

		if(enable)
    5ddc:	88 23       	and	r24, r24
    5dde:	79 f0       	breq	.+30     	; 0x5dfe <si5351_clock_enable+0x42>
    5de0:	8a 81       	ldd	r24, Y+2	; 0x02
		{
			reg_val &= ~(1 << (uint8_t)clk);
    5de2:	28 2f       	mov	r18, r24
    5de4:	30 e0       	ldi	r19, 0x00	; 0
    5de6:	81 e0       	ldi	r24, 0x01	; 1
    5de8:	90 e0       	ldi	r25, 0x00	; 0
    5dea:	02 c0       	rjmp	.+4      	; 0x5df0 <si5351_clock_enable+0x34>
    5dec:	88 0f       	add	r24, r24
    5dee:	99 1f       	adc	r25, r25
    5df0:	2a 95       	dec	r18
    5df2:	e2 f7       	brpl	.-8      	; 0x5dec <si5351_clock_enable+0x30>
    5df4:	80 95       	com	r24
    5df6:	99 81       	ldd	r25, Y+1	; 0x01
    5df8:	89 23       	and	r24, r25
    5dfa:	89 83       	std	Y+1, r24	; 0x01
    5dfc:	0e c0       	rjmp	.+28     	; 0x5e1a <si5351_clock_enable+0x5e>
    5dfe:	8a 81       	ldd	r24, Y+2	; 0x02
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    5e00:	28 2f       	mov	r18, r24
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	81 e0       	ldi	r24, 0x01	; 1
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	02 c0       	rjmp	.+4      	; 0x5e0e <si5351_clock_enable+0x52>
    5e0a:	88 0f       	add	r24, r24
    5e0c:	99 1f       	adc	r25, r25
    5e0e:	2a 95       	dec	r18
    5e10:	e2 f7       	brpl	.-8      	; 0x5e0a <si5351_clock_enable+0x4e>
    5e12:	98 2f       	mov	r25, r24
    5e14:	89 81       	ldd	r24, Y+1	; 0x01
    5e16:	89 2b       	or	r24, r25
    5e18:	89 83       	std	Y+1, r24	; 0x01
		}

		si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
    5e1a:	89 81       	ldd	r24, Y+1	; 0x01
    5e1c:	68 2f       	mov	r22, r24
    5e1e:	83 e0       	ldi	r24, 0x03	; 3
    5e20:	ef d5       	rcall	.+3038   	; 0x6a00 <si5351_write>
    5e22:	01 c0       	rjmp	.+2      	; 0x5e26 <si5351_clock_enable+0x6a>
    5e24:	00 00       	nop
	{
		uint8_t reg_val;

		if(si5351_read(SI5351_OUTPUT_ENABLE_CTRL, &reg_val))
		{
			return;
    5e26:	0f 90       	pop	r0
		{
			reg_val |= (1 << (uint8_t)clk);
		}

		si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
	}
    5e28:	0f 90       	pop	r0
    5e2a:	0f 90       	pop	r0
    5e2c:	df 91       	pop	r29
    5e2e:	cf 91       	pop	r28
    5e30:	08 95       	ret

00005e32 <si5351_drive_strength>:
    5e32:	cf 93       	push	r28
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	void si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    5e34:	df 93       	push	r29
    5e36:	00 d0       	rcall	.+0      	; 0x5e38 <si5351_drive_strength+0x6>
    5e38:	00 d0       	rcall	.+0      	; 0x5e3a <si5351_drive_strength+0x8>
    5e3a:	cd b7       	in	r28, 0x3d	; 61
    5e3c:	de b7       	in	r29, 0x3e	; 62
    5e3e:	8b 83       	std	Y+3, r24	; 0x03
    5e40:	6c 83       	std	Y+4, r22	; 0x04
		uint8_t reg_val;
		const uint8_t mask = 0x03;
    5e42:	83 e0       	ldi	r24, 0x03	; 3
    5e44:	89 83       	std	Y+1, r24	; 0x01

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    5e46:	8b 81       	ldd	r24, Y+3	; 0x03
    5e48:	20 e1       	ldi	r18, 0x10	; 16
    5e4a:	28 0f       	add	r18, r24
    5e4c:	ce 01       	movw	r24, r28
    5e4e:	02 96       	adiw	r24, 0x02	; 2
    5e50:	bc 01       	movw	r22, r24
    5e52:	82 2f       	mov	r24, r18
    5e54:	e9 d5       	rcall	.+3026   	; 0x6a28 <si5351_read>
    5e56:	88 23       	and	r24, r24
    5e58:	d9 f5       	brne	.+118    	; 0x5ed0 <si5351_drive_strength+0x9e>
    5e5a:	8c 81       	ldd	r24, Y+4	; 0x04
		{
			return;
		}

		switch(drive)
    5e5c:	88 2f       	mov	r24, r24
    5e5e:	90 e0       	ldi	r25, 0x00	; 0
    5e60:	81 30       	cpi	r24, 0x01	; 1
    5e62:	91 05       	cpc	r25, r1
    5e64:	a1 f0       	breq	.+40     	; 0x5e8e <si5351_drive_strength+0x5c>
    5e66:	82 30       	cpi	r24, 0x02	; 2
    5e68:	91 05       	cpc	r25, r1
    5e6a:	1c f4       	brge	.+6      	; 0x5e72 <si5351_drive_strength+0x40>
    5e6c:	89 2b       	or	r24, r25
    5e6e:	39 f0       	breq	.+14     	; 0x5e7e <si5351_drive_strength+0x4c>
    5e70:	29 c0       	rjmp	.+82     	; 0x5ec4 <si5351_drive_strength+0x92>
			break;

			default:
			{
			}
			break;
    5e72:	82 30       	cpi	r24, 0x02	; 2
		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
		{
			return;
		}

		switch(drive)
    5e74:	91 05       	cpc	r25, r1
    5e76:	a1 f0       	breq	.+40     	; 0x5ea0 <si5351_drive_strength+0x6e>
    5e78:	03 97       	sbiw	r24, 0x03	; 3
    5e7a:	d9 f0       	breq	.+54     	; 0x5eb2 <si5351_drive_strength+0x80>
    5e7c:	23 c0       	rjmp	.+70     	; 0x5ec4 <si5351_drive_strength+0x92>
			break;

			default:
			{
			}
			break;
    5e7e:	89 81       	ldd	r24, Y+1	; 0x01

		switch(drive)
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    5e80:	80 95       	com	r24
    5e82:	9a 81       	ldd	r25, Y+2	; 0x02
    5e84:	89 23       	and	r24, r25
    5e86:	8a 83       	std	Y+2, r24	; 0x02
    5e88:	8a 81       	ldd	r24, Y+2	; 0x02
				reg_val |= 0x00;
    5e8a:	8a 83       	std	Y+2, r24	; 0x02
    5e8c:	1b c0       	rjmp	.+54     	; 0x5ec4 <si5351_drive_strength+0x92>
			}
			break;
    5e8e:	89 81       	ldd	r24, Y+1	; 0x01

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
    5e90:	80 95       	com	r24
    5e92:	9a 81       	ldd	r25, Y+2	; 0x02
    5e94:	89 23       	and	r24, r25
    5e96:	8a 83       	std	Y+2, r24	; 0x02
    5e98:	8a 81       	ldd	r24, Y+2	; 0x02
				reg_val |= 0x01;
    5e9a:	81 60       	ori	r24, 0x01	; 1
    5e9c:	8a 83       	std	Y+2, r24	; 0x02
    5e9e:	12 c0       	rjmp	.+36     	; 0x5ec4 <si5351_drive_strength+0x92>
			}
			break;
    5ea0:	89 81       	ldd	r24, Y+1	; 0x01

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
    5ea2:	80 95       	com	r24
    5ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ea6:	89 23       	and	r24, r25
    5ea8:	8a 83       	std	Y+2, r24	; 0x02
				reg_val |= 0x02;
    5eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    5eac:	82 60       	ori	r24, 0x02	; 2
    5eae:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
    5eb0:	09 c0       	rjmp	.+18     	; 0x5ec4 <si5351_drive_strength+0x92>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
    5eb2:	89 81       	ldd	r24, Y+1	; 0x01
    5eb4:	80 95       	com	r24
    5eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    5eb8:	89 23       	and	r24, r25
    5eba:	8a 83       	std	Y+2, r24	; 0x02
				reg_val |= 0x03;
    5ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ebe:	83 60       	ori	r24, 0x03	; 3
    5ec0:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
    5ec2:	00 00       	nop
			{
			}
			break;
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    5ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ec8:	80 5f       	subi	r24, 0xF0	; 240
    5eca:	69 2f       	mov	r22, r25
    5ecc:	99 d5       	rcall	.+2866   	; 0x6a00 <si5351_write>
    5ece:	01 c0       	rjmp	.+2      	; 0x5ed2 <si5351_drive_strength+0xa0>
    5ed0:	00 00       	nop
		uint8_t reg_val;
		const uint8_t mask = 0x03;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
		{
			return;
    5ed2:	0f 90       	pop	r0
			}
			break;
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
	}
    5ed4:	0f 90       	pop	r0
    5ed6:	0f 90       	pop	r0
    5ed8:	0f 90       	pop	r0
    5eda:	df 91       	pop	r29
    5edc:	cf 91       	pop	r28
    5ede:	08 95       	ret

00005ee0 <pll_reset>:
 *
 * Apply a reset to the indicated PLL(s).
 *
 */
	void pll_reset(Si5351_pll target_pll)
	{
    5ee0:	cf 93       	push	r28
    5ee2:	df 93       	push	r29
    5ee4:	1f 92       	push	r1
    5ee6:	cd b7       	in	r28, 0x3d	; 61
    5ee8:	de b7       	in	r29, 0x3e	; 62
    5eea:	89 83       	std	Y+1, r24	; 0x01
		if(target_pll & SI5351_PLLA)
    5eec:	89 81       	ldd	r24, Y+1	; 0x01
    5eee:	88 2f       	mov	r24, r24
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	81 70       	andi	r24, 0x01	; 1
    5ef4:	99 27       	eor	r25, r25
    5ef6:	89 2b       	or	r24, r25
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
    5ef8:	19 f0       	breq	.+6      	; 0x5f00 <pll_reset+0x20>
    5efa:	60 e2       	ldi	r22, 0x20	; 32
    5efc:	81 eb       	ldi	r24, 0xB1	; 177
    5efe:	80 d5       	rcall	.+2816   	; 0x6a00 <si5351_write>
		}

		if(target_pll & SI5351_PLLB)
    5f00:	89 81       	ldd	r24, Y+1	; 0x01
    5f02:	88 2f       	mov	r24, r24
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	82 70       	andi	r24, 0x02	; 2
    5f08:	99 27       	eor	r25, r25
    5f0a:	89 2b       	or	r24, r25
    5f0c:	19 f0       	breq	.+6      	; 0x5f14 <pll_reset+0x34>
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
    5f0e:	60 e8       	ldi	r22, 0x80	; 128
    5f10:	81 eb       	ldi	r24, 0xB1	; 177
    5f12:	76 d5       	rcall	.+2796   	; 0x6a00 <si5351_write>
    5f14:	00 00       	nop
		}
	}
    5f16:	0f 90       	pop	r0
    5f18:	df 91       	pop	r29
    5f1a:	cf 91       	pop	r28
    5f1c:	08 95       	ret

00005f1e <set_pll>:
    5f1e:	0f 93       	push	r16
#ifdef DEBUGGING_ONLY
		uint32_t set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#else
		void set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#endif
	{
    5f20:	1f 93       	push	r17
    5f22:	cf 93       	push	r28
    5f24:	df 93       	push	r29
    5f26:	cd b7       	in	r28, 0x3d	; 61
    5f28:	de b7       	in	r29, 0x3e	; 62
    5f2a:	6c 97       	sbiw	r28, 0x1c	; 28
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	de bf       	out	0x3e, r29	; 62
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	cd bf       	out	0x3d, r28	; 61
    5f36:	68 8f       	std	Y+24, r22	; 0x18
    5f38:	79 8f       	std	Y+25, r23	; 0x19
    5f3a:	8a 8f       	std	Y+26, r24	; 0x1a
    5f3c:	9b 8f       	std	Y+27, r25	; 0x1b
    5f3e:	4c 8f       	std	Y+28, r20	; 0x1c
		/* Output Multisynth Settings (Synthesis Stage 2) */
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
			Frequency_Hz pll_error = freq_VCO - result;
#else
			pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
    5f40:	20 91 46 07 	lds	r18, 0x0746	; 0x800746 <g_si5351_ref_correction>
    5f44:	30 91 47 07 	lds	r19, 0x0747	; 0x800747 <g_si5351_ref_correction+0x1>
    5f48:	40 91 48 07 	lds	r20, 0x0748	; 0x800748 <g_si5351_ref_correction+0x2>
    5f4c:	50 91 49 07 	lds	r21, 0x0749	; 0x800749 <g_si5351_ref_correction+0x3>
    5f50:	be 01       	movw	r22, r28
    5f52:	6e 5f       	subi	r22, 0xFE	; 254
    5f54:	7f 4f       	sbci	r23, 0xFF	; 255
    5f56:	88 8d       	ldd	r24, Y+24	; 0x18
    5f58:	99 8d       	ldd	r25, Y+25	; 0x19
    5f5a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5f5c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5f5e:	89 01       	movw	r16, r18
    5f60:	9a 01       	movw	r18, r20
    5f62:	ab 01       	movw	r20, r22
    5f64:	bc 01       	movw	r22, r24
    5f66:	cd 01       	movw	r24, r26
    5f68:	d8 d0       	rcall	.+432    	; 0x611a <pll_calc>
    5f6a:	19 82       	std	Y+1, r1	; 0x01
#endif

		/* Derive the register values to write */

		/* Prepare an array for parameters to be written to */
		uint8_t i = 0;
    5f6c:	89 81       	ldd	r24, Y+1	; 0x01

		/* Registers 26-27 */
		params[i++] = pll_reg.reg.p3_1;
    5f6e:	91 e0       	ldi	r25, 0x01	; 1
    5f70:	98 0f       	add	r25, r24
    5f72:	99 83       	std	Y+1, r25	; 0x01
    5f74:	88 2f       	mov	r24, r24
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	4b 85       	ldd	r20, Y+11	; 0x0b
    5f7a:	9e 01       	movw	r18, r28
    5f7c:	22 5f       	subi	r18, 0xF2	; 242
    5f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f80:	82 0f       	add	r24, r18
    5f82:	93 1f       	adc	r25, r19
    5f84:	fc 01       	movw	r30, r24
    5f86:	40 83       	st	Z, r20
    5f88:	89 81       	ldd	r24, Y+1	; 0x01
		params[i++] = pll_reg.reg.p3_0;
    5f8a:	91 e0       	ldi	r25, 0x01	; 1
    5f8c:	98 0f       	add	r25, r24
    5f8e:	99 83       	std	Y+1, r25	; 0x01
    5f90:	88 2f       	mov	r24, r24
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	4a 85       	ldd	r20, Y+10	; 0x0a
    5f96:	9e 01       	movw	r18, r28
    5f98:	22 5f       	subi	r18, 0xF2	; 242
    5f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f9c:	82 0f       	add	r24, r18
    5f9e:	93 1f       	adc	r25, r19
    5fa0:	fc 01       	movw	r30, r24
    5fa2:	40 83       	st	Z, r20
    5fa4:	89 81       	ldd	r24, Y+1	; 0x01

		/* Register 28 */
		params[i++] = pll_reg.reg.p1_2 & 0x03;
    5fa6:	91 e0       	ldi	r25, 0x01	; 1
    5fa8:	98 0f       	add	r25, r24
    5faa:	99 83       	std	Y+1, r25	; 0x01
    5fac:	88 2f       	mov	r24, r24
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	2c 81       	ldd	r18, Y+4	; 0x04
    5fb2:	42 2f       	mov	r20, r18
    5fb4:	43 70       	andi	r20, 0x03	; 3
    5fb6:	9e 01       	movw	r18, r28
    5fb8:	22 5f       	subi	r18, 0xF2	; 242
    5fba:	3f 4f       	sbci	r19, 0xFF	; 255
    5fbc:	82 0f       	add	r24, r18
    5fbe:	93 1f       	adc	r25, r19
    5fc0:	fc 01       	movw	r30, r24
    5fc2:	40 83       	st	Z, r20
    5fc4:	89 81       	ldd	r24, Y+1	; 0x01

		/* Registers 29-30 */
		params[i++] = pll_reg.reg.p1_1;
    5fc6:	91 e0       	ldi	r25, 0x01	; 1
    5fc8:	98 0f       	add	r25, r24
    5fca:	99 83       	std	Y+1, r25	; 0x01
    5fcc:	88 2f       	mov	r24, r24
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	4b 81       	ldd	r20, Y+3	; 0x03
    5fd2:	9e 01       	movw	r18, r28
    5fd4:	22 5f       	subi	r18, 0xF2	; 242
    5fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd8:	82 0f       	add	r24, r18
    5fda:	93 1f       	adc	r25, r19
    5fdc:	fc 01       	movw	r30, r24
    5fde:	40 83       	st	Z, r20
    5fe0:	89 81       	ldd	r24, Y+1	; 0x01
		params[i++] = pll_reg.reg.p1_0;
    5fe2:	91 e0       	ldi	r25, 0x01	; 1
    5fe4:	98 0f       	add	r25, r24
    5fe6:	99 83       	std	Y+1, r25	; 0x01
    5fe8:	88 2f       	mov	r24, r24
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	4a 81       	ldd	r20, Y+2	; 0x02
    5fee:	9e 01       	movw	r18, r28
    5ff0:	22 5f       	subi	r18, 0xF2	; 242
    5ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ff4:	82 0f       	add	r24, r18
    5ff6:	93 1f       	adc	r25, r19
    5ff8:	fc 01       	movw	r30, r24
    5ffa:	40 83       	st	Z, r20
    5ffc:	89 81       	ldd	r24, Y+1	; 0x01

		/* Register 31 */
		params[i] = pll_reg.reg.p3_2 << 4;
    5ffe:	88 2f       	mov	r24, r24
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	2c 85       	ldd	r18, Y+12	; 0x0c
    6004:	42 2f       	mov	r20, r18
    6006:	42 95       	swap	r20
    6008:	40 7f       	andi	r20, 0xF0	; 240
    600a:	9e 01       	movw	r18, r28
    600c:	22 5f       	subi	r18, 0xF2	; 242
    600e:	3f 4f       	sbci	r19, 0xFF	; 255
    6010:	82 0f       	add	r24, r18
    6012:	93 1f       	adc	r25, r19
    6014:	fc 01       	movw	r30, r24
    6016:	40 83       	st	Z, r20
    6018:	29 81       	ldd	r18, Y+1	; 0x01
		params[i++] += pll_reg.reg.p2_2 & 0x0F;
    601a:	81 e0       	ldi	r24, 0x01	; 1
    601c:	82 0f       	add	r24, r18
    601e:	89 83       	std	Y+1, r24	; 0x01
    6020:	82 2f       	mov	r24, r18
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	22 2f       	mov	r18, r18
    6026:	30 e0       	ldi	r19, 0x00	; 0
    6028:	ae 01       	movw	r20, r28
    602a:	42 5f       	subi	r20, 0xF2	; 242
    602c:	5f 4f       	sbci	r21, 0xFF	; 255
    602e:	24 0f       	add	r18, r20
    6030:	35 1f       	adc	r19, r21
    6032:	f9 01       	movw	r30, r18
    6034:	30 81       	ld	r19, Z
    6036:	28 85       	ldd	r18, Y+8	; 0x08
    6038:	2f 70       	andi	r18, 0x0F	; 15
    603a:	43 2f       	mov	r20, r19
    603c:	42 0f       	add	r20, r18
    603e:	9e 01       	movw	r18, r28
    6040:	22 5f       	subi	r18, 0xF2	; 242
    6042:	3f 4f       	sbci	r19, 0xFF	; 255
    6044:	82 0f       	add	r24, r18
    6046:	93 1f       	adc	r25, r19
    6048:	fc 01       	movw	r30, r24
    604a:	40 83       	st	Z, r20
    604c:	89 81       	ldd	r24, Y+1	; 0x01

		/* Registers 32-33 */
		params[i++] = pll_reg.reg.p2_1;
    604e:	91 e0       	ldi	r25, 0x01	; 1
    6050:	98 0f       	add	r25, r24
    6052:	99 83       	std	Y+1, r25	; 0x01
    6054:	88 2f       	mov	r24, r24
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	4f 81       	ldd	r20, Y+7	; 0x07
    605a:	9e 01       	movw	r18, r28
    605c:	22 5f       	subi	r18, 0xF2	; 242
    605e:	3f 4f       	sbci	r19, 0xFF	; 255
    6060:	82 0f       	add	r24, r18
    6062:	93 1f       	adc	r25, r19
    6064:	fc 01       	movw	r30, r24
    6066:	40 83       	st	Z, r20
    6068:	89 81       	ldd	r24, Y+1	; 0x01
		params[i++] = pll_reg.reg.p2_0;
    606a:	91 e0       	ldi	r25, 0x01	; 1
    606c:	98 0f       	add	r25, r24
    606e:	99 83       	std	Y+1, r25	; 0x01
    6070:	88 2f       	mov	r24, r24
    6072:	90 e0       	ldi	r25, 0x00	; 0
    6074:	4e 81       	ldd	r20, Y+6	; 0x06
    6076:	9e 01       	movw	r18, r28
    6078:	22 5f       	subi	r18, 0xF2	; 242
    607a:	3f 4f       	sbci	r19, 0xFF	; 255
    607c:	82 0f       	add	r24, r18
    607e:	93 1f       	adc	r25, r19
    6080:	fc 01       	movw	r30, r24

		/* Write the parameters */
		if(target_pll == SI5351_PLLA)
    6082:	40 83       	st	Z, r20
    6084:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6086:	81 30       	cpi	r24, 0x01	; 1
		{
			si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
    6088:	39 f4       	brne	.+14     	; 0x6098 <set_pll+0x17a>
    608a:	ce 01       	movw	r24, r28
    608c:	0e 96       	adiw	r24, 0x0e	; 14
    608e:	ac 01       	movw	r20, r24
    6090:	69 81       	ldd	r22, Y+1	; 0x01
    6092:	8a e1       	ldi	r24, 0x1A	; 26
    6094:	9c d4       	rcall	.+2360   	; 0x69ce <si5351_write_bulk>
		}

#ifdef DEBUGGING_ONLY
			return(result);
#endif
	}
    6096:	06 c0       	rjmp	.+12     	; 0x60a4 <set_pll+0x186>
		{
			si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
		}
		else    /* if(target_pll == SI5351_PLLB) */
		{
			si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
    6098:	ce 01       	movw	r24, r28
    609a:	0e 96       	adiw	r24, 0x0e	; 14
    609c:	ac 01       	movw	r20, r24
    609e:	69 81       	ldd	r22, Y+1	; 0x01
    60a0:	82 e2       	ldi	r24, 0x22	; 34
    60a2:	95 d4       	rcall	.+2346   	; 0x69ce <si5351_write_bulk>
    60a4:	00 00       	nop
		}

#ifdef DEBUGGING_ONLY
			return(result);
#endif
	}
    60a6:	6c 96       	adiw	r28, 0x1c	; 28
    60a8:	0f b6       	in	r0, 0x3f	; 63
    60aa:	f8 94       	cli
    60ac:	de bf       	out	0x3e, r29	; 62
    60ae:	0f be       	out	0x3f, r0	; 63
    60b0:	cd bf       	out	0x3d, r28	; 61
    60b2:	df 91       	pop	r29
    60b4:	cf 91       	pop	r28
    60b6:	1f 91       	pop	r17
    60b8:	0f 91       	pop	r16
    60ba:	08 95       	ret

000060bc <si5351_set_correction>:
    60bc:	cf 93       	push	r28
 * crystal. The library will read the correction factor from
 * EEPROM during initialization for use by the tuning
 * algorithms.
 */
	void si5351_set_correction(int32_t corr)
	{
    60be:	df 93       	push	r29
    60c0:	00 d0       	rcall	.+0      	; 0x60c2 <si5351_set_correction+0x6>
    60c2:	00 d0       	rcall	.+0      	; 0x60c4 <si5351_set_correction+0x8>
    60c4:	cd b7       	in	r28, 0x3d	; 61
    60c6:	de b7       	in	r29, 0x3e	; 62
    60c8:	69 83       	std	Y+1, r22	; 0x01
    60ca:	7a 83       	std	Y+2, r23	; 0x02
    60cc:	8b 83       	std	Y+3, r24	; 0x03
    60ce:	9c 83       	std	Y+4, r25	; 0x04
    60d0:	89 81       	ldd	r24, Y+1	; 0x01
		g_si5351_ref_correction = corr;
    60d2:	9a 81       	ldd	r25, Y+2	; 0x02
    60d4:	ab 81       	ldd	r26, Y+3	; 0x03
    60d6:	bc 81       	ldd	r27, Y+4	; 0x04
    60d8:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <g_si5351_ref_correction>
    60dc:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <g_si5351_ref_correction+0x1>
    60e0:	a0 93 48 07 	sts	0x0748, r26	; 0x800748 <g_si5351_ref_correction+0x2>
    60e4:	b0 93 49 07 	sts	0x0749, r27	; 0x800749 <g_si5351_ref_correction+0x3>
    60e8:	00 00       	nop
	}
    60ea:	0f 90       	pop	r0
    60ec:	0f 90       	pop	r0
    60ee:	0f 90       	pop	r0
    60f0:	0f 90       	pop	r0
    60f2:	df 91       	pop	r29
    60f4:	cf 91       	pop	r28
    60f6:	08 95       	ret

000060f8 <si5351_get_correction>:
    60f8:	cf 93       	push	r28
 * si5351_get_correction(void)
 *
 * Returns the oscillator correction factor.
 */
	int32_t si5351_get_correction(void)
	{
    60fa:	df 93       	push	r29
    60fc:	cd b7       	in	r28, 0x3d	; 61
    60fe:	de b7       	in	r29, 0x3e	; 62
    6100:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <g_si5351_ref_correction>
		return(g_si5351_ref_correction);
    6104:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <g_si5351_ref_correction+0x1>
    6108:	a0 91 48 07 	lds	r26, 0x0748	; 0x800748 <g_si5351_ref_correction+0x2>
    610c:	b0 91 49 07 	lds	r27, 0x0749	; 0x800749 <g_si5351_ref_correction+0x3>
    6110:	bc 01       	movw	r22, r24
	}
    6112:	cd 01       	movw	r24, r26
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	08 95       	ret

0000611a <pll_calc>:
    611a:	0f 93       	push	r16
#ifdef DEBUGGING_ONLY
		Frequency_Hz pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
#else
		BOOL pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
#endif
	{
    611c:	1f 93       	push	r17
    611e:	cf 93       	push	r28
    6120:	df 93       	push	r29
    6122:	cd b7       	in	r28, 0x3d	; 61
    6124:	de b7       	in	r29, 0x3e	; 62
    6126:	a2 97       	sbiw	r28, 0x22	; 34
    6128:	0f b6       	in	r0, 0x3f	; 63
    612a:	f8 94       	cli
    612c:	de bf       	out	0x3e, r29	; 62
    612e:	0f be       	out	0x3f, r0	; 63
    6130:	cd bf       	out	0x3d, r28	; 61
    6132:	69 8f       	std	Y+25, r22	; 0x19
    6134:	7a 8f       	std	Y+26, r23	; 0x1a
    6136:	8b 8f       	std	Y+27, r24	; 0x1b
    6138:	9c 8f       	std	Y+28, r25	; 0x1c
    613a:	5e 8f       	std	Y+30, r21	; 0x1e
    613c:	4d 8f       	std	Y+29, r20	; 0x1d
    613e:	0f 8f       	std	Y+31, r16	; 0x1f
    6140:	18 a3       	std	Y+32, r17	; 0x20
    6142:	29 a3       	std	Y+33, r18	; 0x21
    6144:	3a a3       	std	Y+34, r19	; 0x22
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = 0;
#endif
		Frequency_Hz ref_freq = xtal_freq;
    6146:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <xtal_freq>
    614a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <xtal_freq+0x1>
    614e:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <xtal_freq+0x2>
    6152:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <xtal_freq+0x3>
    6156:	89 83       	std	Y+1, r24	; 0x01
    6158:	9a 83       	std	Y+2, r25	; 0x02
    615a:	ab 83       	std	Y+3, r26	; 0x03
    615c:	bc 83       	std	Y+4, r27	; 0x04
				return(TRUE);
			}
#endif

		/* Determine integer part of feedback equation */
		a = vco_freq / ref_freq;
    615e:	89 8d       	ldd	r24, Y+25	; 0x19
    6160:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6162:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6164:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6166:	29 81       	ldd	r18, Y+1	; 0x01
    6168:	3a 81       	ldd	r19, Y+2	; 0x02
    616a:	4b 81       	ldd	r20, Y+3	; 0x03
    616c:	5c 81       	ldd	r21, Y+4	; 0x04
    616e:	bc 01       	movw	r22, r24
    6170:	cd 01       	movw	r24, r26
    6172:	ad d6       	rcall	.+3418   	; 0x6ece <__udivmodsi4>
    6174:	da 01       	movw	r26, r20
    6176:	c9 01       	movw	r24, r18
    6178:	8d 83       	std	Y+5, r24	; 0x05
    617a:	9e 83       	std	Y+6, r25	; 0x06
    617c:	af 83       	std	Y+7, r26	; 0x07
    617e:	b8 87       	std	Y+8, r27	; 0x08
				return(TRUE);
			}
#endif

		/* Find best approximation for b/c = fVCO mod fIN */
		b = vco_freq % ref_freq;
    6180:	89 8d       	ldd	r24, Y+25	; 0x19
    6182:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6184:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6186:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6188:	29 81       	ldd	r18, Y+1	; 0x01
    618a:	3a 81       	ldd	r19, Y+2	; 0x02
    618c:	4b 81       	ldd	r20, Y+3	; 0x03
    618e:	5c 81       	ldd	r21, Y+4	; 0x04
    6190:	bc 01       	movw	r22, r24
    6192:	cd 01       	movw	r24, r26
    6194:	9c d6       	rcall	.+3384   	; 0x6ece <__udivmodsi4>
    6196:	dc 01       	movw	r26, r24
    6198:	cb 01       	movw	r24, r22
    619a:	89 8b       	std	Y+17, r24	; 0x11
    619c:	9a 8b       	std	Y+18, r25	; 0x12
    619e:	ab 8b       	std	Y+19, r26	; 0x13
    61a0:	bc 8b       	std	Y+20, r27	; 0x14
		c = ref_freq;
    61a2:	89 81       	ldd	r24, Y+1	; 0x01
    61a4:	9a 81       	ldd	r25, Y+2	; 0x02
    61a6:	ab 81       	ldd	r26, Y+3	; 0x03
    61a8:	bc 81       	ldd	r27, Y+4	; 0x04
    61aa:	8d 8b       	std	Y+21, r24	; 0x15
    61ac:	9e 8b       	std	Y+22, r25	; 0x16
    61ae:	af 8b       	std	Y+23, r26	; 0x17
    61b0:	b8 8f       	std	Y+24, r27	; 0x18

		reduce_by_gcd(&b, &c);
    61b2:	9e 01       	movw	r18, r28
    61b4:	2b 5e       	subi	r18, 0xEB	; 235
    61b6:	3f 4f       	sbci	r19, 0xFF	; 255
    61b8:	ce 01       	movw	r24, r28
    61ba:	41 96       	adiw	r24, 0x11	; 17
    61bc:	b9 01       	movw	r22, r18
    61be:	9c d0       	rcall	.+312    	; 0x62f8 <reduce_by_gcd>
    61c0:	89 89       	ldd	r24, Y+17	; 0x11

		uint32_t bx128 = b << 7;
    61c2:	9a 89       	ldd	r25, Y+18	; 0x12
    61c4:	ab 89       	ldd	r26, Y+19	; 0x13
    61c6:	bc 89       	ldd	r27, Y+20	; 0x14
    61c8:	88 0f       	add	r24, r24
    61ca:	99 1f       	adc	r25, r25
    61cc:	aa 1f       	adc	r26, r26
    61ce:	bb 1f       	adc	r27, r27
    61d0:	88 0f       	add	r24, r24
    61d2:	99 1f       	adc	r25, r25
    61d4:	aa 1f       	adc	r26, r26
    61d6:	bb 1f       	adc	r27, r27
    61d8:	88 0f       	add	r24, r24
    61da:	99 1f       	adc	r25, r25
    61dc:	aa 1f       	adc	r26, r26
    61de:	bb 1f       	adc	r27, r27
    61e0:	88 0f       	add	r24, r24
    61e2:	99 1f       	adc	r25, r25
    61e4:	aa 1f       	adc	r26, r26
    61e6:	bb 1f       	adc	r27, r27
    61e8:	88 0f       	add	r24, r24
    61ea:	99 1f       	adc	r25, r25
    61ec:	aa 1f       	adc	r26, r26
    61ee:	bb 1f       	adc	r27, r27
    61f0:	88 0f       	add	r24, r24
    61f2:	99 1f       	adc	r25, r25
    61f4:	aa 1f       	adc	r26, r26
    61f6:	bb 1f       	adc	r27, r27
    61f8:	88 0f       	add	r24, r24
    61fa:	99 1f       	adc	r25, r25
    61fc:	aa 1f       	adc	r26, r26
    61fe:	bb 1f       	adc	r27, r27
    6200:	89 87       	std	Y+9, r24	; 0x09
    6202:	9a 87       	std	Y+10, r25	; 0x0a
    6204:	ab 87       	std	Y+11, r26	; 0x0b
    6206:	bc 87       	std	Y+12, r27	; 0x0c
		uint32_t bx128overc = bx128 / c;
    6208:	2d 89       	ldd	r18, Y+21	; 0x15
    620a:	3e 89       	ldd	r19, Y+22	; 0x16
    620c:	4f 89       	ldd	r20, Y+23	; 0x17
    620e:	58 8d       	ldd	r21, Y+24	; 0x18
    6210:	89 85       	ldd	r24, Y+9	; 0x09
    6212:	9a 85       	ldd	r25, Y+10	; 0x0a
    6214:	ab 85       	ldd	r26, Y+11	; 0x0b
    6216:	bc 85       	ldd	r27, Y+12	; 0x0c
    6218:	bc 01       	movw	r22, r24
    621a:	cd 01       	movw	r24, r26
    621c:	58 d6       	rcall	.+3248   	; 0x6ece <__udivmodsi4>
    621e:	da 01       	movw	r26, r20
    6220:	c9 01       	movw	r24, r18
    6222:	8d 87       	std	Y+13, r24	; 0x0d
    6224:	9e 87       	std	Y+14, r25	; 0x0e
    6226:	af 87       	std	Y+15, r26	; 0x0f
    6228:	b8 8b       	std	Y+16, r27	; 0x10
    622a:	8d 81       	ldd	r24, Y+5	; 0x05
		reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    622c:	9e 81       	ldd	r25, Y+6	; 0x06
    622e:	af 81       	ldd	r26, Y+7	; 0x07
    6230:	b8 85       	ldd	r27, Y+8	; 0x08
    6232:	88 0f       	add	r24, r24
    6234:	99 1f       	adc	r25, r25
    6236:	aa 1f       	adc	r26, r26
    6238:	bb 1f       	adc	r27, r27
    623a:	88 0f       	add	r24, r24
    623c:	99 1f       	adc	r25, r25
    623e:	aa 1f       	adc	r26, r26
    6240:	bb 1f       	adc	r27, r27
    6242:	88 0f       	add	r24, r24
    6244:	99 1f       	adc	r25, r25
    6246:	aa 1f       	adc	r26, r26
    6248:	bb 1f       	adc	r27, r27
    624a:	88 0f       	add	r24, r24
    624c:	99 1f       	adc	r25, r25
    624e:	aa 1f       	adc	r26, r26
    6250:	bb 1f       	adc	r27, r27
    6252:	88 0f       	add	r24, r24
    6254:	99 1f       	adc	r25, r25
    6256:	aa 1f       	adc	r26, r26
    6258:	bb 1f       	adc	r27, r27
    625a:	88 0f       	add	r24, r24
    625c:	99 1f       	adc	r25, r25
    625e:	aa 1f       	adc	r26, r26
    6260:	bb 1f       	adc	r27, r27
    6262:	88 0f       	add	r24, r24
    6264:	99 1f       	adc	r25, r25
    6266:	aa 1f       	adc	r26, r26
    6268:	bb 1f       	adc	r27, r27
    626a:	9c 01       	movw	r18, r24
    626c:	ad 01       	movw	r20, r26
    626e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6270:	9e 85       	ldd	r25, Y+14	; 0x0e
    6272:	af 85       	ldd	r26, Y+15	; 0x0f
    6274:	b8 89       	ldd	r27, Y+16	; 0x10
    6276:	82 0f       	add	r24, r18
    6278:	93 1f       	adc	r25, r19
    627a:	a4 1f       	adc	r26, r20
    627c:	b5 1f       	adc	r27, r21
    627e:	92 50       	subi	r25, 0x02	; 2
    6280:	a1 09       	sbc	r26, r1
    6282:	b1 09       	sbc	r27, r1
    6284:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6286:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6288:	f9 01       	movw	r30, r18
    628a:	80 83       	st	Z, r24
    628c:	91 83       	std	Z+1, r25	; 0x01
    628e:	a2 83       	std	Z+2, r26	; 0x02
    6290:	b3 83       	std	Z+3, r27	; 0x03
		reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    6292:	2d 89       	ldd	r18, Y+21	; 0x15
    6294:	3e 89       	ldd	r19, Y+22	; 0x16
    6296:	4f 89       	ldd	r20, Y+23	; 0x17
    6298:	58 8d       	ldd	r21, Y+24	; 0x18
    629a:	8d 85       	ldd	r24, Y+13	; 0x0d
    629c:	9e 85       	ldd	r25, Y+14	; 0x0e
    629e:	af 85       	ldd	r26, Y+15	; 0x0f
    62a0:	b8 89       	ldd	r27, Y+16	; 0x10
    62a2:	bc 01       	movw	r22, r24
    62a4:	cd 01       	movw	r24, r26
    62a6:	dd d5       	rcall	.+3002   	; 0x6e62 <__mulsi3>
    62a8:	9b 01       	movw	r18, r22
    62aa:	ac 01       	movw	r20, r24
    62ac:	89 85       	ldd	r24, Y+9	; 0x09
    62ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    62b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    62b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    62b4:	82 1b       	sub	r24, r18
    62b6:	93 0b       	sbc	r25, r19
    62b8:	a4 0b       	sbc	r26, r20
    62ba:	b5 0b       	sbc	r27, r21
    62bc:	2d 8d       	ldd	r18, Y+29	; 0x1d
    62be:	3e 8d       	ldd	r19, Y+30	; 0x1e
    62c0:	f9 01       	movw	r30, r18
    62c2:	84 83       	std	Z+4, r24	; 0x04
    62c4:	95 83       	std	Z+5, r25	; 0x05
    62c6:	a6 83       	std	Z+6, r26	; 0x06
    62c8:	b7 83       	std	Z+7, r27	; 0x07
    62ca:	8d 89       	ldd	r24, Y+21	; 0x15
		reg->ms.p3 = c;
    62cc:	9e 89       	ldd	r25, Y+22	; 0x16
    62ce:	af 89       	ldd	r26, Y+23	; 0x17
    62d0:	b8 8d       	ldd	r27, Y+24	; 0x18
    62d2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    62d4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    62d6:	f9 01       	movw	r30, r18
    62d8:	80 87       	std	Z+8, r24	; 0x08
    62da:	91 87       	std	Z+9, r25	; 0x09
    62dc:	a2 87       	std	Z+10, r26	; 0x0a
    62de:	b3 87       	std	Z+11, r27	; 0x0b
    62e0:	80 e0       	ldi	r24, 0x00	; 0

			return(result);

#else

			return(FALSE);
    62e2:	a2 96       	adiw	r28, 0x22	; 34

#endif
	}
    62e4:	0f b6       	in	r0, 0x3f	; 63
    62e6:	f8 94       	cli
    62e8:	de bf       	out	0x3e, r29	; 62
    62ea:	0f be       	out	0x3f, r0	; 63
    62ec:	cd bf       	out	0x3d, r28	; 61
    62ee:	df 91       	pop	r29
    62f0:	cf 91       	pop	r28
    62f2:	1f 91       	pop	r17
    62f4:	0f 91       	pop	r16
    62f6:	08 95       	ret

000062f8 <reduce_by_gcd>:
    62f8:	cf 93       	push	r28
 *
 * Simple implementation of Euclid's Algorithm for calculating GCD of two uint32's
 *
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
    62fa:	df 93       	push	r29
    62fc:	cd b7       	in	r28, 0x3d	; 61
    62fe:	de b7       	in	r29, 0x3e	; 62
    6300:	60 97       	sbiw	r28, 0x10	; 16
    6302:	0f b6       	in	r0, 0x3f	; 63
    6304:	f8 94       	cli
    6306:	de bf       	out	0x3e, r29	; 62
    6308:	0f be       	out	0x3f, r0	; 63
    630a:	cd bf       	out	0x3d, r28	; 61
    630c:	9e 87       	std	Y+14, r25	; 0x0e
    630e:	8d 87       	std	Y+13, r24	; 0x0d
    6310:	78 8b       	std	Y+16, r23	; 0x10
    6312:	6f 87       	std	Y+15, r22	; 0x0f
    6314:	8d 85       	ldd	r24, Y+13	; 0x0d
		uint32_t r;
		uint32_t b = *m;
    6316:	9e 85       	ldd	r25, Y+14	; 0x0e
    6318:	fc 01       	movw	r30, r24
    631a:	80 81       	ld	r24, Z
    631c:	91 81       	ldd	r25, Z+1	; 0x01
    631e:	a2 81       	ldd	r26, Z+2	; 0x02
    6320:	b3 81       	ldd	r27, Z+3	; 0x03
    6322:	89 87       	std	Y+9, r24	; 0x09
    6324:	9a 87       	std	Y+10, r25	; 0x0a
    6326:	ab 87       	std	Y+11, r26	; 0x0b
    6328:	bc 87       	std	Y+12, r27	; 0x0c
    632a:	8f 85       	ldd	r24, Y+15	; 0x0f
		uint32_t c = *n;
    632c:	98 89       	ldd	r25, Y+16	; 0x10
    632e:	fc 01       	movw	r30, r24
    6330:	80 81       	ld	r24, Z
    6332:	91 81       	ldd	r25, Z+1	; 0x01
    6334:	a2 81       	ldd	r26, Z+2	; 0x02
    6336:	b3 81       	ldd	r27, Z+3	; 0x03
    6338:	8d 83       	std	Y+5, r24	; 0x05
    633a:	9e 83       	std	Y+6, r25	; 0x06
    633c:	af 83       	std	Y+7, r26	; 0x07
    633e:	b8 87       	std	Y+8, r27	; 0x08

		if(!b || !c)
    6340:	89 85       	ldd	r24, Y+9	; 0x09
    6342:	9a 85       	ldd	r25, Y+10	; 0x0a
    6344:	ab 85       	ldd	r26, Y+11	; 0x0b
    6346:	bc 85       	ldd	r27, Y+12	; 0x0c
    6348:	89 2b       	or	r24, r25
    634a:	8a 2b       	or	r24, r26
    634c:	8b 2b       	or	r24, r27
    634e:	09 f4       	brne	.+2      	; 0x6352 <reduce_by_gcd+0x5a>
    6350:	7c c0       	rjmp	.+248    	; 0x644a <reduce_by_gcd+0x152>
    6352:	8d 81       	ldd	r24, Y+5	; 0x05
    6354:	9e 81       	ldd	r25, Y+6	; 0x06
    6356:	af 81       	ldd	r26, Y+7	; 0x07
    6358:	b8 85       	ldd	r27, Y+8	; 0x08
    635a:	89 2b       	or	r24, r25
    635c:	8a 2b       	or	r24, r26
    635e:	8b 2b       	or	r24, r27
    6360:	09 f4       	brne	.+2      	; 0x6364 <reduce_by_gcd+0x6c>
    6362:	73 c0       	rjmp	.+230    	; 0x644a <reduce_by_gcd+0x152>
		{
			return;
		}

		for(r = b % c; r; b = c, c = r, r = b % c)
    6364:	89 85       	ldd	r24, Y+9	; 0x09
    6366:	9a 85       	ldd	r25, Y+10	; 0x0a
    6368:	ab 85       	ldd	r26, Y+11	; 0x0b
    636a:	bc 85       	ldd	r27, Y+12	; 0x0c
    636c:	2d 81       	ldd	r18, Y+5	; 0x05
    636e:	3e 81       	ldd	r19, Y+6	; 0x06
    6370:	4f 81       	ldd	r20, Y+7	; 0x07
    6372:	58 85       	ldd	r21, Y+8	; 0x08
    6374:	bc 01       	movw	r22, r24
    6376:	cd 01       	movw	r24, r26
    6378:	aa d5       	rcall	.+2900   	; 0x6ece <__udivmodsi4>
    637a:	dc 01       	movw	r26, r24
    637c:	cb 01       	movw	r24, r22
    637e:	89 83       	std	Y+1, r24	; 0x01
    6380:	9a 83       	std	Y+2, r25	; 0x02
    6382:	ab 83       	std	Y+3, r26	; 0x03
    6384:	bc 83       	std	Y+4, r27	; 0x04
    6386:	21 c0       	rjmp	.+66     	; 0x63ca <reduce_by_gcd+0xd2>
    6388:	8d 81       	ldd	r24, Y+5	; 0x05
    638a:	9e 81       	ldd	r25, Y+6	; 0x06
    638c:	af 81       	ldd	r26, Y+7	; 0x07
    638e:	b8 85       	ldd	r27, Y+8	; 0x08
    6390:	89 87       	std	Y+9, r24	; 0x09
    6392:	9a 87       	std	Y+10, r25	; 0x0a
    6394:	ab 87       	std	Y+11, r26	; 0x0b
    6396:	bc 87       	std	Y+12, r27	; 0x0c
    6398:	89 81       	ldd	r24, Y+1	; 0x01
    639a:	9a 81       	ldd	r25, Y+2	; 0x02
    639c:	ab 81       	ldd	r26, Y+3	; 0x03
    639e:	bc 81       	ldd	r27, Y+4	; 0x04
    63a0:	8d 83       	std	Y+5, r24	; 0x05
    63a2:	9e 83       	std	Y+6, r25	; 0x06
    63a4:	af 83       	std	Y+7, r26	; 0x07
    63a6:	b8 87       	std	Y+8, r27	; 0x08
    63a8:	89 85       	ldd	r24, Y+9	; 0x09
    63aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    63ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    63ae:	bc 85       	ldd	r27, Y+12	; 0x0c
    63b0:	2d 81       	ldd	r18, Y+5	; 0x05
    63b2:	3e 81       	ldd	r19, Y+6	; 0x06
    63b4:	4f 81       	ldd	r20, Y+7	; 0x07
    63b6:	58 85       	ldd	r21, Y+8	; 0x08
    63b8:	bc 01       	movw	r22, r24
    63ba:	cd 01       	movw	r24, r26
    63bc:	88 d5       	rcall	.+2832   	; 0x6ece <__udivmodsi4>
    63be:	dc 01       	movw	r26, r24
    63c0:	cb 01       	movw	r24, r22
    63c2:	89 83       	std	Y+1, r24	; 0x01
    63c4:	9a 83       	std	Y+2, r25	; 0x02
    63c6:	ab 83       	std	Y+3, r26	; 0x03
    63c8:	bc 83       	std	Y+4, r27	; 0x04
    63ca:	89 81       	ldd	r24, Y+1	; 0x01
    63cc:	9a 81       	ldd	r25, Y+2	; 0x02
    63ce:	ab 81       	ldd	r26, Y+3	; 0x03
    63d0:	bc 81       	ldd	r27, Y+4	; 0x04
    63d2:	89 2b       	or	r24, r25
    63d4:	8a 2b       	or	r24, r26
    63d6:	8b 2b       	or	r24, r27
    63d8:	b9 f6       	brne	.-82     	; 0x6388 <reduce_by_gcd+0x90>
		{
			;
		}

		if(c > 1)
    63da:	8d 81       	ldd	r24, Y+5	; 0x05
    63dc:	9e 81       	ldd	r25, Y+6	; 0x06
    63de:	af 81       	ldd	r26, Y+7	; 0x07
    63e0:	b8 85       	ldd	r27, Y+8	; 0x08
    63e2:	02 97       	sbiw	r24, 0x02	; 2
    63e4:	a1 05       	cpc	r26, r1
    63e6:	b1 05       	cpc	r27, r1
    63e8:	90 f1       	brcs	.+100    	; 0x644e <reduce_by_gcd+0x156>
		{
			*m /= c;
    63ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    63ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    63ee:	fc 01       	movw	r30, r24
    63f0:	80 81       	ld	r24, Z
    63f2:	91 81       	ldd	r25, Z+1	; 0x01
    63f4:	a2 81       	ldd	r26, Z+2	; 0x02
    63f6:	b3 81       	ldd	r27, Z+3	; 0x03
    63f8:	2d 81       	ldd	r18, Y+5	; 0x05
    63fa:	3e 81       	ldd	r19, Y+6	; 0x06
    63fc:	4f 81       	ldd	r20, Y+7	; 0x07
    63fe:	58 85       	ldd	r21, Y+8	; 0x08
    6400:	bc 01       	movw	r22, r24
    6402:	cd 01       	movw	r24, r26
    6404:	64 d5       	rcall	.+2760   	; 0x6ece <__udivmodsi4>
    6406:	da 01       	movw	r26, r20
    6408:	c9 01       	movw	r24, r18
    640a:	2d 85       	ldd	r18, Y+13	; 0x0d
    640c:	3e 85       	ldd	r19, Y+14	; 0x0e
    640e:	f9 01       	movw	r30, r18
    6410:	80 83       	st	Z, r24
    6412:	91 83       	std	Z+1, r25	; 0x01
    6414:	a2 83       	std	Z+2, r26	; 0x02
    6416:	b3 83       	std	Z+3, r27	; 0x03
			*n /= c;
    6418:	8f 85       	ldd	r24, Y+15	; 0x0f
    641a:	98 89       	ldd	r25, Y+16	; 0x10
    641c:	fc 01       	movw	r30, r24
    641e:	80 81       	ld	r24, Z
    6420:	91 81       	ldd	r25, Z+1	; 0x01
    6422:	a2 81       	ldd	r26, Z+2	; 0x02
    6424:	b3 81       	ldd	r27, Z+3	; 0x03
    6426:	2d 81       	ldd	r18, Y+5	; 0x05
    6428:	3e 81       	ldd	r19, Y+6	; 0x06
    642a:	4f 81       	ldd	r20, Y+7	; 0x07
    642c:	58 85       	ldd	r21, Y+8	; 0x08
    642e:	bc 01       	movw	r22, r24
    6430:	cd 01       	movw	r24, r26
    6432:	4d d5       	rcall	.+2714   	; 0x6ece <__udivmodsi4>
    6434:	da 01       	movw	r26, r20
    6436:	c9 01       	movw	r24, r18
    6438:	2f 85       	ldd	r18, Y+15	; 0x0f
    643a:	38 89       	ldd	r19, Y+16	; 0x10
    643c:	f9 01       	movw	r30, r18
    643e:	80 83       	st	Z, r24
    6440:	91 83       	std	Z+1, r25	; 0x01
    6442:	a2 83       	std	Z+2, r26	; 0x02
    6444:	b3 83       	std	Z+3, r27	; 0x03
    6446:	00 00       	nop
		}

		return;
    6448:	02 c0       	rjmp	.+4      	; 0x644e <reduce_by_gcd+0x156>
    644a:	00 00       	nop
		uint32_t b = *m;
		uint32_t c = *n;

		if(!b || !c)
		{
			return;
    644c:	01 c0       	rjmp	.+2      	; 0x6450 <reduce_by_gcd+0x158>
    644e:	00 00       	nop
		{
			*m /= c;
			*n /= c;
		}

		return;
    6450:	60 96       	adiw	r28, 0x10	; 16
	}
    6452:	0f b6       	in	r0, 0x3f	; 63
    6454:	f8 94       	cli
    6456:	de bf       	out	0x3e, r29	; 62
    6458:	0f be       	out	0x3f, r0	; 63
    645a:	cd bf       	out	0x3d, r28	; 61
    645c:	df 91       	pop	r29
    645e:	cf 91       	pop	r28
    6460:	08 95       	ret

00006462 <multisynth_calc>:
    6462:	0f 93       	push	r16
#ifdef DEBUGGING_ONLY
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4, uint32_t *div)
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
    6464:	1f 93       	push	r17
    6466:	cf 93       	push	r28
    6468:	df 93       	push	r29
    646a:	cd b7       	in	r28, 0x3d	; 61
    646c:	de b7       	in	r29, 0x3e	; 62
    646e:	69 97       	sbiw	r28, 0x19	; 25
    6470:	0f b6       	in	r0, 0x3f	; 63
    6472:	f8 94       	cli
    6474:	de bf       	out	0x3e, r29	; 62
    6476:	0f be       	out	0x3f, r0	; 63
    6478:	cd bf       	out	0x3d, r28	; 61
    647a:	68 8b       	std	Y+16, r22	; 0x10
    647c:	79 8b       	std	Y+17, r23	; 0x11
    647e:	8a 8b       	std	Y+18, r24	; 0x12
    6480:	9b 8b       	std	Y+19, r25	; 0x13
    6482:	5d 8b       	std	Y+21, r21	; 0x15
    6484:	4c 8b       	std	Y+20, r20	; 0x14
    6486:	3f 8b       	std	Y+23, r19	; 0x17
    6488:	2e 8b       	std	Y+22, r18	; 0x16
    648a:	19 8f       	std	Y+25, r17	; 0x19
    648c:	08 8f       	std	Y+24, r16	; 0x18
    648e:	19 82       	std	Y+1, r1	; 0x01
		uint32_t a = 0;
    6490:	1a 82       	std	Y+2, r1	; 0x02
    6492:	1b 82       	std	Y+3, r1	; 0x03
    6494:	1c 82       	std	Y+4, r1	; 0x04
    6496:	1d 82       	std	Y+5, r1	; 0x05
		Frequency_Hz freq_VCO = 0;
    6498:	1e 82       	std	Y+6, r1	; 0x06
    649a:	1f 82       	std	Y+7, r1	; 0x07
    649c:	18 86       	std	Y+8, r1	; 0x08

		*int_mode = TRUE;   /* assumed */
    649e:	8e 89       	ldd	r24, Y+22	; 0x16
    64a0:	9f 89       	ldd	r25, Y+23	; 0x17
    64a2:	21 e0       	ldi	r18, 0x01	; 1
    64a4:	fc 01       	movw	r30, r24
    64a6:	20 83       	st	Z, r18
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
    64a8:	88 89       	ldd	r24, Y+16	; 0x10
    64aa:	99 89       	ldd	r25, Y+17	; 0x11
    64ac:	aa 89       	ldd	r26, Y+18	; 0x12
    64ae:	bb 89       	ldd	r27, Y+19	; 0x13
    64b0:	80 38       	cpi	r24, 0x80	; 128
    64b2:	91 4d       	sbci	r25, 0xD1	; 209
    64b4:	a0 4f       	sbci	r26, 0xF0	; 240
    64b6:	b8 40       	sbci	r27, 0x08	; 8
    64b8:	d0 f0       	brcs	.+52     	; 0x64ee <multisynth_calc+0x8c>
		{
			a = 4;
    64ba:	84 e0       	ldi	r24, 0x04	; 4
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	a0 e0       	ldi	r26, 0x00	; 0
    64c0:	b0 e0       	ldi	r27, 0x00	; 0
    64c2:	89 83       	std	Y+1, r24	; 0x01
    64c4:	9a 83       	std	Y+2, r25	; 0x02
    64c6:	ab 83       	std	Y+3, r26	; 0x03
    64c8:	bc 83       	std	Y+4, r27	; 0x04
			freq_VCO = a * freq_Fout;
    64ca:	29 81       	ldd	r18, Y+1	; 0x01
    64cc:	3a 81       	ldd	r19, Y+2	; 0x02
    64ce:	4b 81       	ldd	r20, Y+3	; 0x03
    64d0:	5c 81       	ldd	r21, Y+4	; 0x04
    64d2:	88 89       	ldd	r24, Y+16	; 0x10
    64d4:	99 89       	ldd	r25, Y+17	; 0x11
    64d6:	aa 89       	ldd	r26, Y+18	; 0x12
    64d8:	bb 89       	ldd	r27, Y+19	; 0x13
    64da:	bc 01       	movw	r22, r24
    64dc:	cd 01       	movw	r24, r26
    64de:	c1 d4       	rcall	.+2434   	; 0x6e62 <__mulsi3>
    64e0:	dc 01       	movw	r26, r24
    64e2:	cb 01       	movw	r24, r22
    64e4:	8d 83       	std	Y+5, r24	; 0x05
    64e6:	9e 83       	std	Y+6, r25	; 0x06
    64e8:	af 83       	std	Y+7, r26	; 0x07
    64ea:	b8 87       	std	Y+8, r27	; 0x08
    64ec:	6a c0       	rjmp	.+212    	; 0x65c2 <multisynth_calc+0x160>
		}
		else
		{
			uint32_t temp;
			uint8_t done = FALSE;
    64ee:	19 86       	std	Y+9, r1	; 0x09
			uint8_t success = FALSE;
    64f0:	1a 86       	std	Y+10, r1	; 0x0a
			uint8_t count = 0;
    64f2:	1b 86       	std	Y+11, r1	; 0x0b

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
    64f4:	4e c0       	rjmp	.+156    	; 0x6592 <multisynth_calc+0x130>
			{
				temp = SI5351_PLL_VCO_MAX - (count * freq_Fout);    /* SI5351_PLL_VCO_MAX assumed even */
    64f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    64f8:	28 2f       	mov	r18, r24
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	40 e0       	ldi	r20, 0x00	; 0
    64fe:	50 e0       	ldi	r21, 0x00	; 0
    6500:	88 89       	ldd	r24, Y+16	; 0x10
    6502:	99 89       	ldd	r25, Y+17	; 0x11
    6504:	aa 89       	ldd	r26, Y+18	; 0x12
    6506:	bb 89       	ldd	r27, Y+19	; 0x13
    6508:	bc 01       	movw	r22, r24
    650a:	cd 01       	movw	r24, r26
    650c:	aa d4       	rcall	.+2388   	; 0x6e62 <__mulsi3>
    650e:	9b 01       	movw	r18, r22
    6510:	ac 01       	movw	r20, r24
    6512:	80 e0       	ldi	r24, 0x00	; 0
    6514:	99 ee       	ldi	r25, 0xE9	; 233
    6516:	a4 ea       	ldi	r26, 0xA4	; 164
    6518:	b5 e3       	ldi	r27, 0x35	; 53
    651a:	82 1b       	sub	r24, r18
    651c:	93 0b       	sbc	r25, r19
    651e:	a4 0b       	sbc	r26, r20
    6520:	b5 0b       	sbc	r27, r21
    6522:	8c 87       	std	Y+12, r24	; 0x0c
    6524:	9d 87       	std	Y+13, r25	; 0x0d
    6526:	ae 87       	std	Y+14, r26	; 0x0e
    6528:	bf 87       	std	Y+15, r27	; 0x0f
				count += 2;
    652a:	8b 85       	ldd	r24, Y+11	; 0x0b
    652c:	8e 5f       	subi	r24, 0xFE	; 254
    652e:	8b 87       	std	Y+11, r24	; 0x0b

				if(temp >= SI5351_PLL_VCO_MIN)
    6530:	8c 85       	ldd	r24, Y+12	; 0x0c
    6532:	9d 85       	ldd	r25, Y+13	; 0x0d
    6534:	ae 85       	ldd	r26, Y+14	; 0x0e
    6536:	bf 85       	ldd	r27, Y+15	; 0x0f
    6538:	81 15       	cp	r24, r1
    653a:	96 44       	sbci	r25, 0x46	; 70
    653c:	a3 4c       	sbci	r26, 0xC3	; 195
    653e:	b3 42       	sbci	r27, 0x23	; 35
    6540:	30 f1       	brcs	.+76     	; 0x658e <multisynth_calc+0x12c>
				{
					temp /= freq_Fout;
    6542:	8c 85       	ldd	r24, Y+12	; 0x0c
    6544:	9d 85       	ldd	r25, Y+13	; 0x0d
    6546:	ae 85       	ldd	r26, Y+14	; 0x0e
    6548:	bf 85       	ldd	r27, Y+15	; 0x0f
    654a:	28 89       	ldd	r18, Y+16	; 0x10
    654c:	39 89       	ldd	r19, Y+17	; 0x11
    654e:	4a 89       	ldd	r20, Y+18	; 0x12
    6550:	5b 89       	ldd	r21, Y+19	; 0x13
    6552:	bc 01       	movw	r22, r24
    6554:	cd 01       	movw	r24, r26
    6556:	bb d4       	rcall	.+2422   	; 0x6ece <__udivmodsi4>
    6558:	da 01       	movw	r26, r20
    655a:	c9 01       	movw	r24, r18
    655c:	8c 87       	std	Y+12, r24	; 0x0c
    655e:	9d 87       	std	Y+13, r25	; 0x0d
    6560:	ae 87       	std	Y+14, r26	; 0x0e
    6562:	bf 87       	std	Y+15, r27	; 0x0f
    6564:	8c 85       	ldd	r24, Y+12	; 0x0c

					if(temp >= 4)   /* accepts only even integers of 4 or greater */
    6566:	9d 85       	ldd	r25, Y+13	; 0x0d
    6568:	ae 85       	ldd	r26, Y+14	; 0x0e
    656a:	bf 85       	ldd	r27, Y+15	; 0x0f
    656c:	04 97       	sbiw	r24, 0x04	; 4
    656e:	a1 05       	cpc	r26, r1
    6570:	b1 05       	cpc	r27, r1
    6572:	78 f0       	brcs	.+30     	; 0x6592 <multisynth_calc+0x130>
					{
						done = TRUE;
    6574:	81 e0       	ldi	r24, 0x01	; 1
    6576:	89 87       	std	Y+9, r24	; 0x09
						success = TRUE;
    6578:	81 e0       	ldi	r24, 0x01	; 1
    657a:	8a 87       	std	Y+10, r24	; 0x0a
						a = temp;
    657c:	8c 85       	ldd	r24, Y+12	; 0x0c
    657e:	9d 85       	ldd	r25, Y+13	; 0x0d
    6580:	ae 85       	ldd	r26, Y+14	; 0x0e
    6582:	bf 85       	ldd	r27, Y+15	; 0x0f
    6584:	89 83       	std	Y+1, r24	; 0x01
    6586:	9a 83       	std	Y+2, r25	; 0x02
    6588:	ab 83       	std	Y+3, r26	; 0x03
    658a:	bc 83       	std	Y+4, r27	; 0x04
    658c:	02 c0       	rjmp	.+4      	; 0x6592 <multisynth_calc+0x130>
					}
				}
				else
				{
					done = TRUE;
    658e:	81 e0       	ldi	r24, 0x01	; 1
    6590:	89 87       	std	Y+9, r24	; 0x09
			uint8_t done = FALSE;
			uint8_t success = FALSE;
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
    6592:	89 85       	ldd	r24, Y+9	; 0x09
    6594:	88 23       	and	r24, r24
    6596:	09 f4       	brne	.+2      	; 0x659a <multisynth_calc+0x138>
    6598:	ae cf       	rjmp	.-164    	; 0x64f6 <multisynth_calc+0x94>
				{
					done = TRUE;
				}
			}

			if(success)
    659a:	8a 85       	ldd	r24, Y+10	; 0x0a
    659c:	88 23       	and	r24, r24
    659e:	89 f0       	breq	.+34     	; 0x65c2 <multisynth_calc+0x160>
			{
				freq_VCO = a * freq_Fout;
    65a0:	29 81       	ldd	r18, Y+1	; 0x01
    65a2:	3a 81       	ldd	r19, Y+2	; 0x02
    65a4:	4b 81       	ldd	r20, Y+3	; 0x03
    65a6:	5c 81       	ldd	r21, Y+4	; 0x04
    65a8:	88 89       	ldd	r24, Y+16	; 0x10
    65aa:	99 89       	ldd	r25, Y+17	; 0x11
    65ac:	aa 89       	ldd	r26, Y+18	; 0x12
    65ae:	bb 89       	ldd	r27, Y+19	; 0x13
    65b0:	bc 01       	movw	r22, r24
    65b2:	cd 01       	movw	r24, r26
    65b4:	56 d4       	rcall	.+2220   	; 0x6e62 <__mulsi3>
    65b6:	dc 01       	movw	r26, r24
    65b8:	cb 01       	movw	r24, r22
    65ba:	8d 83       	std	Y+5, r24	; 0x05
    65bc:	9e 83       	std	Y+6, r25	; 0x06
    65be:	af 83       	std	Y+7, r26	; 0x07
    65c0:	b8 87       	std	Y+8, r27	; 0x08
    65c2:	21 e0       	ldi	r18, 0x01	; 1
			}
		}

		*divBy4 = (a == 4);
    65c4:	89 81       	ldd	r24, Y+1	; 0x01
    65c6:	9a 81       	ldd	r25, Y+2	; 0x02
    65c8:	ab 81       	ldd	r26, Y+3	; 0x03
    65ca:	bc 81       	ldd	r27, Y+4	; 0x04
    65cc:	04 97       	sbiw	r24, 0x04	; 4
    65ce:	a1 05       	cpc	r26, r1
    65d0:	b1 05       	cpc	r27, r1
    65d2:	09 f0       	breq	.+2      	; 0x65d6 <multisynth_calc+0x174>
    65d4:	20 e0       	ldi	r18, 0x00	; 0
    65d6:	88 8d       	ldd	r24, Y+24	; 0x18
    65d8:	99 8d       	ldd	r25, Y+25	; 0x19
    65da:	fc 01       	movw	r30, r24
    65dc:	20 83       	st	Z, r18
    65de:	89 81       	ldd	r24, Y+1	; 0x01
		reg->ms.p1 = (uint32_t)(a << 7) - 512;  /* 128 * a + floor((128 * b) / c) - 512 */
    65e0:	9a 81       	ldd	r25, Y+2	; 0x02
    65e2:	ab 81       	ldd	r26, Y+3	; 0x03
    65e4:	bc 81       	ldd	r27, Y+4	; 0x04
    65e6:	88 0f       	add	r24, r24
    65e8:	99 1f       	adc	r25, r25
    65ea:	aa 1f       	adc	r26, r26
    65ec:	bb 1f       	adc	r27, r27
    65ee:	88 0f       	add	r24, r24
    65f0:	99 1f       	adc	r25, r25
    65f2:	aa 1f       	adc	r26, r26
    65f4:	bb 1f       	adc	r27, r27
    65f6:	88 0f       	add	r24, r24
    65f8:	99 1f       	adc	r25, r25
    65fa:	aa 1f       	adc	r26, r26
    65fc:	bb 1f       	adc	r27, r27
    65fe:	88 0f       	add	r24, r24
    6600:	99 1f       	adc	r25, r25
    6602:	aa 1f       	adc	r26, r26
    6604:	bb 1f       	adc	r27, r27
    6606:	88 0f       	add	r24, r24
    6608:	99 1f       	adc	r25, r25
    660a:	aa 1f       	adc	r26, r26
    660c:	bb 1f       	adc	r27, r27
    660e:	88 0f       	add	r24, r24
    6610:	99 1f       	adc	r25, r25
    6612:	aa 1f       	adc	r26, r26
    6614:	bb 1f       	adc	r27, r27
    6616:	88 0f       	add	r24, r24
    6618:	99 1f       	adc	r25, r25
    661a:	aa 1f       	adc	r26, r26
    661c:	bb 1f       	adc	r27, r27
    661e:	92 50       	subi	r25, 0x02	; 2
    6620:	a1 09       	sbc	r26, r1
    6622:	b1 09       	sbc	r27, r1
    6624:	2c 89       	ldd	r18, Y+20	; 0x14
    6626:	3d 89       	ldd	r19, Y+21	; 0x15
    6628:	f9 01       	movw	r30, r18
    662a:	80 83       	st	Z, r24
    662c:	91 83       	std	Z+1, r25	; 0x01
    662e:	a2 83       	std	Z+2, r26	; 0x02
    6630:	b3 83       	std	Z+3, r27	; 0x03
    6632:	8c 89       	ldd	r24, Y+20	; 0x14
		reg->ms.p2 = 0;                         /* 128 * b - c * floor((128 * b) / c) */
    6634:	9d 89       	ldd	r25, Y+21	; 0x15
    6636:	fc 01       	movw	r30, r24
    6638:	14 82       	std	Z+4, r1	; 0x04
    663a:	15 82       	std	Z+5, r1	; 0x05
    663c:	16 82       	std	Z+6, r1	; 0x06
    663e:	17 82       	std	Z+7, r1	; 0x07
    6640:	2c 89       	ldd	r18, Y+20	; 0x14
		reg->ms.p3 = 1;
    6642:	3d 89       	ldd	r19, Y+21	; 0x15
    6644:	81 e0       	ldi	r24, 0x01	; 1
    6646:	90 e0       	ldi	r25, 0x00	; 0
    6648:	a0 e0       	ldi	r26, 0x00	; 0
    664a:	b0 e0       	ldi	r27, 0x00	; 0
    664c:	f9 01       	movw	r30, r18
    664e:	80 87       	std	Z+8, r24	; 0x08
    6650:	91 87       	std	Z+9, r25	; 0x09
    6652:	a2 87       	std	Z+10, r26	; 0x0a
    6654:	b3 87       	std	Z+11, r27	; 0x0b
    6656:	8d 81       	ldd	r24, Y+5	; 0x05

#ifdef DEBUGGING_ONLY
			*div = a;
#endif

		return(freq_VCO);
    6658:	9e 81       	ldd	r25, Y+6	; 0x06
    665a:	af 81       	ldd	r26, Y+7	; 0x07
    665c:	b8 85       	ldd	r27, Y+8	; 0x08
    665e:	bc 01       	movw	r22, r24
	}
    6660:	cd 01       	movw	r24, r26
    6662:	69 96       	adiw	r28, 0x19	; 25
    6664:	0f b6       	in	r0, 0x3f	; 63
    6666:	f8 94       	cli
    6668:	de bf       	out	0x3e, r29	; 62
    666a:	0f be       	out	0x3f, r0	; 63
    666c:	cd bf       	out	0x3d, r28	; 61
    666e:	df 91       	pop	r29
    6670:	cf 91       	pop	r28
    6672:	1f 91       	pop	r17
    6674:	0f 91       	pop	r16
    6676:	08 95       	ret

00006678 <si5351_set_vcoB_freq>:
 *
 * Currently this only works for PLLB.
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
    6678:	cf 93       	push	r28
    667a:	df 93       	push	r29
    667c:	00 d0       	rcall	.+0      	; 0x667e <si5351_set_vcoB_freq+0x6>
    667e:	00 d0       	rcall	.+0      	; 0x6680 <si5351_set_vcoB_freq+0x8>
    6680:	cd b7       	in	r28, 0x3d	; 61
    6682:	de b7       	in	r29, 0x3e	; 62
    6684:	69 83       	std	Y+1, r22	; 0x01
    6686:	7a 83       	std	Y+2, r23	; 0x02
    6688:	8b 83       	std	Y+3, r24	; 0x03
    668a:	9c 83       	std	Y+4, r25	; 0x04
		freqVCOB = freq_VCO;
    668c:	89 81       	ldd	r24, Y+1	; 0x01
    668e:	9a 81       	ldd	r25, Y+2	; 0x02
    6690:	ab 81       	ldd	r26, Y+3	; 0x03
    6692:	bc 81       	ldd	r27, Y+4	; 0x04
    6694:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <freqVCOB>
    6698:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <freqVCOB+0x1>
    669c:	a0 93 4c 07 	sts	0x074C, r26	; 0x80074c <freqVCOB+0x2>
    66a0:	b0 93 4d 07 	sts	0x074D, r27	; 0x80074d <freqVCOB+0x3>
		set_pll(freq_VCO, SI5351_PLLB);
    66a4:	89 81       	ldd	r24, Y+1	; 0x01
    66a6:	9a 81       	ldd	r25, Y+2	; 0x02
    66a8:	ab 81       	ldd	r26, Y+3	; 0x03
    66aa:	bc 81       	ldd	r27, Y+4	; 0x04
    66ac:	42 e0       	ldi	r20, 0x02	; 2
    66ae:	bc 01       	movw	r22, r24
    66b0:	cd 01       	movw	r24, r26
    66b2:	35 dc       	rcall	.-1942   	; 0x5f1e <set_pll>
    66b4:	00 00       	nop
		return;
    66b6:	0f 90       	pop	r0
	}
    66b8:	0f 90       	pop	r0
    66ba:	0f 90       	pop	r0
    66bc:	0f 90       	pop	r0
    66be:	df 91       	pop	r29
    66c0:	cf 91       	pop	r28
    66c2:	08 95       	ret

000066c4 <multisynth_estimate>:
 * Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
 *
 * Note: do not call this function with global value freqVCOB == zero
 */
	Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
	{
    66c4:	0f 93       	push	r16
    66c6:	1f 93       	push	r17
    66c8:	cf 93       	push	r28
    66ca:	df 93       	push	r29
    66cc:	cd b7       	in	r28, 0x3d	; 61
    66ce:	de b7       	in	r29, 0x3e	; 62
    66d0:	6e 97       	sbiw	r28, 0x1e	; 30
    66d2:	0f b6       	in	r0, 0x3f	; 63
    66d4:	f8 94       	cli
    66d6:	de bf       	out	0x3e, r29	; 62
    66d8:	0f be       	out	0x3f, r0	; 63
    66da:	cd bf       	out	0x3d, r28	; 61
    66dc:	6d 8b       	std	Y+21, r22	; 0x15
    66de:	7e 8b       	std	Y+22, r23	; 0x16
    66e0:	8f 8b       	std	Y+23, r24	; 0x17
    66e2:	98 8f       	std	Y+24, r25	; 0x18
    66e4:	5a 8f       	std	Y+26, r21	; 0x1a
    66e6:	49 8f       	std	Y+25, r20	; 0x19
    66e8:	3c 8f       	std	Y+28, r19	; 0x1c
    66ea:	2b 8f       	std	Y+27, r18	; 0x1b
    66ec:	1e 8f       	std	Y+30, r17	; 0x1e
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* Determine integer part of feedback equation */
		a = freqVCOB / freq_Fout;
    66ee:	0d 8f       	std	Y+29, r16	; 0x1d
    66f0:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <freqVCOB>
    66f4:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <freqVCOB+0x1>
    66f8:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <freqVCOB+0x2>
    66fc:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <freqVCOB+0x3>
    6700:	2d 89       	ldd	r18, Y+21	; 0x15
    6702:	3e 89       	ldd	r19, Y+22	; 0x16
    6704:	4f 89       	ldd	r20, Y+23	; 0x17
    6706:	58 8d       	ldd	r21, Y+24	; 0x18
    6708:	bc 01       	movw	r22, r24
    670a:	cd 01       	movw	r24, r26
    670c:	e0 d3       	rcall	.+1984   	; 0x6ece <__udivmodsi4>
    670e:	da 01       	movw	r26, r20
    6710:	c9 01       	movw	r24, r18
    6712:	89 83       	std	Y+1, r24	; 0x01
    6714:	9a 83       	std	Y+2, r25	; 0x02
    6716:	ab 83       	std	Y+3, r26	; 0x03
		b = freqVCOB % freq_Fout;
    6718:	bc 83       	std	Y+4, r27	; 0x04
    671a:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <freqVCOB>
    671e:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <freqVCOB+0x1>
    6722:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <freqVCOB+0x2>
    6726:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <freqVCOB+0x3>
    672a:	2d 89       	ldd	r18, Y+21	; 0x15
    672c:	3e 89       	ldd	r19, Y+22	; 0x16
    672e:	4f 89       	ldd	r20, Y+23	; 0x17
    6730:	58 8d       	ldd	r21, Y+24	; 0x18
    6732:	bc 01       	movw	r22, r24
    6734:	cd 01       	movw	r24, r26
    6736:	cb d3       	rcall	.+1942   	; 0x6ece <__udivmodsi4>
    6738:	dc 01       	movw	r26, r24
    673a:	cb 01       	movw	r24, r22
    673c:	8d 87       	std	Y+13, r24	; 0x0d
    673e:	9e 87       	std	Y+14, r25	; 0x0e
    6740:	af 87       	std	Y+15, r26	; 0x0f
		c = freq_Fout;
    6742:	b8 8b       	std	Y+16, r27	; 0x10
    6744:	8d 89       	ldd	r24, Y+21	; 0x15
    6746:	9e 89       	ldd	r25, Y+22	; 0x16
    6748:	af 89       	ldd	r26, Y+23	; 0x17
    674a:	b8 8d       	ldd	r27, Y+24	; 0x18
    674c:	89 8b       	std	Y+17, r24	; 0x11
    674e:	9a 8b       	std	Y+18, r25	; 0x12
    6750:	ab 8b       	std	Y+19, r26	; 0x13
		reduce_by_gcd(&b, &c);  /* prevents overflow conditions and makes results agree with ClockBuilder */
    6752:	bc 8b       	std	Y+20, r27	; 0x14
    6754:	9e 01       	movw	r18, r28
    6756:	2f 5e       	subi	r18, 0xEF	; 239
    6758:	3f 4f       	sbci	r19, 0xFF	; 255
    675a:	ce 01       	movw	r24, r28
    675c:	0d 96       	adiw	r24, 0x0d	; 13
    675e:	b9 01       	movw	r22, r18

		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
    6760:	cb dd       	rcall	.-1130   	; 0x62f8 <reduce_by_gcd>
    6762:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <freqVCOB>
    6766:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <freqVCOB+0x1>
    676a:	a0 91 4c 07 	lds	r26, 0x074C	; 0x80074c <freqVCOB+0x2>
    676e:	b0 91 4d 07 	lds	r27, 0x074D	; 0x80074d <freqVCOB+0x3>
    6772:	8d 8b       	std	Y+21, r24	; 0x15
    6774:	9e 8b       	std	Y+22, r25	; 0x16
    6776:	af 8b       	std	Y+23, r26	; 0x17
		freq_Fout /= (a * c + b);
    6778:	b8 8f       	std	Y+24, r27	; 0x18
    677a:	29 89       	ldd	r18, Y+17	; 0x11
    677c:	3a 89       	ldd	r19, Y+18	; 0x12
    677e:	4b 89       	ldd	r20, Y+19	; 0x13
    6780:	5c 89       	ldd	r21, Y+20	; 0x14
    6782:	89 81       	ldd	r24, Y+1	; 0x01
    6784:	9a 81       	ldd	r25, Y+2	; 0x02
    6786:	ab 81       	ldd	r26, Y+3	; 0x03
    6788:	bc 81       	ldd	r27, Y+4	; 0x04
    678a:	bc 01       	movw	r22, r24
    678c:	cd 01       	movw	r24, r26
    678e:	69 d3       	rcall	.+1746   	; 0x6e62 <__mulsi3>
    6790:	9b 01       	movw	r18, r22
    6792:	ac 01       	movw	r20, r24
    6794:	8d 85       	ldd	r24, Y+13	; 0x0d
    6796:	9e 85       	ldd	r25, Y+14	; 0x0e
    6798:	af 85       	ldd	r26, Y+15	; 0x0f
    679a:	b8 89       	ldd	r27, Y+16	; 0x10
    679c:	28 0f       	add	r18, r24
    679e:	39 1f       	adc	r19, r25
    67a0:	4a 1f       	adc	r20, r26
    67a2:	5b 1f       	adc	r21, r27
    67a4:	8d 89       	ldd	r24, Y+21	; 0x15
    67a6:	9e 89       	ldd	r25, Y+22	; 0x16
    67a8:	af 89       	ldd	r26, Y+23	; 0x17
    67aa:	b8 8d       	ldd	r27, Y+24	; 0x18
    67ac:	bc 01       	movw	r22, r24
    67ae:	cd 01       	movw	r24, r26
    67b0:	8e d3       	rcall	.+1820   	; 0x6ece <__udivmodsi4>
    67b2:	da 01       	movw	r26, r20
    67b4:	c9 01       	movw	r24, r18
    67b6:	8d 8b       	std	Y+21, r24	; 0x15
    67b8:	9e 8b       	std	Y+22, r25	; 0x16
    67ba:	af 8b       	std	Y+23, r26	; 0x17
    67bc:	b8 8f       	std	Y+24, r27	; 0x18
		freq_Fout *= c;
    67be:	89 89       	ldd	r24, Y+17	; 0x11
    67c0:	9a 89       	ldd	r25, Y+18	; 0x12
    67c2:	ab 89       	ldd	r26, Y+19	; 0x13
    67c4:	bc 89       	ldd	r27, Y+20	; 0x14
    67c6:	2d 89       	ldd	r18, Y+21	; 0x15
    67c8:	3e 89       	ldd	r19, Y+22	; 0x16
    67ca:	4f 89       	ldd	r20, Y+23	; 0x17
    67cc:	58 8d       	ldd	r21, Y+24	; 0x18
    67ce:	bc 01       	movw	r22, r24
    67d0:	cd 01       	movw	r24, r26
    67d2:	47 d3       	rcall	.+1678   	; 0x6e62 <__mulsi3>
    67d4:	dc 01       	movw	r26, r24
    67d6:	cb 01       	movw	r24, r22
    67d8:	8d 8b       	std	Y+21, r24	; 0x15
    67da:	9e 8b       	std	Y+22, r25	; 0x16
    67dc:	af 8b       	std	Y+23, r26	; 0x17
    67de:	b8 8f       	std	Y+24, r27	; 0x18
    67e0:	8d 85       	ldd	r24, Y+13	; 0x0d

		*int_mode = (b == 0) && !(a % 2);
    67e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    67e4:	af 85       	ldd	r26, Y+15	; 0x0f
    67e6:	b8 89       	ldd	r27, Y+16	; 0x10
    67e8:	89 2b       	or	r24, r25
    67ea:	8a 2b       	or	r24, r26
    67ec:	8b 2b       	or	r24, r27
    67ee:	79 f4       	brne	.+30     	; 0x680e <multisynth_estimate+0x14a>
    67f0:	89 81       	ldd	r24, Y+1	; 0x01
    67f2:	9a 81       	ldd	r25, Y+2	; 0x02
    67f4:	ab 81       	ldd	r26, Y+3	; 0x03
    67f6:	bc 81       	ldd	r27, Y+4	; 0x04
    67f8:	81 70       	andi	r24, 0x01	; 1
    67fa:	99 27       	eor	r25, r25
    67fc:	aa 27       	eor	r26, r26
    67fe:	bb 27       	eor	r27, r27
    6800:	89 2b       	or	r24, r25
    6802:	8a 2b       	or	r24, r26
    6804:	8b 2b       	or	r24, r27
    6806:	19 f4       	brne	.+6      	; 0x680e <multisynth_estimate+0x14a>
    6808:	81 e0       	ldi	r24, 0x01	; 1
    680a:	90 e0       	ldi	r25, 0x00	; 0
    680c:	02 c0       	rjmp	.+4      	; 0x6812 <multisynth_estimate+0x14e>
    680e:	80 e0       	ldi	r24, 0x00	; 0
    6810:	90 e0       	ldi	r25, 0x00	; 0
    6812:	28 2f       	mov	r18, r24
    6814:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6816:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6818:	fc 01       	movw	r30, r24
    681a:	20 83       	st	Z, r18
    681c:	89 81       	ldd	r24, Y+1	; 0x01
		*divBy4 = (a == 4) && *int_mode;
    681e:	9a 81       	ldd	r25, Y+2	; 0x02
    6820:	ab 81       	ldd	r26, Y+3	; 0x03
    6822:	bc 81       	ldd	r27, Y+4	; 0x04
    6824:	04 97       	sbiw	r24, 0x04	; 4
    6826:	a1 05       	cpc	r26, r1
    6828:	b1 05       	cpc	r27, r1
    682a:	49 f4       	brne	.+18     	; 0x683e <multisynth_estimate+0x17a>
    682c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    682e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6830:	fc 01       	movw	r30, r24
    6832:	80 81       	ld	r24, Z
    6834:	88 23       	and	r24, r24
    6836:	19 f0       	breq	.+6      	; 0x683e <multisynth_estimate+0x17a>
    6838:	81 e0       	ldi	r24, 0x01	; 1
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	02 c0       	rjmp	.+4      	; 0x6842 <multisynth_estimate+0x17e>
    683e:	80 e0       	ldi	r24, 0x00	; 0
    6840:	90 e0       	ldi	r25, 0x00	; 0
    6842:	28 2f       	mov	r18, r24
    6844:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6846:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6848:	fc 01       	movw	r30, r24
    684a:	20 83       	st	Z, r18
    684c:	8d 8d       	ldd	r24, Y+29	; 0x1d

		/* Calculate parameters */
		if(*divBy4)
    684e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6850:	fc 01       	movw	r30, r24
    6852:	80 81       	ld	r24, Z
    6854:	88 23       	and	r24, r24
    6856:	d1 f0       	breq	.+52     	; 0x688c <multisynth_estimate+0x1c8>
    6858:	89 8d       	ldd	r24, Y+25	; 0x19
		{
			reg->ms.p1 = 0;
    685a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    685c:	fc 01       	movw	r30, r24
    685e:	10 82       	st	Z, r1
    6860:	11 82       	std	Z+1, r1	; 0x01
    6862:	12 82       	std	Z+2, r1	; 0x02
    6864:	13 82       	std	Z+3, r1	; 0x03
    6866:	89 8d       	ldd	r24, Y+25	; 0x19
			reg->ms.p2 = 0;
    6868:	9a 8d       	ldd	r25, Y+26	; 0x1a
    686a:	fc 01       	movw	r30, r24
    686c:	14 82       	std	Z+4, r1	; 0x04
    686e:	15 82       	std	Z+5, r1	; 0x05
    6870:	16 82       	std	Z+6, r1	; 0x06
    6872:	17 82       	std	Z+7, r1	; 0x07
    6874:	29 8d       	ldd	r18, Y+25	; 0x19
			reg->ms.p3 = 1;
    6876:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6878:	81 e0       	ldi	r24, 0x01	; 1
    687a:	90 e0       	ldi	r25, 0x00	; 0
    687c:	a0 e0       	ldi	r26, 0x00	; 0
    687e:	b0 e0       	ldi	r27, 0x00	; 0
    6880:	f9 01       	movw	r30, r18
    6882:	80 87       	std	Z+8, r24	; 0x08
    6884:	91 87       	std	Z+9, r25	; 0x09
    6886:	a2 87       	std	Z+10, r26	; 0x0a
    6888:	b3 87       	std	Z+11, r27	; 0x0b
    688a:	90 c0       	rjmp	.+288    	; 0x69ac <multisynth_estimate+0x2e8>
    688c:	8d 85       	ldd	r24, Y+13	; 0x0d
		}
		else
		{
			uint32_t bx128 = b << 7;
    688e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6890:	af 85       	ldd	r26, Y+15	; 0x0f
    6892:	b8 89       	ldd	r27, Y+16	; 0x10
    6894:	88 0f       	add	r24, r24
    6896:	99 1f       	adc	r25, r25
    6898:	aa 1f       	adc	r26, r26
    689a:	bb 1f       	adc	r27, r27
    689c:	88 0f       	add	r24, r24
    689e:	99 1f       	adc	r25, r25
    68a0:	aa 1f       	adc	r26, r26
    68a2:	bb 1f       	adc	r27, r27
    68a4:	88 0f       	add	r24, r24
    68a6:	99 1f       	adc	r25, r25
    68a8:	aa 1f       	adc	r26, r26
    68aa:	bb 1f       	adc	r27, r27
    68ac:	88 0f       	add	r24, r24
    68ae:	99 1f       	adc	r25, r25
    68b0:	aa 1f       	adc	r26, r26
    68b2:	bb 1f       	adc	r27, r27
    68b4:	88 0f       	add	r24, r24
    68b6:	99 1f       	adc	r25, r25
    68b8:	aa 1f       	adc	r26, r26
    68ba:	bb 1f       	adc	r27, r27
    68bc:	88 0f       	add	r24, r24
    68be:	99 1f       	adc	r25, r25
    68c0:	aa 1f       	adc	r26, r26
    68c2:	bb 1f       	adc	r27, r27
    68c4:	88 0f       	add	r24, r24
    68c6:	99 1f       	adc	r25, r25
    68c8:	aa 1f       	adc	r26, r26
    68ca:	bb 1f       	adc	r27, r27
    68cc:	8d 83       	std	Y+5, r24	; 0x05
    68ce:	9e 83       	std	Y+6, r25	; 0x06
    68d0:	af 83       	std	Y+7, r26	; 0x07
    68d2:	b8 87       	std	Y+8, r27	; 0x08
			uint32_t bx128overc = bx128 / c;
    68d4:	29 89       	ldd	r18, Y+17	; 0x11
    68d6:	3a 89       	ldd	r19, Y+18	; 0x12
    68d8:	4b 89       	ldd	r20, Y+19	; 0x13
    68da:	5c 89       	ldd	r21, Y+20	; 0x14
    68dc:	8d 81       	ldd	r24, Y+5	; 0x05
    68de:	9e 81       	ldd	r25, Y+6	; 0x06
    68e0:	af 81       	ldd	r26, Y+7	; 0x07
    68e2:	b8 85       	ldd	r27, Y+8	; 0x08
    68e4:	bc 01       	movw	r22, r24
    68e6:	cd 01       	movw	r24, r26
    68e8:	f2 d2       	rcall	.+1508   	; 0x6ece <__udivmodsi4>
    68ea:	da 01       	movw	r26, r20
    68ec:	c9 01       	movw	r24, r18
    68ee:	89 87       	std	Y+9, r24	; 0x09
    68f0:	9a 87       	std	Y+10, r25	; 0x0a
    68f2:	ab 87       	std	Y+11, r26	; 0x0b
    68f4:	bc 87       	std	Y+12, r27	; 0x0c
    68f6:	89 81       	ldd	r24, Y+1	; 0x01
			reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    68f8:	9a 81       	ldd	r25, Y+2	; 0x02
    68fa:	ab 81       	ldd	r26, Y+3	; 0x03
    68fc:	bc 81       	ldd	r27, Y+4	; 0x04
    68fe:	88 0f       	add	r24, r24
    6900:	99 1f       	adc	r25, r25
    6902:	aa 1f       	adc	r26, r26
    6904:	bb 1f       	adc	r27, r27
    6906:	88 0f       	add	r24, r24
    6908:	99 1f       	adc	r25, r25
    690a:	aa 1f       	adc	r26, r26
    690c:	bb 1f       	adc	r27, r27
    690e:	88 0f       	add	r24, r24
    6910:	99 1f       	adc	r25, r25
    6912:	aa 1f       	adc	r26, r26
    6914:	bb 1f       	adc	r27, r27
    6916:	88 0f       	add	r24, r24
    6918:	99 1f       	adc	r25, r25
    691a:	aa 1f       	adc	r26, r26
    691c:	bb 1f       	adc	r27, r27
    691e:	88 0f       	add	r24, r24
    6920:	99 1f       	adc	r25, r25
    6922:	aa 1f       	adc	r26, r26
    6924:	bb 1f       	adc	r27, r27
    6926:	88 0f       	add	r24, r24
    6928:	99 1f       	adc	r25, r25
    692a:	aa 1f       	adc	r26, r26
    692c:	bb 1f       	adc	r27, r27
    692e:	88 0f       	add	r24, r24
    6930:	99 1f       	adc	r25, r25
    6932:	aa 1f       	adc	r26, r26
    6934:	bb 1f       	adc	r27, r27
    6936:	9c 01       	movw	r18, r24
    6938:	ad 01       	movw	r20, r26
    693a:	89 85       	ldd	r24, Y+9	; 0x09
    693c:	9a 85       	ldd	r25, Y+10	; 0x0a
    693e:	ab 85       	ldd	r26, Y+11	; 0x0b
    6940:	bc 85       	ldd	r27, Y+12	; 0x0c
    6942:	82 0f       	add	r24, r18
    6944:	93 1f       	adc	r25, r19
    6946:	a4 1f       	adc	r26, r20
    6948:	b5 1f       	adc	r27, r21
    694a:	92 50       	subi	r25, 0x02	; 2
    694c:	a1 09       	sbc	r26, r1
    694e:	b1 09       	sbc	r27, r1
    6950:	29 8d       	ldd	r18, Y+25	; 0x19
    6952:	3a 8d       	ldd	r19, Y+26	; 0x1a
    6954:	f9 01       	movw	r30, r18
    6956:	80 83       	st	Z, r24
    6958:	91 83       	std	Z+1, r25	; 0x01
    695a:	a2 83       	std	Z+2, r26	; 0x02
    695c:	b3 83       	std	Z+3, r27	; 0x03
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    695e:	29 89       	ldd	r18, Y+17	; 0x11
    6960:	3a 89       	ldd	r19, Y+18	; 0x12
    6962:	4b 89       	ldd	r20, Y+19	; 0x13
    6964:	5c 89       	ldd	r21, Y+20	; 0x14
    6966:	89 85       	ldd	r24, Y+9	; 0x09
    6968:	9a 85       	ldd	r25, Y+10	; 0x0a
    696a:	ab 85       	ldd	r26, Y+11	; 0x0b
    696c:	bc 85       	ldd	r27, Y+12	; 0x0c
    696e:	bc 01       	movw	r22, r24
    6970:	cd 01       	movw	r24, r26
    6972:	77 d2       	rcall	.+1262   	; 0x6e62 <__mulsi3>
    6974:	9b 01       	movw	r18, r22
    6976:	ac 01       	movw	r20, r24
    6978:	8d 81       	ldd	r24, Y+5	; 0x05
    697a:	9e 81       	ldd	r25, Y+6	; 0x06
    697c:	af 81       	ldd	r26, Y+7	; 0x07
    697e:	b8 85       	ldd	r27, Y+8	; 0x08
    6980:	82 1b       	sub	r24, r18
    6982:	93 0b       	sbc	r25, r19
    6984:	a4 0b       	sbc	r26, r20
    6986:	b5 0b       	sbc	r27, r21
    6988:	29 8d       	ldd	r18, Y+25	; 0x19
    698a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    698c:	f9 01       	movw	r30, r18
    698e:	84 83       	std	Z+4, r24	; 0x04
    6990:	95 83       	std	Z+5, r25	; 0x05
    6992:	a6 83       	std	Z+6, r26	; 0x06
    6994:	b7 83       	std	Z+7, r27	; 0x07
    6996:	89 89       	ldd	r24, Y+17	; 0x11
			reg->ms.p3 = c;
    6998:	9a 89       	ldd	r25, Y+18	; 0x12
    699a:	ab 89       	ldd	r26, Y+19	; 0x13
    699c:	bc 89       	ldd	r27, Y+20	; 0x14
    699e:	29 8d       	ldd	r18, Y+25	; 0x19
    69a0:	3a 8d       	ldd	r19, Y+26	; 0x1a
    69a2:	f9 01       	movw	r30, r18
    69a4:	80 87       	std	Z+8, r24	; 0x08
    69a6:	91 87       	std	Z+9, r25	; 0x09
    69a8:	a2 87       	std	Z+10, r26	; 0x0a
    69aa:	b3 87       	std	Z+11, r27	; 0x0b
    69ac:	8d 89       	ldd	r24, Y+21	; 0x15
		}

		return(freq_Fout);
    69ae:	9e 89       	ldd	r25, Y+22	; 0x16
    69b0:	af 89       	ldd	r26, Y+23	; 0x17
    69b2:	b8 8d       	ldd	r27, Y+24	; 0x18
    69b4:	bc 01       	movw	r22, r24
	}
    69b6:	cd 01       	movw	r24, r26
    69b8:	6e 96       	adiw	r28, 0x1e	; 30
    69ba:	0f b6       	in	r0, 0x3f	; 63
    69bc:	f8 94       	cli
    69be:	de bf       	out	0x3e, r29	; 62
    69c0:	0f be       	out	0x3f, r0	; 63
    69c2:	cd bf       	out	0x3d, r28	; 61
    69c4:	df 91       	pop	r29
    69c6:	cf 91       	pop	r28
    69c8:	1f 91       	pop	r17
    69ca:	0f 91       	pop	r16
    69cc:	08 95       	ret

000069ce <si5351_write_bulk>:
    69ce:	cf 93       	push	r28


	BOOL si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data)
	{
    69d0:	df 93       	push	r29
    69d2:	00 d0       	rcall	.+0      	; 0x69d4 <si5351_write_bulk+0x6>
    69d4:	00 d0       	rcall	.+0      	; 0x69d6 <si5351_write_bulk+0x8>
    69d6:	cd b7       	in	r28, 0x3d	; 61
    69d8:	de b7       	in	r29, 0x3e	; 62
    69da:	89 83       	std	Y+1, r24	; 0x01
    69dc:	6a 83       	std	Y+2, r22	; 0x02
    69de:	5c 83       	std	Y+4, r21	; 0x04
    69e0:	4b 83       	std	Y+3, r20	; 0x03
    69e2:	8b 81       	ldd	r24, Y+3	; 0x03
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, data, bytes));
    69e4:	9c 81       	ldd	r25, Y+4	; 0x04
    69e6:	2a 81       	ldd	r18, Y+2	; 0x02
    69e8:	ac 01       	movw	r20, r24
    69ea:	69 81       	ldd	r22, Y+1	; 0x01
    69ec:	80 ec       	ldi	r24, 0xC0	; 192
    69ee:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <i2c_device_write>
    69f2:	0f 90       	pop	r0
	}
    69f4:	0f 90       	pop	r0
    69f6:	0f 90       	pop	r0
    69f8:	0f 90       	pop	r0
    69fa:	df 91       	pop	r29
    69fc:	cf 91       	pop	r28
    69fe:	08 95       	ret

00006a00 <si5351_write>:
    6a00:	cf 93       	push	r28

	BOOL si5351_write(uint8_t addr, uint8_t data)
	{
    6a02:	df 93       	push	r29
    6a04:	00 d0       	rcall	.+0      	; 0x6a06 <si5351_write+0x6>
    6a06:	cd b7       	in	r28, 0x3d	; 61
    6a08:	de b7       	in	r29, 0x3e	; 62
    6a0a:	89 83       	std	Y+1, r24	; 0x01
    6a0c:	6a 83       	std	Y+2, r22	; 0x02
    6a0e:	ce 01       	movw	r24, r28
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, &data, 1));
    6a10:	02 96       	adiw	r24, 0x02	; 2
    6a12:	21 e0       	ldi	r18, 0x01	; 1
    6a14:	ac 01       	movw	r20, r24
    6a16:	69 81       	ldd	r22, Y+1	; 0x01
    6a18:	80 ec       	ldi	r24, 0xC0	; 192
    6a1a:	0e 94 dc 2a 	call	0x55b8	; 0x55b8 <i2c_device_write>
	}
    6a1e:	0f 90       	pop	r0
    6a20:	0f 90       	pop	r0
    6a22:	df 91       	pop	r29
    6a24:	cf 91       	pop	r28
    6a26:	08 95       	ret

00006a28 <si5351_read>:

	BOOL si5351_read(uint8_t addr, uint8_t *data)
	{
    6a28:	cf 93       	push	r28
    6a2a:	df 93       	push	r29
    6a2c:	00 d0       	rcall	.+0      	; 0x6a2e <si5351_read+0x6>
    6a2e:	1f 92       	push	r1
    6a30:	cd b7       	in	r28, 0x3d	; 61
    6a32:	de b7       	in	r29, 0x3e	; 62
    6a34:	89 83       	std	Y+1, r24	; 0x01
    6a36:	7b 83       	std	Y+3, r23	; 0x03
    6a38:	6a 83       	std	Y+2, r22	; 0x02
		return(i2c_device_read(SI5351_I2C_SLAVE_ADDR, addr, data, 1));
    6a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    6a3e:	21 e0       	ldi	r18, 0x01	; 1
    6a40:	ac 01       	movw	r20, r24
    6a42:	69 81       	ldd	r22, Y+1	; 0x01
    6a44:	80 ec       	ldi	r24, 0xC0	; 192
    6a46:	0e 94 5a 2b 	call	0x56b4	; 0x56b4 <i2c_device_read>
	}
    6a4a:	0f 90       	pop	r0
    6a4c:	0f 90       	pop	r0
    6a4e:	0f 90       	pop	r0
    6a50:	df 91       	pop	r29
    6a52:	cf 91       	pop	r28
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	void set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    6a54:	08 95       	ret

00006a56 <set_multisynth_registers_source>:
    6a56:	cf 93       	push	r28
    6a58:	df 93       	push	r29
    6a5a:	00 d0       	rcall	.+0      	; 0x6a5c <set_multisynth_registers_source+0x6>
    6a5c:	00 d0       	rcall	.+0      	; 0x6a5e <set_multisynth_registers_source+0x8>
    6a5e:	cd b7       	in	r28, 0x3d	; 61
    6a60:	de b7       	in	r29, 0x3e	; 62
    6a62:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t reg_val;
		uint8_t addr = SI5351_CLK0_CTRL + (uint8_t)clk;
    6a64:	6c 83       	std	Y+4, r22	; 0x04
    6a66:	8b 81       	ldd	r24, Y+3	; 0x03
    6a68:	80 5f       	subi	r24, 0xF0	; 240

		if(si5351_read(addr, &reg_val))
    6a6a:	89 83       	std	Y+1, r24	; 0x01
    6a6c:	ce 01       	movw	r24, r28
    6a6e:	02 96       	adiw	r24, 0x02	; 2
    6a70:	bc 01       	movw	r22, r24
    6a72:	89 81       	ldd	r24, Y+1	; 0x01
    6a74:	d9 df       	rcall	.-78     	; 0x6a28 <si5351_read>
    6a76:	88 23       	and	r24, r24
    6a78:	91 f4       	brne	.+36     	; 0x6a9e <set_multisynth_registers_source+0x48>
		{
			return;
		}

		if(pll == SI5351_PLLA)
    6a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    6a7c:	81 30       	cpi	r24, 0x01	; 1
    6a7e:	21 f4       	brne	.+8      	; 0x6a88 <set_multisynth_registers_source+0x32>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    6a80:	8a 81       	ldd	r24, Y+2	; 0x02
    6a82:	8f 7d       	andi	r24, 0xDF	; 223
    6a84:	8a 83       	std	Y+2, r24	; 0x02
    6a86:	06 c0       	rjmp	.+12     	; 0x6a94 <set_multisynth_registers_source+0x3e>
		}
		else if(pll == SI5351_PLLB)
    6a88:	8c 81       	ldd	r24, Y+4	; 0x04
    6a8a:	82 30       	cpi	r24, 0x02	; 2
    6a8c:	19 f4       	brne	.+6      	; 0x6a94 <set_multisynth_registers_source+0x3e>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    6a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    6a90:	80 62       	ori	r24, 0x20	; 32
    6a92:	8a 83       	std	Y+2, r24	; 0x02
		}

		si5351_write(addr, reg_val);
    6a94:	8a 81       	ldd	r24, Y+2	; 0x02
    6a96:	68 2f       	mov	r22, r24
    6a98:	89 81       	ldd	r24, Y+1	; 0x01
    6a9a:	b2 df       	rcall	.-156    	; 0x6a00 <si5351_write>
    6a9c:	01 c0       	rjmp	.+2      	; 0x6aa0 <set_multisynth_registers_source+0x4a>
    6a9e:	00 00       	nop
		uint8_t reg_val;
		uint8_t addr = SI5351_CLK0_CTRL + (uint8_t)clk;

		if(si5351_read(addr, &reg_val))
		{
			return;
    6aa0:	0f 90       	pop	r0
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
		}

		si5351_write(addr, reg_val);
	}
    6aa2:	0f 90       	pop	r0
    6aa4:	0f 90       	pop	r0
    6aa6:	0f 90       	pop	r0
    6aa8:	df 91       	pop	r29
    6aaa:	cf 91       	pop	r28
    6aac:	08 95       	ret

00006aae <set_multisynth_registers>:
    6aae:	8f 92       	push	r8
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	void set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
	{
    6ab0:	af 92       	push	r10
    6ab2:	cf 92       	push	r12
    6ab4:	df 92       	push	r13
    6ab6:	ef 92       	push	r14
    6ab8:	ff 92       	push	r15
    6aba:	0f 93       	push	r16
    6abc:	1f 93       	push	r17
    6abe:	cf 93       	push	r28
    6ac0:	df 93       	push	r29
    6ac2:	cd b7       	in	r28, 0x3d	; 61
    6ac4:	de b7       	in	r29, 0x3e	; 62
    6ac6:	6b 97       	sbiw	r28, 0x1b	; 27
    6ac8:	0f b6       	in	r0, 0x3f	; 63
    6aca:	f8 94       	cli
    6acc:	de bf       	out	0x3e, r29	; 62
    6ace:	0f be       	out	0x3f, r0	; 63
    6ad0:	cd bf       	out	0x3d, r28	; 61
    6ad2:	8d 87       	std	Y+13, r24	; 0x0d
    6ad4:	ce 86       	std	Y+14, r12	; 0x0e
    6ad6:	df 86       	std	Y+15, r13	; 0x0f
    6ad8:	e8 8a       	std	Y+16, r14	; 0x10
    6ada:	f9 8a       	std	Y+17, r15	; 0x11
    6adc:	0a 8b       	std	Y+18, r16	; 0x12
    6ade:	1b 8b       	std	Y+19, r17	; 0x13
    6ae0:	2c 8b       	std	Y+20, r18	; 0x14
    6ae2:	3d 8b       	std	Y+21, r19	; 0x15
    6ae4:	4e 8b       	std	Y+22, r20	; 0x16
    6ae6:	5f 8b       	std	Y+23, r21	; 0x17
    6ae8:	68 8f       	std	Y+24, r22	; 0x18
    6aea:	79 8f       	std	Y+25, r23	; 0x19
    6aec:	aa 8e       	std	Y+26, r10	; 0x1a
    6aee:	8b 8e       	std	Y+27, r8	; 0x1b
		uint8_t params[10];
		uint8_t i = 0;
    6af0:	19 82       	std	Y+1, r1	; 0x01
		uint8_t reg_val;

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    6af2:	89 81       	ldd	r24, Y+1	; 0x01
    6af4:	91 e0       	ldi	r25, 0x01	; 1
    6af6:	98 0f       	add	r25, r24
    6af8:	99 83       	std	Y+1, r25	; 0x01
    6afa:	88 2f       	mov	r24, r24
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	4f 89       	ldd	r20, Y+23	; 0x17
    6b00:	9e 01       	movw	r18, r28
    6b02:	2e 5f       	subi	r18, 0xFE	; 254
    6b04:	3f 4f       	sbci	r19, 0xFF	; 255
    6b06:	82 0f       	add	r24, r18
    6b08:	93 1f       	adc	r25, r19
    6b0a:	fc 01       	movw	r30, r24
    6b0c:	40 83       	st	Z, r20
		params[i++] = ms_reg.reg.p3_0;
    6b0e:	89 81       	ldd	r24, Y+1	; 0x01
    6b10:	91 e0       	ldi	r25, 0x01	; 1
    6b12:	98 0f       	add	r25, r24
    6b14:	99 83       	std	Y+1, r25	; 0x01
    6b16:	88 2f       	mov	r24, r24
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	4e 89       	ldd	r20, Y+22	; 0x16
    6b1c:	9e 01       	movw	r18, r28
    6b1e:	2e 5f       	subi	r18, 0xFE	; 254
    6b20:	3f 4f       	sbci	r19, 0xFF	; 255
    6b22:	82 0f       	add	r24, r18
    6b24:	93 1f       	adc	r25, r19
    6b26:	fc 01       	movw	r30, r24
    6b28:	40 83       	st	Z, r20

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), &reg_val))
    6b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b2c:	88 0f       	add	r24, r24
    6b2e:	88 0f       	add	r24, r24
    6b30:	88 0f       	add	r24, r24
    6b32:	2c e2       	ldi	r18, 0x2C	; 44
    6b34:	28 0f       	add	r18, r24
    6b36:	ce 01       	movw	r24, r28
    6b38:	0c 96       	adiw	r24, 0x0c	; 12
    6b3a:	bc 01       	movw	r22, r24
    6b3c:	82 2f       	mov	r24, r18
    6b3e:	74 df       	rcall	.-280    	; 0x6a28 <si5351_read>
    6b40:	88 23       	and	r24, r24
    6b42:	09 f0       	breq	.+2      	; 0x6b46 <set_multisynth_registers+0x98>
    6b44:	9e c0       	rjmp	.+316    	; 0x6c82 <set_multisynth_registers+0x1d4>
    6b46:	8c 85       	ldd	r24, Y+12	; 0x0c
		{
			return;
		}

		reg_val &= 0xFC;    /*~(0x03); */
    6b48:	8c 7f       	andi	r24, 0xFC	; 252
    6b4a:	8c 87       	std	Y+12, r24	; 0x0c
    6b4c:	89 81       	ldd	r24, Y+1	; 0x01
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    6b4e:	91 e0       	ldi	r25, 0x01	; 1
    6b50:	98 0f       	add	r25, r24
    6b52:	99 83       	std	Y+1, r25	; 0x01
    6b54:	88 2f       	mov	r24, r24
    6b56:	90 e0       	ldi	r25, 0x00	; 0
    6b58:	28 89       	ldd	r18, Y+16	; 0x10
    6b5a:	23 70       	andi	r18, 0x03	; 3
    6b5c:	3c 85       	ldd	r19, Y+12	; 0x0c
    6b5e:	23 2b       	or	r18, r19
    6b60:	42 2f       	mov	r20, r18
    6b62:	9e 01       	movw	r18, r28
    6b64:	2e 5f       	subi	r18, 0xFE	; 254
    6b66:	3f 4f       	sbci	r19, 0xFF	; 255
    6b68:	82 0f       	add	r24, r18
    6b6a:	93 1f       	adc	r25, r19
    6b6c:	fc 01       	movw	r30, r24
    6b6e:	40 83       	st	Z, r20
    6b70:	89 81       	ldd	r24, Y+1	; 0x01

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    6b72:	91 e0       	ldi	r25, 0x01	; 1
    6b74:	98 0f       	add	r25, r24
    6b76:	99 83       	std	Y+1, r25	; 0x01
    6b78:	88 2f       	mov	r24, r24
    6b7a:	90 e0       	ldi	r25, 0x00	; 0
    6b7c:	4f 85       	ldd	r20, Y+15	; 0x0f
    6b7e:	9e 01       	movw	r18, r28
    6b80:	2e 5f       	subi	r18, 0xFE	; 254
    6b82:	3f 4f       	sbci	r19, 0xFF	; 255
    6b84:	82 0f       	add	r24, r18
    6b86:	93 1f       	adc	r25, r19
    6b88:	fc 01       	movw	r30, r24
    6b8a:	40 83       	st	Z, r20
    6b8c:	89 81       	ldd	r24, Y+1	; 0x01
		params[i++] = ms_reg.reg.p1_0;
    6b8e:	91 e0       	ldi	r25, 0x01	; 1
    6b90:	98 0f       	add	r25, r24
    6b92:	99 83       	std	Y+1, r25	; 0x01
    6b94:	88 2f       	mov	r24, r24
    6b96:	90 e0       	ldi	r25, 0x00	; 0
    6b98:	4e 85       	ldd	r20, Y+14	; 0x0e
    6b9a:	9e 01       	movw	r18, r28
    6b9c:	2e 5f       	subi	r18, 0xFE	; 254
    6b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6ba0:	82 0f       	add	r24, r18
    6ba2:	93 1f       	adc	r25, r19
    6ba4:	fc 01       	movw	r30, r24
    6ba6:	40 83       	st	Z, r20
    6ba8:	89 81       	ldd	r24, Y+1	; 0x01

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
    6baa:	88 2f       	mov	r24, r24
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	28 8d       	ldd	r18, Y+24	; 0x18
    6bb0:	42 2f       	mov	r20, r18
    6bb2:	42 95       	swap	r20
    6bb4:	40 7f       	andi	r20, 0xF0	; 240
    6bb6:	9e 01       	movw	r18, r28
    6bb8:	2e 5f       	subi	r18, 0xFE	; 254
    6bba:	3f 4f       	sbci	r19, 0xFF	; 255
    6bbc:	82 0f       	add	r24, r18
    6bbe:	93 1f       	adc	r25, r19
    6bc0:	fc 01       	movw	r30, r24
    6bc2:	40 83       	st	Z, r20
    6bc4:	29 81       	ldd	r18, Y+1	; 0x01
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    6bc6:	81 e0       	ldi	r24, 0x01	; 1
    6bc8:	82 0f       	add	r24, r18
    6bca:	89 83       	std	Y+1, r24	; 0x01
    6bcc:	82 2f       	mov	r24, r18
    6bce:	90 e0       	ldi	r25, 0x00	; 0
    6bd0:	22 2f       	mov	r18, r18
    6bd2:	30 e0       	ldi	r19, 0x00	; 0
    6bd4:	ae 01       	movw	r20, r28
    6bd6:	4e 5f       	subi	r20, 0xFE	; 254
    6bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    6bda:	24 0f       	add	r18, r20
    6bdc:	35 1f       	adc	r19, r21
    6bde:	f9 01       	movw	r30, r18
    6be0:	30 81       	ld	r19, Z
    6be2:	2c 89       	ldd	r18, Y+20	; 0x14
    6be4:	2f 70       	andi	r18, 0x0F	; 15
    6be6:	43 2f       	mov	r20, r19
    6be8:	42 0f       	add	r20, r18
    6bea:	9e 01       	movw	r18, r28
    6bec:	2e 5f       	subi	r18, 0xFE	; 254
    6bee:	3f 4f       	sbci	r19, 0xFF	; 255
    6bf0:	82 0f       	add	r24, r18
    6bf2:	93 1f       	adc	r25, r19
    6bf4:	fc 01       	movw	r30, r24
    6bf6:	40 83       	st	Z, r20

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    6bf8:	89 81       	ldd	r24, Y+1	; 0x01
    6bfa:	91 e0       	ldi	r25, 0x01	; 1
    6bfc:	98 0f       	add	r25, r24
    6bfe:	99 83       	std	Y+1, r25	; 0x01
    6c00:	88 2f       	mov	r24, r24
    6c02:	90 e0       	ldi	r25, 0x00	; 0
    6c04:	4b 89       	ldd	r20, Y+19	; 0x13
    6c06:	9e 01       	movw	r18, r28
    6c08:	2e 5f       	subi	r18, 0xFE	; 254
    6c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c0c:	82 0f       	add	r24, r18
    6c0e:	93 1f       	adc	r25, r19
		params[i++] = ms_reg.reg.p2_0;
    6c10:	fc 01       	movw	r30, r24
    6c12:	40 83       	st	Z, r20
    6c14:	89 81       	ldd	r24, Y+1	; 0x01
    6c16:	91 e0       	ldi	r25, 0x01	; 1
    6c18:	98 0f       	add	r25, r24
    6c1a:	99 83       	std	Y+1, r25	; 0x01
    6c1c:	88 2f       	mov	r24, r24
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	4a 89       	ldd	r20, Y+18	; 0x12
    6c22:	9e 01       	movw	r18, r28
    6c24:	2e 5f       	subi	r18, 0xFE	; 254
    6c26:	3f 4f       	sbci	r19, 0xFF	; 255

		/* Write the parameters */
		switch(clk)
    6c28:	82 0f       	add	r24, r18
    6c2a:	93 1f       	adc	r25, r19
    6c2c:	fc 01       	movw	r30, r24
    6c2e:	40 83       	st	Z, r20
    6c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c32:	88 2f       	mov	r24, r24
    6c34:	90 e0       	ldi	r25, 0x00	; 0
    6c36:	81 30       	cpi	r24, 0x01	; 1
    6c38:	91 05       	cpc	r25, r1
    6c3a:	69 f0       	breq	.+26     	; 0x6c56 <set_multisynth_registers+0x1a8>
    6c3c:	82 30       	cpi	r24, 0x02	; 2
			break;

			default:
			{
			}
			break;
    6c3e:	91 05       	cpc	r25, r1
		/* Write the parameters */
		switch(clk)
		{
			case SI5351_CLK0:
			{
				si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
    6c40:	89 f0       	breq	.+34     	; 0x6c64 <set_multisynth_registers+0x1b6>
    6c42:	89 2b       	or	r24, r25
    6c44:	09 f0       	breq	.+2      	; 0x6c48 <set_multisynth_registers+0x19a>
    6c46:	15 c0       	rjmp	.+42     	; 0x6c72 <set_multisynth_registers+0x1c4>
    6c48:	ce 01       	movw	r24, r28
    6c4a:	02 96       	adiw	r24, 0x02	; 2
    6c4c:	ac 01       	movw	r20, r24
			}
			break;
    6c4e:	69 81       	ldd	r22, Y+1	; 0x01

			case SI5351_CLK1:
			{
				si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
    6c50:	8a e2       	ldi	r24, 0x2A	; 42
    6c52:	bd de       	rcall	.-646    	; 0x69ce <si5351_write_bulk>
    6c54:	0e c0       	rjmp	.+28     	; 0x6c72 <set_multisynth_registers+0x1c4>
    6c56:	ce 01       	movw	r24, r28
    6c58:	02 96       	adiw	r24, 0x02	; 2
    6c5a:	ac 01       	movw	r20, r24
			}
			break;
    6c5c:	69 81       	ldd	r22, Y+1	; 0x01

			case SI5351_CLK2:
			{
				si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
    6c5e:	82 e3       	ldi	r24, 0x32	; 50
    6c60:	b6 de       	rcall	.-660    	; 0x69ce <si5351_write_bulk>
    6c62:	07 c0       	rjmp	.+14     	; 0x6c72 <set_multisynth_registers+0x1c4>
    6c64:	ce 01       	movw	r24, r28
    6c66:	02 96       	adiw	r24, 0x02	; 2
    6c68:	ac 01       	movw	r20, r24
    6c6a:	69 81       	ldd	r22, Y+1	; 0x01
			}
			break;
    6c6c:	8a e3       	ldi	r24, 0x3A	; 58
			{
			}
			break;
		}

		set_integer_mode(clk, int_mode);
    6c6e:	af de       	rcall	.-674    	; 0x69ce <si5351_write_bulk>
    6c70:	00 00       	nop
    6c72:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6c74:	8d 85       	ldd	r24, Y+13	; 0x0d
		ms_div(clk, r_div, div_by_4);
    6c76:	17 d0       	rcall	.+46     	; 0x6ca6 <set_integer_mode>
    6c78:	48 a5       	ldd	r20, Y+40	; 0x28
    6c7a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    6c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c7e:	3c d0       	rcall	.+120    	; 0x6cf8 <ms_div>
		params[i++] = ms_reg.reg.p3_0;

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), &reg_val))
		{
			return;
    6c80:	01 c0       	rjmp	.+2      	; 0x6c84 <set_multisynth_registers+0x1d6>
			break;
		}

		set_integer_mode(clk, int_mode);
		ms_div(clk, r_div, div_by_4);
	}
    6c82:	00 00       	nop
    6c84:	6b 96       	adiw	r28, 0x1b	; 27
    6c86:	0f b6       	in	r0, 0x3f	; 63
    6c88:	f8 94       	cli
    6c8a:	de bf       	out	0x3e, r29	; 62
    6c8c:	0f be       	out	0x3f, r0	; 63
    6c8e:	cd bf       	out	0x3d, r28	; 61
    6c90:	df 91       	pop	r29
    6c92:	cf 91       	pop	r28
    6c94:	1f 91       	pop	r17
    6c96:	0f 91       	pop	r16
    6c98:	ff 90       	pop	r15
    6c9a:	ef 90       	pop	r14
    6c9c:	df 90       	pop	r13
    6c9e:	cf 90       	pop	r12
    6ca0:	af 90       	pop	r10
    6ca2:	8f 90       	pop	r8
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	void set_integer_mode(Si5351_clock clk, BOOL enable)
	{
    6ca4:	08 95       	ret

00006ca6 <set_integer_mode>:
    6ca6:	cf 93       	push	r28
    6ca8:	df 93       	push	r29
    6caa:	00 d0       	rcall	.+0      	; 0x6cac <set_integer_mode+0x6>
    6cac:	1f 92       	push	r1
    6cae:	cd b7       	in	r28, 0x3d	; 61
    6cb0:	de b7       	in	r29, 0x3e	; 62
    6cb2:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t reg_val;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    6cb4:	6b 83       	std	Y+3, r22	; 0x03
    6cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    6cb8:	20 e1       	ldi	r18, 0x10	; 16
    6cba:	28 0f       	add	r18, r24
    6cbc:	ce 01       	movw	r24, r28
    6cbe:	01 96       	adiw	r24, 0x01	; 1
    6cc0:	bc 01       	movw	r22, r24
    6cc2:	82 2f       	mov	r24, r18
    6cc4:	b1 de       	rcall	.-670    	; 0x6a28 <si5351_read>
    6cc6:	88 23       	and	r24, r24
    6cc8:	81 f4       	brne	.+32     	; 0x6cea <set_integer_mode+0x44>
		{
			return;
		}

		if(enable)
    6cca:	8b 81       	ldd	r24, Y+3	; 0x03
    6ccc:	88 23       	and	r24, r24
    6cce:	21 f0       	breq	.+8      	; 0x6cd8 <set_integer_mode+0x32>
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    6cd0:	89 81       	ldd	r24, Y+1	; 0x01
    6cd2:	80 64       	ori	r24, 0x40	; 64
    6cd4:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    6cd6:	03 c0       	rjmp	.+6      	; 0x6cde <set_integer_mode+0x38>
    6cd8:	89 81       	ldd	r24, Y+1	; 0x01
    6cda:	8f 7b       	andi	r24, 0xBF	; 191
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    6cdc:	89 83       	std	Y+1, r24	; 0x01
    6cde:	99 81       	ldd	r25, Y+1	; 0x01
    6ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ce2:	80 5f       	subi	r24, 0xF0	; 240
    6ce4:	69 2f       	mov	r22, r25
    6ce6:	8c de       	rcall	.-744    	; 0x6a00 <si5351_write>
    6ce8:	01 c0       	rjmp	.+2      	; 0x6cec <set_integer_mode+0x46>
	{
		uint8_t reg_val;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
		{
			return;
    6cea:	00 00       	nop
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
	}
    6cec:	0f 90       	pop	r0
    6cee:	0f 90       	pop	r0
    6cf0:	0f 90       	pop	r0
    6cf2:	df 91       	pop	r29
    6cf4:	cf 91       	pop	r28
    6cf6:	08 95       	ret

00006cf8 <ms_div>:


	void ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
	{
    6cf8:	cf 93       	push	r28
    6cfa:	df 93       	push	r29
    6cfc:	00 d0       	rcall	.+0      	; 0x6cfe <ms_div+0x6>
    6cfe:	00 d0       	rcall	.+0      	; 0x6d00 <ms_div+0x8>
    6d00:	1f 92       	push	r1
    6d02:	cd b7       	in	r28, 0x3d	; 61
    6d04:	de b7       	in	r29, 0x3e	; 62
    6d06:	8b 83       	std	Y+3, r24	; 0x03
    6d08:	6c 83       	std	Y+4, r22	; 0x04
    6d0a:	4d 83       	std	Y+5, r20	; 0x05
		uint8_t reg_val, reg_addr;

		switch(clk)
    6d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    6d0e:	88 2f       	mov	r24, r24
    6d10:	90 e0       	ldi	r25, 0x00	; 0
    6d12:	81 30       	cpi	r24, 0x01	; 1
    6d14:	91 05       	cpc	r25, r1
    6d16:	49 f0       	breq	.+18     	; 0x6d2a <ms_div+0x32>
    6d18:	82 30       	cpi	r24, 0x02	; 2
    6d1a:	91 05       	cpc	r25, r1
    6d1c:	49 f0       	breq	.+18     	; 0x6d30 <ms_div+0x38>
    6d1e:	89 2b       	or	r24, r25
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
			}
			break;

			default:
				return;
    6d20:	09 f0       	breq	.+2      	; 0x6d24 <ms_div+0x2c>

		switch(clk)
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    6d22:	30 c0       	rjmp	.+96     	; 0x6d84 <ms_div+0x8c>
    6d24:	8c e2       	ldi	r24, 0x2C	; 44
			}
			break;
    6d26:	89 83       	std	Y+1, r24	; 0x01

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    6d28:	06 c0       	rjmp	.+12     	; 0x6d36 <ms_div+0x3e>
    6d2a:	84 e3       	ldi	r24, 0x34	; 52
			}
			break;
    6d2c:	89 83       	std	Y+1, r24	; 0x01

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    6d2e:	03 c0       	rjmp	.+6      	; 0x6d36 <ms_div+0x3e>
    6d30:	8c e3       	ldi	r24, 0x3C	; 60
			}
			break;
    6d32:	89 83       	std	Y+1, r24	; 0x01

			default:
				return;
		}

		if(si5351_read(reg_addr, &reg_val))
    6d34:	00 00       	nop
    6d36:	ce 01       	movw	r24, r28
    6d38:	02 96       	adiw	r24, 0x02	; 2
    6d3a:	bc 01       	movw	r22, r24
    6d3c:	89 81       	ldd	r24, Y+1	; 0x01
    6d3e:	74 de       	rcall	.-792    	; 0x6a28 <si5351_read>
    6d40:	88 23       	and	r24, r24
    6d42:	f9 f4       	brne	.+62     	; 0x6d82 <ms_div+0x8a>
		{
			return;
		}

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    6d44:	8a 81       	ldd	r24, Y+2	; 0x02
    6d46:	83 78       	andi	r24, 0x83	; 131
    6d48:	8a 83       	std	Y+2, r24	; 0x02

		if(div_by_4)
    6d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d4c:	88 23       	and	r24, r24
    6d4e:	21 f0       	breq	.+8      	; 0x6d58 <ms_div+0x60>
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    6d50:	8a 81       	ldd	r24, Y+2	; 0x02
    6d52:	8c 60       	ori	r24, 0x0C	; 12
    6d54:	8a 83       	std	Y+2, r24	; 0x02
    6d56:	03 c0       	rjmp	.+6      	; 0x6d5e <ms_div+0x66>
		}
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
    6d58:	8a 81       	ldd	r24, Y+2	; 0x02
    6d5a:	83 7f       	andi	r24, 0xF3	; 243
    6d5c:	8a 83       	std	Y+2, r24	; 0x02
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    6d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    6d60:	88 2f       	mov	r24, r24
    6d62:	90 e0       	ldi	r25, 0x00	; 0
    6d64:	82 95       	swap	r24
    6d66:	92 95       	swap	r25
    6d68:	90 7f       	andi	r25, 0xF0	; 240
    6d6a:	98 27       	eor	r25, r24
    6d6c:	80 7f       	andi	r24, 0xF0	; 240
    6d6e:	98 27       	eor	r25, r24
    6d70:	98 2f       	mov	r25, r24
    6d72:	8a 81       	ldd	r24, Y+2	; 0x02
    6d74:	89 2b       	or	r24, r25
    6d76:	8a 83       	std	Y+2, r24	; 0x02

		si5351_write(reg_addr, reg_val);
    6d78:	8a 81       	ldd	r24, Y+2	; 0x02
    6d7a:	68 2f       	mov	r22, r24
    6d7c:	89 81       	ldd	r24, Y+1	; 0x01
    6d7e:	40 de       	rcall	.-896    	; 0x6a00 <si5351_write>
    6d80:	01 c0       	rjmp	.+2      	; 0x6d84 <ms_div+0x8c>
    6d82:	00 00       	nop
				return;
		}

		if(si5351_read(reg_addr, &reg_val))
		{
			return;
    6d84:	0f 90       	pop	r0
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);

		si5351_write(reg_addr, reg_val);
	}
    6d86:	0f 90       	pop	r0
    6d88:	0f 90       	pop	r0
    6d8a:	0f 90       	pop	r0
    6d8c:	0f 90       	pop	r0
    6d8e:	df 91       	pop	r29
    6d90:	cf 91       	pop	r28
    6d92:	08 95       	ret

00006d94 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    6d94:	cf 93       	push	r28
    6d96:	df 93       	push	r29
    6d98:	cd b7       	in	r28, 0x3d	; 61
    6d9a:	de b7       	in	r29, 0x3e	; 62
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
    6d9c:	00 00       	nop
    6d9e:	df 91       	pop	r29
    6da0:	cf 91       	pop	r28
    6da2:	08 95       	ret

00006da4 <difftime>:
    6da4:	62 1b       	sub	r22, r18
    6da6:	73 0b       	sbc	r23, r19
    6da8:	84 0b       	sbc	r24, r20
    6daa:	95 0b       	sbc	r25, r21
    6dac:	08 95       	ret

00006dae <month_length>:
    6dae:	62 30       	cpi	r22, 0x02	; 2
    6db0:	19 f4       	brne	.+6      	; 0x6db8 <month_length+0xa>
    6db2:	44 d0       	rcall	.+136    	; 0x6e3c <is_leap_year>
    6db4:	84 5e       	subi	r24, 0xE4	; 228
    6db6:	08 95       	ret
    6db8:	68 30       	cpi	r22, 0x08	; 8
    6dba:	08 f0       	brcs	.+2      	; 0x6dbe <month_length+0x10>
    6dbc:	6f 5f       	subi	r22, 0xFF	; 255
    6dbe:	61 70       	andi	r22, 0x01	; 1
    6dc0:	8e e1       	ldi	r24, 0x1E	; 30
    6dc2:	86 0f       	add	r24, r22
    6dc4:	08 95       	ret

00006dc6 <set_system_time>:
    6dc6:	0f b6       	in	r0, 0x3f	; 63
    6dc8:	f8 94       	cli
    6dca:	60 93 5b 07 	sts	0x075B, r22	; 0x80075b <__system_time>
    6dce:	70 93 5c 07 	sts	0x075C, r23	; 0x80075c <__system_time+0x1>
    6dd2:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <__system_time+0x2>
    6dd6:	90 93 5e 07 	sts	0x075E, r25	; 0x80075e <__system_time+0x3>
    6dda:	0f be       	out	0x3f, r0	; 63
    6ddc:	08 95       	ret

00006dde <time>:
    6dde:	fc 01       	movw	r30, r24
    6de0:	0f b6       	in	r0, 0x3f	; 63
    6de2:	f8 94       	cli
    6de4:	60 91 5b 07 	lds	r22, 0x075B	; 0x80075b <__system_time>
    6de8:	70 91 5c 07 	lds	r23, 0x075C	; 0x80075c <__system_time+0x1>
    6dec:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <__system_time+0x2>
    6df0:	90 91 5e 07 	lds	r25, 0x075E	; 0x80075e <__system_time+0x3>
    6df4:	0f be       	out	0x3f, r0	; 63
    6df6:	30 97       	sbiw	r30, 0x00	; 0
    6df8:	21 f0       	breq	.+8      	; 0x6e02 <time+0x24>
    6dfa:	60 83       	st	Z, r22
    6dfc:	71 83       	std	Z+1, r23	; 0x01
    6dfe:	82 83       	std	Z+2, r24	; 0x02
    6e00:	93 83       	std	Z+3, r25	; 0x03
    6e02:	08 95       	ret

00006e04 <system_tick>:
    6e04:	8f 93       	push	r24
    6e06:	8f b7       	in	r24, 0x3f	; 63
    6e08:	8f 93       	push	r24
    6e0a:	f8 94       	cli
    6e0c:	80 91 5b 07 	lds	r24, 0x075B	; 0x80075b <__system_time>
    6e10:	8f 5f       	subi	r24, 0xFF	; 255
    6e12:	80 93 5b 07 	sts	0x075B, r24	; 0x80075b <__system_time>
    6e16:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <__system_time+0x1>
    6e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    6e1c:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <__system_time+0x1>
    6e20:	80 91 5d 07 	lds	r24, 0x075D	; 0x80075d <__system_time+0x2>
    6e24:	8f 4f       	sbci	r24, 0xFF	; 255
    6e26:	80 93 5d 07 	sts	0x075D, r24	; 0x80075d <__system_time+0x2>
    6e2a:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <__system_time+0x3>
    6e2e:	8f 4f       	sbci	r24, 0xFF	; 255
    6e30:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <__system_time+0x3>
    6e34:	8f 91       	pop	r24
    6e36:	8f bf       	out	0x3f, r24	; 63
    6e38:	8f 91       	pop	r24
    6e3a:	08 95       	ret

00006e3c <is_leap_year>:
    6e3c:	9c 01       	movw	r18, r24
    6e3e:	23 70       	andi	r18, 0x03	; 3
    6e40:	33 27       	eor	r19, r19
    6e42:	23 2b       	or	r18, r19
    6e44:	51 f4       	brne	.+20     	; 0x6e5a <is_leap_year+0x1e>
    6e46:	64 e6       	ldi	r22, 0x64	; 100
    6e48:	70 e0       	ldi	r23, 0x00	; 0
    6e4a:	2e d0       	rcall	.+92     	; 0x6ea8 <__divmodhi4>
    6e4c:	89 2b       	or	r24, r25
    6e4e:	39 f4       	brne	.+14     	; 0x6e5e <is_leap_year+0x22>
    6e50:	63 70       	andi	r22, 0x03	; 3
    6e52:	77 27       	eor	r23, r23
    6e54:	81 e0       	ldi	r24, 0x01	; 1
    6e56:	67 2b       	or	r22, r23
    6e58:	19 f0       	breq	.+6      	; 0x6e60 <is_leap_year+0x24>
    6e5a:	80 e0       	ldi	r24, 0x00	; 0
    6e5c:	08 95       	ret
    6e5e:	81 e0       	ldi	r24, 0x01	; 1
    6e60:	08 95       	ret

00006e62 <__mulsi3>:
    6e62:	db 01       	movw	r26, r22
    6e64:	8f 93       	push	r24
    6e66:	9f 93       	push	r25
    6e68:	85 d0       	rcall	.+266    	; 0x6f74 <__muluhisi3>
    6e6a:	bf 91       	pop	r27
    6e6c:	af 91       	pop	r26
    6e6e:	a2 9f       	mul	r26, r18
    6e70:	80 0d       	add	r24, r0
    6e72:	91 1d       	adc	r25, r1
    6e74:	a3 9f       	mul	r26, r19
    6e76:	90 0d       	add	r25, r0
    6e78:	b2 9f       	mul	r27, r18
    6e7a:	90 0d       	add	r25, r0
    6e7c:	11 24       	eor	r1, r1
    6e7e:	08 95       	ret

00006e80 <__udivmodhi4>:
    6e80:	aa 1b       	sub	r26, r26
    6e82:	bb 1b       	sub	r27, r27
    6e84:	51 e1       	ldi	r21, 0x11	; 17
    6e86:	07 c0       	rjmp	.+14     	; 0x6e96 <__udivmodhi4_ep>

00006e88 <__udivmodhi4_loop>:
    6e88:	aa 1f       	adc	r26, r26
    6e8a:	bb 1f       	adc	r27, r27
    6e8c:	a6 17       	cp	r26, r22
    6e8e:	b7 07       	cpc	r27, r23
    6e90:	10 f0       	brcs	.+4      	; 0x6e96 <__udivmodhi4_ep>
    6e92:	a6 1b       	sub	r26, r22
    6e94:	b7 0b       	sbc	r27, r23

00006e96 <__udivmodhi4_ep>:
    6e96:	88 1f       	adc	r24, r24
    6e98:	99 1f       	adc	r25, r25
    6e9a:	5a 95       	dec	r21
    6e9c:	a9 f7       	brne	.-22     	; 0x6e88 <__udivmodhi4_loop>
    6e9e:	80 95       	com	r24
    6ea0:	90 95       	com	r25
    6ea2:	bc 01       	movw	r22, r24
    6ea4:	cd 01       	movw	r24, r26
    6ea6:	08 95       	ret

00006ea8 <__divmodhi4>:
    6ea8:	97 fb       	bst	r25, 7
    6eaa:	07 2e       	mov	r0, r23
    6eac:	16 f4       	brtc	.+4      	; 0x6eb2 <__divmodhi4+0xa>
    6eae:	00 94       	com	r0
    6eb0:	06 d0       	rcall	.+12     	; 0x6ebe <__divmodhi4_neg1>
    6eb2:	77 fd       	sbrc	r23, 7
    6eb4:	08 d0       	rcall	.+16     	; 0x6ec6 <__divmodhi4_neg2>
    6eb6:	e4 df       	rcall	.-56     	; 0x6e80 <__udivmodhi4>
    6eb8:	07 fc       	sbrc	r0, 7
    6eba:	05 d0       	rcall	.+10     	; 0x6ec6 <__divmodhi4_neg2>
    6ebc:	3e f4       	brtc	.+14     	; 0x6ecc <__divmodhi4_exit>

00006ebe <__divmodhi4_neg1>:
    6ebe:	90 95       	com	r25
    6ec0:	81 95       	neg	r24
    6ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ec4:	08 95       	ret

00006ec6 <__divmodhi4_neg2>:
    6ec6:	70 95       	com	r23
    6ec8:	61 95       	neg	r22
    6eca:	7f 4f       	sbci	r23, 0xFF	; 255

00006ecc <__divmodhi4_exit>:
    6ecc:	08 95       	ret

00006ece <__udivmodsi4>:
    6ece:	a1 e2       	ldi	r26, 0x21	; 33
    6ed0:	1a 2e       	mov	r1, r26
    6ed2:	aa 1b       	sub	r26, r26
    6ed4:	bb 1b       	sub	r27, r27
    6ed6:	fd 01       	movw	r30, r26
    6ed8:	0d c0       	rjmp	.+26     	; 0x6ef4 <__udivmodsi4_ep>

00006eda <__udivmodsi4_loop>:
    6eda:	aa 1f       	adc	r26, r26
    6edc:	bb 1f       	adc	r27, r27
    6ede:	ee 1f       	adc	r30, r30
    6ee0:	ff 1f       	adc	r31, r31
    6ee2:	a2 17       	cp	r26, r18
    6ee4:	b3 07       	cpc	r27, r19
    6ee6:	e4 07       	cpc	r30, r20
    6ee8:	f5 07       	cpc	r31, r21
    6eea:	20 f0       	brcs	.+8      	; 0x6ef4 <__udivmodsi4_ep>
    6eec:	a2 1b       	sub	r26, r18
    6eee:	b3 0b       	sbc	r27, r19
    6ef0:	e4 0b       	sbc	r30, r20
    6ef2:	f5 0b       	sbc	r31, r21

00006ef4 <__udivmodsi4_ep>:
    6ef4:	66 1f       	adc	r22, r22
    6ef6:	77 1f       	adc	r23, r23
    6ef8:	88 1f       	adc	r24, r24
    6efa:	99 1f       	adc	r25, r25
    6efc:	1a 94       	dec	r1
    6efe:	69 f7       	brne	.-38     	; 0x6eda <__udivmodsi4_loop>
    6f00:	60 95       	com	r22
    6f02:	70 95       	com	r23
    6f04:	80 95       	com	r24
    6f06:	90 95       	com	r25
    6f08:	9b 01       	movw	r18, r22
    6f0a:	ac 01       	movw	r20, r24
    6f0c:	bd 01       	movw	r22, r26
    6f0e:	cf 01       	movw	r24, r30
    6f10:	08 95       	ret

00006f12 <__divmodsi4>:
    6f12:	05 2e       	mov	r0, r21
    6f14:	97 fb       	bst	r25, 7
    6f16:	16 f4       	brtc	.+4      	; 0x6f1c <__divmodsi4+0xa>
    6f18:	00 94       	com	r0
    6f1a:	0f d0       	rcall	.+30     	; 0x6f3a <__negsi2>
    6f1c:	57 fd       	sbrc	r21, 7
    6f1e:	05 d0       	rcall	.+10     	; 0x6f2a <__divmodsi4_neg2>
    6f20:	d6 df       	rcall	.-84     	; 0x6ece <__udivmodsi4>
    6f22:	07 fc       	sbrc	r0, 7
    6f24:	02 d0       	rcall	.+4      	; 0x6f2a <__divmodsi4_neg2>
    6f26:	46 f4       	brtc	.+16     	; 0x6f38 <__divmodsi4_exit>
    6f28:	08 c0       	rjmp	.+16     	; 0x6f3a <__negsi2>

00006f2a <__divmodsi4_neg2>:
    6f2a:	50 95       	com	r21
    6f2c:	40 95       	com	r20
    6f2e:	30 95       	com	r19
    6f30:	21 95       	neg	r18
    6f32:	3f 4f       	sbci	r19, 0xFF	; 255
    6f34:	4f 4f       	sbci	r20, 0xFF	; 255
    6f36:	5f 4f       	sbci	r21, 0xFF	; 255

00006f38 <__divmodsi4_exit>:
    6f38:	08 95       	ret

00006f3a <__negsi2>:
    6f3a:	90 95       	com	r25
    6f3c:	80 95       	com	r24
    6f3e:	70 95       	com	r23
    6f40:	61 95       	neg	r22
    6f42:	7f 4f       	sbci	r23, 0xFF	; 255
    6f44:	8f 4f       	sbci	r24, 0xFF	; 255
    6f46:	9f 4f       	sbci	r25, 0xFF	; 255
    6f48:	08 95       	ret

00006f4a <__tablejump2__>:
    6f4a:	ee 0f       	add	r30, r30
    6f4c:	ff 1f       	adc	r31, r31
    6f4e:	05 90       	lpm	r0, Z+
    6f50:	f4 91       	lpm	r31, Z
    6f52:	e0 2d       	mov	r30, r0
    6f54:	09 94       	ijmp

00006f56 <__umulhisi3>:
    6f56:	a2 9f       	mul	r26, r18
    6f58:	b0 01       	movw	r22, r0
    6f5a:	b3 9f       	mul	r27, r19
    6f5c:	c0 01       	movw	r24, r0
    6f5e:	a3 9f       	mul	r26, r19
    6f60:	70 0d       	add	r23, r0
    6f62:	81 1d       	adc	r24, r1
    6f64:	11 24       	eor	r1, r1
    6f66:	91 1d       	adc	r25, r1
    6f68:	b2 9f       	mul	r27, r18
    6f6a:	70 0d       	add	r23, r0
    6f6c:	81 1d       	adc	r24, r1
    6f6e:	11 24       	eor	r1, r1
    6f70:	91 1d       	adc	r25, r1
    6f72:	08 95       	ret

00006f74 <__muluhisi3>:
    6f74:	f0 df       	rcall	.-32     	; 0x6f56 <__umulhisi3>
    6f76:	a5 9f       	mul	r26, r21
    6f78:	90 0d       	add	r25, r0
    6f7a:	b4 9f       	mul	r27, r20
    6f7c:	90 0d       	add	r25, r0
    6f7e:	a4 9f       	mul	r26, r20
    6f80:	80 0d       	add	r24, r0
    6f82:	91 1d       	adc	r25, r1
    6f84:	11 24       	eor	r1, r1
    6f86:	08 95       	ret

00006f88 <atoi>:
    6f88:	fc 01       	movw	r30, r24
    6f8a:	88 27       	eor	r24, r24
    6f8c:	99 27       	eor	r25, r25
    6f8e:	e8 94       	clt
    6f90:	21 91       	ld	r18, Z+
    6f92:	20 32       	cpi	r18, 0x20	; 32
    6f94:	e9 f3       	breq	.-6      	; 0x6f90 <atoi+0x8>
    6f96:	29 30       	cpi	r18, 0x09	; 9
    6f98:	10 f0       	brcs	.+4      	; 0x6f9e <atoi+0x16>
    6f9a:	2e 30       	cpi	r18, 0x0E	; 14
    6f9c:	c8 f3       	brcs	.-14     	; 0x6f90 <atoi+0x8>
    6f9e:	2b 32       	cpi	r18, 0x2B	; 43
    6fa0:	39 f0       	breq	.+14     	; 0x6fb0 <atoi+0x28>
    6fa2:	2d 32       	cpi	r18, 0x2D	; 45
    6fa4:	31 f4       	brne	.+12     	; 0x6fb2 <atoi+0x2a>
    6fa6:	68 94       	set
    6fa8:	03 c0       	rjmp	.+6      	; 0x6fb0 <atoi+0x28>
    6faa:	74 d0       	rcall	.+232    	; 0x7094 <__mulhi_const_10>
    6fac:	82 0f       	add	r24, r18
    6fae:	91 1d       	adc	r25, r1
    6fb0:	21 91       	ld	r18, Z+
    6fb2:	20 53       	subi	r18, 0x30	; 48
    6fb4:	2a 30       	cpi	r18, 0x0A	; 10
    6fb6:	c8 f3       	brcs	.-14     	; 0x6faa <atoi+0x22>
    6fb8:	1e f4       	brtc	.+6      	; 0x6fc0 <atoi+0x38>
    6fba:	90 95       	com	r25
    6fbc:	81 95       	neg	r24
    6fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    6fc0:	08 95       	ret

00006fc2 <atol>:
    6fc2:	1f 93       	push	r17
    6fc4:	fc 01       	movw	r30, r24
    6fc6:	99 27       	eor	r25, r25
    6fc8:	88 27       	eor	r24, r24
    6fca:	bc 01       	movw	r22, r24
    6fcc:	e8 94       	clt
    6fce:	11 91       	ld	r17, Z+
    6fd0:	10 32       	cpi	r17, 0x20	; 32
    6fd2:	e9 f3       	breq	.-6      	; 0x6fce <atol+0xc>
    6fd4:	19 30       	cpi	r17, 0x09	; 9
    6fd6:	10 f0       	brcs	.+4      	; 0x6fdc <atol+0x1a>
    6fd8:	1e 30       	cpi	r17, 0x0E	; 14
    6fda:	c8 f3       	brcs	.-14     	; 0x6fce <atol+0xc>
    6fdc:	1b 32       	cpi	r17, 0x2B	; 43
    6fde:	49 f0       	breq	.+18     	; 0x6ff2 <atol+0x30>
    6fe0:	1d 32       	cpi	r17, 0x2D	; 45
    6fe2:	41 f4       	brne	.+16     	; 0x6ff4 <atol+0x32>
    6fe4:	68 94       	set
    6fe6:	05 c0       	rjmp	.+10     	; 0x6ff2 <atol+0x30>
    6fe8:	40 d0       	rcall	.+128    	; 0x706a <__mulsi_const_10>
    6fea:	61 0f       	add	r22, r17
    6fec:	71 1d       	adc	r23, r1
    6fee:	81 1d       	adc	r24, r1
    6ff0:	91 1d       	adc	r25, r1
    6ff2:	11 91       	ld	r17, Z+
    6ff4:	10 53       	subi	r17, 0x30	; 48
    6ff6:	1a 30       	cpi	r17, 0x0A	; 10
    6ff8:	b8 f3       	brcs	.-18     	; 0x6fe8 <atol+0x26>
    6ffa:	3e f4       	brtc	.+14     	; 0x700a <atol+0x48>
    6ffc:	90 95       	com	r25
    6ffe:	80 95       	com	r24
    7000:	70 95       	com	r23
    7002:	61 95       	neg	r22
    7004:	7f 4f       	sbci	r23, 0xFF	; 255
    7006:	8f 4f       	sbci	r24, 0xFF	; 255
    7008:	9f 4f       	sbci	r25, 0xFF	; 255
    700a:	1f 91       	pop	r17
    700c:	08 95       	ret

0000700e <toupper>:
    700e:	91 11       	cpse	r25, r1
    7010:	08 95       	ret
    7012:	81 56       	subi	r24, 0x61	; 97
    7014:	8a 51       	subi	r24, 0x1A	; 26
    7016:	08 f4       	brcc	.+2      	; 0x701a <toupper+0xc>
    7018:	80 52       	subi	r24, 0x20	; 32
    701a:	85 58       	subi	r24, 0x85	; 133
    701c:	08 95       	ret

0000701e <memset>:
    701e:	dc 01       	movw	r26, r24
    7020:	01 c0       	rjmp	.+2      	; 0x7024 <memset+0x6>
    7022:	6d 93       	st	X+, r22
    7024:	41 50       	subi	r20, 0x01	; 1
    7026:	50 40       	sbci	r21, 0x00	; 0
    7028:	e0 f7       	brcc	.-8      	; 0x7022 <memset+0x4>
    702a:	08 95       	ret

0000702c <strcpy>:
    702c:	fb 01       	movw	r30, r22
    702e:	dc 01       	movw	r26, r24
    7030:	01 90       	ld	r0, Z+
    7032:	0d 92       	st	X+, r0
    7034:	00 20       	and	r0, r0
    7036:	e1 f7       	brne	.-8      	; 0x7030 <strcpy+0x4>
    7038:	08 95       	ret

0000703a <strlen>:
    703a:	fc 01       	movw	r30, r24
    703c:	01 90       	ld	r0, Z+
    703e:	00 20       	and	r0, r0
    7040:	e9 f7       	brne	.-6      	; 0x703c <strlen+0x2>
    7042:	80 95       	com	r24
    7044:	90 95       	com	r25
    7046:	8e 0f       	add	r24, r30
    7048:	9f 1f       	adc	r25, r31
    704a:	08 95       	ret

0000704c <strncpy>:
    704c:	fb 01       	movw	r30, r22
    704e:	dc 01       	movw	r26, r24
    7050:	41 50       	subi	r20, 0x01	; 1
    7052:	50 40       	sbci	r21, 0x00	; 0
    7054:	48 f0       	brcs	.+18     	; 0x7068 <strncpy+0x1c>
    7056:	01 90       	ld	r0, Z+
    7058:	0d 92       	st	X+, r0
    705a:	00 20       	and	r0, r0
    705c:	c9 f7       	brne	.-14     	; 0x7050 <strncpy+0x4>
    705e:	01 c0       	rjmp	.+2      	; 0x7062 <strncpy+0x16>
    7060:	1d 92       	st	X+, r1
    7062:	41 50       	subi	r20, 0x01	; 1
    7064:	50 40       	sbci	r21, 0x00	; 0
    7066:	e0 f7       	brcc	.-8      	; 0x7060 <strncpy+0x14>
    7068:	08 95       	ret

0000706a <__mulsi_const_10>:
    706a:	59 2f       	mov	r21, r25
    706c:	48 2f       	mov	r20, r24
    706e:	37 2f       	mov	r19, r23
    7070:	26 2f       	mov	r18, r22
    7072:	66 0f       	add	r22, r22
    7074:	77 1f       	adc	r23, r23
    7076:	88 1f       	adc	r24, r24
    7078:	99 1f       	adc	r25, r25
    707a:	66 0f       	add	r22, r22
    707c:	77 1f       	adc	r23, r23
    707e:	88 1f       	adc	r24, r24
    7080:	99 1f       	adc	r25, r25
    7082:	62 0f       	add	r22, r18
    7084:	73 1f       	adc	r23, r19
    7086:	84 1f       	adc	r24, r20
    7088:	95 1f       	adc	r25, r21
    708a:	66 0f       	add	r22, r22
    708c:	77 1f       	adc	r23, r23
    708e:	88 1f       	adc	r24, r24
    7090:	99 1f       	adc	r25, r25
    7092:	08 95       	ret

00007094 <__mulhi_const_10>:
    7094:	7a e0       	ldi	r23, 0x0A	; 10
    7096:	97 9f       	mul	r25, r23
    7098:	90 2d       	mov	r25, r0
    709a:	87 9f       	mul	r24, r23
    709c:	80 2d       	mov	r24, r0
    709e:	91 0d       	add	r25, r1
    70a0:	11 24       	eor	r1, r1
    70a2:	08 95       	ret

000070a4 <sprintf>:
    70a4:	ae e0       	ldi	r26, 0x0E	; 14
    70a6:	b0 e0       	ldi	r27, 0x00	; 0
    70a8:	e7 e5       	ldi	r30, 0x57	; 87
    70aa:	f8 e3       	ldi	r31, 0x38	; 56
    70ac:	e2 c2       	rjmp	.+1476   	; 0x7672 <__prologue_saves__+0x1c>
    70ae:	0d 89       	ldd	r16, Y+21	; 0x15
    70b0:	1e 89       	ldd	r17, Y+22	; 0x16
    70b2:	86 e0       	ldi	r24, 0x06	; 6
    70b4:	8c 83       	std	Y+4, r24	; 0x04
    70b6:	1a 83       	std	Y+2, r17	; 0x02
    70b8:	09 83       	std	Y+1, r16	; 0x01
    70ba:	8f ef       	ldi	r24, 0xFF	; 255
    70bc:	9f e7       	ldi	r25, 0x7F	; 127
    70be:	9e 83       	std	Y+6, r25	; 0x06
    70c0:	8d 83       	std	Y+5, r24	; 0x05
    70c2:	ae 01       	movw	r20, r28
    70c4:	47 5e       	subi	r20, 0xE7	; 231
    70c6:	5f 4f       	sbci	r21, 0xFF	; 255
    70c8:	6f 89       	ldd	r22, Y+23	; 0x17
    70ca:	78 8d       	ldd	r23, Y+24	; 0x18
    70cc:	ce 01       	movw	r24, r28
    70ce:	01 96       	adiw	r24, 0x01	; 1
    70d0:	08 d0       	rcall	.+16     	; 0x70e2 <vfprintf>
    70d2:	ef 81       	ldd	r30, Y+7	; 0x07
    70d4:	f8 85       	ldd	r31, Y+8	; 0x08
    70d6:	e0 0f       	add	r30, r16
    70d8:	f1 1f       	adc	r31, r17
    70da:	10 82       	st	Z, r1
    70dc:	2e 96       	adiw	r28, 0x0e	; 14
    70de:	e4 e0       	ldi	r30, 0x04	; 4
    70e0:	e4 c2       	rjmp	.+1480   	; 0x76aa <__epilogue_restores__+0x1c>

000070e2 <vfprintf>:
    70e2:	ab e0       	ldi	r26, 0x0B	; 11
    70e4:	b0 e0       	ldi	r27, 0x00	; 0
    70e6:	e6 e7       	ldi	r30, 0x76	; 118
    70e8:	f8 e3       	ldi	r31, 0x38	; 56
    70ea:	b5 c2       	rjmp	.+1386   	; 0x7656 <__prologue_saves__>
    70ec:	6c 01       	movw	r12, r24
    70ee:	7b 01       	movw	r14, r22
    70f0:	8a 01       	movw	r16, r20
    70f2:	fc 01       	movw	r30, r24
    70f4:	17 82       	std	Z+7, r1	; 0x07
    70f6:	16 82       	std	Z+6, r1	; 0x06
    70f8:	83 81       	ldd	r24, Z+3	; 0x03
    70fa:	81 ff       	sbrs	r24, 1
    70fc:	bf c1       	rjmp	.+894    	; 0x747c <vfprintf+0x39a>
    70fe:	ce 01       	movw	r24, r28
    7100:	01 96       	adiw	r24, 0x01	; 1
    7102:	3c 01       	movw	r6, r24
    7104:	f6 01       	movw	r30, r12
    7106:	93 81       	ldd	r25, Z+3	; 0x03
    7108:	f7 01       	movw	r30, r14
    710a:	93 fd       	sbrc	r25, 3
    710c:	85 91       	lpm	r24, Z+
    710e:	93 ff       	sbrs	r25, 3
    7110:	81 91       	ld	r24, Z+
    7112:	7f 01       	movw	r14, r30
    7114:	88 23       	and	r24, r24
    7116:	09 f4       	brne	.+2      	; 0x711a <vfprintf+0x38>
    7118:	ad c1       	rjmp	.+858    	; 0x7474 <vfprintf+0x392>
    711a:	85 32       	cpi	r24, 0x25	; 37
    711c:	39 f4       	brne	.+14     	; 0x712c <vfprintf+0x4a>
    711e:	93 fd       	sbrc	r25, 3
    7120:	85 91       	lpm	r24, Z+
    7122:	93 ff       	sbrs	r25, 3
    7124:	81 91       	ld	r24, Z+
    7126:	7f 01       	movw	r14, r30
    7128:	85 32       	cpi	r24, 0x25	; 37
    712a:	21 f4       	brne	.+8      	; 0x7134 <vfprintf+0x52>
    712c:	b6 01       	movw	r22, r12
    712e:	90 e0       	ldi	r25, 0x00	; 0
    7130:	c0 d1       	rcall	.+896    	; 0x74b2 <fputc>
    7132:	e8 cf       	rjmp	.-48     	; 0x7104 <vfprintf+0x22>
    7134:	91 2c       	mov	r9, r1
    7136:	21 2c       	mov	r2, r1
    7138:	31 2c       	mov	r3, r1
    713a:	ff e1       	ldi	r31, 0x1F	; 31
    713c:	f3 15       	cp	r31, r3
    713e:	d8 f0       	brcs	.+54     	; 0x7176 <vfprintf+0x94>
    7140:	8b 32       	cpi	r24, 0x2B	; 43
    7142:	79 f0       	breq	.+30     	; 0x7162 <vfprintf+0x80>
    7144:	38 f4       	brcc	.+14     	; 0x7154 <vfprintf+0x72>
    7146:	80 32       	cpi	r24, 0x20	; 32
    7148:	79 f0       	breq	.+30     	; 0x7168 <vfprintf+0x86>
    714a:	83 32       	cpi	r24, 0x23	; 35
    714c:	a1 f4       	brne	.+40     	; 0x7176 <vfprintf+0x94>
    714e:	23 2d       	mov	r18, r3
    7150:	20 61       	ori	r18, 0x10	; 16
    7152:	1d c0       	rjmp	.+58     	; 0x718e <vfprintf+0xac>
    7154:	8d 32       	cpi	r24, 0x2D	; 45
    7156:	61 f0       	breq	.+24     	; 0x7170 <vfprintf+0x8e>
    7158:	80 33       	cpi	r24, 0x30	; 48
    715a:	69 f4       	brne	.+26     	; 0x7176 <vfprintf+0x94>
    715c:	23 2d       	mov	r18, r3
    715e:	21 60       	ori	r18, 0x01	; 1
    7160:	16 c0       	rjmp	.+44     	; 0x718e <vfprintf+0xac>
    7162:	83 2d       	mov	r24, r3
    7164:	82 60       	ori	r24, 0x02	; 2
    7166:	38 2e       	mov	r3, r24
    7168:	e3 2d       	mov	r30, r3
    716a:	e4 60       	ori	r30, 0x04	; 4
    716c:	3e 2e       	mov	r3, r30
    716e:	2a c0       	rjmp	.+84     	; 0x71c4 <vfprintf+0xe2>
    7170:	f3 2d       	mov	r31, r3
    7172:	f8 60       	ori	r31, 0x08	; 8
    7174:	1d c0       	rjmp	.+58     	; 0x71b0 <vfprintf+0xce>
    7176:	37 fc       	sbrc	r3, 7
    7178:	2d c0       	rjmp	.+90     	; 0x71d4 <vfprintf+0xf2>
    717a:	20 ed       	ldi	r18, 0xD0	; 208
    717c:	28 0f       	add	r18, r24
    717e:	2a 30       	cpi	r18, 0x0A	; 10
    7180:	40 f0       	brcs	.+16     	; 0x7192 <vfprintf+0xb0>
    7182:	8e 32       	cpi	r24, 0x2E	; 46
    7184:	b9 f4       	brne	.+46     	; 0x71b4 <vfprintf+0xd2>
    7186:	36 fc       	sbrc	r3, 6
    7188:	75 c1       	rjmp	.+746    	; 0x7474 <vfprintf+0x392>
    718a:	23 2d       	mov	r18, r3
    718c:	20 64       	ori	r18, 0x40	; 64
    718e:	32 2e       	mov	r3, r18
    7190:	19 c0       	rjmp	.+50     	; 0x71c4 <vfprintf+0xe2>
    7192:	36 fe       	sbrs	r3, 6
    7194:	06 c0       	rjmp	.+12     	; 0x71a2 <vfprintf+0xc0>
    7196:	8a e0       	ldi	r24, 0x0A	; 10
    7198:	98 9e       	mul	r9, r24
    719a:	20 0d       	add	r18, r0
    719c:	11 24       	eor	r1, r1
    719e:	92 2e       	mov	r9, r18
    71a0:	11 c0       	rjmp	.+34     	; 0x71c4 <vfprintf+0xe2>
    71a2:	ea e0       	ldi	r30, 0x0A	; 10
    71a4:	2e 9e       	mul	r2, r30
    71a6:	20 0d       	add	r18, r0
    71a8:	11 24       	eor	r1, r1
    71aa:	22 2e       	mov	r2, r18
    71ac:	f3 2d       	mov	r31, r3
    71ae:	f0 62       	ori	r31, 0x20	; 32
    71b0:	3f 2e       	mov	r3, r31
    71b2:	08 c0       	rjmp	.+16     	; 0x71c4 <vfprintf+0xe2>
    71b4:	8c 36       	cpi	r24, 0x6C	; 108
    71b6:	21 f4       	brne	.+8      	; 0x71c0 <vfprintf+0xde>
    71b8:	83 2d       	mov	r24, r3
    71ba:	80 68       	ori	r24, 0x80	; 128
    71bc:	38 2e       	mov	r3, r24
    71be:	02 c0       	rjmp	.+4      	; 0x71c4 <vfprintf+0xe2>
    71c0:	88 36       	cpi	r24, 0x68	; 104
    71c2:	41 f4       	brne	.+16     	; 0x71d4 <vfprintf+0xf2>
    71c4:	f7 01       	movw	r30, r14
    71c6:	93 fd       	sbrc	r25, 3
    71c8:	85 91       	lpm	r24, Z+
    71ca:	93 ff       	sbrs	r25, 3
    71cc:	81 91       	ld	r24, Z+
    71ce:	7f 01       	movw	r14, r30
    71d0:	81 11       	cpse	r24, r1
    71d2:	b3 cf       	rjmp	.-154    	; 0x713a <vfprintf+0x58>
    71d4:	98 2f       	mov	r25, r24
    71d6:	9f 7d       	andi	r25, 0xDF	; 223
    71d8:	95 54       	subi	r25, 0x45	; 69
    71da:	93 30       	cpi	r25, 0x03	; 3
    71dc:	28 f4       	brcc	.+10     	; 0x71e8 <vfprintf+0x106>
    71de:	0c 5f       	subi	r16, 0xFC	; 252
    71e0:	1f 4f       	sbci	r17, 0xFF	; 255
    71e2:	9f e3       	ldi	r25, 0x3F	; 63
    71e4:	99 83       	std	Y+1, r25	; 0x01
    71e6:	0d c0       	rjmp	.+26     	; 0x7202 <vfprintf+0x120>
    71e8:	83 36       	cpi	r24, 0x63	; 99
    71ea:	31 f0       	breq	.+12     	; 0x71f8 <vfprintf+0x116>
    71ec:	83 37       	cpi	r24, 0x73	; 115
    71ee:	71 f0       	breq	.+28     	; 0x720c <vfprintf+0x12a>
    71f0:	83 35       	cpi	r24, 0x53	; 83
    71f2:	09 f0       	breq	.+2      	; 0x71f6 <vfprintf+0x114>
    71f4:	55 c0       	rjmp	.+170    	; 0x72a0 <vfprintf+0x1be>
    71f6:	20 c0       	rjmp	.+64     	; 0x7238 <vfprintf+0x156>
    71f8:	f8 01       	movw	r30, r16
    71fa:	80 81       	ld	r24, Z
    71fc:	89 83       	std	Y+1, r24	; 0x01
    71fe:	0e 5f       	subi	r16, 0xFE	; 254
    7200:	1f 4f       	sbci	r17, 0xFF	; 255
    7202:	88 24       	eor	r8, r8
    7204:	83 94       	inc	r8
    7206:	91 2c       	mov	r9, r1
    7208:	53 01       	movw	r10, r6
    720a:	12 c0       	rjmp	.+36     	; 0x7230 <vfprintf+0x14e>
    720c:	28 01       	movw	r4, r16
    720e:	f2 e0       	ldi	r31, 0x02	; 2
    7210:	4f 0e       	add	r4, r31
    7212:	51 1c       	adc	r5, r1
    7214:	f8 01       	movw	r30, r16
    7216:	a0 80       	ld	r10, Z
    7218:	b1 80       	ldd	r11, Z+1	; 0x01
    721a:	36 fe       	sbrs	r3, 6
    721c:	03 c0       	rjmp	.+6      	; 0x7224 <vfprintf+0x142>
    721e:	69 2d       	mov	r22, r9
    7220:	70 e0       	ldi	r23, 0x00	; 0
    7222:	02 c0       	rjmp	.+4      	; 0x7228 <vfprintf+0x146>
    7224:	6f ef       	ldi	r22, 0xFF	; 255
    7226:	7f ef       	ldi	r23, 0xFF	; 255
    7228:	c5 01       	movw	r24, r10
    722a:	38 d1       	rcall	.+624    	; 0x749c <strnlen>
    722c:	4c 01       	movw	r8, r24
    722e:	82 01       	movw	r16, r4
    7230:	f3 2d       	mov	r31, r3
    7232:	ff 77       	andi	r31, 0x7F	; 127
    7234:	3f 2e       	mov	r3, r31
    7236:	15 c0       	rjmp	.+42     	; 0x7262 <vfprintf+0x180>
    7238:	28 01       	movw	r4, r16
    723a:	22 e0       	ldi	r18, 0x02	; 2
    723c:	42 0e       	add	r4, r18
    723e:	51 1c       	adc	r5, r1
    7240:	f8 01       	movw	r30, r16
    7242:	a0 80       	ld	r10, Z
    7244:	b1 80       	ldd	r11, Z+1	; 0x01
    7246:	36 fe       	sbrs	r3, 6
    7248:	03 c0       	rjmp	.+6      	; 0x7250 <vfprintf+0x16e>
    724a:	69 2d       	mov	r22, r9
    724c:	70 e0       	ldi	r23, 0x00	; 0
    724e:	02 c0       	rjmp	.+4      	; 0x7254 <vfprintf+0x172>
    7250:	6f ef       	ldi	r22, 0xFF	; 255
    7252:	7f ef       	ldi	r23, 0xFF	; 255
    7254:	c5 01       	movw	r24, r10
    7256:	17 d1       	rcall	.+558    	; 0x7486 <strnlen_P>
    7258:	4c 01       	movw	r8, r24
    725a:	f3 2d       	mov	r31, r3
    725c:	f0 68       	ori	r31, 0x80	; 128
    725e:	3f 2e       	mov	r3, r31
    7260:	82 01       	movw	r16, r4
    7262:	33 fc       	sbrc	r3, 3
    7264:	19 c0       	rjmp	.+50     	; 0x7298 <vfprintf+0x1b6>
    7266:	82 2d       	mov	r24, r2
    7268:	90 e0       	ldi	r25, 0x00	; 0
    726a:	88 16       	cp	r8, r24
    726c:	99 06       	cpc	r9, r25
    726e:	a0 f4       	brcc	.+40     	; 0x7298 <vfprintf+0x1b6>
    7270:	b6 01       	movw	r22, r12
    7272:	80 e2       	ldi	r24, 0x20	; 32
    7274:	90 e0       	ldi	r25, 0x00	; 0
    7276:	1d d1       	rcall	.+570    	; 0x74b2 <fputc>
    7278:	2a 94       	dec	r2
    727a:	f5 cf       	rjmp	.-22     	; 0x7266 <vfprintf+0x184>
    727c:	f5 01       	movw	r30, r10
    727e:	37 fc       	sbrc	r3, 7
    7280:	85 91       	lpm	r24, Z+
    7282:	37 fe       	sbrs	r3, 7
    7284:	81 91       	ld	r24, Z+
    7286:	5f 01       	movw	r10, r30
    7288:	b6 01       	movw	r22, r12
    728a:	90 e0       	ldi	r25, 0x00	; 0
    728c:	12 d1       	rcall	.+548    	; 0x74b2 <fputc>
    728e:	21 10       	cpse	r2, r1
    7290:	2a 94       	dec	r2
    7292:	21 e0       	ldi	r18, 0x01	; 1
    7294:	82 1a       	sub	r8, r18
    7296:	91 08       	sbc	r9, r1
    7298:	81 14       	cp	r8, r1
    729a:	91 04       	cpc	r9, r1
    729c:	79 f7       	brne	.-34     	; 0x727c <vfprintf+0x19a>
    729e:	e1 c0       	rjmp	.+450    	; 0x7462 <vfprintf+0x380>
    72a0:	84 36       	cpi	r24, 0x64	; 100
    72a2:	11 f0       	breq	.+4      	; 0x72a8 <vfprintf+0x1c6>
    72a4:	89 36       	cpi	r24, 0x69	; 105
    72a6:	39 f5       	brne	.+78     	; 0x72f6 <vfprintf+0x214>
    72a8:	f8 01       	movw	r30, r16
    72aa:	37 fe       	sbrs	r3, 7
    72ac:	07 c0       	rjmp	.+14     	; 0x72bc <vfprintf+0x1da>
    72ae:	60 81       	ld	r22, Z
    72b0:	71 81       	ldd	r23, Z+1	; 0x01
    72b2:	82 81       	ldd	r24, Z+2	; 0x02
    72b4:	93 81       	ldd	r25, Z+3	; 0x03
    72b6:	0c 5f       	subi	r16, 0xFC	; 252
    72b8:	1f 4f       	sbci	r17, 0xFF	; 255
    72ba:	08 c0       	rjmp	.+16     	; 0x72cc <vfprintf+0x1ea>
    72bc:	60 81       	ld	r22, Z
    72be:	71 81       	ldd	r23, Z+1	; 0x01
    72c0:	07 2e       	mov	r0, r23
    72c2:	00 0c       	add	r0, r0
    72c4:	88 0b       	sbc	r24, r24
    72c6:	99 0b       	sbc	r25, r25
    72c8:	0e 5f       	subi	r16, 0xFE	; 254
    72ca:	1f 4f       	sbci	r17, 0xFF	; 255
    72cc:	f3 2d       	mov	r31, r3
    72ce:	ff 76       	andi	r31, 0x6F	; 111
    72d0:	3f 2e       	mov	r3, r31
    72d2:	97 ff       	sbrs	r25, 7
    72d4:	09 c0       	rjmp	.+18     	; 0x72e8 <vfprintf+0x206>
    72d6:	90 95       	com	r25
    72d8:	80 95       	com	r24
    72da:	70 95       	com	r23
    72dc:	61 95       	neg	r22
    72de:	7f 4f       	sbci	r23, 0xFF	; 255
    72e0:	8f 4f       	sbci	r24, 0xFF	; 255
    72e2:	9f 4f       	sbci	r25, 0xFF	; 255
    72e4:	f0 68       	ori	r31, 0x80	; 128
    72e6:	3f 2e       	mov	r3, r31
    72e8:	2a e0       	ldi	r18, 0x0A	; 10
    72ea:	30 e0       	ldi	r19, 0x00	; 0
    72ec:	a3 01       	movw	r20, r6
    72ee:	1d d1       	rcall	.+570    	; 0x752a <__ultoa_invert>
    72f0:	88 2e       	mov	r8, r24
    72f2:	86 18       	sub	r8, r6
    72f4:	44 c0       	rjmp	.+136    	; 0x737e <vfprintf+0x29c>
    72f6:	85 37       	cpi	r24, 0x75	; 117
    72f8:	31 f4       	brne	.+12     	; 0x7306 <vfprintf+0x224>
    72fa:	23 2d       	mov	r18, r3
    72fc:	2f 7e       	andi	r18, 0xEF	; 239
    72fe:	b2 2e       	mov	r11, r18
    7300:	2a e0       	ldi	r18, 0x0A	; 10
    7302:	30 e0       	ldi	r19, 0x00	; 0
    7304:	25 c0       	rjmp	.+74     	; 0x7350 <vfprintf+0x26e>
    7306:	93 2d       	mov	r25, r3
    7308:	99 7f       	andi	r25, 0xF9	; 249
    730a:	b9 2e       	mov	r11, r25
    730c:	8f 36       	cpi	r24, 0x6F	; 111
    730e:	c1 f0       	breq	.+48     	; 0x7340 <vfprintf+0x25e>
    7310:	18 f4       	brcc	.+6      	; 0x7318 <vfprintf+0x236>
    7312:	88 35       	cpi	r24, 0x58	; 88
    7314:	79 f0       	breq	.+30     	; 0x7334 <vfprintf+0x252>
    7316:	ae c0       	rjmp	.+348    	; 0x7474 <vfprintf+0x392>
    7318:	80 37       	cpi	r24, 0x70	; 112
    731a:	19 f0       	breq	.+6      	; 0x7322 <vfprintf+0x240>
    731c:	88 37       	cpi	r24, 0x78	; 120
    731e:	21 f0       	breq	.+8      	; 0x7328 <vfprintf+0x246>
    7320:	a9 c0       	rjmp	.+338    	; 0x7474 <vfprintf+0x392>
    7322:	e9 2f       	mov	r30, r25
    7324:	e0 61       	ori	r30, 0x10	; 16
    7326:	be 2e       	mov	r11, r30
    7328:	b4 fe       	sbrs	r11, 4
    732a:	0d c0       	rjmp	.+26     	; 0x7346 <vfprintf+0x264>
    732c:	fb 2d       	mov	r31, r11
    732e:	f4 60       	ori	r31, 0x04	; 4
    7330:	bf 2e       	mov	r11, r31
    7332:	09 c0       	rjmp	.+18     	; 0x7346 <vfprintf+0x264>
    7334:	34 fe       	sbrs	r3, 4
    7336:	0a c0       	rjmp	.+20     	; 0x734c <vfprintf+0x26a>
    7338:	29 2f       	mov	r18, r25
    733a:	26 60       	ori	r18, 0x06	; 6
    733c:	b2 2e       	mov	r11, r18
    733e:	06 c0       	rjmp	.+12     	; 0x734c <vfprintf+0x26a>
    7340:	28 e0       	ldi	r18, 0x08	; 8
    7342:	30 e0       	ldi	r19, 0x00	; 0
    7344:	05 c0       	rjmp	.+10     	; 0x7350 <vfprintf+0x26e>
    7346:	20 e1       	ldi	r18, 0x10	; 16
    7348:	30 e0       	ldi	r19, 0x00	; 0
    734a:	02 c0       	rjmp	.+4      	; 0x7350 <vfprintf+0x26e>
    734c:	20 e1       	ldi	r18, 0x10	; 16
    734e:	32 e0       	ldi	r19, 0x02	; 2
    7350:	f8 01       	movw	r30, r16
    7352:	b7 fe       	sbrs	r11, 7
    7354:	07 c0       	rjmp	.+14     	; 0x7364 <vfprintf+0x282>
    7356:	60 81       	ld	r22, Z
    7358:	71 81       	ldd	r23, Z+1	; 0x01
    735a:	82 81       	ldd	r24, Z+2	; 0x02
    735c:	93 81       	ldd	r25, Z+3	; 0x03
    735e:	0c 5f       	subi	r16, 0xFC	; 252
    7360:	1f 4f       	sbci	r17, 0xFF	; 255
    7362:	06 c0       	rjmp	.+12     	; 0x7370 <vfprintf+0x28e>
    7364:	60 81       	ld	r22, Z
    7366:	71 81       	ldd	r23, Z+1	; 0x01
    7368:	80 e0       	ldi	r24, 0x00	; 0
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	0e 5f       	subi	r16, 0xFE	; 254
    736e:	1f 4f       	sbci	r17, 0xFF	; 255
    7370:	a3 01       	movw	r20, r6
    7372:	db d0       	rcall	.+438    	; 0x752a <__ultoa_invert>
    7374:	88 2e       	mov	r8, r24
    7376:	86 18       	sub	r8, r6
    7378:	fb 2d       	mov	r31, r11
    737a:	ff 77       	andi	r31, 0x7F	; 127
    737c:	3f 2e       	mov	r3, r31
    737e:	36 fe       	sbrs	r3, 6
    7380:	0d c0       	rjmp	.+26     	; 0x739c <vfprintf+0x2ba>
    7382:	23 2d       	mov	r18, r3
    7384:	2e 7f       	andi	r18, 0xFE	; 254
    7386:	a2 2e       	mov	r10, r18
    7388:	89 14       	cp	r8, r9
    738a:	58 f4       	brcc	.+22     	; 0x73a2 <vfprintf+0x2c0>
    738c:	34 fe       	sbrs	r3, 4
    738e:	0b c0       	rjmp	.+22     	; 0x73a6 <vfprintf+0x2c4>
    7390:	32 fc       	sbrc	r3, 2
    7392:	09 c0       	rjmp	.+18     	; 0x73a6 <vfprintf+0x2c4>
    7394:	83 2d       	mov	r24, r3
    7396:	8e 7e       	andi	r24, 0xEE	; 238
    7398:	a8 2e       	mov	r10, r24
    739a:	05 c0       	rjmp	.+10     	; 0x73a6 <vfprintf+0x2c4>
    739c:	b8 2c       	mov	r11, r8
    739e:	a3 2c       	mov	r10, r3
    73a0:	03 c0       	rjmp	.+6      	; 0x73a8 <vfprintf+0x2c6>
    73a2:	b8 2c       	mov	r11, r8
    73a4:	01 c0       	rjmp	.+2      	; 0x73a8 <vfprintf+0x2c6>
    73a6:	b9 2c       	mov	r11, r9
    73a8:	a4 fe       	sbrs	r10, 4
    73aa:	0f c0       	rjmp	.+30     	; 0x73ca <vfprintf+0x2e8>
    73ac:	fe 01       	movw	r30, r28
    73ae:	e8 0d       	add	r30, r8
    73b0:	f1 1d       	adc	r31, r1
    73b2:	80 81       	ld	r24, Z
    73b4:	80 33       	cpi	r24, 0x30	; 48
    73b6:	21 f4       	brne	.+8      	; 0x73c0 <vfprintf+0x2de>
    73b8:	9a 2d       	mov	r25, r10
    73ba:	99 7e       	andi	r25, 0xE9	; 233
    73bc:	a9 2e       	mov	r10, r25
    73be:	09 c0       	rjmp	.+18     	; 0x73d2 <vfprintf+0x2f0>
    73c0:	a2 fe       	sbrs	r10, 2
    73c2:	06 c0       	rjmp	.+12     	; 0x73d0 <vfprintf+0x2ee>
    73c4:	b3 94       	inc	r11
    73c6:	b3 94       	inc	r11
    73c8:	04 c0       	rjmp	.+8      	; 0x73d2 <vfprintf+0x2f0>
    73ca:	8a 2d       	mov	r24, r10
    73cc:	86 78       	andi	r24, 0x86	; 134
    73ce:	09 f0       	breq	.+2      	; 0x73d2 <vfprintf+0x2f0>
    73d0:	b3 94       	inc	r11
    73d2:	a3 fc       	sbrc	r10, 3
    73d4:	10 c0       	rjmp	.+32     	; 0x73f6 <vfprintf+0x314>
    73d6:	a0 fe       	sbrs	r10, 0
    73d8:	06 c0       	rjmp	.+12     	; 0x73e6 <vfprintf+0x304>
    73da:	b2 14       	cp	r11, r2
    73dc:	80 f4       	brcc	.+32     	; 0x73fe <vfprintf+0x31c>
    73de:	28 0c       	add	r2, r8
    73e0:	92 2c       	mov	r9, r2
    73e2:	9b 18       	sub	r9, r11
    73e4:	0d c0       	rjmp	.+26     	; 0x7400 <vfprintf+0x31e>
    73e6:	b2 14       	cp	r11, r2
    73e8:	58 f4       	brcc	.+22     	; 0x7400 <vfprintf+0x31e>
    73ea:	b6 01       	movw	r22, r12
    73ec:	80 e2       	ldi	r24, 0x20	; 32
    73ee:	90 e0       	ldi	r25, 0x00	; 0
    73f0:	60 d0       	rcall	.+192    	; 0x74b2 <fputc>
    73f2:	b3 94       	inc	r11
    73f4:	f8 cf       	rjmp	.-16     	; 0x73e6 <vfprintf+0x304>
    73f6:	b2 14       	cp	r11, r2
    73f8:	18 f4       	brcc	.+6      	; 0x7400 <vfprintf+0x31e>
    73fa:	2b 18       	sub	r2, r11
    73fc:	02 c0       	rjmp	.+4      	; 0x7402 <vfprintf+0x320>
    73fe:	98 2c       	mov	r9, r8
    7400:	21 2c       	mov	r2, r1
    7402:	a4 fe       	sbrs	r10, 4
    7404:	0f c0       	rjmp	.+30     	; 0x7424 <vfprintf+0x342>
    7406:	b6 01       	movw	r22, r12
    7408:	80 e3       	ldi	r24, 0x30	; 48
    740a:	90 e0       	ldi	r25, 0x00	; 0
    740c:	52 d0       	rcall	.+164    	; 0x74b2 <fputc>
    740e:	a2 fe       	sbrs	r10, 2
    7410:	16 c0       	rjmp	.+44     	; 0x743e <vfprintf+0x35c>
    7412:	a1 fc       	sbrc	r10, 1
    7414:	03 c0       	rjmp	.+6      	; 0x741c <vfprintf+0x33a>
    7416:	88 e7       	ldi	r24, 0x78	; 120
    7418:	90 e0       	ldi	r25, 0x00	; 0
    741a:	02 c0       	rjmp	.+4      	; 0x7420 <vfprintf+0x33e>
    741c:	88 e5       	ldi	r24, 0x58	; 88
    741e:	90 e0       	ldi	r25, 0x00	; 0
    7420:	b6 01       	movw	r22, r12
    7422:	0c c0       	rjmp	.+24     	; 0x743c <vfprintf+0x35a>
    7424:	8a 2d       	mov	r24, r10
    7426:	86 78       	andi	r24, 0x86	; 134
    7428:	51 f0       	breq	.+20     	; 0x743e <vfprintf+0x35c>
    742a:	a1 fe       	sbrs	r10, 1
    742c:	02 c0       	rjmp	.+4      	; 0x7432 <vfprintf+0x350>
    742e:	8b e2       	ldi	r24, 0x2B	; 43
    7430:	01 c0       	rjmp	.+2      	; 0x7434 <vfprintf+0x352>
    7432:	80 e2       	ldi	r24, 0x20	; 32
    7434:	a7 fc       	sbrc	r10, 7
    7436:	8d e2       	ldi	r24, 0x2D	; 45
    7438:	b6 01       	movw	r22, r12
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	3a d0       	rcall	.+116    	; 0x74b2 <fputc>
    743e:	89 14       	cp	r8, r9
    7440:	30 f4       	brcc	.+12     	; 0x744e <vfprintf+0x36c>
    7442:	b6 01       	movw	r22, r12
    7444:	80 e3       	ldi	r24, 0x30	; 48
    7446:	90 e0       	ldi	r25, 0x00	; 0
    7448:	34 d0       	rcall	.+104    	; 0x74b2 <fputc>
    744a:	9a 94       	dec	r9
    744c:	f8 cf       	rjmp	.-16     	; 0x743e <vfprintf+0x35c>
    744e:	8a 94       	dec	r8
    7450:	f3 01       	movw	r30, r6
    7452:	e8 0d       	add	r30, r8
    7454:	f1 1d       	adc	r31, r1
    7456:	80 81       	ld	r24, Z
    7458:	b6 01       	movw	r22, r12
    745a:	90 e0       	ldi	r25, 0x00	; 0
    745c:	2a d0       	rcall	.+84     	; 0x74b2 <fputc>
    745e:	81 10       	cpse	r8, r1
    7460:	f6 cf       	rjmp	.-20     	; 0x744e <vfprintf+0x36c>
    7462:	22 20       	and	r2, r2
    7464:	09 f4       	brne	.+2      	; 0x7468 <vfprintf+0x386>
    7466:	4e ce       	rjmp	.-868    	; 0x7104 <vfprintf+0x22>
    7468:	b6 01       	movw	r22, r12
    746a:	80 e2       	ldi	r24, 0x20	; 32
    746c:	90 e0       	ldi	r25, 0x00	; 0
    746e:	21 d0       	rcall	.+66     	; 0x74b2 <fputc>
    7470:	2a 94       	dec	r2
    7472:	f7 cf       	rjmp	.-18     	; 0x7462 <vfprintf+0x380>
    7474:	f6 01       	movw	r30, r12
    7476:	86 81       	ldd	r24, Z+6	; 0x06
    7478:	97 81       	ldd	r25, Z+7	; 0x07
    747a:	02 c0       	rjmp	.+4      	; 0x7480 <vfprintf+0x39e>
    747c:	8f ef       	ldi	r24, 0xFF	; 255
    747e:	9f ef       	ldi	r25, 0xFF	; 255
    7480:	2b 96       	adiw	r28, 0x0b	; 11
    7482:	e2 e1       	ldi	r30, 0x12	; 18
    7484:	04 c1       	rjmp	.+520    	; 0x768e <__epilogue_restores__>

00007486 <strnlen_P>:
    7486:	fc 01       	movw	r30, r24
    7488:	05 90       	lpm	r0, Z+
    748a:	61 50       	subi	r22, 0x01	; 1
    748c:	70 40       	sbci	r23, 0x00	; 0
    748e:	01 10       	cpse	r0, r1
    7490:	d8 f7       	brcc	.-10     	; 0x7488 <strnlen_P+0x2>
    7492:	80 95       	com	r24
    7494:	90 95       	com	r25
    7496:	8e 0f       	add	r24, r30
    7498:	9f 1f       	adc	r25, r31
    749a:	08 95       	ret

0000749c <strnlen>:
    749c:	fc 01       	movw	r30, r24
    749e:	61 50       	subi	r22, 0x01	; 1
    74a0:	70 40       	sbci	r23, 0x00	; 0
    74a2:	01 90       	ld	r0, Z+
    74a4:	01 10       	cpse	r0, r1
    74a6:	d8 f7       	brcc	.-10     	; 0x749e <strnlen+0x2>
    74a8:	80 95       	com	r24
    74aa:	90 95       	com	r25
    74ac:	8e 0f       	add	r24, r30
    74ae:	9f 1f       	adc	r25, r31
    74b0:	08 95       	ret

000074b2 <fputc>:
    74b2:	0f 93       	push	r16
    74b4:	1f 93       	push	r17
    74b6:	cf 93       	push	r28
    74b8:	df 93       	push	r29
    74ba:	fb 01       	movw	r30, r22
    74bc:	23 81       	ldd	r18, Z+3	; 0x03
    74be:	21 fd       	sbrc	r18, 1
    74c0:	03 c0       	rjmp	.+6      	; 0x74c8 <fputc+0x16>
    74c2:	8f ef       	ldi	r24, 0xFF	; 255
    74c4:	9f ef       	ldi	r25, 0xFF	; 255
    74c6:	2c c0       	rjmp	.+88     	; 0x7520 <fputc+0x6e>
    74c8:	22 ff       	sbrs	r18, 2
    74ca:	16 c0       	rjmp	.+44     	; 0x74f8 <fputc+0x46>
    74cc:	46 81       	ldd	r20, Z+6	; 0x06
    74ce:	57 81       	ldd	r21, Z+7	; 0x07
    74d0:	24 81       	ldd	r18, Z+4	; 0x04
    74d2:	35 81       	ldd	r19, Z+5	; 0x05
    74d4:	42 17       	cp	r20, r18
    74d6:	53 07       	cpc	r21, r19
    74d8:	44 f4       	brge	.+16     	; 0x74ea <fputc+0x38>
    74da:	a0 81       	ld	r26, Z
    74dc:	b1 81       	ldd	r27, Z+1	; 0x01
    74de:	9d 01       	movw	r18, r26
    74e0:	2f 5f       	subi	r18, 0xFF	; 255
    74e2:	3f 4f       	sbci	r19, 0xFF	; 255
    74e4:	31 83       	std	Z+1, r19	; 0x01
    74e6:	20 83       	st	Z, r18
    74e8:	8c 93       	st	X, r24
    74ea:	26 81       	ldd	r18, Z+6	; 0x06
    74ec:	37 81       	ldd	r19, Z+7	; 0x07
    74ee:	2f 5f       	subi	r18, 0xFF	; 255
    74f0:	3f 4f       	sbci	r19, 0xFF	; 255
    74f2:	37 83       	std	Z+7, r19	; 0x07
    74f4:	26 83       	std	Z+6, r18	; 0x06
    74f6:	14 c0       	rjmp	.+40     	; 0x7520 <fputc+0x6e>
    74f8:	8b 01       	movw	r16, r22
    74fa:	ec 01       	movw	r28, r24
    74fc:	fb 01       	movw	r30, r22
    74fe:	00 84       	ldd	r0, Z+8	; 0x08
    7500:	f1 85       	ldd	r31, Z+9	; 0x09
    7502:	e0 2d       	mov	r30, r0
    7504:	09 95       	icall
    7506:	89 2b       	or	r24, r25
    7508:	e1 f6       	brne	.-72     	; 0x74c2 <fputc+0x10>
    750a:	d8 01       	movw	r26, r16
    750c:	16 96       	adiw	r26, 0x06	; 6
    750e:	8d 91       	ld	r24, X+
    7510:	9c 91       	ld	r25, X
    7512:	17 97       	sbiw	r26, 0x07	; 7
    7514:	01 96       	adiw	r24, 0x01	; 1
    7516:	17 96       	adiw	r26, 0x07	; 7
    7518:	9c 93       	st	X, r25
    751a:	8e 93       	st	-X, r24
    751c:	16 97       	sbiw	r26, 0x06	; 6
    751e:	ce 01       	movw	r24, r28
    7520:	df 91       	pop	r29
    7522:	cf 91       	pop	r28
    7524:	1f 91       	pop	r17
    7526:	0f 91       	pop	r16
    7528:	08 95       	ret

0000752a <__ultoa_invert>:
    752a:	fa 01       	movw	r30, r20
    752c:	aa 27       	eor	r26, r26
    752e:	28 30       	cpi	r18, 0x08	; 8
    7530:	51 f1       	breq	.+84     	; 0x7586 <__ultoa_invert+0x5c>
    7532:	20 31       	cpi	r18, 0x10	; 16
    7534:	81 f1       	breq	.+96     	; 0x7596 <__ultoa_invert+0x6c>
    7536:	e8 94       	clt
    7538:	6f 93       	push	r22
    753a:	6e 7f       	andi	r22, 0xFE	; 254
    753c:	6e 5f       	subi	r22, 0xFE	; 254
    753e:	7f 4f       	sbci	r23, 0xFF	; 255
    7540:	8f 4f       	sbci	r24, 0xFF	; 255
    7542:	9f 4f       	sbci	r25, 0xFF	; 255
    7544:	af 4f       	sbci	r26, 0xFF	; 255
    7546:	b1 e0       	ldi	r27, 0x01	; 1
    7548:	3e d0       	rcall	.+124    	; 0x75c6 <__ultoa_invert+0x9c>
    754a:	b4 e0       	ldi	r27, 0x04	; 4
    754c:	3c d0       	rcall	.+120    	; 0x75c6 <__ultoa_invert+0x9c>
    754e:	67 0f       	add	r22, r23
    7550:	78 1f       	adc	r23, r24
    7552:	89 1f       	adc	r24, r25
    7554:	9a 1f       	adc	r25, r26
    7556:	a1 1d       	adc	r26, r1
    7558:	68 0f       	add	r22, r24
    755a:	79 1f       	adc	r23, r25
    755c:	8a 1f       	adc	r24, r26
    755e:	91 1d       	adc	r25, r1
    7560:	a1 1d       	adc	r26, r1
    7562:	6a 0f       	add	r22, r26
    7564:	71 1d       	adc	r23, r1
    7566:	81 1d       	adc	r24, r1
    7568:	91 1d       	adc	r25, r1
    756a:	a1 1d       	adc	r26, r1
    756c:	20 d0       	rcall	.+64     	; 0x75ae <__ultoa_invert+0x84>
    756e:	09 f4       	brne	.+2      	; 0x7572 <__ultoa_invert+0x48>
    7570:	68 94       	set
    7572:	3f 91       	pop	r19
    7574:	2a e0       	ldi	r18, 0x0A	; 10
    7576:	26 9f       	mul	r18, r22
    7578:	11 24       	eor	r1, r1
    757a:	30 19       	sub	r19, r0
    757c:	30 5d       	subi	r19, 0xD0	; 208
    757e:	31 93       	st	Z+, r19
    7580:	de f6       	brtc	.-74     	; 0x7538 <__ultoa_invert+0xe>
    7582:	cf 01       	movw	r24, r30
    7584:	08 95       	ret
    7586:	46 2f       	mov	r20, r22
    7588:	47 70       	andi	r20, 0x07	; 7
    758a:	40 5d       	subi	r20, 0xD0	; 208
    758c:	41 93       	st	Z+, r20
    758e:	b3 e0       	ldi	r27, 0x03	; 3
    7590:	0f d0       	rcall	.+30     	; 0x75b0 <__ultoa_invert+0x86>
    7592:	c9 f7       	brne	.-14     	; 0x7586 <__ultoa_invert+0x5c>
    7594:	f6 cf       	rjmp	.-20     	; 0x7582 <__ultoa_invert+0x58>
    7596:	46 2f       	mov	r20, r22
    7598:	4f 70       	andi	r20, 0x0F	; 15
    759a:	40 5d       	subi	r20, 0xD0	; 208
    759c:	4a 33       	cpi	r20, 0x3A	; 58
    759e:	18 f0       	brcs	.+6      	; 0x75a6 <__ultoa_invert+0x7c>
    75a0:	49 5d       	subi	r20, 0xD9	; 217
    75a2:	31 fd       	sbrc	r19, 1
    75a4:	40 52       	subi	r20, 0x20	; 32
    75a6:	41 93       	st	Z+, r20
    75a8:	02 d0       	rcall	.+4      	; 0x75ae <__ultoa_invert+0x84>
    75aa:	a9 f7       	brne	.-22     	; 0x7596 <__ultoa_invert+0x6c>
    75ac:	ea cf       	rjmp	.-44     	; 0x7582 <__ultoa_invert+0x58>
    75ae:	b4 e0       	ldi	r27, 0x04	; 4
    75b0:	a6 95       	lsr	r26
    75b2:	97 95       	ror	r25
    75b4:	87 95       	ror	r24
    75b6:	77 95       	ror	r23
    75b8:	67 95       	ror	r22
    75ba:	ba 95       	dec	r27
    75bc:	c9 f7       	brne	.-14     	; 0x75b0 <__ultoa_invert+0x86>
    75be:	00 97       	sbiw	r24, 0x00	; 0
    75c0:	61 05       	cpc	r22, r1
    75c2:	71 05       	cpc	r23, r1
    75c4:	08 95       	ret
    75c6:	9b 01       	movw	r18, r22
    75c8:	ac 01       	movw	r20, r24
    75ca:	0a 2e       	mov	r0, r26
    75cc:	06 94       	lsr	r0
    75ce:	57 95       	ror	r21
    75d0:	47 95       	ror	r20
    75d2:	37 95       	ror	r19
    75d4:	27 95       	ror	r18
    75d6:	ba 95       	dec	r27
    75d8:	c9 f7       	brne	.-14     	; 0x75cc <__ultoa_invert+0xa2>
    75da:	62 0f       	add	r22, r18
    75dc:	73 1f       	adc	r23, r19
    75de:	84 1f       	adc	r24, r20
    75e0:	95 1f       	adc	r25, r21
    75e2:	a0 1d       	adc	r26, r0
    75e4:	08 95       	ret

000075e6 <eeprom_read_byte>:
    75e6:	f9 99       	sbic	0x1f, 1	; 31
    75e8:	fe cf       	rjmp	.-4      	; 0x75e6 <eeprom_read_byte>
    75ea:	92 bd       	out	0x22, r25	; 34
    75ec:	81 bd       	out	0x21, r24	; 33
    75ee:	f8 9a       	sbi	0x1f, 0	; 31
    75f0:	99 27       	eor	r25, r25
    75f2:	80 b5       	in	r24, 0x20	; 32
    75f4:	08 95       	ret

000075f6 <eeprom_read_dword>:
    75f6:	a6 e1       	ldi	r26, 0x16	; 22
    75f8:	b0 e0       	ldi	r27, 0x00	; 0
    75fa:	44 e0       	ldi	r20, 0x04	; 4
    75fc:	50 e0       	ldi	r21, 0x00	; 0
    75fe:	1d c0       	rjmp	.+58     	; 0x763a <eeprom_read_blraw>

00007600 <eeprom_read_word>:
    7600:	a8 e1       	ldi	r26, 0x18	; 24
    7602:	b0 e0       	ldi	r27, 0x00	; 0
    7604:	42 e0       	ldi	r20, 0x02	; 2
    7606:	50 e0       	ldi	r21, 0x00	; 0
    7608:	18 c0       	rjmp	.+48     	; 0x763a <eeprom_read_blraw>

0000760a <eeprom_write_byte>:
    760a:	26 2f       	mov	r18, r22

0000760c <eeprom_write_r18>:
    760c:	f9 99       	sbic	0x1f, 1	; 31
    760e:	fe cf       	rjmp	.-4      	; 0x760c <eeprom_write_r18>
    7610:	1f ba       	out	0x1f, r1	; 31
    7612:	92 bd       	out	0x22, r25	; 34
    7614:	81 bd       	out	0x21, r24	; 33
    7616:	20 bd       	out	0x20, r18	; 32
    7618:	0f b6       	in	r0, 0x3f	; 63
    761a:	f8 94       	cli
    761c:	fa 9a       	sbi	0x1f, 2	; 31
    761e:	f9 9a       	sbi	0x1f, 1	; 31
    7620:	0f be       	out	0x3f, r0	; 63
    7622:	01 96       	adiw	r24, 0x01	; 1
    7624:	08 95       	ret

00007626 <eeprom_write_dword>:
    7626:	24 2f       	mov	r18, r20
    7628:	f1 df       	rcall	.-30     	; 0x760c <eeprom_write_r18>
    762a:	25 2f       	mov	r18, r21
    762c:	ef df       	rcall	.-34     	; 0x760c <eeprom_write_r18>
    762e:	00 c0       	rjmp	.+0      	; 0x7630 <eeprom_write_word>

00007630 <eeprom_write_word>:
    7630:	ec df       	rcall	.-40     	; 0x760a <eeprom_write_byte>
    7632:	27 2f       	mov	r18, r23
    7634:	eb cf       	rjmp	.-42     	; 0x760c <eeprom_write_r18>

00007636 <eeprom_read_block>:
    7636:	dc 01       	movw	r26, r24
    7638:	cb 01       	movw	r24, r22

0000763a <eeprom_read_blraw>:
    763a:	fc 01       	movw	r30, r24
    763c:	f9 99       	sbic	0x1f, 1	; 31
    763e:	fe cf       	rjmp	.-4      	; 0x763c <eeprom_read_blraw+0x2>
    7640:	06 c0       	rjmp	.+12     	; 0x764e <eeprom_read_blraw+0x14>
    7642:	f2 bd       	out	0x22, r31	; 34
    7644:	e1 bd       	out	0x21, r30	; 33
    7646:	f8 9a       	sbi	0x1f, 0	; 31
    7648:	31 96       	adiw	r30, 0x01	; 1
    764a:	00 b4       	in	r0, 0x20	; 32
    764c:	0d 92       	st	X+, r0
    764e:	41 50       	subi	r20, 0x01	; 1
    7650:	50 40       	sbci	r21, 0x00	; 0
    7652:	b8 f7       	brcc	.-18     	; 0x7642 <eeprom_read_blraw+0x8>
    7654:	08 95       	ret

00007656 <__prologue_saves__>:
    7656:	2f 92       	push	r2
    7658:	3f 92       	push	r3
    765a:	4f 92       	push	r4
    765c:	5f 92       	push	r5
    765e:	6f 92       	push	r6
    7660:	7f 92       	push	r7
    7662:	8f 92       	push	r8
    7664:	9f 92       	push	r9
    7666:	af 92       	push	r10
    7668:	bf 92       	push	r11
    766a:	cf 92       	push	r12
    766c:	df 92       	push	r13
    766e:	ef 92       	push	r14
    7670:	ff 92       	push	r15
    7672:	0f 93       	push	r16
    7674:	1f 93       	push	r17
    7676:	cf 93       	push	r28
    7678:	df 93       	push	r29
    767a:	cd b7       	in	r28, 0x3d	; 61
    767c:	de b7       	in	r29, 0x3e	; 62
    767e:	ca 1b       	sub	r28, r26
    7680:	db 0b       	sbc	r29, r27
    7682:	0f b6       	in	r0, 0x3f	; 63
    7684:	f8 94       	cli
    7686:	de bf       	out	0x3e, r29	; 62
    7688:	0f be       	out	0x3f, r0	; 63
    768a:	cd bf       	out	0x3d, r28	; 61
    768c:	09 94       	ijmp

0000768e <__epilogue_restores__>:
    768e:	2a 88       	ldd	r2, Y+18	; 0x12
    7690:	39 88       	ldd	r3, Y+17	; 0x11
    7692:	48 88       	ldd	r4, Y+16	; 0x10
    7694:	5f 84       	ldd	r5, Y+15	; 0x0f
    7696:	6e 84       	ldd	r6, Y+14	; 0x0e
    7698:	7d 84       	ldd	r7, Y+13	; 0x0d
    769a:	8c 84       	ldd	r8, Y+12	; 0x0c
    769c:	9b 84       	ldd	r9, Y+11	; 0x0b
    769e:	aa 84       	ldd	r10, Y+10	; 0x0a
    76a0:	b9 84       	ldd	r11, Y+9	; 0x09
    76a2:	c8 84       	ldd	r12, Y+8	; 0x08
    76a4:	df 80       	ldd	r13, Y+7	; 0x07
    76a6:	ee 80       	ldd	r14, Y+6	; 0x06
    76a8:	fd 80       	ldd	r15, Y+5	; 0x05
    76aa:	0c 81       	ldd	r16, Y+4	; 0x04
    76ac:	1b 81       	ldd	r17, Y+3	; 0x03
    76ae:	aa 81       	ldd	r26, Y+2	; 0x02
    76b0:	b9 81       	ldd	r27, Y+1	; 0x01
    76b2:	ce 0f       	add	r28, r30
    76b4:	d1 1d       	adc	r29, r1
    76b6:	0f b6       	in	r0, 0x3f	; 63
    76b8:	f8 94       	cli
    76ba:	de bf       	out	0x3e, r29	; 62
    76bc:	0f be       	out	0x3f, r0	; 63
    76be:	cd bf       	out	0x3d, r28	; 61
    76c0:	ed 01       	movw	r28, r26
    76c2:	08 95       	ret

000076c4 <_exit>:
    76c4:	f8 94       	cli

000076c6 <__stop_program>:
    76c6:	ff cf       	rjmp	.-2      	; 0x76c6 <__stop_program>
