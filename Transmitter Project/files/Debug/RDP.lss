
RDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000043a  00800100  000050d8  0000518c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050d8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000274  0080053a  0080053a  000055c6  2**0
                  ALLOC
  3 .eeprom       00000043  00810000  00810000  000055c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00005609  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005668  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000180  00000000  00000000  000056a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005e79  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011b3  00000000  00000000  0000b6a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004da3  00000000  00000000  0000c854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010c4  00000000  00000000  000115f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000144f4  00000000  00000000  000126bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000533d  00000000  00000000  00026bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  0002beed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00005563  00000000  00000000  0002bffd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4e c0       	rjmp	.+156    	; 0xa2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c0       	rjmp	.+152    	; 0xa2 <__bad_interrupt>
       a:	00 00       	nop
       c:	24 c7       	rjmp	.+3656   	; 0xe56 <__vector_3>
       e:	00 00       	nop
      10:	4b c7       	rjmp	.+3734   	; 0xea8 <__vector_4>
      12:	00 00       	nop
      14:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_5>
      18:	0c 94 87 0a 	jmp	0x150e	; 0x150e <__vector_6>
      1c:	42 c0       	rjmp	.+132    	; 0xa2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 d6 11 	jmp	0x23ac	; 0x23ac <__vector_8>
      24:	3e c0       	rjmp	.+124    	; 0xa2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c0       	rjmp	.+120    	; 0xa2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c0       	rjmp	.+116    	; 0xa2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c0       	rjmp	.+112    	; 0xa2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c0       	rjmp	.+108    	; 0xa2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c0       	rjmp	.+104    	; 0xa2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c0       	rjmp	.+100    	; 0xa2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c0       	rjmp	.+96     	; 0xa2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c0       	rjmp	.+92     	; 0xa2 <__bad_interrupt>
      46:	00 00       	nop
      48:	51 c7       	rjmp	.+3746   	; 0xeec <__vector_18>
      4a:	00 00       	nop
      4c:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_19>
      50:	28 c0       	rjmp	.+80     	; 0xa2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c0       	rjmp	.+76     	; 0xa2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c0       	rjmp	.+72     	; 0xa2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c0       	rjmp	.+68     	; 0xa2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	20 c0       	rjmp	.+64     	; 0xa2 <__bad_interrupt>
      62:	00 00       	nop
      64:	1e c0       	rjmp	.+60     	; 0xa2 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	15 e0       	ldi	r17, 0x05	; 5
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ed       	ldi	r30, 0xD8	; 216
      7c:	f0 e5       	ldi	r31, 0x50	; 80
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 33       	cpi	r26, 0x3A	; 58
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	aa e3       	ldi	r26, 0x3A	; 58
      8e:	b5 e0       	ldi	r27, 0x05	; 5
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 3a       	cpi	r26, 0xAE	; 174
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <main>
      9e:	0c 94 6a 28 	jmp	0x50d4	; 0x50d4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	ae cf       	rjmp	.-164    	; 0x0 <__vectors>

000000a4 <nextFullTxBuffer>:
static volatile BOOL linkbus_tx_active = FALSE; // volatile is required to ensure optimizer handles this properly
static LinkbusTxBuffer tx_buffer[LINKBUS_NUMBER_OF_TX_MSG_BUFFERS];
static LinkbusRxBuffer rx_buffer[LINKBUS_NUMBER_OF_RX_MSG_BUFFERS];

LinkbusTxBuffer* nextFullTxBuffer(void)
{
      a4:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <bufferIndex.2538>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] == '\0')
      a8:	94 e0       	ldi	r25, 0x04	; 4
      aa:	5b e4       	ldi	r21, 0x4B	; 75
      ac:	06 c0       	rjmp	.+12     	; 0xba <nextFullTxBuffer+0x16>
      ae:	91 50       	subi	r25, 0x01	; 1
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
      b0:	89 f0       	breq	.+34     	; 0xd4 <nextFullTxBuffer+0x30>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
      b2:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
      b4:	84 30       	cpi	r24, 0x04	; 4
      b6:	08 f0       	brcs	.+2      	; 0xba <nextFullTxBuffer+0x16>
		{
			bufferIndex = 0;
      b8:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] == '\0')
      ba:	28 2f       	mov	r18, r24
      bc:	30 e0       	ldi	r19, 0x00	; 0
      be:	52 9f       	mul	r21, r18
      c0:	f0 01       	movw	r30, r0
      c2:	53 9f       	mul	r21, r19
      c4:	f0 0d       	add	r31, r0
      c6:	11 24       	eor	r1, r1
      c8:	ee 53       	subi	r30, 0x3E	; 62
      ca:	fa 4f       	sbci	r31, 0xFA	; 250
      cc:	40 81       	ld	r20, Z
      ce:	44 23       	and	r20, r20
      d0:	71 f3       	breq	.-36     	; 0xae <nextFullTxBuffer+0xa>
      d2:	05 c0       	rjmp	.+10     	; 0xde <nextFullTxBuffer+0x3a>
      d4:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <bufferIndex.2538>
	if(found)
	{
		return( &tx_buffer[bufferIndex]);
	}

	return(NULL);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	08 95       	ret
      de:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <bufferIndex.2538>
		}
	}

	if(found)
	{
		return( &tx_buffer[bufferIndex]);
      e2:	4b e4       	ldi	r20, 0x4B	; 75
      e4:	42 9f       	mul	r20, r18
      e6:	c0 01       	movw	r24, r0
      e8:	43 9f       	mul	r20, r19
      ea:	90 0d       	add	r25, r0
      ec:	11 24       	eor	r1, r1
      ee:	8e 53       	subi	r24, 0x3E	; 62
      f0:	9a 4f       	sbci	r25, 0xFA	; 250
	}

	return(NULL);
}
      f2:	08 95       	ret

000000f4 <nextEmptyTxBuffer>:

LinkbusTxBuffer* nextEmptyTxBuffer(void)
{
      f4:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <bufferIndex.2547>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] != '\0')
      f8:	94 e0       	ldi	r25, 0x04	; 4
      fa:	5b e4       	ldi	r21, 0x4B	; 75
      fc:	06 c0       	rjmp	.+12     	; 0x10a <nextEmptyTxBuffer+0x16>
      fe:	91 50       	subi	r25, 0x01	; 1
	{
		if(++count >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     100:	89 f0       	breq	.+34     	; 0x124 <nextEmptyTxBuffer+0x30>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     102:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_TX_MSG_BUFFERS)
     104:	84 30       	cpi	r24, 0x04	; 4
     106:	08 f0       	brcs	.+2      	; 0x10a <nextEmptyTxBuffer+0x16>
		{
			bufferIndex = 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(tx_buffer[bufferIndex][0] != '\0')
     10a:	28 2f       	mov	r18, r24
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	52 9f       	mul	r21, r18
     110:	f0 01       	movw	r30, r0
     112:	53 9f       	mul	r21, r19
     114:	f0 0d       	add	r31, r0
     116:	11 24       	eor	r1, r1
     118:	ee 53       	subi	r30, 0x3E	; 62
     11a:	fa 4f       	sbci	r31, 0xFA	; 250
     11c:	40 81       	ld	r20, Z
     11e:	41 11       	cpse	r20, r1
     120:	ee cf       	rjmp	.-36     	; 0xfe <nextEmptyTxBuffer+0xa>
     122:	05 c0       	rjmp	.+10     	; 0x12e <nextEmptyTxBuffer+0x3a>
     124:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <bufferIndex.2547>
	if(found)
	{
		return( &tx_buffer[bufferIndex]);
	}

	return(NULL);
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	08 95       	ret
     12e:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <bufferIndex.2547>
		}
	}

	if(found)
	{
		return( &tx_buffer[bufferIndex]);
     132:	4b e4       	ldi	r20, 0x4B	; 75
     134:	42 9f       	mul	r20, r18
     136:	c0 01       	movw	r24, r0
     138:	43 9f       	mul	r20, r19
     13a:	90 0d       	add	r25, r0
     13c:	11 24       	eor	r1, r1
     13e:	8e 53       	subi	r24, 0x3E	; 62
     140:	9a 4f       	sbci	r25, 0xFA	; 250
	}

	return(NULL);
}
     142:	08 95       	ret

00000144 <nextEmptyRxBuffer>:

LinkbusRxBuffer* nextEmptyRxBuffer(void)
{
     144:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <bufferIndex.2556>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     148:	28 2f       	mov	r18, r24
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	92 e4       	ldi	r25, 0x42	; 66
     14e:	89 9f       	mul	r24, r25
     150:	f0 01       	movw	r30, r0
     152:	11 24       	eor	r1, r1
     154:	e2 5c       	subi	r30, 0xC2	; 194
     156:	fa 4f       	sbci	r31, 0xFA	; 250
     158:	41 81       	ldd	r20, Z+1	; 0x01
     15a:	52 81       	ldd	r21, Z+2	; 0x02
     15c:	45 2b       	or	r20, r21
     15e:	a9 f0       	breq	.+42     	; 0x18a <nextEmptyRxBuffer+0x46>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     160:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	08 f0       	brcs	.+2      	; 0x168 <nextEmptyRxBuffer+0x24>
		{
			bufferIndex = 0;
     166:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id != MESSAGE_EMPTY)
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	92 e4       	ldi	r25, 0x42	; 66
     16e:	89 9f       	mul	r24, r25
     170:	f0 01       	movw	r30, r0
     172:	11 24       	eor	r1, r1
     174:	e2 5c       	subi	r30, 0xC2	; 194
     176:	fa 4f       	sbci	r31, 0xFA	; 250
     178:	41 81       	ldd	r20, Z+1	; 0x01
     17a:	52 81       	ldd	r21, Z+2	; 0x02
     17c:	45 2b       	or	r20, r21
     17e:	29 f0       	breq	.+10     	; 0x18a <nextEmptyRxBuffer+0x46>
     180:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <bufferIndex.2556>
	if(found)
	{
		return( &rx_buffer[bufferIndex]);
	}

	return(NULL);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	08 95       	ret
     18a:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <bufferIndex.2556>
		}
	}

	if(found)
	{
		return( &rx_buffer[bufferIndex]);
     18e:	42 e4       	ldi	r20, 0x42	; 66
     190:	42 9f       	mul	r20, r18
     192:	c0 01       	movw	r24, r0
     194:	43 9f       	mul	r20, r19
     196:	90 0d       	add	r25, r0
     198:	11 24       	eor	r1, r1
     19a:	82 5c       	subi	r24, 0xC2	; 194
     19c:	9a 4f       	sbci	r25, 0xFA	; 250
	}

	return(NULL);
}
     19e:	08 95       	ret

000001a0 <nextFullRxBuffer>:

LinkbusRxBuffer* nextFullRxBuffer(void)
{
     1a0:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <__data_end>
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     1a4:	28 2f       	mov	r18, r24
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	92 e4       	ldi	r25, 0x42	; 66
     1aa:	89 9f       	mul	r24, r25
     1ac:	f0 01       	movw	r30, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	e2 5c       	subi	r30, 0xC2	; 194
     1b2:	fa 4f       	sbci	r31, 0xFA	; 250
     1b4:	41 81       	ldd	r20, Z+1	; 0x01
     1b6:	52 81       	ldd	r21, Z+2	; 0x02
     1b8:	45 2b       	or	r20, r21
     1ba:	a9 f4       	brne	.+42     	; 0x1e6 <nextFullRxBuffer+0x46>
		{
			found = FALSE;
			break;
		}

		bufferIndex++;
     1bc:	8f 5f       	subi	r24, 0xFF	; 255
		if(bufferIndex >= LINKBUS_NUMBER_OF_RX_MSG_BUFFERS)
     1be:	82 30       	cpi	r24, 0x02	; 2
     1c0:	08 f0       	brcs	.+2      	; 0x1c4 <nextFullRxBuffer+0x24>
		{
			bufferIndex = 0;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
{
	BOOL found = TRUE;
	static uint8_t bufferIndex = 0;
	uint8_t count = 0;

	while(rx_buffer[bufferIndex].id == MESSAGE_EMPTY)
     1c4:	28 2f       	mov	r18, r24
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	92 e4       	ldi	r25, 0x42	; 66
     1ca:	89 9f       	mul	r24, r25
     1cc:	f0 01       	movw	r30, r0
     1ce:	11 24       	eor	r1, r1
     1d0:	e2 5c       	subi	r30, 0xC2	; 194
     1d2:	fa 4f       	sbci	r31, 0xFA	; 250
     1d4:	41 81       	ldd	r20, Z+1	; 0x01
     1d6:	52 81       	ldd	r21, Z+2	; 0x02
     1d8:	45 2b       	or	r20, r21
     1da:	29 f4       	brne	.+10     	; 0x1e6 <nextFullRxBuffer+0x46>
     1dc:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <__data_end>
	if(found)
	{
		return( &rx_buffer[bufferIndex]);
	}

	return(NULL);
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	08 95       	ret
     1e6:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <__data_end>
		}
	}

	if(found)
	{
		return( &rx_buffer[bufferIndex]);
     1ea:	42 e4       	ldi	r20, 0x42	; 66
     1ec:	42 9f       	mul	r20, r18
     1ee:	c0 01       	movw	r24, r0
     1f0:	43 9f       	mul	r20, r19
     1f2:	90 0d       	add	r25, r0
     1f4:	11 24       	eor	r1, r1
     1f6:	82 5c       	subi	r24, 0xC2	; 194
     1f8:	9a 4f       	sbci	r25, 0xFA	; 250
	}

	return(NULL);
}
     1fa:	08 95       	ret

000001fc <linkbusTxInProgress>:
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     1fc:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <linkbus_tx_active>
}
     200:	08 95       	ret

00000202 <linkbus_start_tx>:

BOOL linkbus_start_tx(void)
{
	BOOL success = !linkbus_tx_active;
     202:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <linkbus_tx_active>
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	91 11       	cpse	r25, r1
     20a:	80 e0       	ldi	r24, 0x00	; 0

	if(success) /* message will be lost if transmit is busy */
     20c:	91 11       	cpse	r25, r1
     20e:	08 c0       	rjmp	.+16     	; 0x220 <linkbus_start_tx+0x1e>
	{
		linkbus_tx_active = TRUE;
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	90 93 ee 06 	sts	0x06EE, r25	; 0x8006ee <linkbus_tx_active>
		UCSR0B |= (1 << UDRIE0);
     216:	e1 ec       	ldi	r30, 0xC1	; 193
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	90 81       	ld	r25, Z
     21c:	90 62       	ori	r25, 0x20	; 32
     21e:	90 83       	st	Z, r25
	}

	return(success);
}
     220:	08 95       	ret

00000222 <linkbus_end_tx>:

void linkbus_end_tx(void)
{
	if(linkbus_tx_active)
     222:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <linkbus_tx_active>
     226:	88 23       	and	r24, r24
     228:	39 f0       	breq	.+14     	; 0x238 <linkbus_end_tx+0x16>
	{
		UCSR0B &= ~(1 << UDRIE0);
     22a:	e1 ec       	ldi	r30, 0xC1	; 193
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	8f 7d       	andi	r24, 0xDF	; 223
     232:	80 83       	st	Z, r24
		linkbus_tx_active = FALSE;
     234:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <linkbus_tx_active>
     238:	08 95       	ret

0000023a <linkbus_reset_rx>:
	}
}

void linkbus_reset_rx(void)
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
	if(UCSR0B & (1 << RXEN0))   /* perform only if rx is currently enabled */
     23e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     242:	84 ff       	sbrs	r24, 4
     244:	0f c0       	rjmp	.+30     	; 0x264 <linkbus_reset_rx+0x2a>
	{
		UCSR0B &= ~(1 << RXEN0);
     246:	e1 ec       	ldi	r30, 0xC1	; 193
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	8f 7e       	andi	r24, 0xEF	; 239
     24e:	80 83       	st	Z, r24
/*		uint16_t s = sizeof(rx_buffer); // test */
		memset(rx_buffer, 0, sizeof(rx_buffer));
     250:	84 e8       	ldi	r24, 0x84	; 132
     252:	ae e3       	ldi	r26, 0x3E	; 62
     254:	b5 e0       	ldi	r27, 0x05	; 5
     256:	ed 01       	movw	r28, r26
     258:	19 92       	st	Y+, r1
     25a:	8a 95       	dec	r24
     25c:	e9 f7       	brne	.-6      	; 0x258 <linkbus_reset_rx+0x1e>
/*		if(s) s = 0; // test */
		UCSR0B |= (1 << RXEN0);
     25e:	80 81       	ld	r24, Z
     260:	80 61       	ori	r24, 0x10	; 16
     262:	80 83       	st	Z, r24
	}
}
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <linkbus_init>:

void linkbus_init(void)
{
	memset(rx_buffer, 0, sizeof(rx_buffer));
     26a:	84 e8       	ldi	r24, 0x84	; 132
     26c:	ee e3       	ldi	r30, 0x3E	; 62
     26e:	f5 e0       	ldi	r31, 0x05	; 5
     270:	df 01       	movw	r26, r30
     272:	1d 92       	st	X+, r1
     274:	8a 95       	dec	r24
     276:	e9 f7       	brne	.-6      	; 0x272 <linkbus_init+0x8>
	/*Set baud rate */
	UBRR0H = ((unsigned char)(MYUBRR >> 8));
     278:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)MYUBRR;
     27c:	83 e3       	ldi	r24, 0x33	; 51
     27e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/* Enable receiver and transmitter and related interrupts */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
     282:	88 e9       	ldi	r24, 0x98	; 152
     284:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/*	UCSR0B = (1<<RXEN0) | (1<<TXEN0); */
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
     288:	8e e0       	ldi	r24, 0x0E	; 14
     28a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     28e:	08 95       	ret

00000290 <linkbus_send_text>:
		linkbus_send_text((char*)crlf);
	}
}

BOOL linkbus_send_text(char* text)
{
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
	BOOL err = TRUE;

	if(text)
     294:	00 97       	sbiw	r24, 0x00	; 0
     296:	61 f0       	breq	.+24     	; 0x2b0 <linkbus_send_text+0x20>
     298:	ec 01       	movw	r28, r24
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();
     29a:	2c df       	rcall	.-424    	; 0xf4 <nextEmptyTxBuffer>

		while(!buff)
     29c:	00 97       	sbiw	r24, 0x00	; 0
     29e:	51 f4       	brne	.+20     	; 0x2b4 <linkbus_send_text+0x24>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     2a0:	90 91 ee 06 	lds	r25, 0x06EE	; 0x8006ee <linkbus_tx_active>
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff)
		{
			while(linkbusTxInProgress())
     2a4:	91 11       	cpse	r25, r1
			{
				;   /* wait until transmit finishes */
			}
			buff = nextEmptyTxBuffer();
     2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <linkbus_send_text+0x10>
     2a8:	25 df       	rcall	.-438    	; 0xf4 <nextEmptyTxBuffer>

	if(text)
	{
		LinkbusTxBuffer* buff = nextEmptyTxBuffer();

		while(!buff)
     2aa:	00 97       	sbiw	r24, 0x00	; 0
     2ac:	c9 f3       	breq	.-14     	; 0x2a0 <linkbus_send_text+0x10>
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <linkbus_send_text+0x24>
	}
}

BOOL linkbus_send_text(char* text)
{
	BOOL err = TRUE;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0c c0       	rjmp	.+24     	; 0x2cc <linkbus_send_text+0x3c>
			buff = nextEmptyTxBuffer();
		}

		if(buff)
		{
			sprintf(*buff, text);
     2b4:	df 93       	push	r29
     2b6:	cf 93       	push	r28
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>

			linkbus_start_tx();
     2c0:	a0 df       	rcall	.-192    	; 0x202 <linkbus_start_tx>
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
			err = FALSE;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return(err);
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28

void lb_send_WDTError(void)
{
	linkbus_send_text((char*)textWDT);
     2d0:	08 95       	ret

000002d2 <lb_send_WDTError>:
     2d2:	8e e4       	ldi	r24, 0x4E	; 78
     2d4:	93 e0       	ldi	r25, 0x03	; 3
     2d6:	dc cf       	rjmp	.-72     	; 0x290 <linkbus_send_text>
 *  Support for creating and sending various Terminal Mode Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_NewPrompt(void)
{
	linkbus_send_text((char*)textPrompt);
     2d8:	08 95       	ret

000002da <lb_send_NewPrompt>:
     2da:	82 e6       	ldi	r24, 0x62	; 98
     2dc:	93 e0       	ldi	r25, 0x03	; 3
     2de:	d8 cf       	rjmp	.-80     	; 0x290 <linkbus_send_text>
}

void lb_send_NewLine(void)
{
	linkbus_send_text((char*)crlf);
     2e0:	08 95       	ret

000002e2 <lb_send_NewLine>:
     2e2:	88 e6       	ldi	r24, 0x68	; 104
     2e4:	93 e0       	ldi	r25, 0x03	; 3
     2e6:	d4 cf       	rjmp	.-88     	; 0x290 <linkbus_send_text>
     2e8:	08 95       	ret

000002ea <lb_send_Help>:

/***********************************************************************
 * lb_send_Help(void)
 ************************************************************************/
void lb_send_Help(void)
{
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
#ifdef DEBUG_FUNCTIONS_ENABLE
	sprintf(g_tempMsgBuff, "\n*** %s Debug Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
#else
	sprintf(g_tempMsgBuff, "\n*** %s Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
     2f2:	89 e7       	ldi	r24, 0x79	; 121
     2f4:	93 e0       	ldi	r25, 0x03	; 3
     2f6:	9f 93       	push	r25
     2f8:	8f 93       	push	r24
     2fa:	80 e8       	ldi	r24, 0x80	; 128
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	9f 93       	push	r25
     300:	8f 93       	push	r24
     302:	8b e9       	ldi	r24, 0x9B	; 155
     304:	93 e0       	ldi	r25, 0x03	; 3
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	8f ee       	ldi	r24, 0xEF	; 239
     30c:	96 e0       	ldi	r25, 0x06	; 6
     30e:	9f 93       	push	r25
     310:	8f 93       	push	r24
     312:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
#endif
	
	while(linkbus_send_text(g_tempMsgBuff));
     316:	8d b7       	in	r24, 0x3d	; 61
     318:	9e b7       	in	r25, 0x3e	; 62
     31a:	08 96       	adiw	r24, 0x08	; 8
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	9e bf       	out	0x3e, r25	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	8d bf       	out	0x3d, r24	; 61
     326:	8f ee       	ldi	r24, 0xEF	; 239
     328:	96 e0       	ldi	r25, 0x06	; 6
     32a:	b2 df       	rcall	.-156    	; 0x290 <linkbus_send_text>
     32c:	81 11       	cpse	r24, r1
     32e:	fb cf       	rjmp	.-10     	; 0x326 <lb_send_Help+0x3c>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     330:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <linkbus_tx_active>
#else
	sprintf(g_tempMsgBuff, "\n*** %s Ver. %s ***", PRODUCT_NAME_LONG, SW_REVISION);
#endif
	
	while(linkbus_send_text(g_tempMsgBuff));
	while(linkbusTxInProgress());
     334:	81 11       	cpse	r24, r1
     336:	fc cf       	rjmp	.-8      	; 0x330 <lb_send_Help+0x46>
     338:	c6 e4       	ldi	r28, 0x46	; 70
     33a:	d1 e0       	ldi	r29, 0x01	; 1
     33c:	0e e4       	ldi	r16, 0x4E	; 78
	while(linkbusTxInProgress());
#endif // TRANQUILIZE_WATCHDOG
	
	for(int i=0; i<13; i++)
	{
		while(linkbus_send_text((char*)textHelp[i])); 
     33e:	13 e0       	ldi	r17, 0x03	; 3
     340:	ce 01       	movw	r24, r28
     342:	a6 df       	rcall	.-180    	; 0x290 <linkbus_send_text>
     344:	81 11       	cpse	r24, r1
     346:	fc cf       	rjmp	.-8      	; 0x340 <lb_send_Help+0x56>
/***********************************************************************
 * linkbusTxInProgress(void)
 ************************************************************************/
BOOL linkbusTxInProgress(void)
{
	return(linkbus_tx_active);
     348:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <linkbus_tx_active>
#endif // TRANQUILIZE_WATCHDOG
	
	for(int i=0; i<13; i++)
	{
		while(linkbus_send_text((char*)textHelp[i])); 
		while(linkbusTxInProgress());
     34c:	81 11       	cpse	r24, r1
     34e:	fc cf       	rjmp	.-8      	; 0x348 <lb_send_Help+0x5e>
	sprintf(g_tempMsgBuff, "\nNote: Watchdog disabled in this build!");
	while(linkbus_send_text(g_tempMsgBuff)); 
	while(linkbusTxInProgress());
#endif // TRANQUILIZE_WATCHDOG
	
	for(int i=0; i<13; i++)
     350:	a8 96       	adiw	r28, 0x28	; 40
     352:	0c 17       	cp	r16, r28
     354:	1d 07       	cpc	r17, r29
	{
		while(linkbus_send_text((char*)textHelp[i])); 
		while(linkbusTxInProgress());
	}
	
	lb_send_NewLine();
     356:	a1 f7       	brne	.-24     	; 0x340 <lb_send_Help+0x56>
     358:	c4 df       	rcall	.-120    	; 0x2e2 <lb_send_NewLine>
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	08 95       	ret

00000364 <linkbus_setLineTerm>:
	linkbus_send_text((char*)crlf);
}

void linkbus_setLineTerm(char* term)
{
	sprintf(lineTerm, term);
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
}
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
}

void linkbus_setTerminalMode(BOOL on)
{
	g_lb_terminal_mode = on;
     37c:	08 95       	ret

0000037e <linkbus_setTerminalMode>:
     37e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <g_lb_terminal_mode>

	if(g_lb_terminal_mode)
     382:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
	{
		linkbus_setLineTerm("\n");
     386:	88 23       	and	r24, r24
     388:	39 f0       	breq	.+14     	; 0x398 <linkbus_setTerminalMode+0x1a>
     38a:	89 ee       	ldi	r24, 0xE9	; 233
		linkbus_send_text(lineTerm);
     38c:	94 e0       	ldi	r25, 0x04	; 4
     38e:	ea df       	rcall	.-44     	; 0x364 <linkbus_setLineTerm>
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	91 e0       	ldi	r25, 0x01	; 1
	}
	else
	{
		linkbus_send_text((char*)crlf);
     394:	7d cf       	rjmp	.-262    	; 0x290 <linkbus_send_text>
     396:	08 95       	ret
     398:	88 e6       	ldi	r24, 0x68	; 104
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	79 cf       	rjmp	.-270    	; 0x290 <linkbus_send_text>
	sprintf(lineTerm, term);
}

void lb_echo_char(uint8_t c)
{
	g_tempMsgBuff[0] = c;
     39e:	08 95       	ret

000003a0 <lb_echo_char>:
     3a0:	ef ee       	ldi	r30, 0xEF	; 239
     3a2:	f6 e0       	ldi	r31, 0x06	; 6
	g_tempMsgBuff[1] = '\0';
     3a4:	80 83       	st	Z, r24
	linkbus_send_text(g_tempMsgBuff);
     3a6:	11 82       	std	Z+1, r1	; 0x01
     3a8:	cf 01       	movw	r24, r30
     3aa:	72 cf       	rjmp	.-284    	; 0x290 <linkbus_send_text>
     3ac:	08 95       	ret

000003ae <lb_send_string>:
}

BOOL lb_send_string(char* str)
{
	if(str == NULL) return TRUE;
     3ae:	00 97       	sbiw	r24, 0x00	; 0
     3b0:	a1 f0       	breq	.+40     	; 0x3da <lb_send_string+0x2c>
	if(strlen(str) > LINKBUS_MAX_MSG_LENGTH) return TRUE;
     3b2:	fc 01       	movw	r30, r24
     3b4:	01 90       	ld	r0, Z+
     3b6:	00 20       	and	r0, r0
     3b8:	e9 f7       	brne	.-6      	; 0x3b4 <lb_send_string+0x6>
     3ba:	31 97       	sbiw	r30, 0x01	; 1
     3bc:	e8 1b       	sub	r30, r24
     3be:	f9 0b       	sbc	r31, r25
     3c0:	ec 34       	cpi	r30, 0x4C	; 76
     3c2:	f1 05       	cpc	r31, r1
     3c4:	60 f4       	brcc	.+24     	; 0x3de <lb_send_string+0x30>
	strcpy(g_tempMsgBuff, str);
     3c6:	bc 01       	movw	r22, r24
     3c8:	8f ee       	ldi	r24, 0xEF	; 239
     3ca:	96 e0       	ldi	r25, 0x06	; 6
     3cc:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <strcpy>
	linkbus_send_text(g_tempMsgBuff);
     3d0:	8f ee       	ldi	r24, 0xEF	; 239
     3d2:	96 e0       	ldi	r25, 0x06	; 6
     3d4:	5d df       	rcall	.-326    	; 0x290 <linkbus_send_text>
	return FALSE;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	08 95       	ret
	linkbus_send_text(g_tempMsgBuff);
}

BOOL lb_send_string(char* str)
{
	if(str == NULL) return TRUE;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	08 95       	ret
	if(strlen(str) > LINKBUS_MAX_MSG_LENGTH) return TRUE;
     3de:	81 e0       	ldi	r24, 0x01	; 1
	strcpy(g_tempMsgBuff, str);
	linkbus_send_text(g_tempMsgBuff);
	return FALSE;
}
     3e0:	08 95       	ret

000003e2 <lb_poweroff_msg>:

void lb_poweroff_msg(uint8_t sec)
{
	sprintf(g_tempMsgBuff, "Power off in %d sec\n", sec);
     3e2:	1f 92       	push	r1
     3e4:	8f 93       	push	r24
     3e6:	8f ea       	ldi	r24, 0xAF	; 175
     3e8:	93 e0       	ldi	r25, 0x03	; 3
     3ea:	9f 93       	push	r25
     3ec:	8f 93       	push	r24
     3ee:	8f ee       	ldi	r24, 0xEF	; 239
     3f0:	96 e0       	ldi	r25, 0x06	; 6
     3f2:	9f 93       	push	r25
     3f4:	8f 93       	push	r24
     3f6:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     3fa:	8f ee       	ldi	r24, 0xEF	; 239
     3fc:	96 e0       	ldi	r25, 0x06	; 6
     3fe:	48 df       	rcall	.-368    	; 0x290 <linkbus_send_text>
}
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	08 95       	ret

0000040e <lb_send_value>:

void lb_send_value(uint16_t value, char* label)
{
	sprintf(g_tempMsgBuff, "> %s=%d%s", label, value, lineTerm);
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	31 e0       	ldi	r19, 0x01	; 1
     412:	3f 93       	push	r19
     414:	2f 93       	push	r18
     416:	9f 93       	push	r25
     418:	8f 93       	push	r24
     41a:	7f 93       	push	r23
     41c:	6f 93       	push	r22
     41e:	84 ec       	ldi	r24, 0xC4	; 196
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	9f 93       	push	r25
     424:	8f 93       	push	r24
     426:	8f ee       	ldi	r24, 0xEF	; 239
     428:	96 e0       	ldi	r25, 0x06	; 6
     42a:	9f 93       	push	r25
     42c:	8f 93       	push	r24
     42e:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     432:	8f ee       	ldi	r24, 0xEF	; 239
     434:	96 e0       	ldi	r25, 0x06	; 6
     436:	2c df       	rcall	.-424    	; 0x290 <linkbus_send_text>
}
     438:	8d b7       	in	r24, 0x3d	; 61
     43a:	9e b7       	in	r25, 0x3e	; 62
     43c:	0a 96       	adiw	r24, 0x0a	; 10
     43e:	0f b6       	in	r0, 0x3f	; 63
     440:	f8 94       	cli
     442:	9e bf       	out	0x3e, r25	; 62
     444:	0f be       	out	0x3f, r0	; 63
     446:	8d bf       	out	0x3d, r24	; 61
     448:	08 95       	ret

0000044a <lb_send_FRE>:
/***********************************************************************************
 *  Support for creating and sending various Linkbus messages is provided below.
 ************************************************************************************/

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	2a 97       	sbiw	r28, 0x0a	; 10
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	18 2f       	mov	r17, r24
     464:	02 2f       	mov	r16, r18
	BOOL valid = TRUE;
	char f[10] = "\0";
     466:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <xtal_freq+0x4>
     46a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <xtal_freq+0x5>
     46e:	9a 83       	std	Y+2, r25	; 0x02
     470:	89 83       	std	Y+1, r24	; 0x01
     472:	fe 01       	movw	r30, r28
     474:	33 96       	adiw	r30, 0x03	; 3
     476:	88 e0       	ldi	r24, 0x08	; 8
     478:	df 01       	movw	r26, r30
     47a:	1d 92       	st	X+, r1
     47c:	8a 95       	dec	r24
     47e:	e9 f7       	brne	.-6      	; 0x47a <lb_send_FRE+0x30>
	char prefix = '$';
	char terminus = ';';

	if(freq != FREQUENCY_NOT_SPECIFIED)
     480:	41 15       	cp	r20, r1
     482:	51 05       	cpc	r21, r1
     484:	61 05       	cpc	r22, r1
     486:	71 05       	cpc	r23, r1
     488:	59 f1       	breq	.+86     	; 0x4e0 <lb_send_FRE+0x96>
	{
		if(freq < ILLEGAL_MEMORY)   /* Memory locations are MEM1, MEM2, MEM3, ... ILLEGAL_MEMORY-1 */
     48a:	46 30       	cpi	r20, 0x06	; 6
     48c:	51 05       	cpc	r21, r1
     48e:	61 05       	cpc	r22, r1
     490:	71 05       	cpc	r23, r1
     492:	98 f4       	brcc	.+38     	; 0x4ba <lb_send_FRE+0x70>
		{
			sprintf(f, "M%d", (int)freq);
     494:	5f 93       	push	r21
     496:	4f 93       	push	r20
     498:	8e ec       	ldi	r24, 0xCE	; 206
     49a:	93 e0       	ldi	r25, 0x03	; 3
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	ce 01       	movw	r24, r28
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	9f 93       	push	r25
     4a6:	8f 93       	push	r24
     4a8:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	13 c0       	rjmp	.+38     	; 0x4e0 <lb_send_FRE+0x96>
		}
		else
		{
			sprintf(f, "%ld", freq);
     4ba:	7f 93       	push	r23
     4bc:	6f 93       	push	r22
     4be:	5f 93       	push	r21
     4c0:	4f 93       	push	r20
     4c2:	82 ed       	ldi	r24, 0xD2	; 210
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	9f 93       	push	r25
     4c8:	8f 93       	push	r24
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	9f 93       	push	r25
     4d0:	8f 93       	push	r24
     4d2:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
     4e0:	13 30       	cpi	r17, 0x03	; 3
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <lb_send_FRE+0x9c>
     4e4:	63 c0       	rjmp	.+198    	; 0x5ac <lb_send_FRE+0x162>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     4e6:	12 30       	cpi	r17, 0x02	; 2
     4e8:	09 f4       	brne	.+2      	; 0x4ec <lb_send_FRE+0xa2>
     4ea:	63 c0       	rjmp	.+198    	; 0x5b2 <lb_send_FRE+0x168>
	else if(msgType != LINKBUS_MSG_COMMAND)
	{
		valid = FALSE;
	}

	if(valid)
     4ec:	11 30       	cpi	r17, 0x01	; 1
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <lb_send_FRE+0xa8>
     4f0:	63 c0       	rjmp	.+198    	; 0x5b8 <lb_send_FRE+0x16e>
void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     4f2:	8b e3       	ldi	r24, 0x3B	; 59

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
     4f4:	24 e2       	ldi	r18, 0x24	; 36
		valid = FALSE;
	}

	if(valid)
	{
		if(g_lb_terminal_mode)
     4f6:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_lb_terminal_mode>
     4fa:	99 23       	and	r25, r25
     4fc:	91 f1       	breq	.+100    	; 0x562 <lb_send_FRE+0x118>
		{
			if(isMemoryValue)
     4fe:	00 23       	and	r16, r16
     500:	c1 f0       	breq	.+48     	; 0x532 <lb_send_FRE+0xe8>
			{
				sprintf(g_tempMsgBuff, "> %s (MEM)%s", f, lineTerm);
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	9f 93       	push	r25
     510:	8f 93       	push	r24
     512:	86 ed       	ldi	r24, 0xD6	; 214
     514:	93 e0       	ldi	r25, 0x03	; 3
     516:	9f 93       	push	r25
     518:	8f 93       	push	r24
     51a:	8f ee       	ldi	r24, 0xEF	; 239
     51c:	96 e0       	ldi	r25, 0x06	; 6
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	39 c0       	rjmp	.+114    	; 0x5a4 <lb_send_FRE+0x15a>
			}
			else
			{
				sprintf(g_tempMsgBuff, "> %s%s", f, lineTerm);
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	9f 93       	push	r25
     538:	8f 93       	push	r24
     53a:	ce 01       	movw	r24, r28
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	9f 93       	push	r25
     540:	8f 93       	push	r24
     542:	83 ee       	ldi	r24, 0xE3	; 227
     544:	93 e0       	ldi	r25, 0x03	; 3
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	8f ee       	ldi	r24, 0xEF	; 239
     54c:	96 e0       	ldi	r25, 0x06	; 6
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	21 c0       	rjmp	.+66     	; 0x5a4 <lb_send_FRE+0x15a>
			}
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cFRE,%s,%s%c", prefix, f, isMemoryValue ? "M" : NULL, terminus);
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	01 11       	cpse	r16, r1
     566:	03 c0       	rjmp	.+6      	; 0x56e <lb_send_FRE+0x124>
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <lb_send_FRE+0x128>
     56e:	48 e0       	ldi	r20, 0x08	; 8
     570:	55 e0       	ldi	r21, 0x05	; 5
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	5f 93       	push	r21
     578:	4f 93       	push	r20
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	9f 93       	push	r25
     580:	8f 93       	push	r24
     582:	1f 92       	push	r1
     584:	2f 93       	push	r18
     586:	8a ee       	ldi	r24, 0xEA	; 234
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	9f 93       	push	r25
     58c:	8f 93       	push	r24
     58e:	8f ee       	ldi	r24, 0xEF	; 239
     590:	96 e0       	ldi	r25, 0x06	; 6
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
		}

		linkbus_send_text(g_tempMsgBuff);
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	8f ee       	ldi	r24, 0xEF	; 239
     5a6:	96 e0       	ldi	r25, 0x06	; 6
     5a8:	73 de       	rcall	.-794    	; 0x290 <linkbus_send_text>
	}
}
     5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <lb_send_FRE+0x16e>
void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     5ac:	8b e3       	ldi	r24, 0x3B	; 59
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     5ae:	21 e2       	ldi	r18, 0x21	; 33
     5b0:	a2 cf       	rjmp	.-188    	; 0x4f6 <lb_send_FRE+0xac>
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     5b2:	8f e3       	ldi	r24, 0x3F	; 63

void lb_send_FRE(LBMessageType msgType, Frequency_Hz freq, BOOL isMemoryValue)
{
	BOOL valid = TRUE;
	char f[10] = "\0";
	char prefix = '$';
     5b4:	24 e2       	ldi	r18, 0x24	; 36
     5b6:	9f cf       	rjmp	.-194    	; 0x4f6 <lb_send_FRE+0xac>
			sprintf(g_tempMsgBuff, "%cFRE,%s,%s%c", prefix, f, isMemoryValue ? "M" : NULL, terminus);
		}

		linkbus_send_text(g_tempMsgBuff);
	}
}
     5b8:	2a 96       	adiw	r28, 0x0a	; 10
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	08 95       	ret

000005ce <lb_send_TIM>:


void lb_send_TIM(LBMessageType msgType, int32_t time)
{
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	2a 97       	sbiw	r28, 0x0a	; 10
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	18 2f       	mov	r17, r24
	BOOL valid = TRUE;
	char t[10] = "\0";
     5e6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <xtal_freq+0x4>
     5ea:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <xtal_freq+0x5>
     5ee:	9a 83       	std	Y+2, r25	; 0x02
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	fe 01       	movw	r30, r28
     5f4:	33 96       	adiw	r30, 0x03	; 3
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	df 01       	movw	r26, r30
     5fa:	1d 92       	st	X+, r1
     5fc:	8a 95       	dec	r24
     5fe:	e9 f7       	brne	.-6      	; 0x5fa <lb_send_TIM+0x2c>
	char prefix = '$';
	char terminus = ';';

	if(time != NO_TIME_SPECIFIED)
     600:	4f 3f       	cpi	r20, 0xFF	; 255
     602:	bf ef       	ldi	r27, 0xFF	; 255
     604:	5b 07       	cpc	r21, r27
     606:	6b 07       	cpc	r22, r27
     608:	7b 07       	cpc	r23, r27
     60a:	e9 f0       	breq	.+58     	; 0x646 <lb_send_TIM+0x78>
	{
		if(g_lb_terminal_mode)
     60c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     610:	88 23       	and	r24, r24
     612:	31 f0       	breq	.+12     	; 0x620 <lb_send_TIM+0x52>
		{
			timeValToString(t, time, HourMinuteSecondFormat);
     614:	21 e0       	ldi	r18, 0x01	; 1
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <timeValToString>
     61e:	13 c0       	rjmp	.+38     	; 0x646 <lb_send_TIM+0x78>
		}
		else
		{
			sprintf(t, "%ld", time);
     620:	7f 93       	push	r23
     622:	6f 93       	push	r22
     624:	5f 93       	push	r21
     626:	4f 93       	push	r20
     628:	82 ed       	ldi	r24, 0xD2	; 210
     62a:	93 e0       	ldi	r25, 0x03	; 3
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	ce 01       	movw	r24, r28
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
     646:	13 30       	cpi	r17, 0x03	; 3
     648:	09 f4       	brne	.+2      	; 0x64c <lb_send_TIM+0x7e>
     64a:	40 c0       	rjmp	.+128    	; 0x6cc <lb_send_TIM+0xfe>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     64c:	12 30       	cpi	r17, 0x02	; 2
     64e:	09 f4       	brne	.+2      	; 0x652 <lb_send_TIM+0x84>
     650:	40 c0       	rjmp	.+128    	; 0x6d2 <lb_send_TIM+0x104>
	else if(msgType != LINKBUS_MSG_COMMAND)
	{
		valid = FALSE;
	}

	if(valid)
     652:	11 30       	cpi	r17, 0x01	; 1
     654:	09 f0       	breq	.+2      	; 0x658 <lb_send_TIM+0x8a>
     656:	40 c0       	rjmp	.+128    	; 0x6d8 <lb_send_TIM+0x10a>
void lb_send_TIM(LBMessageType msgType, int32_t time)
{
	BOOL valid = TRUE;
	char t[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     658:	2b e3       	ldi	r18, 0x3B	; 59

void lb_send_TIM(LBMessageType msgType, int32_t time)
{
	BOOL valid = TRUE;
	char t[10] = "\0";
	char prefix = '$';
     65a:	94 e2       	ldi	r25, 0x24	; 36
		valid = FALSE;
	}

	if(valid)
	{
		if(g_lb_terminal_mode)
     65c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     660:	88 23       	and	r24, r24
     662:	c1 f0       	breq	.+48     	; 0x694 <lb_send_TIM+0xc6>
		{
			sprintf(g_tempMsgBuff, "> TIME=%s%s", t, lineTerm);
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	ce 01       	movw	r24, r28
     66e:	01 96       	adiw	r24, 0x01	; 1
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	88 ef       	ldi	r24, 0xF8	; 248
     676:	93 e0       	ldi	r25, 0x03	; 3
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	8f ee       	ldi	r24, 0xEF	; 239
     67e:	96 e0       	ldi	r25, 0x06	; 6
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	18 c0       	rjmp	.+48     	; 0x6c4 <lb_send_TIM+0xf6>
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cTIM,%s%c", prefix, t, terminus);
     694:	1f 92       	push	r1
     696:	2f 93       	push	r18
     698:	9e 01       	movw	r18, r28
     69a:	2f 5f       	subi	r18, 0xFF	; 255
     69c:	3f 4f       	sbci	r19, 0xFF	; 255
     69e:	3f 93       	push	r19
     6a0:	2f 93       	push	r18
     6a2:	1f 92       	push	r1
     6a4:	9f 93       	push	r25
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	94 e0       	ldi	r25, 0x04	; 4
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	8f ee       	ldi	r24, 0xEF	; 239
     6b0:	96 e0       	ldi	r25, 0x06	; 6
     6b2:	9f 93       	push	r25
     6b4:	8f 93       	push	r24
     6b6:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
		}

		linkbus_send_text(g_tempMsgBuff);
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	8f ee       	ldi	r24, 0xEF	; 239
     6c6:	96 e0       	ldi	r25, 0x06	; 6
     6c8:	e3 dd       	rcall	.-1082   	; 0x290 <linkbus_send_text>
	}
}
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <lb_send_TIM+0x10a>
void lb_send_TIM(LBMessageType msgType, int32_t time)
{
	BOOL valid = TRUE;
	char t[10] = "\0";
	char prefix = '$';
	char terminus = ';';
     6cc:	2b e3       	ldi	r18, 0x3B	; 59
		}
	}

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     6ce:	91 e2       	ldi	r25, 0x21	; 33
     6d0:	c5 cf       	rjmp	.-118    	; 0x65c <lb_send_TIM+0x8e>
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     6d2:	2f e3       	ldi	r18, 0x3F	; 63

void lb_send_TIM(LBMessageType msgType, int32_t time)
{
	BOOL valid = TRUE;
	char t[10] = "\0";
	char prefix = '$';
     6d4:	94 e2       	ldi	r25, 0x24	; 36
     6d6:	c2 cf       	rjmp	.-124    	; 0x65c <lb_send_TIM+0x8e>
			sprintf(g_tempMsgBuff, "%cTIM,%s%c", prefix, t, terminus);
		}

		linkbus_send_text(g_tempMsgBuff);
	}
}
     6d8:	2a 96       	adiw	r28, 0x0a	; 10
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <lb_send_VOL>:


void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <lb_send_VOL+0xa>
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <lb_send_VOL+0xc>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <lb_send_VOL+0xe>
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
	BOOL valid = TRUE;
	char t[2] = "\0";
     6fe:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <xtal_freq+0xe>
     702:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <xtal_freq+0xf>
     706:	3a 83       	std	Y+2, r19	; 0x02
     708:	29 83       	std	Y+1, r18	; 0x01
	char v[4] = "\0";
     70a:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <xtal_freq+0x10>
     70e:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <xtal_freq+0x11>
     712:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <xtal_freq+0x12>
     716:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <xtal_freq+0x13>
     71a:	0b 83       	std	Y+3, r16	; 0x03
     71c:	1c 83       	std	Y+4, r17	; 0x04
     71e:	2d 83       	std	Y+5, r18	; 0x05
     720:	3e 83       	std	Y+6, r19	; 0x06
	char prefix = '$';
	char terminus = ';';

	if(type == TONE_VOLUME)
     722:	61 11       	cpse	r22, r1
     724:	03 c0       	rjmp	.+6      	; 0x72c <lb_send_VOL+0x40>
	{
		t[0] = 'T';
     726:	94 e5       	ldi	r25, 0x54	; 84
     728:	99 83       	std	Y+1, r25	; 0x01
     72a:	36 c0       	rjmp	.+108    	; 0x798 <lb_send_VOL+0xac>
	}
	else if(type == MAIN_VOLUME)
     72c:	61 30       	cpi	r22, 0x01	; 1
     72e:	09 f0       	breq	.+2      	; 0x732 <lb_send_VOL+0x46>
     730:	5c c0       	rjmp	.+184    	; 0x7ea <lb_send_VOL+0xfe>
	{
		t[0] = 'M';
     732:	9d e4       	ldi	r25, 0x4D	; 77
     734:	99 83       	std	Y+1, r25	; 0x01
     736:	30 c0       	rjmp	.+96     	; 0x798 <lb_send_VOL+0xac>

	if(valid)
	{
		if(volume < DECREMENT_VOL)
		{
			sprintf(v, "%d", volume * 10);
     738:	24 2f       	mov	r18, r20
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	a9 01       	movw	r20, r18
     73e:	44 0f       	add	r20, r20
     740:	55 1f       	adc	r21, r21
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
     746:	22 0f       	add	r18, r18
     748:	33 1f       	adc	r19, r19
     74a:	22 0f       	add	r18, r18
     74c:	33 1f       	adc	r19, r19
     74e:	42 0f       	add	r20, r18
     750:	53 1f       	adc	r21, r19
     752:	5f 93       	push	r21
     754:	4f 93       	push	r20
     756:	8f ec       	ldi	r24, 0xCF	; 207
     758:	93 e0       	ldi	r25, 0x03	; 3
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	ce 01       	movw	r24, r28
     760:	03 96       	adiw	r24, 0x03	; 3
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	09 c0       	rjmp	.+18     	; 0x78a <lb_send_VOL+0x9e>
		}
		else if(volume < VOL_NOT_SPECIFIED)
     778:	4d 30       	cpi	r20, 0x0D	; 13
     77a:	38 f4       	brcc	.+14     	; 0x78a <lb_send_VOL+0x9e>
		{
			if(volume == INCREMENT_VOL)
     77c:	4c 30       	cpi	r20, 0x0C	; 12
     77e:	19 f4       	brne	.+6      	; 0x786 <lb_send_VOL+0x9a>
			{
				v[0] = '+';
     780:	8b e2       	ldi	r24, 0x2B	; 43
     782:	8b 83       	std	Y+3, r24	; 0x03
     784:	02 c0       	rjmp	.+4      	; 0x78a <lb_send_VOL+0x9e>
			}
			else
			{
				v[0] = '-';
     786:	8d e2       	ldi	r24, 0x2D	; 45
     788:	8b 83       	std	Y+3, r24	; 0x03
			}
		}

		if(msgType == LINKBUS_MSG_REPLY)
     78a:	13 30       	cpi	r17, 0x03	; 3
     78c:	49 f0       	breq	.+18     	; 0x7a0 <lb_send_VOL+0xb4>
		{
			prefix = '!';
		}
		else if(msgType == LINKBUS_MSG_QUERY)
     78e:	12 30       	cpi	r17, 0x02	; 2
     790:	51 f0       	breq	.+20     	; 0x7a6 <lb_send_VOL+0xba>
		{
			terminus = '?';
		}
		else if(msgType != LINKBUS_MSG_COMMAND)
     792:	11 30       	cpi	r17, 0x01	; 1
     794:	51 f5       	brne	.+84     	; 0x7ea <lb_send_VOL+0xfe>
     796:	0a c0       	rjmp	.+20     	; 0x7ac <lb_send_VOL+0xc0>
     798:	18 2f       	mov	r17, r24
		valid = FALSE;
	}

	if(valid)
	{
		if(volume < DECREMENT_VOL)
     79a:	4b 30       	cpi	r20, 0x0B	; 11
     79c:	68 f7       	brcc	.-38     	; 0x778 <lb_send_VOL+0x8c>
     79e:	cc cf       	rjmp	.-104    	; 0x738 <lb_send_VOL+0x4c>
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
	char terminus = ';';
     7a0:	8b e3       	ldi	r24, 0x3B	; 59
			}
		}

		if(msgType == LINKBUS_MSG_REPLY)
		{
			prefix = '!';
     7a2:	21 e2       	ldi	r18, 0x21	; 33
     7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <lb_send_VOL+0xc4>
		}
		else if(msgType == LINKBUS_MSG_QUERY)
		{
			terminus = '?';
     7a6:	8f e3       	ldi	r24, 0x3F	; 63
void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
     7a8:	24 e2       	ldi	r18, 0x24	; 36
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <lb_send_VOL+0xc4>
	char terminus = ';';
     7ac:	8b e3       	ldi	r24, 0x3B	; 59
void lb_send_VOL(LBMessageType msgType, VolumeType type, VolumeSetting volume)
{
	BOOL valid = TRUE;
	char t[2] = "\0";
	char v[4] = "\0";
	char prefix = '$';
     7ae:	24 e2       	ldi	r18, 0x24	; 36
			valid = FALSE;
		}

		if(valid)
		{
			sprintf(g_tempMsgBuff, "%cVOL,%s,%s%c", prefix, t, v, terminus);
     7b0:	1f 92       	push	r1
     7b2:	8f 93       	push	r24
     7b4:	ce 01       	movw	r24, r28
     7b6:	03 96       	adiw	r24, 0x03	; 3
     7b8:	9f 93       	push	r25
     7ba:	8f 93       	push	r24
     7bc:	02 97       	sbiw	r24, 0x02	; 2
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	1f 92       	push	r1
     7c4:	2f 93       	push	r18
     7c6:	8f e0       	ldi	r24, 0x0F	; 15
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	8f ee       	ldi	r24, 0xEF	; 239
     7d0:	96 e0       	ldi	r25, 0x06	; 6
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
			linkbus_send_text(g_tempMsgBuff);
     7da:	8f ee       	ldi	r24, 0xEF	; 239
     7dc:	96 e0       	ldi	r25, 0x06	; 6
     7de:	58 dd       	rcall	.-1360   	; 0x290 <linkbus_send_text>
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
		}
	}
}
     7ea:	26 96       	adiw	r28, 0x06	; 6
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	1f 91       	pop	r17
     7fc:	0f 91       	pop	r16
     7fe:	08 95       	ret

00000800 <lb_send_BND>:

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <lb_send_BND+0xc>
     80c:	00 d0       	rcall	.+0      	; 0x80e <lb_send_BND+0xe>
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
	char terminus = ';';

	if(msgType == LINKBUS_MSG_REPLY)
     812:	83 30       	cpi	r24, 0x03	; 3
     814:	61 f0       	breq	.+24     	; 0x82e <lb_send_BND+0x2e>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	89 f0       	breq	.+34     	; 0x83c <lb_send_BND+0x3c>
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     81a:	11 e0       	ldi	r17, 0x01	; 1
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	09 f0       	breq	.+2      	; 0x822 <lb_send_BND+0x22>
     820:	10 e0       	ldi	r17, 0x00	; 0
	char prefix = '$';
	char terminus = ';';
     822:	0f 2e       	mov	r0, r31
     824:	fb e3       	ldi	r31, 0x3B	; 59
     826:	ff 2e       	mov	r15, r31
     828:	f0 2d       	mov	r31, r0

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
     82a:	04 e2       	ldi	r16, 0x24	; 36
     82c:	0d c0       	rjmp	.+26     	; 0x848 <lb_send_BND+0x48>
	char terminus = ';';
     82e:	0f 2e       	mov	r0, r31
     830:	fb e3       	ldi	r31, 0x3B	; 59
     832:	ff 2e       	mov	r15, r31
     834:	f0 2d       	mov	r31, r0

	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
     836:	01 e2       	ldi	r16, 0x21	; 33
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     838:	11 e0       	ldi	r17, 0x01	; 1
     83a:	06 c0       	rjmp	.+12     	; 0x848 <lb_send_BND+0x48>
	{
		prefix = '!';
	}
	else if(msgType == LINKBUS_MSG_QUERY)
	{
		terminus = '?';
     83c:	0f 2e       	mov	r0, r31
     83e:	ff e3       	ldi	r31, 0x3F	; 63
     840:	ff 2e       	mov	r15, r31
     842:	f0 2d       	mov	r31, r0

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
	char prefix = '$';
     844:	04 e2       	ldi	r16, 0x24	; 36
}

void lb_send_BND(LBMessageType msgType, RadioBand band)
{
	char b[4];
	BOOL valid = TRUE;
     846:	11 e0       	ldi	r17, 0x01	; 1
	else if(msgType != LINKBUS_MSG_COMMAND)
	{
		valid = FALSE;
	}

	if(g_lb_terminal_mode)
     848:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     84c:	88 23       	and	r24, r24
     84e:	61 f0       	breq	.+24     	; 0x868 <lb_send_BND+0x68>
	{
		sprintf(b, "%s", band == BAND_2M ? "2m" : "80m");
     850:	66 23       	and	r22, r22
     852:	19 f0       	breq	.+6      	; 0x85a <lb_send_BND+0x5a>
     854:	60 e2       	ldi	r22, 0x20	; 32
     856:	74 e0       	ldi	r23, 0x04	; 4
     858:	02 c0       	rjmp	.+4      	; 0x85e <lb_send_BND+0x5e>
     85a:	6d e1       	ldi	r22, 0x1D	; 29
     85c:	74 e0       	ldi	r23, 0x04	; 4
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <strcpy>
     866:	12 c0       	rjmp	.+36     	; 0x88c <lb_send_BND+0x8c>
	}
	else
	{
		sprintf(b, "%d", band);
     868:	1f 92       	push	r1
     86a:	6f 93       	push	r22
     86c:	8f ec       	ldi	r24, 0xCF	; 207
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
	}

	if(valid)
     88c:	11 23       	and	r17, r17
     88e:	b1 f1       	breq	.+108    	; 0x8fc <lb_send_BND+0xfc>
	{
		if(g_lb_terminal_mode)
     890:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     894:	88 23       	and	r24, r24
     896:	c1 f0       	breq	.+48     	; 0x8c8 <lb_send_BND+0xc8>
		{
			sprintf(g_tempMsgBuff, "> BND=%s%s", b, lineTerm);
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	9f 93       	push	r25
     89e:	8f 93       	push	r24
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	9f 93       	push	r25
     8a6:	8f 93       	push	r24
     8a8:	84 e2       	ldi	r24, 0x24	; 36
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	9f 93       	push	r25
     8ae:	8f 93       	push	r24
     8b0:	8f ee       	ldi	r24, 0xEF	; 239
     8b2:	96 e0       	ldi	r25, 0x06	; 6
     8b4:	9f 93       	push	r25
     8b6:	8f 93       	push	r24
     8b8:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	17 c0       	rjmp	.+46     	; 0x8f6 <lb_send_BND+0xf6>
		}
		else
		{
			sprintf(g_tempMsgBuff, "%cBND,%s%c", prefix, b, terminus);
     8c8:	1f 92       	push	r1
     8ca:	ff 92       	push	r15
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	9f 93       	push	r25
     8d2:	8f 93       	push	r24
     8d4:	1f 92       	push	r1
     8d6:	0f 93       	push	r16
     8d8:	8f e2       	ldi	r24, 0x2F	; 47
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	9f 93       	push	r25
     8de:	8f 93       	push	r24
     8e0:	8f ee       	ldi	r24, 0xEF	; 239
     8e2:	96 e0       	ldi	r25, 0x06	; 6
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
		}

		linkbus_send_text(g_tempMsgBuff);
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	8f ee       	ldi	r24, 0xEF	; 239
     8f8:	96 e0       	ldi	r25, 0x06	; 6
     8fa:	ca dc       	rcall	.-1644   	; 0x290 <linkbus_send_text>
	}
}
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	ff 90       	pop	r15
     90e:	08 95       	ret

00000910 <lb_send_BCR>:

void lb_send_BCR(LBbroadcastType bcType, BOOL start)
{
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	00 d0       	rcall	.+0      	; 0x918 <lb_send_BCR+0x8>
     918:	00 d0       	rcall	.+0      	; 0x91a <lb_send_BCR+0xa>
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	16 2f       	mov	r17, r22
	char t[4] = "\0";
     920:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <xtal_freq+0x10>
     924:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <xtal_freq+0x11>
     928:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <xtal_freq+0x12>
     92c:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <xtal_freq+0x13>
     930:	49 83       	std	Y+1, r20	; 0x01
     932:	5a 83       	std	Y+2, r21	; 0x02
     934:	6b 83       	std	Y+3, r22	; 0x03
     936:	7c 83       	std	Y+4, r23	; 0x04
	char prefix = '$';
	char terminus = ';';

	sprintf(t, "%d", bcType);
     938:	1f 92       	push	r1
     93a:	8f 93       	push	r24
     93c:	8f ec       	ldi	r24, 0xCF	; 207
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	9f 93       	push	r25
     942:	8f 93       	push	r24
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>

	if(start)
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	11 23       	and	r17, r17
     95e:	11 f0       	breq	.+4      	; 0x964 <lb_send_BCR+0x54>
	{
		terminus = '?';
     960:	8f e3       	ldi	r24, 0x3F	; 63
     962:	01 c0       	rjmp	.+2      	; 0x966 <lb_send_BCR+0x56>

void lb_send_BCR(LBbroadcastType bcType, BOOL start)
{
	char t[4] = "\0";
	char prefix = '$';
	char terminus = ';';
     964:	8b e3       	ldi	r24, 0x3B	; 59
	if(start)
	{
		terminus = '?';
	}

	sprintf(g_tempMsgBuff, "%cBCR,%s%c", prefix, t, terminus);
     966:	1f 92       	push	r1
     968:	8f 93       	push	r24
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	1f 92       	push	r1
     974:	84 e2       	ldi	r24, 0x24	; 36
     976:	8f 93       	push	r24
     978:	8a e3       	ldi	r24, 0x3A	; 58
     97a:	94 e0       	ldi	r25, 0x04	; 4
     97c:	9f 93       	push	r25
     97e:	8f 93       	push	r24
     980:	8f ee       	ldi	r24, 0xEF	; 239
     982:	96 e0       	ldi	r25, 0x06	; 6
     984:	9f 93       	push	r25
     986:	8f 93       	push	r24
     988:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     98c:	8f ee       	ldi	r24, 0xEF	; 239
     98e:	96 e0       	ldi	r25, 0x06	; 6
     990:	7f dc       	rcall	.-1794   	; 0x290 <linkbus_send_text>
}
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	08 95       	ret

000009ac <lb_send_ID>:

void lb_send_ID(LBMessageType msgType, DeviceID myID, DeviceID otherID)
{
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
     9b8:	28 97       	sbiw	r28, 0x08	; 8
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	cd bf       	out	0x3d, r28	; 61
     9c4:	96 2f       	mov	r25, r22
     9c6:	14 2f       	mov	r17, r20
	char prefix = '$';
	char m[4] = "\0";
     9c8:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <xtal_freq+0x10>
     9cc:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <xtal_freq+0x11>
     9d0:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <xtal_freq+0x12>
     9d4:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <xtal_freq+0x13>
     9d8:	49 83       	std	Y+1, r20	; 0x01
     9da:	5a 83       	std	Y+2, r21	; 0x02
     9dc:	6b 83       	std	Y+3, r22	; 0x03
     9de:	7c 83       	std	Y+4, r23	; 0x04
	char o[4] = "\0";
     9e0:	4d 83       	std	Y+5, r20	; 0x05
     9e2:	5e 83       	std	Y+6, r21	; 0x06
     9e4:	6f 83       	std	Y+7, r22	; 0x07
     9e6:	78 87       	std	Y+8, r23	; 0x08

	if(msgType == LINKBUS_MSG_REPLY)
     9e8:	83 30       	cpi	r24, 0x03	; 3
     9ea:	11 f4       	brne	.+4      	; 0x9f0 <lb_send_ID+0x44>
	{
		prefix = '!';
     9ec:	01 e2       	ldi	r16, 0x21	; 33
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <lb_send_ID+0x46>
	linkbus_send_text(g_tempMsgBuff);
}

void lb_send_ID(LBMessageType msgType, DeviceID myID, DeviceID otherID)
{
	char prefix = '$';
     9f0:	04 e2       	ldi	r16, 0x24	; 36
	if(msgType == LINKBUS_MSG_REPLY)
	{
		prefix = '!';
	}

	if(myID != NO_ID)
     9f2:	99 23       	and	r25, r25
     9f4:	91 f0       	breq	.+36     	; 0xa1a <lb_send_ID+0x6e>
	{
		sprintf(m, "%d", myID);
     9f6:	1f 92       	push	r1
     9f8:	9f 93       	push	r25
     9fa:	8f ec       	ldi	r24, 0xCF	; 207
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	9f 93       	push	r25
     a00:	8f 93       	push	r24
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	9f 93       	push	r25
     a08:	8f 93       	push	r24
     a0a:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
	}
	if(otherID != NO_ID)
     a1a:	11 23       	and	r17, r17
     a1c:	91 f0       	breq	.+36     	; 0xa42 <lb_send_ID+0x96>
	{
		sprintf(o, "%d", otherID);
     a1e:	1f 92       	push	r1
     a20:	1f 93       	push	r17
     a22:	8f ec       	ldi	r24, 0xCF	; 207
     a24:	93 e0       	ldi	r25, 0x03	; 3
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	ce 01       	movw	r24, r28
     a2c:	05 96       	adiw	r24, 0x05	; 5
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
	}

	sprintf(g_tempMsgBuff, "%cID,%s,%s;", prefix, m, o);
     a42:	ce 01       	movw	r24, r28
     a44:	05 96       	adiw	r24, 0x05	; 5
     a46:	9f 93       	push	r25
     a48:	8f 93       	push	r24
     a4a:	04 97       	sbiw	r24, 0x04	; 4
     a4c:	9f 93       	push	r25
     a4e:	8f 93       	push	r24
     a50:	1f 92       	push	r1
     a52:	0f 93       	push	r16
     a54:	85 e4       	ldi	r24, 0x45	; 69
     a56:	94 e0       	ldi	r25, 0x04	; 4
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	8f ee       	ldi	r24, 0xEF	; 239
     a5e:	96 e0       	ldi	r25, 0x06	; 6
     a60:	9f 93       	push	r25
     a62:	8f 93       	push	r24
     a64:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
	linkbus_send_text(g_tempMsgBuff);
     a68:	8f ee       	ldi	r24, 0xEF	; 239
     a6a:	96 e0       	ldi	r25, 0x06	; 6
     a6c:	11 dc       	rcall	.-2014   	; 0x290 <linkbus_send_text>
}
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	28 96       	adiw	r28, 0x08	; 8
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16

void lb_send_sync(void)
{
	sprintf(g_tempMsgBuff, ".....");
     a8c:	08 95       	ret

00000a8e <lb_send_sync>:
     a8e:	86 e0       	ldi	r24, 0x06	; 6
     a90:	e1 e5       	ldi	r30, 0x51	; 81
     a92:	f4 e0       	ldi	r31, 0x04	; 4
     a94:	af ee       	ldi	r26, 0xEF	; 239
     a96:	b6 e0       	ldi	r27, 0x06	; 6
     a98:	01 90       	ld	r0, Z+
     a9a:	0d 92       	st	X+, r0
     a9c:	8a 95       	dec	r24
	linkbus_send_text(g_tempMsgBuff);
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <lb_send_sync+0xa>
     aa0:	8f ee       	ldi	r24, 0xEF	; 239
     aa2:	96 e0       	ldi	r25, 0x06	; 6
     aa4:	f5 cb       	rjmp	.-2070   	; 0x290 <linkbus_send_text>
     aa6:	08 95       	ret

00000aa8 <lb_broadcast_bat>:
}

void lb_broadcast_bat(uint16_t data)
{
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	00 d0       	rcall	.+0      	; 0xaae <lb_broadcast_bat+0x6>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <lb_broadcast_bat+0x8>
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <lb_broadcast_bat+0xa>
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
	char t[6] = "\0";
     ab6:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <xtal_freq+0x4>
     aba:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <xtal_freq+0x5>
     abe:	3a 83       	std	Y+2, r19	; 0x02
     ac0:	29 83       	std	Y+1, r18	; 0x01
     ac2:	fe 01       	movw	r30, r28
     ac4:	33 96       	adiw	r30, 0x03	; 3
     ac6:	24 e0       	ldi	r18, 0x04	; 4
     ac8:	df 01       	movw	r26, r30
     aca:	1d 92       	st	X+, r1
     acc:	2a 95       	dec	r18
     ace:	e9 f7       	brne	.-6      	; 0xaca <lb_broadcast_bat+0x22>

	sprintf(t, "%d", data);
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	8f ec       	ldi	r24, 0xCF	; 207
     ad6:	93 e0       	ldi	r25, 0x03	; 3
     ad8:	9f 93       	push	r25
     ada:	8f 93       	push	r24
     adc:	ce 01       	movw	r24, r28
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>

	if(g_lb_terminal_mode)
     ae8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	88 23       	and	r24, r24
     afa:	c1 f0       	breq	.+48     	; 0xb2c <lb_broadcast_bat+0x84>
	{
		sprintf(g_tempMsgBuff, "> BAT=%s%s", t, lineTerm);
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	87 e5       	ldi	r24, 0x57	; 87
     b0e:	94 e0       	ldi	r25, 0x04	; 4
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	8f ee       	ldi	r24, 0xEF	; 239
     b16:	96 e0       	ldi	r25, 0x06	; 6
     b18:	9f 93       	push	r25
     b1a:	8f 93       	push	r24
     b1c:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
	}
	else
	{
		sprintf(g_tempMsgBuff, "!B,%s;", t);
     b2a:	14 c0       	rjmp	.+40     	; 0xb54 <lb_broadcast_bat+0xac>
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	82 e6       	ldi	r24, 0x62	; 98
     b36:	94 e0       	ldi	r25, 0x04	; 4
     b38:	9f 93       	push	r25
     b3a:	8f 93       	push	r24
     b3c:	8f ee       	ldi	r24, 0xEF	; 239
     b3e:	96 e0       	ldi	r25, 0x06	; 6
     b40:	9f 93       	push	r25
     b42:	8f 93       	push	r24
     b44:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
	}

	linkbus_send_text(g_tempMsgBuff);
     b52:	0f 90       	pop	r0
     b54:	8f ee       	ldi	r24, 0xEF	; 239
     b56:	96 e0       	ldi	r25, 0x06	; 6
     b58:	9b db       	rcall	.-2250   	; 0x290 <linkbus_send_text>
}
     b5a:	26 96       	adiw	r28, 0x06	; 6
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <lb_broadcast_rssi>:

void lb_broadcast_rssi(uint16_t data)
{
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	00 d0       	rcall	.+0      	; 0xb72 <lb_broadcast_rssi+0x6>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <lb_broadcast_rssi+0x8>
     b74:	00 d0       	rcall	.+0      	; 0xb76 <lb_broadcast_rssi+0xa>
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	char t[6] = "\0";
     b7a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <xtal_freq+0x4>
     b7e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <xtal_freq+0x5>
     b82:	3a 83       	std	Y+2, r19	; 0x02
     b84:	29 83       	std	Y+1, r18	; 0x01
     b86:	fe 01       	movw	r30, r28
     b88:	33 96       	adiw	r30, 0x03	; 3
     b8a:	24 e0       	ldi	r18, 0x04	; 4
     b8c:	df 01       	movw	r26, r30
     b8e:	1d 92       	st	X+, r1
     b90:	2a 95       	dec	r18
     b92:	e9 f7       	brne	.-6      	; 0xb8e <lb_broadcast_rssi+0x22>

	sprintf(t, "%d", data);
     b94:	9f 93       	push	r25
     b96:	8f 93       	push	r24
     b98:	8f ec       	ldi	r24, 0xCF	; 207
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	9f 93       	push	r25
     b9e:	8f 93       	push	r24
     ba0:	ce 01       	movw	r24, r28
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	9f 93       	push	r25
     ba6:	8f 93       	push	r24
     ba8:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>

	if(g_lb_terminal_mode)
     bac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	88 23       	and	r24, r24
     bbe:	c1 f0       	breq	.+48     	; 0xbf0 <lb_broadcast_rssi+0x84>
	{
		sprintf(g_tempMsgBuff, "> RSSI=%s%s", t, lineTerm);
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	9f 93       	push	r25
     bc6:	8f 93       	push	r24
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	9f 93       	push	r25
     bce:	8f 93       	push	r24
     bd0:	89 e6       	ldi	r24, 0x69	; 105
     bd2:	94 e0       	ldi	r25, 0x04	; 4
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	8f ee       	ldi	r24, 0xEF	; 239
     bda:	96 e0       	ldi	r25, 0x06	; 6
     bdc:	9f 93       	push	r25
     bde:	8f 93       	push	r24
     be0:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
	}
	else
	{
		sprintf(g_tempMsgBuff, "!S,%s;", t);
     bee:	14 c0       	rjmp	.+40     	; 0xc18 <lb_broadcast_rssi+0xac>
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	85 e7       	ldi	r24, 0x75	; 117
     bfa:	94 e0       	ldi	r25, 0x04	; 4
     bfc:	9f 93       	push	r25
     bfe:	8f 93       	push	r24
     c00:	8f ee       	ldi	r24, 0xEF	; 239
     c02:	96 e0       	ldi	r25, 0x06	; 6
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
	}

	linkbus_send_text(g_tempMsgBuff);
     c16:	0f 90       	pop	r0
     c18:	8f ee       	ldi	r24, 0xEF	; 239
     c1a:	96 e0       	ldi	r25, 0x06	; 6
     c1c:	39 db       	rcall	.-2446   	; 0x290 <linkbus_send_text>
}
     c1e:	26 96       	adiw	r28, 0x06	; 6
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <lb_broadcast_rf>:

void lb_broadcast_rf(uint16_t data)
{
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	00 d0       	rcall	.+0      	; 0xc36 <lb_broadcast_rf+0x6>
     c36:	00 d0       	rcall	.+0      	; 0xc38 <lb_broadcast_rf+0x8>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <lb_broadcast_rf+0xa>
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
	char t[6] = "\0";
     c3e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <xtal_freq+0x4>
     c42:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <xtal_freq+0x5>
     c46:	3a 83       	std	Y+2, r19	; 0x02
     c48:	29 83       	std	Y+1, r18	; 0x01
     c4a:	fe 01       	movw	r30, r28
     c4c:	33 96       	adiw	r30, 0x03	; 3
     c4e:	24 e0       	ldi	r18, 0x04	; 4
     c50:	df 01       	movw	r26, r30
     c52:	1d 92       	st	X+, r1
     c54:	2a 95       	dec	r18
     c56:	e9 f7       	brne	.-6      	; 0xc52 <lb_broadcast_rf+0x22>

	sprintf(t, "%d", data);
     c58:	9f 93       	push	r25
     c5a:	8f 93       	push	r24
     c5c:	8f ec       	ldi	r24, 0xCF	; 207
     c5e:	93 e0       	ldi	r25, 0x03	; 3
     c60:	9f 93       	push	r25
     c62:	8f 93       	push	r24
     c64:	ce 01       	movw	r24, r28
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>

	if(g_lb_terminal_mode)
     c70:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	88 23       	and	r24, r24
     c82:	c1 f0       	breq	.+48     	; 0xcb4 <lb_broadcast_rf+0x84>
	{
		sprintf(g_tempMsgBuff, "> RF=%s%s", t, lineTerm);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	9f 93       	push	r25
     c8a:	8f 93       	push	r24
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	8c e7       	ldi	r24, 0x7C	; 124
     c96:	94 e0       	ldi	r25, 0x04	; 4
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	8f ee       	ldi	r24, 0xEF	; 239
     c9e:	96 e0       	ldi	r25, 0x06	; 6
     ca0:	9f 93       	push	r25
     ca2:	8f 93       	push	r24
     ca4:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	}
	else
	{
		sprintf(g_tempMsgBuff, "!R,%s;", t);
     cb2:	14 c0       	rjmp	.+40     	; 0xcdc <lb_broadcast_rf+0xac>
     cb4:	ce 01       	movw	r24, r28
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	86 e8       	ldi	r24, 0x86	; 134
     cbe:	94 e0       	ldi	r25, 0x04	; 4
     cc0:	9f 93       	push	r25
     cc2:	8f 93       	push	r24
     cc4:	8f ee       	ldi	r24, 0xEF	; 239
     cc6:	96 e0       	ldi	r25, 0x06	; 6
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
	}
	linkbus_send_text(g_tempMsgBuff);
     cda:	0f 90       	pop	r0
     cdc:	8f ee       	ldi	r24, 0xEF	; 239
     cde:	96 e0       	ldi	r25, 0x06	; 6
     ce0:	d7 da       	rcall	.-2642   	; 0x290 <linkbus_send_text>
}
     ce2:	26 96       	adiw	r28, 0x06	; 6
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <lb_broadcast_num>:

void lb_broadcast_num(uint16_t data, char* str)
{
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <lb_broadcast_num+0xa>
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <lb_broadcast_num+0xc>
     d00:	00 d0       	rcall	.+0      	; 0xd02 <lb_broadcast_num+0xe>
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	8b 01       	movw	r16, r22
	char t[6] = "\0";
     d08:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <xtal_freq+0x4>
     d0c:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <xtal_freq+0x5>
     d10:	3a 83       	std	Y+2, r19	; 0x02
     d12:	29 83       	std	Y+1, r18	; 0x01
     d14:	fe 01       	movw	r30, r28
     d16:	33 96       	adiw	r30, 0x03	; 3
     d18:	24 e0       	ldi	r18, 0x04	; 4
     d1a:	df 01       	movw	r26, r30
     d1c:	1d 92       	st	X+, r1
     d1e:	2a 95       	dec	r18
     d20:	e9 f7       	brne	.-6      	; 0xd1c <lb_broadcast_num+0x28>

	sprintf(t, "%u", data);
     d22:	9f 93       	push	r25
     d24:	8f 93       	push	r24
     d26:	8d e8       	ldi	r24, 0x8D	; 141
     d28:	94 e0       	ldi	r25, 0x04	; 4
     d2a:	9f 93       	push	r25
     d2c:	8f 93       	push	r24
     d2e:	ce 01       	movw	r24, r28
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	9f 93       	push	r25
     d34:	8f 93       	push	r24
     d36:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>

	if(g_lb_terminal_mode)
     d3a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <g_lb_terminal_mode>
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	88 23       	and	r24, r24
     d4c:	a9 f1       	breq	.+106    	; 0xdb8 <lb_broadcast_num+0xc4>
	{
		if(str)
     d4e:	01 15       	cp	r16, r1
     d50:	11 05       	cpc	r17, r1
     d52:	d1 f0       	breq	.+52     	; 0xd88 <lb_broadcast_num+0x94>
		{
			sprintf(g_tempMsgBuff, "> %s=%s%s", str, t, lineTerm);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	9f 93       	push	r25
     d5a:	8f 93       	push	r24
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	9f 93       	push	r25
     d62:	8f 93       	push	r24
     d64:	1f 93       	push	r17
     d66:	0f 93       	push	r16
     d68:	80 e9       	ldi	r24, 0x90	; 144
     d6a:	94 e0       	ldi	r25, 0x04	; 4
     d6c:	9f 93       	push	r25
     d6e:	8f 93       	push	r24
     d70:	8f ee       	ldi	r24, 0xEF	; 239
     d72:	96 e0       	ldi	r25, 0x06	; 6
     d74:	9f 93       	push	r25
     d76:	8f 93       	push	r24
     d78:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	30 c0       	rjmp	.+96     	; 0xde8 <lb_broadcast_num+0xf4>
		}
		else
		{
			sprintf(g_tempMsgBuff, "> %s%s", t, lineTerm);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	9f 93       	push	r25
     d8e:	8f 93       	push	r24
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	9f 93       	push	r25
     d96:	8f 93       	push	r24
     d98:	83 ee       	ldi	r24, 0xE3	; 227
     d9a:	93 e0       	ldi	r25, 0x03	; 3
     d9c:	9f 93       	push	r25
     d9e:	8f 93       	push	r24
     da0:	8f ee       	ldi	r24, 0xEF	; 239
     da2:	96 e0       	ldi	r25, 0x06	; 6
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	18 c0       	rjmp	.+48     	; 0xde8 <lb_broadcast_num+0xf4>
		}
	}
	else
	{
		if(str)
     db8:	01 15       	cp	r16, r1
     dba:	11 05       	cpc	r17, r1
		{
			sprintf(g_tempMsgBuff, "!%s,%s;", str, t);
     dbc:	a9 f0       	breq	.+42     	; 0xde8 <lb_broadcast_num+0xf4>
     dbe:	ce 01       	movw	r24, r28
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	9f 93       	push	r25
     dc4:	8f 93       	push	r24
     dc6:	1f 93       	push	r17
     dc8:	0f 93       	push	r16
     dca:	8a e9       	ldi	r24, 0x9A	; 154
     dcc:	94 e0       	ldi	r25, 0x04	; 4
     dce:	9f 93       	push	r25
     dd0:	8f 93       	push	r24
     dd2:	8f ee       	ldi	r24, 0xEF	; 239
     dd4:	96 e0       	ldi	r25, 0x06	; 6
     dd6:	9f 93       	push	r25
     dd8:	8f 93       	push	r24
     dda:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	f8 94       	cli
     de2:	de bf       	out	0x3e, r29	; 62
     de4:	0f be       	out	0x3f, r0	; 63
		}
	}

	linkbus_send_text(g_tempMsgBuff);
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	8f ee       	ldi	r24, 0xEF	; 239
     dea:	96 e0       	ldi	r25, 0x06	; 6
     dec:	51 da       	rcall	.-2910   	; 0x290 <linkbus_send_text>
}
     dee:	26 96       	adiw	r28, 0x06	; 6
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <wdt_init>:
 * Notice: Optimization must be enabled before watchdog can be set
 * in C (WDCE). Use __attribute__ to enforce optimization level.
 ************************************************************************/
void __attribute__((optimize("O1"))) wdt_init(WDReset resetType)
{
	wdt_reset();
     e04:	a8 95       	wdr

	if(MCUSR & (1 << WDRF))     /* If a reset was caused by the Watchdog Timer perform any special operations */
     e06:	04 b6       	in	r0, 0x34	; 52
     e08:	03 fe       	sbrs	r0, 3
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <wdt_init+0xe>
	{
		MCUSR &= (1 << WDRF);   /* Clear the WDT reset flag */
     e0c:	94 b7       	in	r25, 0x34	; 52
     e0e:	98 70       	andi	r25, 0x08	; 8
     e10:	94 bf       	out	0x34, r25	; 52
	}

	if(resetType == WD_HW_RESETS)
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	41 f4       	brne	.+16     	; 0xe26 <wdt_init+0x22>
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     e16:	e0 e6       	ldi	r30, 0x60	; 96
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	90 81       	ld	r25, Z
     e1c:	98 61       	ori	r25, 0x18	; 24
     e1e:	90 83       	st	Z, r25
		WDTCSR = (1 << WDP3) | (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt every 4 seconds, and hardware resets */
     e20:	98 e6       	ldi	r25, 0x68	; 104
     e22:	90 83       	st	Z, r25
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <wdt_init+0x44>
		/*	WDTCSR = (1 << WDP3) | (1 << WDP0) | (1 << WDIE) | (1 << WDE); // Enable WD interrupt every 8 seconds, and hardware resets */
	}
	else if(resetType == WD_SW_RESETS)
     e26:	81 11       	cpse	r24, r1
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <wdt_init+0x36>
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     e2a:	e0 e6       	ldi	r30, 0x60	; 96
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	90 81       	ld	r25, Z
     e30:	98 61       	ori	r25, 0x18	; 24
     e32:	90 83       	st	Z, r25
		/*	WDTCSR = (1 << WDP3) | (1 << WDIE); // Enable WD interrupt every 4 seconds (no HW reset)
		 *	WDTCSR = (1 << WDP3) | (1 << WDP0)  | (1 << WDIE); // Enable WD interrupt every 8 seconds (no HW reset) */
		WDTCSR = (1 << WDP1) | (1 << WDP2)  | (1 << WDIE);  /* Enable WD interrupt every 1 seconds (no HW reset) */
     e34:	96 e4       	ldi	r25, 0x46	; 70
     e36:	90 83       	st	Z, r25
     e38:	07 c0       	rjmp	.+14     	; 0xe48 <wdt_init+0x44>
	}
	else
	{
		WDTCSR |= (1 << WDCE) | (1 << WDE);
     e3a:	e0 e6       	ldi	r30, 0x60	; 96
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	90 81       	ld	r25, Z
     e40:	98 61       	ori	r25, 0x18	; 24
     e42:	90 83       	st	Z, r25
		WDTCSR = (1 << WDIE) | (1 << WDE);    /* Enable WD interrupt in 16ms, and hardware reset */
     e44:	98 e4       	ldi	r25, 0x48	; 72
     e46:	90 83       	st	Z, r25
	}
	
	g_enableHardwareWDResets = (resetType != WD_SW_RESETS);
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	81 11       	cpse	r24, r1
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <wdt_init+0x4c>
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	90 93 66 07 	sts	0x0766, r25	; 0x800766 <g_enableHardwareWDResets>
     e54:	08 95       	ret

00000e56 <__vector_3>:
 *
 * Note: For quadrature reading the interrupt is set for "Any logical
 * change on INT0 generates an interrupt request."
 ************************************************************************/
ISR( PCINT0_vect )
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
	if(g_terminal_mode)
     e78:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
     e7c:	88 23       	and	r24, r24
     e7e:	19 f0       	breq	.+6      	; 0xe86 <__vector_3+0x30>
	{
		lb_send_string("\nError: PCINT0 occurred!\n");
     e80:	82 ea       	ldi	r24, 0xA2	; 162
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	94 da       	rcall	.-2776   	; 0x3ae <lb_send_string>
	}
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_4>:
 * interrupts. Pin change interrupts on PCINT23...0 are detected
 * asynchronously. This implies that these interrupts can be used for
 * waking the part from sleep modes other than Idle mode.
 ************************************************************************/
	ISR( PCINT1_vect )
	{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	8f 93       	push	r24
     eb4:	9f 93       	push	r25
		static uint8_t portChistory = 0xFF; /* default is high because the pull-up */

		uint8_t changedbits;

		if(!g_initialization_complete)
     eb6:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <g_initialization_complete>
     eba:	88 23       	and	r24, r24
     ebc:	81 f0       	breq	.+32     	; 0xede <__vector_4+0x36>
		{
			return; /* ignore keypresses before initialization completes */

		}
		changedbits = PINC ^ portChistory;
     ebe:	96 b1       	in	r25, 0x06	; 6
     ec0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <portChistory.3057>
     ec4:	89 27       	eor	r24, r25
		portChistory = PINC;
     ec6:	96 b1       	in	r25, 0x06	; 6
     ec8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <portChistory.3057>

		if(!changedbits)    /* noise? */
     ecc:	88 23       	and	r24, r24
     ece:	39 f0       	breq	.+14     	; 0xede <__vector_4+0x36>
		{
			return;
		}

		if(changedbits & (1 << PORTC2)) /* Receiver port changed */
     ed0:	82 ff       	sbrs	r24, 2
     ed2:	05 c0       	rjmp	.+10     	; 0xede <__vector_4+0x36>
		{
			if(PINC & (1 << PORTC2))    /* rising edge */
     ed4:	32 99       	sbic	0x06, 2	; 6
     ed6:	03 c0       	rjmp	.+6      	; 0xede <__vector_4+0x36>
			{
			}
			else
			{
				g_radio_port_changed = TRUE;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <g_radio_port_changed>
			}
		}
	}
     ede:	9f 91       	pop	r25
     ee0:	8f 91       	pop	r24
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <__vector_18>:
 *                      id = Linkbus MessageID
 *                      fn = variable length fields
 *                      ; = end of message flag
 ************************************************************************/
ISR(USART_RX_vect)
{
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	1f 93       	push	r17
     f00:	2f 93       	push	r18
     f02:	3f 93       	push	r19
     f04:	4f 93       	push	r20
     f06:	5f 93       	push	r21
     f08:	6f 93       	push	r22
     f0a:	7f 93       	push	r23
     f0c:	8f 93       	push	r24
     f0e:	9f 93       	push	r25
     f10:	af 93       	push	r26
     f12:	bf 93       	push	r27
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
	static uint8_t field_len = 0;
	static uint32_t msg_ID = 0;
	static BOOL receiving_msg = FALSE;
	uint8_t rx_char;

	rx_char = UDR0;
     f1c:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	if(!buff)
     f20:	c0 91 60 07 	lds	r28, 0x0760	; 0x800760 <buff.3071>
     f24:	d0 91 61 07 	lds	r29, 0x0761	; 0x800761 <buff.3071+0x1>
     f28:	20 97       	sbiw	r28, 0x00	; 0
	{
		buff = nextEmptyRxBuffer();
     f2a:	49 f4       	brne	.+18     	; 0xf3e <__vector_18+0x52>
     f2c:	0b d9       	rcall	.-3562   	; 0x144 <nextEmptyRxBuffer>
     f2e:	ec 01       	movw	r28, r24
     f30:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <buff.3071+0x1>
     f34:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <buff.3071>
	}

	if(buff)
     f38:	89 2b       	or	r24, r25
     f3a:	09 f4       	brne	.+2      	; 0xf3e <__vector_18+0x52>
     f3c:	39 c2       	rjmp	.+1138   	; 0x13b0 <__vector_18+0x4c4>
	{
		if(g_terminal_mode)
     f3e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
     f42:	88 23       	and	r24, r24
     f44:	09 f4       	brne	.+2      	; 0xf48 <__vector_18+0x5c>
     f46:	35 c1       	rjmp	.+618    	; 0x11b2 <__vector_18+0x2c6>
		{
			static uint8_t ignoreCount = 0;

			rx_char = toupper(rx_char);
     f48:	81 2f       	mov	r24, r17
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 33 25 	call	0x4a66	; 0x4a66 <toupper>

			if(ignoreCount)
     f50:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <ignoreCount.3078>
     f54:	99 23       	and	r25, r25
     f56:	21 f0       	breq	.+8      	; 0xf60 <__vector_18+0x74>
			{
				rx_char = '\0';
				ignoreCount--;
     f58:	91 50       	subi	r25, 0x01	; 1
     f5a:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <ignoreCount.3078>
     f5e:	28 c2       	rjmp	.+1104   	; 0x13b0 <__vector_18+0x4c4>
	{
		if(g_terminal_mode)
		{
			static uint8_t ignoreCount = 0;

			rx_char = toupper(rx_char);
     f60:	18 2f       	mov	r17, r24
			if(ignoreCount)
			{
				rx_char = '\0';
				ignoreCount--;
			}
			else if(rx_char == 0x1B)    /* ESC sequence start */
     f62:	8b 31       	cpi	r24, 0x1B	; 27
     f64:	69 f4       	brne	.+26     	; 0xf80 <__vector_18+0x94>
			{
				rx_char = '\0';

				if(charIndex < LINKBUS_MAX_MSG_FIELD_LENGTH)
     f66:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <charIndex.3072>
     f6a:	e5 31       	cpi	r30, 0x15	; 21
     f6c:	28 f4       	brcc	.+10     	; 0xf78 <__vector_18+0x8c>
				{
					rx_char = textBuff[charIndex];
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	e7 5b       	subi	r30, 0xB7	; 183
     f72:	f8 4f       	sbci	r31, 0xF8	; 248
     f74:	10 81       	ld	r17, Z
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <__vector_18+0x8e>
				rx_char = '\0';
				ignoreCount--;
			}
			else if(rx_char == 0x1B)    /* ESC sequence start */
			{
				rx_char = '\0';
     f78:	10 e0       	ldi	r17, 0x00	; 0
				if(charIndex < LINKBUS_MAX_MSG_FIELD_LENGTH)
				{
					rx_char = textBuff[charIndex];
				}

				ignoreCount = 2;                            /* throw out the next two characters */
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <ignoreCount.3078>
			}

			if(rx_char == 0x0D)                             /* Handle carriage return */
     f80:	1d 30       	cpi	r17, 0x0D	; 13
     f82:	09 f0       	breq	.+2      	; 0xf86 <__vector_18+0x9a>
     f84:	48 c0       	rjmp	.+144    	; 0x1016 <__vector_18+0x12a>
			{
				g_power_off_countdown = POWER_OFF_DELAY;    /* restart countdown */
     f86:	88 e8       	ldi	r24, 0x88	; 136
     f88:	93 e1       	ldi	r25, 0x13	; 19
     f8a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
     f8e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>

				if(receiving_msg)
     f92:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <receiving_msg.3076>
     f96:	88 23       	and	r24, r24
     f98:	29 f1       	breq	.+74     	; 0xfe4 <__vector_18+0xf8>
				{
					if(charIndex > 0)
     f9a:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <charIndex.3072>
     f9e:	ee 23       	and	r30, r30
     fa0:	f9 f0       	breq	.+62     	; 0xfe0 <__vector_18+0xf4>
					{
						buff->type = LINKBUS_MSG_QUERY;
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	88 83       	st	Y, r24
						buff->id = msg_ID;
     fa6:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <msg_ID.3075>
     faa:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <msg_ID.3075+0x1>
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	89 83       	std	Y+1, r24	; 0x01

						if(field_index > 0) /* terminate the last field */
     fb2:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <field_index.3073>
     fb6:	88 23       	and	r24, r24
     fb8:	79 f0       	breq	.+30     	; 0xfd8 <__vector_18+0xec>
						{
							buff->fields[field_index - 1][field_len] = 0;
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	40 91 42 07 	lds	r20, 0x0742	; 0x800742 <field_len.3074>
     fc2:	55 e1       	ldi	r21, 0x15	; 21
     fc4:	58 9f       	mul	r21, r24
     fc6:	90 01       	movw	r18, r0
     fc8:	59 9f       	mul	r21, r25
     fca:	30 0d       	add	r19, r0
     fcc:	11 24       	eor	r1, r1
     fce:	c2 0f       	add	r28, r18
     fd0:	d3 1f       	adc	r29, r19
     fd2:	c4 0f       	add	r28, r20
     fd4:	d1 1d       	adc	r29, r1
     fd6:	1b 82       	std	Y+3, r1	; 0x03
						}

						textBuff[charIndex] = '\0'; /* terminate last-message buffer */
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	e7 5b       	subi	r30, 0xB7	; 183
     fdc:	f8 4f       	sbci	r31, 0xF8	; 248
					}

					lb_send_NewLine();
     fde:	10 82       	st	Z, r1
     fe0:	80 d9       	rcall	.-3328   	; 0x2e2 <lb_send_NewLine>
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__vector_18+0x100>
				}
				else
				{
					buff->id = INVALID_MESSAGE; /* print help message */
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	9f ef       	ldi	r25, 0xFF	; 255
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
				}

				charIndex = 0;
     fec:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <charIndex.3072>
				field_len = 0;
     ff0:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <field_len.3074>
				msg_ID = LINKBUS_MSG_UNKNOWN;
     ff4:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <msg_ID.3075>
     ff8:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <msg_ID.3075+0x1>
     ffc:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <msg_ID.3075+0x2>
    1000:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <msg_ID.3075+0x3>

				field_index = 0;
    1004:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <field_index.3073>
				buff = NULL;
    1008:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <buff.3071+0x1>
    100c:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <buff.3071>

				receiving_msg = FALSE;
    1010:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <receiving_msg.3076>
    1014:	cd c1       	rjmp	.+922    	; 0x13b0 <__vector_18+0x4c4>
			}
			else if(rx_char)
    1016:	11 23       	and	r17, r17
    1018:	09 f4       	brne	.+2      	; 0x101c <__vector_18+0x130>
    101a:	ca c1       	rjmp	.+916    	; 0x13b0 <__vector_18+0x4c4>
			{
				textBuff[charIndex] = rx_char;  /* hold the characters for re-use */
    101c:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <charIndex.3072>
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	f9 01       	movw	r30, r18
    1026:	e7 5b       	subi	r30, 0xB7	; 183
    1028:	f8 4f       	sbci	r31, 0xF8	; 248
    102a:	10 83       	st	Z, r17

				if(charIndex)
    102c:	88 23       	and	r24, r24
    102e:	09 f4       	brne	.+2      	; 0x1032 <__vector_18+0x146>
    1030:	a1 c0       	rjmp	.+322    	; 0x1174 <__vector_18+0x288>
				{
					if(rx_char == 0x7F)         /* Handle backspace */
    1032:	1f 37       	cpi	r17, 0x7F	; 127
    1034:	d9 f5       	brne	.+118    	; 0x10ac <__vector_18+0x1c0>
					{
						charIndex--;
    1036:	81 50       	subi	r24, 0x01	; 1
    1038:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <charIndex.3072>
						if(field_index == 0)
    103c:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <field_index.3073>
    1040:	91 11       	cpse	r25, r1
    1042:	22 c0       	rjmp	.+68     	; 0x1088 <__vector_18+0x19c>
						{
							msg_ID -= textBuff[charIndex];
    1044:	e8 2f       	mov	r30, r24
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	e7 5b       	subi	r30, 0xB7	; 183
    104a:	f8 4f       	sbci	r31, 0xF8	; 248
							msg_ID /= 10;
    104c:	20 81       	ld	r18, Z
    104e:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <msg_ID.3075>
    1052:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <msg_ID.3075+0x1>
    1056:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <msg_ID.3075+0x2>
    105a:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <msg_ID.3075+0x3>
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	62 1b       	sub	r22, r18
    1064:	71 09       	sbc	r23, r1
    1066:	81 09       	sbc	r24, r1
    1068:	91 09       	sbc	r25, r1
    106a:	2a e0       	ldi	r18, 0x0A	; 10
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodsi4>
    1076:	20 93 44 07 	sts	0x0744, r18	; 0x800744 <msg_ID.3075>
    107a:	30 93 45 07 	sts	0x0745, r19	; 0x800745 <msg_ID.3075+0x1>
    107e:	40 93 46 07 	sts	0x0746, r20	; 0x800746 <msg_ID.3075+0x2>
    1082:	50 93 47 07 	sts	0x0747, r21	; 0x800747 <msg_ID.3075+0x3>
    1086:	92 c0       	rjmp	.+292    	; 0x11ac <__vector_18+0x2c0>
						}
						else if(field_len)
    1088:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <field_len.3074>
    108c:	88 23       	and	r24, r24
    108e:	21 f0       	breq	.+8      	; 0x1098 <__vector_18+0x1ac>
						{
							field_len--;
    1090:	81 50       	subi	r24, 0x01	; 1
    1092:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <field_len.3074>
    1096:	8a c0       	rjmp	.+276    	; 0x11ac <__vector_18+0x2c0>
						}
						else
						{
							buff->fields[field_index][0] = '\0';
    1098:	85 e1       	ldi	r24, 0x15	; 21
    109a:	98 9f       	mul	r25, r24
    109c:	c0 0d       	add	r28, r0
    109e:	d1 1d       	adc	r29, r1
    10a0:	11 24       	eor	r1, r1
    10a2:	1b 82       	std	Y+3, r1	; 0x03
							field_index--;
    10a4:	91 50       	subi	r25, 0x01	; 1
    10a6:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <field_index.3073>
    10aa:	80 c0       	rjmp	.+256    	; 0x11ac <__vector_18+0x2c0>
						}
					}
					else
					{
						if(rx_char == ' ')
    10ac:	10 32       	cpi	r17, 0x20	; 32
    10ae:	11 f5       	brne	.+68     	; 0x10f4 <__vector_18+0x208>
						{
							if(textBuff[charIndex - 1] == ' ')
    10b0:	f9 01       	movw	r30, r18
    10b2:	e8 5b       	subi	r30, 0xB8	; 184
    10b4:	f8 4f       	sbci	r31, 0xF8	; 248
    10b6:	90 81       	ld	r25, Z
    10b8:	90 32       	cpi	r25, 0x20	; 32
    10ba:	09 f4       	brne	.+2      	; 0x10be <__vector_18+0x1d2>
    10bc:	6b c1       	rjmp	.+726    	; 0x1394 <__vector_18+0x4a8>
								rx_char = '\0';
							}
							else
							{
								/* if(field_index == 0) // message ID received */
								if(field_index > 0)
    10be:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <field_index.3073>
    10c2:	99 23       	and	r25, r25
    10c4:	89 f0       	breq	.+34     	; 0x10e8 <__vector_18+0x1fc>
								{
									buff->fields[field_index - 1][field_len] = 0;
    10c6:	49 2f       	mov	r20, r25
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	41 50       	subi	r20, 0x01	; 1
    10cc:	51 09       	sbc	r21, r1
    10ce:	60 91 42 07 	lds	r22, 0x0742	; 0x800742 <field_len.3074>
    10d2:	75 e1       	ldi	r23, 0x15	; 21
    10d4:	74 9f       	mul	r23, r20
    10d6:	90 01       	movw	r18, r0
    10d8:	75 9f       	mul	r23, r21
    10da:	30 0d       	add	r19, r0
    10dc:	11 24       	eor	r1, r1
    10de:	c2 0f       	add	r28, r18
    10e0:	d3 1f       	adc	r29, r19
    10e2:	c6 0f       	add	r28, r22
    10e4:	d1 1d       	adc	r29, r1
    10e6:	1b 82       	std	Y+3, r1	; 0x03
								}

								field_index++;
    10e8:	9f 5f       	subi	r25, 0xFF	; 255
    10ea:	90 93 43 07 	sts	0x0743, r25	; 0x800743 <field_index.3073>
								field_len = 0;
    10ee:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <field_len.3074>
    10f2:	54 c1       	rjmp	.+680    	; 0x139c <__vector_18+0x4b0>
							}
						}
						else
						{
							if(field_index == 0)    /* message ID received */
    10f4:	20 91 43 07 	lds	r18, 0x0743	; 0x800743 <field_index.3073>
    10f8:	21 11       	cpse	r18, r1
    10fa:	27 c0       	rjmp	.+78     	; 0x114a <__vector_18+0x25e>
							{
								msg_ID = msg_ID * 10 + rx_char;
    10fc:	40 91 44 07 	lds	r20, 0x0744	; 0x800744 <msg_ID.3075>
    1100:	50 91 45 07 	lds	r21, 0x0745	; 0x800745 <msg_ID.3075+0x1>
    1104:	60 91 46 07 	lds	r22, 0x0746	; 0x800746 <msg_ID.3075+0x2>
    1108:	70 91 47 07 	lds	r23, 0x0747	; 0x800747 <msg_ID.3075+0x3>
    110c:	44 0f       	add	r20, r20
    110e:	55 1f       	adc	r21, r21
    1110:	66 1f       	adc	r22, r22
    1112:	77 1f       	adc	r23, r23
    1114:	6a 01       	movw	r12, r20
    1116:	7b 01       	movw	r14, r22
    1118:	cc 0c       	add	r12, r12
    111a:	dd 1c       	adc	r13, r13
    111c:	ee 1c       	adc	r14, r14
    111e:	ff 1c       	adc	r15, r15
    1120:	cc 0c       	add	r12, r12
    1122:	dd 1c       	adc	r13, r13
    1124:	ee 1c       	adc	r14, r14
    1126:	ff 1c       	adc	r15, r15
    1128:	4c 0d       	add	r20, r12
    112a:	5d 1d       	adc	r21, r13
    112c:	6e 1d       	adc	r22, r14
    112e:	7f 1d       	adc	r23, r15
    1130:	41 0f       	add	r20, r17
    1132:	51 1d       	adc	r21, r1
    1134:	61 1d       	adc	r22, r1
    1136:	71 1d       	adc	r23, r1
    1138:	40 93 44 07 	sts	0x0744, r20	; 0x800744 <msg_ID.3075>
    113c:	50 93 45 07 	sts	0x0745, r21	; 0x800745 <msg_ID.3075+0x1>
    1140:	60 93 46 07 	sts	0x0746, r22	; 0x800746 <msg_ID.3075+0x2>
    1144:	70 93 47 07 	sts	0x0747, r23	; 0x800747 <msg_ID.3075+0x3>
    1148:	29 c1       	rjmp	.+594    	; 0x139c <__vector_18+0x4b0>
							}
							else
							{
								buff->fields[field_index - 1][field_len++] = rx_char;
    114a:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <field_len.3074>
    114e:	31 e0       	ldi	r19, 0x01	; 1
    1150:	39 0f       	add	r19, r25
    1152:	30 93 42 07 	sts	0x0742, r19	; 0x800742 <field_len.3074>
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	31 09       	sbc	r19, r1
    115c:	65 e1       	ldi	r22, 0x15	; 21
    115e:	62 9f       	mul	r22, r18
    1160:	a0 01       	movw	r20, r0
    1162:	63 9f       	mul	r22, r19
    1164:	50 0d       	add	r21, r0
    1166:	11 24       	eor	r1, r1
    1168:	c4 0f       	add	r28, r20
    116a:	d5 1f       	adc	r29, r21
    116c:	c9 0f       	add	r28, r25
    116e:	d1 1d       	adc	r29, r1
    1170:	1b 83       	std	Y+3, r17	; 0x03
    1172:	14 c1       	rjmp	.+552    	; 0x139c <__vector_18+0x4b0>
						charIndex++;
					}
				}
				else
				{
					if((rx_char == 0x7F) || (rx_char == ' '))   /* Handle backspace and Space */
    1174:	1f 37       	cpi	r17, 0x7F	; 127
    1176:	09 f4       	brne	.+2      	; 0x117a <__vector_18+0x28e>
    1178:	1b c1       	rjmp	.+566    	; 0x13b0 <__vector_18+0x4c4>
    117a:	10 32       	cpi	r17, 0x20	; 32
    117c:	09 f4       	brne	.+2      	; 0x1180 <__vector_18+0x294>
    117e:	18 c1       	rjmp	.+560    	; 0x13b0 <__vector_18+0x4c4>
						rx_char = '\0';
					}
					else                                        /* start of new message */
					{
						uint8_t i;
						field_index = 0;
    1180:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <field_index.3073>
						msg_ID = 0;

						msg_ID = msg_ID * 10 + rx_char;
    1184:	81 2f       	mov	r24, r17
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e0       	ldi	r26, 0x00	; 0
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <msg_ID.3075>
    1190:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <msg_ID.3075+0x1>
    1194:	a0 93 46 07 	sts	0x0746, r26	; 0x800746 <msg_ID.3075+0x2>
    1198:	b0 93 47 07 	sts	0x0747, r27	; 0x800747 <msg_ID.3075+0x3>

						/* Empty the field buffers */
						for(i = 0; i < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; i++)
						{
							buff->fields[i][0] = '\0';
    119c:	1b 82       	std	Y+3, r1	; 0x03
    119e:	18 8e       	std	Y+24, r1	; 0x18
    11a0:	1d a6       	std	Y+45, r1	; 0x2d
						}

						receiving_msg = TRUE;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <receiving_msg.3076>
						charIndex++;
    11a8:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <charIndex.3072>
					}
				}

				if(rx_char)
				{
					lb_echo_char(rx_char);
    11ac:	81 2f       	mov	r24, r17
    11ae:	f8 d8       	rcall	.-3600   	; 0x3a0 <lb_echo_char>
    11b0:	ff c0       	rjmp	.+510    	; 0x13b0 <__vector_18+0x4c4>
				}
			}
		}
		else
		{
			if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
    11b2:	14 32       	cpi	r17, 0x24	; 36
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__vector_18+0x2cc>
    11b6:	cb c0       	rjmp	.+406    	; 0x134e <__vector_18+0x462>
    11b8:	11 32       	cpi	r17, 0x21	; 33
    11ba:	d1 f4       	brne	.+52     	; 0x11f0 <__vector_18+0x304>
    11bc:	cc c0       	rjmp	.+408    	; 0x1356 <__vector_18+0x46a>
			{
				charIndex = 0;
				buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    11be:	88 83       	st	Y, r24
				field_len = 0;
    11c0:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <field_len.3074>
				msg_ID = LINKBUS_MSG_UNKNOWN;
    11c4:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <msg_ID.3075>
    11c8:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <msg_ID.3075+0x1>
    11cc:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <msg_ID.3075+0x2>
    11d0:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <msg_ID.3075+0x3>
				receiving_msg = TRUE;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <receiving_msg.3076>

				/* Empty the field buffers */
				for(field_index = 0; field_index < LINKBUS_MAX_MSG_NUMBER_OF_FIELDS; field_index++)
				{
					buff->fields[field_index][0] = '\0';
    11da:	1b 82       	std	Y+3, r1	; 0x03
    11dc:	18 8e       	std	Y+24, r1	; 0x18
    11de:	1d a6       	std	Y+45, r1	; 0x2d
				}

				field_index = 0;
    11e0:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <field_index.3073>
					field_index = 0;
					buff = NULL;
				}
			}

			if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    11e4:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <charIndex.3072>
    11e8:	8f 5f       	subi	r24, 0xFF	; 255
    11ea:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <charIndex.3072>
    11ee:	e0 c0       	rjmp	.+448    	; 0x13b0 <__vector_18+0x4c4>
					buff->fields[field_index][0] = '\0';
				}

				field_index = 0;
			}
			else if(receiving_msg)
    11f0:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <receiving_msg.3076>
    11f4:	88 23       	and	r24, r24
    11f6:	09 f4       	brne	.+2      	; 0x11fa <__vector_18+0x30e>
    11f8:	83 c0       	rjmp	.+262    	; 0x1300 <__vector_18+0x414>
			{
				if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
    11fa:	1c 32       	cpi	r17, 0x2C	; 44
    11fc:	31 f0       	breq	.+12     	; 0x120a <__vector_18+0x31e>
    11fe:	1b 33       	cpi	r17, 0x3B	; 59
    1200:	09 f4       	brne	.+2      	; 0x1204 <__vector_18+0x318>
    1202:	be c0       	rjmp	.+380    	; 0x1380 <__vector_18+0x494>
    1204:	1f 33       	cpi	r17, 0x3F	; 63
    1206:	e9 f5       	brne	.+122    	; 0x1282 <__vector_18+0x396>
    1208:	b0 c0       	rjmp	.+352    	; 0x136a <__vector_18+0x47e>
				{
					/* if(field_index == 0) // message ID received */
					if(field_index > 0)
    120a:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <field_index.3073>
    120e:	88 23       	and	r24, r24
    1210:	09 f4       	brne	.+2      	; 0x1214 <__vector_18+0x328>
    1212:	c8 c0       	rjmp	.+400    	; 0x13a4 <__vector_18+0x4b8>
					{
						buff->fields[field_index - 1][field_len] = 0;
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	21 50       	subi	r18, 0x01	; 1
    121a:	31 09       	sbc	r19, r1
    121c:	90 91 42 07 	lds	r25, 0x0742	; 0x800742 <field_len.3074>
    1220:	45 e1       	ldi	r20, 0x15	; 21
    1222:	42 9f       	mul	r20, r18
    1224:	f0 01       	movw	r30, r0
    1226:	43 9f       	mul	r20, r19
    1228:	f0 0d       	add	r31, r0
    122a:	11 24       	eor	r1, r1
    122c:	ec 0f       	add	r30, r28
    122e:	fd 1f       	adc	r31, r29
    1230:	e9 0f       	add	r30, r25
    1232:	f1 1d       	adc	r31, r1
    1234:	13 82       	std	Z+3, r1	; 0x03
					}

					field_index++;
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <field_index.3073>
					field_len = 0;
    123c:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <field_len.3074>

					if(rx_char == ';')
    1240:	1b 33       	cpi	r17, 0x3B	; 59
    1242:	69 f4       	brne	.+26     	; 0x125e <__vector_18+0x372>
					{
						if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    1244:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <charIndex.3072>
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	30 f0       	brcs	.+12     	; 0x1258 <__vector_18+0x36c>
						{
							buff->id = msg_ID;
    124c:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <msg_ID.3075>
    1250:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <msg_ID.3075+0x1>
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
						}
						receiving_msg = FALSE;
    1258:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <receiving_msg.3076>
    125c:	96 c0       	rjmp	.+300    	; 0x138a <__vector_18+0x49e>
					}
					else if(rx_char == '?')
    125e:	1f 33       	cpi	r17, 0x3F	; 63
    1260:	09 f0       	breq	.+2      	; 0x1264 <__vector_18+0x378>
    1262:	69 c0       	rjmp	.+210    	; 0x1336 <__vector_18+0x44a>
					{
						buff->type = LINKBUS_MSG_QUERY;
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	88 83       	st	Y, r24
						if(charIndex > LINKBUS_MIN_MSG_LENGTH)
    1268:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <charIndex.3072>
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	30 f0       	brcs	.+12     	; 0x127c <__vector_18+0x390>
						{
							buff->id = msg_ID;
    1270:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <msg_ID.3075>
    1274:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <msg_ID.3075+0x1>
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
						}
						receiving_msg = FALSE;
    127c:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <receiving_msg.3076>
    1280:	84 c0       	rjmp	.+264    	; 0x138a <__vector_18+0x49e>
						buff = 0;
					}
				}
				else
				{
					if(field_index == 0)    /* message ID received */
    1282:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <field_index.3073>
    1286:	81 11       	cpse	r24, r1
    1288:	27 c0       	rjmp	.+78     	; 0x12d8 <__vector_18+0x3ec>
					{
						msg_ID = msg_ID * 10 + rx_char;
    128a:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <msg_ID.3075>
    128e:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <msg_ID.3075+0x1>
    1292:	a0 91 46 07 	lds	r26, 0x0746	; 0x800746 <msg_ID.3075+0x2>
    1296:	b0 91 47 07 	lds	r27, 0x0747	; 0x800747 <msg_ID.3075+0x3>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	aa 1f       	adc	r26, r26
    12a0:	bb 1f       	adc	r27, r27
    12a2:	ac 01       	movw	r20, r24
    12a4:	bd 01       	movw	r22, r26
    12a6:	44 0f       	add	r20, r20
    12a8:	55 1f       	adc	r21, r21
    12aa:	66 1f       	adc	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	44 0f       	add	r20, r20
    12b0:	55 1f       	adc	r21, r21
    12b2:	66 1f       	adc	r22, r22
    12b4:	77 1f       	adc	r23, r23
    12b6:	84 0f       	add	r24, r20
    12b8:	95 1f       	adc	r25, r21
    12ba:	a6 1f       	adc	r26, r22
    12bc:	b7 1f       	adc	r27, r23
    12be:	81 0f       	add	r24, r17
    12c0:	91 1d       	adc	r25, r1
    12c2:	a1 1d       	adc	r26, r1
    12c4:	b1 1d       	adc	r27, r1
    12c6:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <msg_ID.3075>
    12ca:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <msg_ID.3075+0x1>
    12ce:	a0 93 46 07 	sts	0x0746, r26	; 0x800746 <msg_ID.3075+0x2>
    12d2:	b0 93 47 07 	sts	0x0747, r27	; 0x800747 <msg_ID.3075+0x3>
    12d6:	2f c0       	rjmp	.+94     	; 0x1336 <__vector_18+0x44a>
					}
					else
					{
						buff->fields[field_index - 1][field_len++] = rx_char;
    12d8:	40 91 42 07 	lds	r20, 0x0742	; 0x800742 <field_len.3074>
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	94 0f       	add	r25, r20
    12e0:	90 93 42 07 	sts	0x0742, r25	; 0x800742 <field_len.3074>
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	55 e1       	ldi	r21, 0x15	; 21
    12ea:	58 9f       	mul	r21, r24
    12ec:	90 01       	movw	r18, r0
    12ee:	59 9f       	mul	r21, r25
    12f0:	30 0d       	add	r19, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	c2 0f       	add	r28, r18
    12f6:	d3 1f       	adc	r29, r19
    12f8:	c4 0f       	add	r28, r20
    12fa:	d1 1d       	adc	r29, r1
    12fc:	1b 83       	std	Y+3, r17	; 0x03
    12fe:	1b c0       	rjmp	.+54     	; 0x1336 <__vector_18+0x44a>
					}
				}
			}
			else if(rx_char == 0x0D)    /* Handle carriage return */
    1300:	1d 30       	cpi	r17, 0x0D	; 13
    1302:	c9 f4       	brne	.+50     	; 0x1336 <__vector_18+0x44a>
			{
				if(g_LB_attached_device == NO_ID)
    1304:	80 91 83 07 	lds	r24, 0x0783	; 0x800783 <g_LB_attached_device>
    1308:	81 11       	cpse	r24, r1
    130a:	15 c0       	rjmp	.+42     	; 0x1336 <__vector_18+0x44a>
				{
					buff->id = MESSAGE_TTY;
    130c:	81 e7       	ldi	r24, 0x71	; 113
    130e:	94 e2       	ldi	r25, 0x24	; 36
    1310:	9a 83       	std	Y+2, r25	; 0x02
    1312:	89 83       	std	Y+1, r24	; 0x01
					charIndex = LINKBUS_MAX_MSG_LENGTH;
					field_len = 0;
    1314:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <field_len.3074>
					msg_ID = LINKBUS_MSG_UNKNOWN;
    1318:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <msg_ID.3075>
    131c:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <msg_ID.3075+0x1>
    1320:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <msg_ID.3075+0x2>
    1324:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <msg_ID.3075+0x3>
					field_index = 0;
    1328:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <field_index.3073>
					buff = NULL;
    132c:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <buff.3071+0x1>
    1330:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <buff.3071>
    1334:	07 c0       	rjmp	.+14     	; 0x1344 <__vector_18+0x458>
				}
			}

			if(++charIndex >= LINKBUS_MAX_MSG_LENGTH)
    1336:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <charIndex.3072>
    133a:	8f 5f       	subi	r24, 0xFF	; 255
    133c:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <charIndex.3072>
    1340:	8b 34       	cpi	r24, 0x4B	; 75
    1342:	b0 f1       	brcs	.+108    	; 0x13b0 <__vector_18+0x4c4>
			{
				receiving_msg = FALSE;
    1344:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <receiving_msg.3076>
				charIndex = 0;
    1348:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <charIndex.3072>
			}
		}
	}
}
    134c:	31 c0       	rjmp	.+98     	; 0x13b0 <__vector_18+0x4c4>
		}
		else
		{
			if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
			{
				charIndex = 0;
    134e:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <charIndex.3072>
				buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	34 cf       	rjmp	.-408    	; 0x11be <__vector_18+0x2d2>
		}
		else
		{
			if((rx_char == '$') || (rx_char == '!'))    /* start of new message = $ */
			{
				charIndex = 0;
    1356:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <charIndex.3072>
				buff->type = (rx_char == '!') ? LINKBUS_MSG_REPLY : LINKBUS_MSG_COMMAND;
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	30 cf       	rjmp	.-416    	; 0x11be <__vector_18+0x2d2>
					if(field_index > 0)
					{
						buff->fields[field_index - 1][field_len] = 0;
					}

					field_index++;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <field_index.3073>
					field_len = 0;
    1364:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <field_len.3074>
    1368:	7d cf       	rjmp	.-262    	; 0x1264 <__vector_18+0x378>
			else if(receiving_msg)
			{
				if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
				{
					/* if(field_index == 0) // message ID received */
					if(field_index > 0)
    136a:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <field_index.3073>
    136e:	88 23       	and	r24, r24
    1370:	b1 f3       	breq	.-20     	; 0x135e <__vector_18+0x472>
    1372:	50 cf       	rjmp	.-352    	; 0x1214 <__vector_18+0x328>
					{
						buff->fields[field_index - 1][field_len] = 0;
					}

					field_index++;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <field_index.3073>
					field_len = 0;
    137a:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <field_len.3074>
    137e:	62 cf       	rjmp	.-316    	; 0x1244 <__vector_18+0x358>
			else if(receiving_msg)
			{
				if((rx_char == ',') || (rx_char == ';') || (rx_char == '?'))    /* new field = ,; end of message = ; */
				{
					/* if(field_index == 0) // message ID received */
					if(field_index > 0)
    1380:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <field_index.3073>
    1384:	81 11       	cpse	r24, r1
    1386:	46 cf       	rjmp	.-372    	; 0x1214 <__vector_18+0x328>
    1388:	f5 cf       	rjmp	.-22     	; 0x1374 <__vector_18+0x488>
						receiving_msg = FALSE;
					}

					if(!receiving_msg)
					{
						buff = 0;
    138a:	10 92 61 07 	sts	0x0761, r1	; 0x800761 <buff.3071+0x1>
    138e:	10 92 60 07 	sts	0x0760, r1	; 0x800760 <buff.3071>
    1392:	d1 cf       	rjmp	.-94     	; 0x1336 <__vector_18+0x44a>
							{
								buff->fields[field_index - 1][field_len++] = rx_char;
							}
						}

						charIndex++;
    1394:	8f 5f       	subi	r24, 0xFF	; 255
    1396:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <charIndex.3072>
    139a:	0a c0       	rjmp	.+20     	; 0x13b0 <__vector_18+0x4c4>
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <charIndex.3072>
    13a2:	04 cf       	rjmp	.-504    	; 0x11ac <__vector_18+0x2c0>
					if(field_index > 0)
					{
						buff->fields[field_index - 1][field_len] = 0;
					}

					field_index++;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <field_index.3073>
					field_len = 0;
    13aa:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <field_len.3074>
    13ae:	c3 cf       	rjmp	.-122    	; 0x1336 <__vector_18+0x44a>
				receiving_msg = FALSE;
				charIndex = 0;
			}
		}
	}
}
    13b0:	ff 91       	pop	r31
    13b2:	ef 91       	pop	r30
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	1f 91       	pop	r17
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <__vector_19>:
 *
 * This ISR is responsible for filling the USART transmit buffer. It
 * implements the transmit function of the Linkbus.
 ************************************************************************/
ISR(USART_UDRE_vect)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	2f 93       	push	r18
    13ec:	3f 93       	push	r19
    13ee:	4f 93       	push	r20
    13f0:	5f 93       	push	r21
    13f2:	6f 93       	push	r22
    13f4:	7f 93       	push	r23
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
	static LinkbusTxBuffer* buff = 0;
	static uint8_t charIndex = 0;

	if(!buff)
    1402:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <buff.3091>
    1406:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <buff.3091+0x1>
    140a:	89 2b       	or	r24, r25
    140c:	31 f4       	brne	.+12     	; 0x141a <__vector_19+0x3a>
	{
		buff = nextFullTxBuffer();
    140e:	0e 94 52 00 	call	0xa4	; 0xa4 <nextFullTxBuffer>
    1412:	90 93 41 07 	sts	0x0741, r25	; 0x800741 <buff.3091+0x1>
    1416:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <buff.3091>
	}

	if((*buff)[charIndex])
    141a:	e0 91 40 07 	lds	r30, 0x0740	; 0x800740 <buff.3091>
    141e:	f0 91 41 07 	lds	r31, 0x0741	; 0x800741 <buff.3091+0x1>
    1422:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <charIndex.3092>
    1426:	df 01       	movw	r26, r30
    1428:	a8 0f       	add	r26, r24
    142a:	b1 1d       	adc	r27, r1
    142c:	9c 91       	ld	r25, X
    142e:	99 23       	and	r25, r25
    1430:	31 f0       	breq	.+12     	; 0x143e <__vector_19+0x5e>
	{
		/* Put data into buffer, sends the data */
		UDR0 = (*buff)[charIndex++];
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <charIndex.3092>
    1438:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    143c:	0d c0       	rjmp	.+26     	; 0x1458 <__vector_19+0x78>
	}
	else
	{
		charIndex = 0;
    143e:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <charIndex.3092>
		(*buff)[0] = '\0';
    1442:	10 82       	st	Z, r1
		buff = nextFullTxBuffer();
    1444:	0e 94 52 00 	call	0xa4	; 0xa4 <nextFullTxBuffer>
    1448:	90 93 41 07 	sts	0x0741, r25	; 0x800741 <buff.3091+0x1>
    144c:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <buff.3091>
		if(!buff)
    1450:	89 2b       	or	r24, r25
    1452:	11 f4       	brne	.+4      	; 0x1458 <__vector_19+0x78>
		{
			linkbus_end_tx();
    1454:	0e 94 11 01 	call	0x222	; 0x222 <linkbus_end_tx>
		}
	}
}
    1458:	ff 91       	pop	r31
    145a:	ef 91       	pop	r30
    145c:	bf 91       	pop	r27
    145e:	af 91       	pop	r26
    1460:	9f 91       	pop	r25
    1462:	8f 91       	pop	r24
    1464:	7f 91       	pop	r23
    1466:	6f 91       	pop	r22
    1468:	5f 91       	pop	r21
    146a:	4f 91       	pop	r20
    146c:	3f 91       	pop	r19
    146e:	2f 91       	pop	r18
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_5>:
 * PCINT23...0 are detected asynchronously. This implies that these
 * interrupts can be used for waking the part from sleep modes other
 * than Idle mode.
 ************************************************************************/
ISR( PCINT2_vect )
{
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	2f 93       	push	r18
    1486:	3f 93       	push	r19
    1488:	4f 93       	push	r20
    148a:	5f 93       	push	r21
    148c:	6f 93       	push	r22
    148e:	7f 93       	push	r23
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
    1498:	ef 93       	push	r30
    149a:	ff 93       	push	r31
	if(g_terminal_mode)
    149c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    14a0:	88 23       	and	r24, r24
    14a2:	21 f0       	breq	.+8      	; 0x14ac <__vector_5+0x32>
	{
		lb_send_string("\nError: PCINT2 occurred!\n");
    14a4:	8c eb       	ldi	r24, 0xBC	; 188
    14a6:	94 e0       	ldi	r25, 0x04	; 4
    14a8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lb_send_string>
	}
}
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	9f 91       	pop	r25
    14b6:	8f 91       	pop	r24
    14b8:	7f 91       	pop	r23
    14ba:	6f 91       	pop	r22
    14bc:	5f 91       	pop	r21
    14be:	4f 91       	pop	r20
    14c0:	3f 91       	pop	r19
    14c2:	2f 91       	pop	r18
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <saveAllEEPROM>:
	}
}

void saveAllEEPROM()
{
	wdt_reset();                                    /* HW watchdog */
    14ce:	a8 95       	wdr
	storeEEbyteIfChanged(&ee_tone_volume_setting, g_tone_volume);
    14d0:	60 91 78 07 	lds	r22, 0x0778	; 0x800778 <g_tone_volume>
    14d4:	84 e0       	ldi	r24, 0x04	; 4
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_main_volume_setting, g_main_volume);
    14dc:	60 91 79 07 	lds	r22, 0x0779	; 0x800779 <g_main_volume>
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 89 17 	call	0x2f12	; 0x2f12 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_audio_RSSI_setting, g_audio_RSSI);
    14e8:	60 91 77 07 	lds	r22, 0x0777	; 0x800777 <g_audio_RSSI>
    14ec:	82 e0       	ldi	r24, 0x02	; 2
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 89 17 	call	0x2f12	; 0x2f12 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_tone_RSSI_direction_setting, g_tone_RSSI_direction);
    14f4:	60 91 76 07 	lds	r22, 0x0776	; 0x800776 <g_tone_RSSI_direction>
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 89 17 	call	0x2f12	; 0x2f12 <storeEEbyteIfChanged>
	storeEEbyteIfChanged(&ee_rssi_filter_setting, g_rssi_filter);
    1500:	60 91 75 07 	lds	r22, 0x0775	; 0x800775 <g_rssi_filter>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <storeEEbyteIfChanged>
    150c:	08 95       	ret

0000150e <__vector_6>:
 * The Watchdog timer helps prevent lockups due to hardware problems.
 * It is especially helpful in this application for preventing I2C bus
 * errors from locking up the foreground process.
 ************************************************************************/
ISR(WDT_vect)
{
    150e:	1f 92       	push	r1
    1510:	0f 92       	push	r0
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	0f 92       	push	r0
    1516:	11 24       	eor	r1, r1
    1518:	2f 93       	push	r18
    151a:	3f 93       	push	r19
    151c:	4f 93       	push	r20
    151e:	5f 93       	push	r21
    1520:	6f 93       	push	r22
    1522:	7f 93       	push	r23
    1524:	8f 93       	push	r24
    1526:	9f 93       	push	r25
    1528:	af 93       	push	r26
    152a:	bf 93       	push	r27
    152c:	ef 93       	push	r30
	static uint8_t limit = 10;

	g_i2c_not_timed_out = FALSE;    /* unstick I2C */
    152e:	ff 93       	push	r31
    1530:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <g_i2c_not_timed_out>
	saveAllEEPROM();                /* Make sure changed values get saved */
    1534:	cc df       	rcall	.-104    	; 0x14ce <saveAllEEPROM>

	/* Don't allow an unlimited number of WD interrupts to occur without enabling
	 * hardware resets. But a limited number might be required during hardware
	 * initialization. */
	if(!g_enableHardwareWDResets && limit)
    1536:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <g_enableHardwareWDResets>
    153a:	81 11       	cpse	r24, r1
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <__vector_6+0x42>
    153e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <limit.3064>
    1542:	88 23       	and	r24, r24
    1544:	89 f0       	breq	.+34     	; 0x1568 <__vector_6+0x5a>
	{
		WDTCSR |= (1 << WDIE);  /* this prevents hardware resets from occurring */
    1546:	e0 e6       	ldi	r30, 0x60	; 96
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	80 64       	ori	r24, 0x40	; 64
    154e:	80 83       	st	Z, r24
	}

	if(limit)
    1550:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <limit.3064>
    1554:	88 23       	and	r24, r24
    1556:	41 f0       	breq	.+16     	; 0x1568 <__vector_6+0x5a>
	{
		limit--;
    1558:	81 50       	subi	r24, 0x01	; 1
    155a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <limit.3064>

		if(g_terminal_mode)
    155e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    1562:	81 11       	cpse	r24, r1
		{
			lb_send_WDTError();
    1564:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lb_send_WDTError>
		}
	}
}
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <initializeEEPROMVars>:
/**********************
**********************/

void initializeEEPROMVars(void)
{
	if(eeprom_read_byte(&ee_interface_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    158a:	85 e0       	ldi	r24, 0x05	; 5
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    1592:	88 3a       	cpi	r24, 0xA8	; 168
    1594:	f9 f4       	brne	.+62     	; 0x15d4 <initializeEEPROMVars+0x4a>
	{
		g_tone_volume = eeprom_read_byte(&ee_tone_volume_setting);
    1596:	84 e0       	ldi	r24, 0x04	; 4
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    159e:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <g_tone_volume>
		g_main_volume = eeprom_read_byte(&ee_main_volume_setting);
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    15aa:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <g_main_volume>
		g_audio_RSSI = eeprom_read_byte(&ee_audio_RSSI_setting);
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    15b6:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <g_audio_RSSI>
		g_tone_RSSI_direction = eeprom_read_byte(&ee_tone_RSSI_direction_setting);
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    15c2:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <g_tone_RSSI_direction>
		g_rssi_filter = eeprom_read_byte(&ee_rssi_filter_setting);
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    15ce:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <g_rssi_filter>
    15d2:	08 95       	ret
	}
	else
	{
		g_tone_volume = EEPROM_TONE_VOLUME_DEFAULT;
    15d4:	85 e0       	ldi	r24, 0x05	; 5
    15d6:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <g_tone_volume>
		g_main_volume = EEPROM_MAIN_VOLUME_DEFAULT;
    15da:	8b e0       	ldi	r24, 0x0B	; 11
    15dc:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <g_main_volume>
		g_audio_RSSI = EEPROM_AUDIO_RSSI_DEFAULT;
    15e0:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <g_audio_RSSI>
		g_tone_RSSI_direction = EEPROM_TONE_RSSI_DIRECTION_DEFAULT;
    15e4:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <g_tone_RSSI_direction>
		g_rssi_filter = EEPROM_TONE_RSSI_FILTER_DEFAULT;
    15e8:	84 e0       	ldi	r24, 0x04	; 4
    15ea:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <g_rssi_filter>

		saveAllEEPROM();
    15ee:	6f df       	rcall	.-290    	; 0x14ce <saveAllEEPROM>
		eeprom_write_byte(&ee_interface_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    15f0:	68 ea       	ldi	r22, 0xA8	; 168
    15f2:	85 e0       	ldi	r24, 0x05	; 5
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 0d 28 	call	0x501a	; 0x501a <eeprom_write_byte>
		wdt_reset();                                    /* HW watchdog */
    15fa:	a8 95       	wdr
    15fc:	08 95       	ret

000015fe <main>:
 * need to be handled in the foreground, not in ISRs. This includes
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	60 97       	sbiw	r28, 0x10	; 16
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
	uint16_t hold_tick_count = 0;
	LinkbusRxBuffer* lb_buff = 0;

	/**
	 * Initialize internal EEPROM if needed */
	initializeEEPROMVars();
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	bb df       	rcall	.-138    	; 0x158a <initializeEEPROMVars>
	// PB4 = MISO
	// PB5 = SCK
	// PB6 = Tx Power Enable
	// PB7 = Main Power Enable

		DDRB |= (1 << PORTB0) | (1 << PORTB2) | (1 << PORTB6) | (1 << PORTB7);       /* PB0 is Radio Enable output; */
    1614:	84 b1       	in	r24, 0x04	; 4
    1616:	85 6c       	ori	r24, 0xC5	; 197
    1618:	84 b9       	out	0x04, r24	; 4
		PORTB |= (1 << PORTB7); /* Turn on main power */
    161a:	2f 9a       	sbi	0x05, 7	; 5
	// PD4 = RTTY mark/space
	// PD5 = AM modulation PWM output
	// PD6 = Test Point
	// PD7 =  Port expander interrupt B

		DDRD  = 0b00000010;     /* All pins in PORTD are inputs, except PD5 (tone out), PD6 (audio pwr) and PD7 (LCD reset) */
    161c:	82 e0       	ldi	r24, 0x02	; 2
    161e:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0b11111100;     /* Pull-ups enabled on all input pins, all outputs set to high except PD6 (audio power) */
    1620:	8c ef       	ldi	r24, 0xFC	; 252
    1622:	8b b9       	out	0x0b, r24	; 11
	// PC4 = SDA
	// PC5 = SCL
	// PC6 = Reset
	// PC7 = N/A

		DDRC = 0b00000011;                                          /* PC4 and PC5 are inputs (should be true by default); PC2 and PC3 are used for their ADC function; PC1 and PC0 outputs control main volume */
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	87 b9       	out	0x07, r24	; 7
		PORTC = (I2C_PINS | (1 << PORTC2));                         /* Set all Port C pins low, except I2C lines and PC2; includes output port PORTC0 and PORTC1 (main volume controls) */
    1628:	84 e3       	ldi	r24, 0x34	; 52
    162a:	88 b9       	out	0x08, r24	; 8
		linkbus_init();
    162c:	0e 94 35 01 	call	0x26a	; 0x26a <linkbus_init>

	/**
	 * PD5 (OC0B) is PWM output for AM modulation generation
	 * Write 8-bit registers for TIMER0 */
	OCR0A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    1630:	9c e0       	ldi	r25, 0x0C	; 12
    1632:	97 bd       	out	0x27, r25	; 39
	TCCR0A |= (1 << WGM01);                             /* set CTC with OCRA */
    1634:	84 b5       	in	r24, 0x24	; 36
    1636:	82 60       	ori	r24, 0x02	; 2
    1638:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);                /* 1024 Prescaler */
    163a:	85 b5       	in	r24, 0x25	; 37
    163c:	85 60       	ori	r24, 0x05	; 5
    163e:	85 bd       	out	0x25, r24	; 37
/*	TIMSK0 &= ~(1 << OCIE0B); // disable compare interrupt - disabled by default */

	/**
	 * TIMER2 is for periodic interrupts */
	OCR2A = 0x0C;                                       /* set frequency to ~300 Hz (0x0c) */
    1640:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2A |= (1 << WGM01);                             /* set CTC with OCRA */
    1644:	e0 eb       	ldi	r30, 0xB0	; 176
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	82 60       	ori	r24, 0x02	; 2
    164c:	80 83       	st	Z, r24
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);  /* 1024 Prescaler */
    164e:	e1 eb       	ldi	r30, 0xB1	; 177
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	87 60       	ori	r24, 0x07	; 7
    1656:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE0B);                            /* enable compare interrupt */
    1658:	e0 e7       	ldi	r30, 0x70	; 112
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	84 60       	ori	r24, 0x04	; 4
    1660:	80 83       	st	Z, r24

	/**
	 * Set up ADC */
	ADMUX |= (1 << REFS0);
    1662:	ec e7       	ldi	r30, 0x7C	; 124
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	80 64       	ori	r24, 0x40	; 64
    166a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
    166c:	ea e7       	ldi	r30, 0x7A	; 122
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	87 68       	ori	r24, 0x87	; 135
    1674:	80 83       	st	Z, r24

	/**
	 * Set up pin interrupts */
		PCICR |= (1 << PCIE2) | (1 << PCIE1) | (1 << PCIE0);    /* Enable pin change interrupts PCI2, PCI1 and PCI0 */
    1676:	e8 e6       	ldi	r30, 0x68	; 104
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	87 60       	ori	r24, 0x07	; 7
    167e:	80 83       	st	Z, r24
		PCMSK2 |= 0b10001000;                                   /* Enable port D pin change interrupts PD3 and PD7 */
    1680:	ed e6       	ldi	r30, 0x6D	; 109
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	88 68       	ori	r24, 0x88	; 136
    1688:	80 83       	st	Z, r24
//		PCMSK1 |= (1 << PCINT10);                               /* Enable port C pin change interrupts on pin PC2 */
//		PCMSK0 |= (1 << PORTB2);                                /* Do not enable interrupts until HW is ready */

	cpu_irq_enable();                                           /* same as sei(); */
    168a:	78 94       	sei

	g_low_voltage_shutdown_delay = POWERUP_LOW_VOLTAGE_DELAY;
    168c:	84 e8       	ldi	r24, 0x84	; 132
    168e:	93 e0       	ldi	r25, 0x03	; 3
    1690:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    1694:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_low_voltage_shutdown_delay>

	/**
	 * Enable watchdog interrupts before performing I2C calls that might cause a lockup */
#ifndef TRANQUILIZE_WATCHDOG
	wdt_init(WD_SW_RESETS);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	b4 db       	rcall	.-2200   	; 0xe04 <wdt_init>
#endif // TRANQUILIZE_WATCHDOG

	/**
	 * Initialize the receiver */

	init_receiver();
    169c:	0e 94 75 15 	call	0x2aea	; 0x2aea <init_receiver>
	if(g_audio_RSSI)
    16a0:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <g_audio_RSSI>
    16a4:	88 23       	and	r24, r24
    16a6:	19 f0       	breq	.+6      	; 0x16ae <main+0xb0>
	{
		TCCR0A |= (1 << COM0B0);    /* Toggle OC0B (PD5) on Compare Match */
    16a8:	84 b5       	in	r24, 0x24	; 36
    16aa:	80 61       	ori	r24, 0x10	; 16
    16ac:	84 bd       	out	0x24, r24	; 36
	}
	
	/**
	 * The watchdog must be petted periodically to keep it from barking */
	wdt_reset();                /* HW watchdog */
    16ae:	a8 95       	wdr

	/**
	 * Initialize tone volume setting */
//	ad5245_set_potentiometer(TONE_POT_VAL(g_tone_volume));    /* move to receiver initialization */

	mcp23017_init();
    16b0:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <mcp23017_init>

	wdt_reset();                                    /* HW watchdog */
    16b4:	a8 95       	wdr

	if(g_terminal_mode)
    16b6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    16ba:	88 23       	and	r24, r24
	{
		lb_send_NewLine();
    16bc:	39 f0       	breq	.+14     	; 0x16cc <main+0xce>
    16be:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lb_send_NewLine>
		lb_send_Help();
    16c2:	0e 94 75 01 	call	0x2ea	; 0x2ea <lb_send_Help>
		lb_send_NewPrompt();		
    16c6:	0e 94 6d 01 	call	0x2da	; 0x2da <lb_send_NewPrompt>
	}
	else 
	{
		lb_send_sync();                                 /* send test pattern to help synchronize baud rate with any attached device */
    16ca:	0a c0       	rjmp	.+20     	; 0x16e0 <main+0xe2>
		while(linkbusTxInProgress())
    16cc:	e0 d9       	rcall	.-3136   	; 0xa8e <lb_send_sync>
    16ce:	0e 94 fe 00 	call	0x1fc	; 0x1fc <linkbusTxInProgress>
    16d2:	81 11       	cpse	r24, r1
		{
			;                                           /* wait until transmit finishes */
		}
		wdt_reset();
    16d4:	fc cf       	rjmp	.-8      	; 0x16ce <main+0xd0>

		lb_send_ID(LINKBUS_MSG_COMMAND, RECEIVER_ID, NO_ID);
    16d6:	a8 95       	wdr
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	66 d9       	rcall	.-3380   	; 0x9ac <lb_send_ID>
	}
	
	wdt_reset();
    16e0:	a8 95       	wdr
		
	#ifdef INCLUDE_DS3231_SUPPORT
		ds3231_read_time(&g_start_time, NULL, Time_Format_Not_Specified);
    16e2:	44 e0       	ldi	r20, 0x04	; 4
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	84 e8       	ldi	r24, 0x84	; 132
    16ea:	97 e0       	ldi	r25, 0x07	; 7
    16ec:	0e 94 04 1a 	call	0x3408	; 0x3408 <ds3231_read_time>
			g_seconds_count = 0;    /* sync seconds count to clock */
			ds3231_1s_sqw(ON);
	   #endif    /* #ifdef ENABLE_1_SEC_INTERRUPTS */
	#endif

	while(linkbusTxInProgress())
    16f0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <linkbusTxInProgress>
    16f4:	81 11       	cpse	r24, r1
	{
	}               /* wait until transmit finishes */

	g_send_ID_countdown = 0; /* Do not send ID broadcasts initially */
    16f6:	fc cf       	rjmp	.-8      	; 0x16f0 <main+0xf2>
    16f8:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <g_send_ID_countdown+0x1>
    16fc:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <g_send_ID_countdown>
#ifndef TRANQUILIZE_WATCHDOG
	wdt_init(WD_HW_RESETS); /* enable hardware interrupts */
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	80 db       	rcall	.-2304   	; 0xe04 <wdt_init>
#endif // TRANQUILIZE_WATCHDOG
	
	g_initialization_complete = TRUE;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <g_initialization_complete>
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
	BOOL attach_success = TRUE; // Start out in TTY terminal communication mode
	uint16_t hold_tick_count = 0;
    170a:	81 2c       	mov	r8, r1
    170c:	91 2c       	mov	r9, r1
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
	BOOL attach_success = TRUE; // Start out in TTY terminal communication mode
    170e:	cc 24       	eor	r12, r12
    1710:	c3 94       	inc	r12
		/***************************************
		* Check for Power Off
		***************************************/
		if(g_battery_measurements_active)                                                                           /* if ADC battery measurements have stabilized */
		{
			if((g_lastConversionResult[BATTERY_READING] < POWER_OFF_VOLT_THRESH_MV) && g_sufficient_power_detected) /* Battery measurement indicates headphones removed */
    1712:	0f 2e       	mov	r0, r31
    1714:	fc e6       	ldi	r31, 0x6C	; 108
    1716:	af 2e       	mov	r10, r31
    1718:	f7 e0       	ldi	r31, 0x07	; 7
    171a:	bf 2e       	mov	r11, r31
    171c:	f0 2d       	mov	r31, r0
				
				case MESSAGE_TIME:
				{
						if(lb_buff->fields[FIELD1][0])
						{
							volatile int32_t time = -1; // prevent optimizer from breaking this
    171e:	44 24       	eor	r4, r4
    1720:	4a 94       	dec	r4
    1722:	54 2c       	mov	r5, r4
    1724:	32 01       	movw	r6, r4

									case 3:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem3_freq;
    1726:	0f 2e       	mov	r0, r31
    1728:	f3 e2       	ldi	r31, 0x23	; 35
    172a:	2f 2e       	mov	r2, r31
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	3f 2e       	mov	r3, r31
    1730:	f0 2d       	mov	r31, r0
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <main+0x138>
 * need to be handled in the foreground, not in ISRs. This includes
 * communications over the I2C bus, handling messages received over the
 * Linkbus, etc.
 ************************************************************************/
int main( void )
{
    1734:	48 01       	movw	r8, r16
	while(1)
	{
		/**************************************
		 * Beep once at new volume level if the volume was set
		 ***************************************/
		if(g_volume_set_beep_delay)
    1736:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <g_volume_set_beep_delay>
    173a:	88 23       	and	r24, r24
    173c:	79 f0       	breq	.+30     	; 0x175c <main+0x15e>
		{
			g_volume_set_beep_delay--;
    173e:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <g_volume_set_beep_delay>
    1742:	81 50       	subi	r24, 0x01	; 1
    1744:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <g_volume_set_beep_delay>

			if(!g_volume_set_beep_delay)
    1748:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <g_volume_set_beep_delay>
    174c:	81 11       	cpse	r24, r1
    174e:	06 c0       	rjmp	.+12     	; 0x175c <main+0x15e>
			{
				g_beep_length = BEEP_SHORT;
    1750:	84 e6       	ldi	r24, 0x64	; 100
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <g_beep_length+0x1>
    1758:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <g_beep_length>
		}

		/**************************************
		* The watchdog must be petted periodically to keep it from barking
		**************************************/
		cli(); wdt_reset(); /* HW watchdog */ sei();
    175c:	f8 94       	cli
    175e:	a8 95       	wdr
    1760:	78 94       	sei

		/***************************************
		* Check for Power Off
		***************************************/
		if(g_battery_measurements_active)                                                                           /* if ADC battery measurements have stabilized */
    1762:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <g_battery_measurements_active>
    1766:	88 23       	and	r24, r24
    1768:	09 f4       	brne	.+2      	; 0x176c <main+0x16e>
    176a:	cd c4       	rjmp	.+2458   	; 0x2106 <main+0xb08>
		{
			if((g_lastConversionResult[BATTERY_READING] < POWER_OFF_VOLT_THRESH_MV) && g_sufficient_power_detected) /* Battery measurement indicates headphones removed */
    176c:	f5 01       	movw	r30, r10
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	93 81       	ldd	r25, Z+3	; 0x03
    1772:	8d 33       	cpi	r24, 0x3D	; 61
    1774:	91 40       	sbci	r25, 0x01	; 1
    1776:	08 f0       	brcs	.+2      	; 0x177a <main+0x17c>
    1778:	70 c0       	rjmp	.+224    	; 0x185a <main+0x25c>
    177a:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <g_sufficient_power_detected>
    177e:	88 23       	and	r24, r24
    1780:	09 f4       	brne	.+2      	; 0x1784 <main+0x186>
    1782:	6b c0       	rjmp	.+214    	; 0x185a <main+0x25c>
			{
				if(!g_headphone_removed_delay)
    1784:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_headphone_removed_delay>
    1788:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_headphone_removed_delay+0x1>
    178c:	89 2b       	or	r24, r25
    178e:	09 f0       	breq	.+2      	; 0x1792 <main+0x194>
    1790:	ba c4       	rjmp	.+2420   	; 0x2106 <main+0xb08>
				{
					if(!g_powering_off)                                                              /* Handle the case of power off immediately after power on */
    1792:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <g_powering_off>
    1796:	81 11       	cpse	r24, r1
    1798:	09 c0       	rjmp	.+18     	; 0x17ac <main+0x1ae>
					{
						g_powering_off = TRUE;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <g_powering_off>
						g_power_off_countdown = POWER_OFF_DELAY;
    17a0:	88 e8       	ldi	r24, 0x88	; 136
    17a2:	93 e1       	ldi	r25, 0x13	; 19
    17a4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    17a8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>
					}

					g_backlight_off_countdown = g_backlight_delay_value;    /* turn on backlight */
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
    17ae:	9f ef       	ldi	r25, 0xFF	; 255
    17b0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <g_backlight_off_countdown+0x1>
    17b4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <g_backlight_off_countdown>


					if(g_terminal_mode)
    17b8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    17bc:	88 23       	and	r24, r24
    17be:	71 f1       	breq	.+92     	; 0x181c <main+0x21e>
					{
						static uint8_t lastCountdown = 0;
						uint8_t countdown = (uint8_t)((10 * g_power_off_countdown) / POWER_OFF_DELAY);
    17c0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
    17c4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    17c8:	9c 01       	movw	r18, r24
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	28 0f       	add	r18, r24
    17dc:	39 1f       	adc	r19, r25
    17de:	36 95       	lsr	r19
    17e0:	27 95       	ror	r18
    17e2:	36 95       	lsr	r19
    17e4:	27 95       	ror	r18
    17e6:	36 95       	lsr	r19
    17e8:	27 95       	ror	r18
    17ea:	a7 e3       	ldi	r26, 0x37	; 55
    17ec:	ba e1       	ldi	r27, 0x1A	; 26
    17ee:	0e 94 8a 24 	call	0x4914	; 0x4914 <__umulhisi3>
    17f2:	8c 01       	movw	r16, r24
    17f4:	00 24       	eor	r0, r0
    17f6:	00 0f       	add	r16, r16
    17f8:	11 1f       	adc	r17, r17
    17fa:	00 1c       	adc	r0, r0
    17fc:	00 0f       	add	r16, r16
    17fe:	11 1f       	adc	r17, r17
    1800:	00 1c       	adc	r0, r0
    1802:	01 2f       	mov	r16, r17
    1804:	10 2d       	mov	r17, r0

						if(countdown != lastCountdown)
    1806:	80 91 3e 07 	lds	r24, 0x073E	; 0x80073e <lastCountdown.3110>
    180a:	80 17       	cp	r24, r16
    180c:	39 f0       	breq	.+14     	; 0x181c <main+0x21e>
						{
							lb_poweroff_msg(countdown);
    180e:	80 2f       	mov	r24, r16
    1810:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <lb_poweroff_msg>
							lb_send_NewPrompt();
    1814:	0e 94 6d 01 	call	0x2da	; 0x2da <lb_send_NewPrompt>
							lastCountdown = countdown;
    1818:	00 93 3e 07 	sts	0x073E, r16	; 0x80073e <lastCountdown.3110>
						}
					}

					if(!g_power_off_countdown)
    181c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
    1820:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    1824:	89 2b       	or	r24, r25
    1826:	09 f0       	breq	.+2      	; 0x182a <main+0x22c>
					{
						saveAllEEPROM();
    1828:	6e c4       	rjmp	.+2268   	; 0x2106 <main+0xb08>
    182a:	51 de       	rcall	.-862    	; 0x14ce <saveAllEEPROM>
						PORTB &= ~(1 << PORTB1);    /* latch power off */
    182c:	29 98       	cbi	0x05, 1	; 5
						g_power_off_countdown = POWER_OFF_DELAY;
    182e:	88 e8       	ldi	r24, 0x88	; 136
    1830:	93 e1       	ldi	r25, 0x13	; 19
    1832:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    1836:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>

						while(1)    /* wait for power-off */
						{
							/* The following things can prevent shutdown
							 * HW watchdog will expire and reset the device eventually if none of the following happens first: */
							if(!g_power_off_countdown)
    183a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
    183e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    1842:	89 2b       	or	r24, r25
    1844:	31 f0       	breq	.+12     	; 0x1852 <main+0x254>
							{
								break;  /* Timeout waiting for power to be removed */
							}

							if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)
    1846:	f5 01       	movw	r30, r10
    1848:	82 81       	ldd	r24, Z+2	; 0x02
    184a:	93 81       	ldd	r25, Z+3	; 0x03
    184c:	84 3c       	cpi	r24, 0xC4	; 196
    184e:	91 40       	sbci	r25, 0x01	; 1
    1850:	a0 f3       	brcs	.-24     	; 0x183a <main+0x23c>
						}

						/**
						 * Execution reaches here if power was restored before the processor shut down, or if shutdown timed out.
						 * Attempt to restart things as if nothing has happened. */
						wdt_reset();    /* HW watchdog */
    1852:	a8 95       	wdr
						g_powering_off = FALSE;
    1854:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <g_powering_off>
    1858:	56 c4       	rjmp	.+2220   	; 0x2106 <main+0xb08>
					}
				}
			}
			else if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)  /* Battery measurement indicates sufficient voltage */
    185a:	f5 01       	movw	r30, r10
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	84 3c       	cpi	r24, 0xC4	; 196
    1862:	91 40       	sbci	r25, 0x01	; 1
    1864:	b8 f0       	brcs	.+46     	; 0x1894 <main+0x296>
			{
				g_sufficient_power_detected = TRUE;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <g_sufficient_power_detected>
				g_headphone_removed_delay = HEADPHONE_REMOVED_DELAY;
    186c:	84 e6       	ldi	r24, 0x64	; 100
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_headphone_removed_delay+0x1>
    1874:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_headphone_removed_delay>
				g_low_voltage_shutdown_delay = LOW_VOLTAGE_DELAY;
    1878:	88 e2       	ldi	r24, 0x28	; 40
    187a:	93 e2       	ldi	r25, 0x23	; 35
    187c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    1880:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_low_voltage_shutdown_delay>
				g_power_off_countdown = POWER_OFF_DELAY;    /* restart countdown */
    1884:	88 e8       	ldi	r24, 0x88	; 136
    1886:	93 e1       	ldi	r25, 0x13	; 19
    1888:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    188c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>

				PORTB |= (1 << PORTB1); /* latch power on */
    1890:	29 9a       	sbi	0x05, 1	; 5
    1892:	39 c4       	rjmp	.+2162   	; 0x2106 <main+0xb08>
			}
			else
			{
				if(!g_low_voltage_shutdown_delay)
    1894:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_low_voltage_shutdown_delay>
    1898:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    189c:	89 2b       	or	r24, r25
    189e:	09 f0       	breq	.+2      	; 0x18a2 <main+0x2a4>
    18a0:	32 c4       	rjmp	.+2148   	; 0x2106 <main+0xb08>
				{
					if(!g_powering_off)
    18a2:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <g_powering_off>
    18a6:	81 11       	cpse	r24, r1
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <main+0x2be>
					{
						g_powering_off = TRUE;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <g_powering_off>
						g_power_off_countdown = POWER_OFF_DELAY;
    18b0:	88 e8       	ldi	r24, 0x88	; 136
    18b2:	93 e1       	ldi	r25, 0x13	; 19
    18b4:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    18b8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>
					}

					if(!g_power_off_countdown)
    18bc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
    18c0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    18c4:	89 2b       	or	r24, r25
    18c6:	09 f0       	breq	.+2      	; 0x18ca <main+0x2cc>
    18c8:	1e c4       	rjmp	.+2108   	; 0x2106 <main+0xb08>
					{
						PORTB &= ~(1 << PORTB1);    /* latch power off */
    18ca:	29 98       	cbi	0x05, 1	; 5

						while(1)                        /* wait for power-off */
						{
							/* These things can prevent shutdown
							 * HW watchdog will expire and reset the device eventually if none of the following happens first: */
							if(g_lastConversionResult[BATTERY_READING] > POWER_ON_VOLT_THRESH_MV)
    18cc:	f5 01       	movw	r30, r10
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	84 3c       	cpi	r24, 0xC4	; 196
    18d4:	91 40       	sbci	r25, 0x01	; 1
    18d6:	d0 f3       	brcs	.-12     	; 0x18cc <main+0x2ce>
							{
								break;                  /* Voltage rises sufficiently */
							}
						}

						wdt_reset();                    /* HW watchdog */
    18d8:	a8 95       	wdr
    18da:	15 c4       	rjmp	.+2090   	; 0x2106 <main+0xb08>
		 ************************************************************************/
		while((lb_buff = nextFullRxBuffer()))
		{
			LBMessageID msg_id = lb_buff->id;

			switch(msg_id)
    18dc:	f8 01       	movw	r30, r16
    18de:	81 81       	ldd	r24, Z+1	; 0x01
    18e0:	92 81       	ldd	r25, Z+2	; 0x02
    18e2:	81 39       	cpi	r24, 0x91	; 145
    18e4:	f3 e0       	ldi	r31, 0x03	; 3
    18e6:	9f 07       	cpc	r25, r31
    18e8:	09 f4       	brne	.+2      	; 0x18ec <main+0x2ee>
    18ea:	c6 c0       	rjmp	.+396    	; 0x1a78 <main+0x47a>
    18ec:	50 f5       	brcc	.+84     	; 0x1942 <main+0x344>
    18ee:	80 35       	cpi	r24, 0x50	; 80
    18f0:	91 05       	cpc	r25, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <main+0x2f8>
    18f4:	dc c0       	rjmp	.+440    	; 0x1aae <main+0x4b0>
    18f6:	90 f4       	brcc	.+36     	; 0x191c <main+0x31e>
    18f8:	81 34       	cpi	r24, 0x41	; 65
    18fa:	91 05       	cpc	r25, r1
    18fc:	09 f4       	brne	.+2      	; 0x1900 <main+0x302>
    18fe:	a1 c0       	rjmp	.+322    	; 0x1a42 <main+0x444>
    1900:	20 f4       	brcc	.+8      	; 0x190a <main+0x30c>
    1902:	cf 97       	sbiw	r24, 0x3f	; 63
    1904:	09 f4       	brne	.+2      	; 0x1908 <main+0x30a>
    1906:	8d c3       	rjmp	.+1818   	; 0x2022 <main+0xa24>
    1908:	ed c3       	rjmp	.+2010   	; 0x20e4 <main+0xae6>
    190a:	82 34       	cpi	r24, 0x42	; 66
    190c:	91 05       	cpc	r25, r1
    190e:	09 f4       	brne	.+2      	; 0x1912 <main+0x314>
    1910:	7c c3       	rjmp	.+1784   	; 0x200a <main+0xa0c>
    1912:	8f 34       	cpi	r24, 0x4F	; 79
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <main+0x31c>
    1918:	b7 c0       	rjmp	.+366    	; 0x1a88 <main+0x48a>
    191a:	e4 c3       	rjmp	.+1992   	; 0x20e4 <main+0xae6>
    191c:	83 35       	cpi	r24, 0x53	; 83
    191e:	91 05       	cpc	r25, r1
    1920:	09 f4       	brne	.+2      	; 0x1924 <main+0x326>
    1922:	79 c3       	rjmp	.+1778   	; 0x2016 <main+0xa18>
    1924:	28 f4       	brcc	.+10     	; 0x1930 <main+0x332>
    1926:	82 35       	cpi	r24, 0x52	; 82
    1928:	91 05       	cpc	r25, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <main+0x330>
    192c:	e4 c3       	rjmp	.+1992   	; 0x20f6 <main+0xaf8>
    192e:	da c3       	rjmp	.+1972   	; 0x20e4 <main+0xae6>
    1930:	84 35       	cpi	r24, 0x54	; 84
    1932:	91 05       	cpc	r25, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <main+0x33a>
    1936:	df c3       	rjmp	.+1982   	; 0x20f6 <main+0xaf8>
    1938:	8e 31       	cpi	r24, 0x1E	; 30
    193a:	93 40       	sbci	r25, 0x03	; 3
    193c:	09 f4       	brne	.+2      	; 0x1940 <main+0x342>
    193e:	3f c2       	rjmp	.+1150   	; 0x1dbe <main+0x7c0>
    1940:	d1 c3       	rjmp	.+1954   	; 0x20e4 <main+0xae6>
    1942:	8a 39       	cpi	r24, 0x9A	; 154
    1944:	53 e2       	ldi	r21, 0x23	; 35
    1946:	95 07       	cpc	r25, r21
    1948:	09 f4       	brne	.+2      	; 0x194c <main+0x34e>
    194a:	93 c0       	rjmp	.+294    	; 0x1a72 <main+0x474>
    194c:	a8 f4       	brcc	.+42     	; 0x1978 <main+0x37a>
    194e:	88 31       	cpi	r24, 0x18	; 24
    1950:	fd e1       	ldi	r31, 0x1D	; 29
    1952:	9f 07       	cpc	r25, r31
    1954:	09 f4       	brne	.+2      	; 0x1958 <main+0x35a>
    1956:	64 c2       	rjmp	.+1224   	; 0x1e20 <main+0x822>
    1958:	28 f4       	brcc	.+10     	; 0x1964 <main+0x366>
    195a:	88 3b       	cpi	r24, 0xB8	; 184
    195c:	9c 41       	sbci	r25, 0x1C	; 28
    195e:	09 f4       	brne	.+2      	; 0x1962 <main+0x364>
    1960:	32 c3       	rjmp	.+1636   	; 0x1fc6 <main+0x9c8>
    1962:	c0 c3       	rjmp	.+1920   	; 0x20e4 <main+0xae6>
    1964:	81 3d       	cpi	r24, 0xD1	; 209
    1966:	5e e1       	ldi	r21, 0x1E	; 30
    1968:	95 07       	cpc	r25, r21
    196a:	09 f4       	brne	.+2      	; 0x196e <main+0x370>
    196c:	ee c0       	rjmp	.+476    	; 0x1b4a <main+0x54c>
    196e:	89 3b       	cpi	r24, 0xB9	; 185
    1970:	92 42       	sbci	r25, 0x22	; 34
    1972:	09 f4       	brne	.+2      	; 0x1976 <main+0x378>
    1974:	54 c0       	rjmp	.+168    	; 0x1a1e <main+0x420>
    1976:	b6 c3       	rjmp	.+1900   	; 0x20e4 <main+0xae6>
    1978:	84 33       	cpi	r24, 0x34	; 52
    197a:	f4 e2       	ldi	r31, 0x24	; 36
    197c:	9f 07       	cpc	r25, r31
    197e:	81 f0       	breq	.+32     	; 0x19a0 <main+0x3a2>
    1980:	28 f4       	brcc	.+10     	; 0x198c <main+0x38e>
    1982:	87 3f       	cpi	r24, 0xF7	; 247
    1984:	93 42       	sbci	r25, 0x23	; 35
    1986:	09 f4       	brne	.+2      	; 0x198a <main+0x38c>
    1988:	96 c0       	rjmp	.+300    	; 0x1ab6 <main+0x4b8>
    198a:	ac c3       	rjmp	.+1880   	; 0x20e4 <main+0xae6>
    198c:	81 37       	cpi	r24, 0x71	; 113
    198e:	54 e2       	ldi	r21, 0x24	; 36
    1990:	95 07       	cpc	r25, r21
    1992:	09 f4       	brne	.+2      	; 0x1996 <main+0x398>
    1994:	fb c2       	rjmp	.+1526   	; 0x1f8c <main+0x98e>
    1996:	8a 3f       	cpi	r24, 0xFA	; 250
    1998:	94 42       	sbci	r25, 0x24	; 36
    199a:	09 f4       	brne	.+2      	; 0x199e <main+0x3a0>
    199c:	5e c2       	rjmp	.+1212   	; 0x1e5a <main+0x85c>
    199e:	a2 c3       	rjmp	.+1860   	; 0x20e4 <main+0xae6>
				break;
#endif //DEBUG_FUNCTIONS_ENABLE		

				case MESSAGE_TONE_RSSI:
				{
					if(lb_buff->fields[FIELD1][0])
    19a0:	f8 01       	movw	r30, r16
    19a2:	83 81       	ldd	r24, Z+3	; 0x03
    19a4:	88 23       	and	r24, r24
    19a6:	e1 f0       	breq	.+56     	; 0x19e0 <main+0x3e2>
					{
						int8_t arg;
						arg = atoi(lb_buff->fields[FIELD1]); // Prevent optimizer from breaking this
    19a8:	c8 01       	movw	r24, r16
    19aa:	03 96       	adiw	r24, 0x03	; 3
    19ac:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>
						if(arg > 0)
    19b0:	18 16       	cp	r1, r24
    19b2:	44 f4       	brge	.+16     	; 0x19c4 <main+0x3c6>
						{
							g_tone_RSSI_direction = 0;
    19b4:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <g_tone_RSSI_direction>
							g_audio_RSSI = 1;
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <g_audio_RSSI>
							g_rssi_filter = arg;
    19be:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <g_rssi_filter>
    19c2:	15 c0       	rjmp	.+42     	; 0x19ee <main+0x3f0>
						}
						else if(arg < 0)
    19c4:	88 23       	and	r24, r24
    19c6:	4c f4       	brge	.+18     	; 0x19da <main+0x3dc>
						{
							g_tone_RSSI_direction = 1;
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	90 93 76 07 	sts	0x0776, r25	; 0x800776 <g_tone_RSSI_direction>
							g_audio_RSSI = 1;
    19ce:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <g_audio_RSSI>
							g_rssi_filter = -arg;
    19d2:	81 95       	neg	r24
    19d4:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <g_rssi_filter>
    19d8:	0a c0       	rjmp	.+20     	; 0x19ee <main+0x3f0>
						}
						else
						{
							g_audio_RSSI = 0;
    19da:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <g_audio_RSSI>
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <main+0x3f0>
						}
					}
					else
					{
						g_audio_RSSI = !g_audio_RSSI;
    19e0:	90 91 77 07 	lds	r25, 0x0777	; 0x800777 <g_audio_RSSI>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	91 11       	cpse	r25, r1
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <g_audio_RSSI>
					}
	
					if(g_audio_RSSI)
    19ee:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <g_audio_RSSI>
    19f2:	88 23       	and	r24, r24
    19f4:	21 f0       	breq	.+8      	; 0x19fe <main+0x400>
					{
						TCCR0A |= (1 << COM0B0);    /* Toggle OC0B (PD5) on Compare Match */
    19f6:	84 b5       	in	r24, 0x24	; 36
    19f8:	80 61       	ori	r24, 0x10	; 16
    19fa:	84 bd       	out	0x24, r24	; 36
    19fc:	09 c0       	rjmp	.+18     	; 0x1a10 <main+0x412>
					}
					else if(!g_beep_length)
    19fe:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <g_beep_length>
    1a02:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <g_beep_length+0x1>
    1a06:	89 2b       	or	r24, r25
					{
						TCCR0A &= ~(1 << COM0B0);   /* Turn off toggling of OC0B (PD5) */
    1a08:	19 f4       	brne	.+6      	; 0x1a10 <main+0x412>
    1a0a:	84 b5       	in	r24, 0x24	; 36
    1a0c:	8f 7e       	andi	r24, 0xEF	; 239
					}
			
					lb_broadcast_num((uint16_t)g_audio_RSSI, NULL);
    1a0e:	84 bd       	out	0x24, r24	; 36
    1a10:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <g_audio_RSSI>
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	6c d9       	rcall	.-3368   	; 0xcf4 <lb_broadcast_num>
				}
				break;
    1a1c:	6c c3       	rjmp	.+1752   	; 0x20f6 <main+0xaf8>

				case MESSAGE_PREAMP:
				{
					BOOL result = rxGetPreamp();
    1a1e:	0e 94 5d 17 	call	0x2eba	; 0x2eba <rxGetPreamp>
					
					if(lb_buff->fields[FIELD1][0])
    1a22:	f8 01       	movw	r30, r16
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	99 23       	and	r25, r25
					{
						uint8_t setting = atol(lb_buff->fields[FIELD1]);
    1a28:	39 f0       	breq	.+14     	; 0x1a38 <main+0x43a>
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	03 96       	adiw	r24, 0x03	; 3
    1a2e:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <atol>
						
						result = rxSetPreamp(setting);
    1a32:	86 2f       	mov	r24, r22
    1a34:	0e 94 67 17 	call	0x2ece	; 0x2ece <rxSetPreamp>
					}
					
					lb_broadcast_num((uint16_t)result, NULL);
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	5a d9       	rcall	.-3404   	; 0xcf4 <lb_broadcast_num>

				}
				break;
    1a40:	5a c3       	rjmp	.+1716   	; 0x20f6 <main+0xaf8>

				case MESSAGE_ATTENUATION:
				{
					uint16_t attenuation;
					
					if(lb_buff->fields[FIELD1][0])
    1a42:	f8 01       	movw	r30, r16
    1a44:	83 81       	ldd	r24, Z+3	; 0x03
    1a46:	88 23       	and	r24, r24
    1a48:	69 f0       	breq	.+26     	; 0x1a64 <main+0x466>
					{
						attenuation = CLAMP(0, (uint16_t)atoi(lb_buff->fields[FIELD1]), 100); 
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	03 96       	adiw	r24, 0x03	; 3
    1a4e:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>
						attenuation = rxSetAttenuation(attenuation);
    1a52:	85 36       	cpi	r24, 0x65	; 101
    1a54:	91 05       	cpc	r25, r1
    1a56:	10 f0       	brcs	.+4      	; 0x1a5c <main+0x45e>
    1a58:	84 e6       	ldi	r24, 0x64	; 100
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <rxSetAttenuation>
					}
					else
					{
						attenuation = rxGetAttenuation();
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	03 c0       	rjmp	.+6      	; 0x1a6a <main+0x46c>
    1a64:	0e 94 13 17 	call	0x2e26	; 0x2e26 <rxGetAttenuation>
					}

					lb_broadcast_num(attenuation, NULL);
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
				}
				break;
    1a6e:	42 d9       	rcall	.-3452   	; 0xcf4 <lb_broadcast_num>
				
				case MESSAGE_RESET:
				{
#ifndef TRANQUILIZE_WATCHDOG
					wdt_init(WD_FORCE_RESET);
    1a70:	42 c3       	rjmp	.+1668   	; 0x20f6 <main+0xaf8>
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	c7 d9       	rcall	.-3186   	; 0xe04 <wdt_init>
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <main+0x478>
				}
				break;
				
				case MESSAGE_RSSI_REPEAT_BC:
				{
					g_lb_repeat_rssi = !g_lb_repeat_rssi;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 91 80 07 	lds	r25, 0x0780	; 0x800780 <g_lb_repeat_rssi>
    1a7e:	91 11       	cpse	r25, r1
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <g_lb_repeat_rssi>
				}
				break;
    1a86:	37 c3       	rjmp	.+1646   	; 0x20f6 <main+0xaf8>

				case MESSAGE_CW_OFFSET:
				{
					Frequency_Hz offset;
					
					if(lb_buff->fields[FIELD1][0])
    1a88:	f8 01       	movw	r30, r16
    1a8a:	83 81       	ldd	r24, Z+3	; 0x03
    1a8c:	88 23       	and	r24, r24
    1a8e:	31 f0       	breq	.+12     	; 0x1a9c <main+0x49e>
					{
						offset = atol(lb_buff->fields[FIELD1]); // Prevent optimizer from breaking this
    1a90:	c8 01       	movw	r24, r16
    1a92:	03 96       	adiw	r24, 0x03	; 3
    1a94:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <atol>
						rxSetCWOffset(offset);
    1a98:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <rxSetCWOffset>
					}
					
					offset = rxGetCWOffset();
    1a9c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <rxGetCWOffset>
    1aa0:	ab 01       	movw	r20, r22
					lb_send_FRE(LINKBUS_MSG_REPLY, offset, FALSE);
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	0e 94 25 02 	call	0x44a	; 0x44a <lb_send_FRE>
				}
				break;
				
				case MESSAGE_PERM:
				{
					store_receiver_values();
    1aac:	24 c3       	rjmp	.+1608   	; 0x20f6 <main+0xaf8>
    1aae:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <store_receiver_values>
					saveAllEEPROM();
    1ab2:	0d dd       	rcall	.-1510   	; 0x14ce <saveAllEEPROM>
				}
				break;
    1ab4:	20 c3       	rjmp	.+1600   	; 0x20f6 <main+0xaf8>
				
				case MESSAGE_TIME:
				{
						if(lb_buff->fields[FIELD1][0])
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	83 81       	ldd	r24, Z+3	; 0x03
    1aba:	88 23       	and	r24, r24
    1abc:	91 f1       	breq	.+100    	; 0x1b22 <main+0x524>
						{
							volatile int32_t time = -1; // prevent optimizer from breaking this
    1abe:	4d 86       	std	Y+13, r4	; 0x0d
    1ac0:	5e 86       	std	Y+14, r5	; 0x0e
    1ac2:	6f 86       	std	Y+15, r6	; 0x0f
    1ac4:	78 8a       	std	Y+16, r7	; 0x10

							if(g_terminal_mode)
    1ac6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    1aca:	88 23       	and	r24, r24
    1acc:	b1 f0       	breq	.+44     	; 0x1afa <main+0x4fc>
							{
								if(((lb_buff->fields[FIELD1][2] == ':') && (lb_buff->fields[FIELD1][5] == ':')) || ((lb_buff->fields[FIELD1][1] == ':') && (lb_buff->fields[FIELD1][4] == ':')))
    1ace:	85 81       	ldd	r24, Z+5	; 0x05
    1ad0:	8a 33       	cpi	r24, 0x3A	; 58
    1ad2:	19 f4       	brne	.+6      	; 0x1ada <main+0x4dc>
    1ad4:	80 85       	ldd	r24, Z+8	; 0x08
    1ad6:	8a 33       	cpi	r24, 0x3A	; 58
    1ad8:	39 f0       	breq	.+14     	; 0x1ae8 <main+0x4ea>
    1ada:	f8 01       	movw	r30, r16
    1adc:	84 81       	ldd	r24, Z+4	; 0x04
    1ade:	8a 33       	cpi	r24, 0x3A	; 58
    1ae0:	a1 f4       	brne	.+40     	; 0x1b0a <main+0x50c>
    1ae2:	87 81       	ldd	r24, Z+7	; 0x07
    1ae4:	8a 33       	cpi	r24, 0x3A	; 58
    1ae6:	89 f4       	brne	.+34     	; 0x1b0a <main+0x50c>
								{
									time = stringToTimeVal(lb_buff->fields[FIELD1]);
    1ae8:	c8 01       	movw	r24, r16
    1aea:	03 96       	adiw	r24, 0x03	; 3
    1aec:	0e 94 12 19 	call	0x3224	; 0x3224 <stringToTimeVal>
    1af0:	6d 87       	std	Y+13, r22	; 0x0d
    1af2:	7e 87       	std	Y+14, r23	; 0x0e
    1af4:	8f 87       	std	Y+15, r24	; 0x0f
    1af6:	98 8b       	std	Y+16, r25	; 0x10
    1af8:	08 c0       	rjmp	.+16     	; 0x1b0a <main+0x50c>
								}
							}
							else
							{
								time = atol(lb_buff->fields[FIELD1]);
    1afa:	c8 01       	movw	r24, r16
    1afc:	03 96       	adiw	r24, 0x03	; 3
    1afe:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <atol>
    1b02:	6d 87       	std	Y+13, r22	; 0x0d
    1b04:	7e 87       	std	Y+14, r23	; 0x0e
    1b06:	8f 87       	std	Y+15, r24	; 0x0f
    1b08:	98 8b       	std	Y+16, r25	; 0x10
							}

							if(time >= 0)
    1b0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0e:	af 85       	ldd	r26, Y+15	; 0x0f
    1b10:	b8 89       	ldd	r27, Y+16	; 0x10
    1b12:	bb 23       	and	r27, r27
    1b14:	34 f0       	brlt	.+12     	; 0x1b22 <main+0x524>
							{
								#ifdef INCLUDE_DS3231_SUPPORT
									ds3231_set_time(time);
    1b16:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b18:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b1c:	98 89       	ldd	r25, Y+16	; 0x10
    1b1e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <ds3231_set_time>
								#endif
							}
						}

						if(lb_buff->type == LINKBUS_MSG_QUERY)
    1b22:	f8 01       	movw	r30, r16
    1b24:	80 81       	ld	r24, Z
    1b26:	82 30       	cpi	r24, 0x02	; 2
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <main+0x52e>
    1b2a:	e5 c2       	rjmp	.+1482   	; 0x20f6 <main+0xaf8>
						{
							#ifdef INCLUDE_DS3231_SUPPORT
								int32_t time;
								ds3231_read_time(&time, NULL, Time_Format_Not_Specified);
    1b2c:	44 e0       	ldi	r20, 0x04	; 4
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	0e 94 04 1a 	call	0x3408	; 0x3408 <ds3231_read_time>
								lb_send_TIM(LINKBUS_MSG_REPLY, time);
    1b3a:	49 81       	ldd	r20, Y+1	; 0x01
    1b3c:	5a 81       	ldd	r21, Y+2	; 0x02
    1b3e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b40:	7c 81       	ldd	r23, Y+4	; 0x04
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lb_send_TIM>
    1b48:	d6 c2       	rjmp	.+1452   	; 0x20f6 <main+0xaf8>

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;

						if(lb_buff->fields[FIELD1][0])
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	83 81       	ldd	r24, Z+3	; 0x03
    1b4e:	88 23       	and	r24, r24
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <main+0x556>
						{
							if(lb_buff->fields[FIELD1][0] == 'M')
    1b52:	12 c1       	rjmp	.+548    	; 0x1d78 <main+0x77a>
    1b54:	8d 34       	cpi	r24, 0x4D	; 77
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <main+0x55c>
							{
								uint8_t mem = atoi(&lb_buff->fields[FIELD1][1]);
    1b58:	f4 c0       	rjmp	.+488    	; 0x1d42 <main+0x744>
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	04 96       	adiw	r24, 0x04	; 4
    1b5e:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>

								Frequency_Hz f = FREQUENCY_NOT_SPECIFIED;
    1b62:	7c 01       	movw	r14, r24
    1b64:	19 86       	std	Y+9, r1	; 0x09
    1b66:	1a 86       	std	Y+10, r1	; 0x0a
    1b68:	1b 86       	std	Y+11, r1	; 0x0b
								RadioBand b = rxGetBand();
    1b6a:	1c 86       	std	Y+12, r1	; 0x0c
    1b6c:	bb d7       	rcall	.+3958   	; 0x2ae4 <rxGetBand>
								Frequency_Hz *eemem_location = NULL;

								switch(mem)
    1b6e:	ff 24       	eor	r15, r15
    1b70:	f3 e0       	ldi	r31, 0x03	; 3
    1b72:	ef 16       	cp	r14, r31
    1b74:	f1 04       	cpc	r15, r1
    1b76:	29 f1       	breq	.+74     	; 0x1bc2 <main+0x5c4>
    1b78:	4c f4       	brge	.+18     	; 0x1b8c <main+0x58e>
    1b7a:	41 e0       	ldi	r20, 0x01	; 1
    1b7c:	e4 16       	cp	r14, r20
    1b7e:	f1 04       	cpc	r15, r1
    1b80:	71 f0       	breq	.+28     	; 0x1b9e <main+0x5a0>
    1b82:	52 e0       	ldi	r21, 0x02	; 2
    1b84:	e5 16       	cp	r14, r21
    1b86:	f1 04       	cpc	r15, r1
    1b88:	99 f0       	breq	.+38     	; 0x1bb0 <main+0x5b2>
    1b8a:	36 c0       	rjmp	.+108    	; 0x1bf8 <main+0x5fa>
    1b8c:	94 e0       	ldi	r25, 0x04	; 4
    1b8e:	e9 16       	cp	r14, r25
    1b90:	f1 04       	cpc	r15, r1
    1b92:	01 f1       	breq	.+64     	; 0x1bd4 <main+0x5d6>
    1b94:	e5 e0       	ldi	r30, 0x05	; 5
    1b96:	ee 16       	cp	r14, r30
    1b98:	f1 04       	cpc	r15, r1
    1b9a:	29 f1       	breq	.+74     	; 0x1be6 <main+0x5e8>
    1b9c:	2d c0       	rjmp	.+90     	; 0x1bf8 <main+0x5fa>
								{
									case 1:
									{
										if(b == BAND_2M)
    1b9e:	88 23       	and	r24, r24
    1ba0:	71 f1       	breq	.+92     	; 0x1bfe <main+0x600>
										{
											eemem_location = &ee_receiver_2m_mem1_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem1_freq;
    1ba2:	0f 2e       	mov	r0, r31
    1ba4:	ff e2       	ldi	r31, 0x2F	; 47
    1ba6:	ef 2e       	mov	r14, r31
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	ff 2e       	mov	r15, r31
    1bac:	f0 2d       	mov	r31, r0
    1bae:	44 c0       	rjmp	.+136    	; 0x1c38 <main+0x63a>
									}
									break;

									case 2:
									{
										if(b == BAND_2M)
    1bb0:	88 23       	and	r24, r24
    1bb2:	61 f1       	breq	.+88     	; 0x1c0c <main+0x60e>
										{
											eemem_location = &ee_receiver_2m_mem2_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem2_freq;
    1bb4:	0f 2e       	mov	r0, r31
    1bb6:	f3 e3       	ldi	r31, 0x33	; 51
    1bb8:	ef 2e       	mov	r14, r31
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	ff 2e       	mov	r15, r31
    1bbe:	f0 2d       	mov	r31, r0
    1bc0:	3b c0       	rjmp	.+118    	; 0x1c38 <main+0x63a>
									}
									break;

									case 3:
									{
										if(b == BAND_2M)
    1bc2:	88 23       	and	r24, r24
    1bc4:	51 f1       	breq	.+84     	; 0x1c1a <main+0x61c>
										{
											eemem_location = &ee_receiver_2m_mem3_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem3_freq;
    1bc6:	0f 2e       	mov	r0, r31
    1bc8:	f7 e3       	ldi	r31, 0x37	; 55
    1bca:	ef 2e       	mov	r14, r31
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	ff 2e       	mov	r15, r31
    1bd0:	f0 2d       	mov	r31, r0
    1bd2:	32 c0       	rjmp	.+100    	; 0x1c38 <main+0x63a>
									}
									break;

									case 4:
									{
										if(b == BAND_2M)
    1bd4:	88 23       	and	r24, r24
    1bd6:	19 f1       	breq	.+70     	; 0x1c1e <main+0x620>
										{
											eemem_location = &ee_receiver_2m_mem4_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem4_freq;
    1bd8:	0f 2e       	mov	r0, r31
    1bda:	fb e3       	ldi	r31, 0x3B	; 59
    1bdc:	ef 2e       	mov	r14, r31
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	ff 2e       	mov	r15, r31
    1be2:	f0 2d       	mov	r31, r0
    1be4:	29 c0       	rjmp	.+82     	; 0x1c38 <main+0x63a>
									}
									break;

									case 5:
									{
										if(b == BAND_2M)
    1be6:	88 23       	and	r24, r24
    1be8:	09 f1       	breq	.+66     	; 0x1c2c <main+0x62e>
										{
											eemem_location = &ee_receiver_2m_mem5_freq;
										}
										else
										{
											eemem_location = &ee_receiver_80m_mem5_freq;
    1bea:	0f 2e       	mov	r0, r31
    1bec:	ff e3       	ldi	r31, 0x3F	; 63
    1bee:	ef 2e       	mov	r14, r31
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	ff 2e       	mov	r15, r31
    1bf4:	f0 2d       	mov	r31, r0
    1bf6:	20 c0       	rjmp	.+64     	; 0x1c38 <main+0x63a>
							{
								uint8_t mem = atoi(&lb_buff->fields[FIELD1][1]);

								Frequency_Hz f = FREQUENCY_NOT_SPECIFIED;
								RadioBand b = rxGetBand();
								Frequency_Hz *eemem_location = NULL;
    1bf8:	e1 2c       	mov	r14, r1
    1bfa:	f1 2c       	mov	r15, r1
    1bfc:	1d c0       	rjmp	.+58     	; 0x1c38 <main+0x63a>
								{
									case 1:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem1_freq;
    1bfe:	0f 2e       	mov	r0, r31
    1c00:	fb e1       	ldi	r31, 0x1B	; 27
    1c02:	ef 2e       	mov	r14, r31
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	ff 2e       	mov	r15, r31
    1c08:	f0 2d       	mov	r31, r0
    1c0a:	16 c0       	rjmp	.+44     	; 0x1c38 <main+0x63a>

									case 2:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem2_freq;
    1c0c:	0f 2e       	mov	r0, r31
    1c0e:	ff e1       	ldi	r31, 0x1F	; 31
    1c10:	ef 2e       	mov	r14, r31
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	ff 2e       	mov	r15, r31
    1c16:	f0 2d       	mov	r31, r0
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <main+0x63a>

									case 3:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem3_freq;
    1c1a:	71 01       	movw	r14, r2
    1c1c:	0d c0       	rjmp	.+26     	; 0x1c38 <main+0x63a>

									case 4:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem4_freq;
    1c1e:	0f 2e       	mov	r0, r31
    1c20:	f7 e2       	ldi	r31, 0x27	; 39
    1c22:	ef 2e       	mov	r14, r31
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	ff 2e       	mov	r15, r31
    1c28:	f0 2d       	mov	r31, r0
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <main+0x63a>

									case 5:
									{
										if(b == BAND_2M)
										{
											eemem_location = &ee_receiver_2m_mem5_freq;
    1c2c:	0f 2e       	mov	r0, r31
    1c2e:	fb e2       	ldi	r31, 0x2B	; 43
    1c30:	ef 2e       	mov	r14, r31
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	ff 2e       	mov	r15, r31
    1c36:	f0 2d       	mov	r31, r0
									{
									}
									break;
								}

								if(eemem_location)
    1c38:	e1 14       	cp	r14, r1
    1c3a:	f1 04       	cpc	r15, r1
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <main+0x642>
    1c3e:	77 c0       	rjmp	.+238    	; 0x1d2e <main+0x730>
								{
									volatile Frequency_Hz memFreq = 0; // Prevent optimizer from breaking this
    1c40:	1d 82       	std	Y+5, r1	; 0x05
    1c42:	1e 82       	std	Y+6, r1	; 0x06
    1c44:	1f 82       	std	Y+7, r1	; 0x07
    1c46:	18 86       	std	Y+8, r1	; 0x08
									isMem = TRUE;

									if(g_terminal_mode)              /* Handle terminal mode message */
    1c48:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    1c4c:	88 23       	and	r24, r24
    1c4e:	81 f0       	breq	.+32     	; 0x1c70 <main+0x672>
									{
										if(lb_buff->fields[FIELD2][0])  /* second field holds frequency to be written to memory */
    1c50:	f8 01       	movw	r30, r16
    1c52:	90 8d       	ldd	r25, Z+24	; 0x18
    1c54:	99 23       	and	r25, r25
    1c56:	61 f0       	breq	.+24     	; 0x1c70 <main+0x672>
										{
											memFreq = atol(lb_buff->fields[FIELD2]);
    1c58:	c8 01       	movw	r24, r16
    1c5a:	48 96       	adiw	r24, 0x18	; 24
    1c5c:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <atol>
    1c60:	6d 83       	std	Y+5, r22	; 0x05
    1c62:	7e 83       	std	Y+6, r23	; 0x06
    1c64:	8f 83       	std	Y+7, r24	; 0x07
    1c66:	98 87       	std	Y+8, r25	; 0x08
											lb_buff->type = LINKBUS_MSG_COMMAND;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 83       	st	Z, r24
    1c6e:	29 c0       	rjmp	.+82     	; 0x1cc2 <main+0x6c4>
										}
									}

									if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query: apply and return the memory setting */
    1c70:	f8 01       	movw	r30, r16
    1c72:	90 81       	ld	r25, Z
    1c74:	92 30       	cpi	r25, 0x02	; 2
									{
										f = eeprom_read_dword(eemem_location);
    1c76:	01 f5       	brne	.+64     	; 0x1cb8 <main+0x6ba>
    1c78:	c7 01       	movw	r24, r14
    1c7a:	0e 94 08 28 	call	0x5010	; 0x5010 <eeprom_read_dword>
    1c7e:	69 87       	std	Y+9, r22	; 0x09
    1c80:	7a 87       	std	Y+10, r23	; 0x0a
    1c82:	8b 87       	std	Y+11, r24	; 0x0b

										if(f != FREQUENCY_NOT_SPECIFIED)
    1c84:	9c 87       	std	Y+12, r25	; 0x0c
    1c86:	67 2b       	or	r22, r23
    1c88:	68 2b       	or	r22, r24
    1c8a:	69 2b       	or	r22, r25
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <main+0x692>
										{
											if(rxSetFrequency(&f))
    1c8e:	51 c0       	rjmp	.+162    	; 0x1d32 <main+0x734>
    1c90:	ce 01       	movw	r24, r28
    1c92:	09 96       	adiw	r24, 0x09	; 9
    1c94:	22 d6       	rcall	.+3140   	; 0x28da <rxSetFrequency>
    1c96:	88 23       	and	r24, r24
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <main+0x69e>
    1c9a:	4d c0       	rjmp	.+154    	; 0x1d36 <main+0x738>
											{
												g_receiver_freq = f;
    1c9c:	89 85       	ldd	r24, Y+9	; 0x09
    1c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ca2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ca4:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <g_receiver_freq>
    1ca8:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <g_receiver_freq+0x1>
    1cac:	a0 93 7c 07 	sts	0x077C, r26	; 0x80077c <g_receiver_freq+0x2>
    1cb0:	b0 93 7d 07 	sts	0x077D, r27	; 0x80077d <g_receiver_freq+0x3>
								}

								if(eemem_location)
								{
									volatile Frequency_Hz memFreq = 0; // Prevent optimizer from breaking this
									isMem = TRUE;
    1cb4:	21 e0       	ldi	r18, 0x01	; 1
											{
												g_receiver_freq = f;
											}
										}
									}
									else if(lb_buff->type == LINKBUS_MSG_COMMAND)   /* Command: save the current frequency setting to the memory location */
    1cb6:	6a c0       	rjmp	.+212    	; 0x1d8c <main+0x78e>
    1cb8:	91 30       	cpi	r25, 0x01	; 1
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <main+0x6c0>
									{
										if(g_terminal_mode)
    1cbc:	3e c0       	rjmp	.+124    	; 0x1d3a <main+0x73c>
    1cbe:	88 23       	and	r24, r24
										{
											Frequency_Hz m = memFreq;
    1cc0:	19 f1       	breq	.+70     	; 0x1d08 <main+0x70a>
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	af 81       	ldd	r26, Y+7	; 0x07
    1cc8:	b8 85       	ldd	r27, Y+8	; 0x08
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	ab 83       	std	Y+3, r26	; 0x03
											if(rxSetFrequency(&m))
    1cd0:	bc 83       	std	Y+4, r27	; 0x04
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	01 d6       	rcall	.+3074   	; 0x28da <rxSetFrequency>
    1cd8:	88 23       	and	r24, r24
    1cda:	89 f0       	breq	.+34     	; 0x1cfe <main+0x700>
											{
												g_receiver_freq = m;
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ce2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ce4:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <g_receiver_freq>
    1ce8:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <g_receiver_freq+0x1>
    1cec:	a0 93 7c 07 	sts	0x077C, r26	; 0x80077c <g_receiver_freq+0x2>
    1cf0:	b0 93 7d 07 	sts	0x077D, r27	; 0x80077d <g_receiver_freq+0x3>
												f = m;
    1cf4:	89 87       	std	Y+9, r24	; 0x09
    1cf6:	9a 87       	std	Y+10, r25	; 0x0a
    1cf8:	ab 87       	std	Y+11, r26	; 0x0b
    1cfa:	bc 87       	std	Y+12, r27	; 0x0c
											}
											else
											{
												f = FREQUENCY_NOT_SPECIFIED;
    1cfc:	0a c0       	rjmp	.+20     	; 0x1d12 <main+0x714>
    1cfe:	19 86       	std	Y+9, r1	; 0x09
    1d00:	1a 86       	std	Y+10, r1	; 0x0a
    1d02:	1b 86       	std	Y+11, r1	; 0x0b
    1d04:	1c 86       	std	Y+12, r1	; 0x0c
											}
										}
										else
										{
											f = rxGetFrequency();
    1d06:	05 c0       	rjmp	.+10     	; 0x1d12 <main+0x714>
    1d08:	84 d6       	rcall	.+3336   	; 0x2a12 <rxGetFrequency>
    1d0a:	69 87       	std	Y+9, r22	; 0x09
    1d0c:	7a 87       	std	Y+10, r23	; 0x0a
    1d0e:	8b 87       	std	Y+11, r24	; 0x0b
    1d10:	9c 87       	std	Y+12, r25	; 0x0c
										}

										if(f != FREQUENCY_NOT_SPECIFIED)
    1d12:	49 85       	ldd	r20, Y+9	; 0x09
    1d14:	5a 85       	ldd	r21, Y+10	; 0x0a
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	41 15       	cp	r20, r1
    1d1c:	51 05       	cpc	r21, r1
    1d1e:	61 05       	cpc	r22, r1
    1d20:	71 05       	cpc	r23, r1
    1d22:	69 f0       	breq	.+26     	; 0x1d3e <main+0x740>
										{
											storeEEdwordIfChanged(eemem_location, f);
    1d24:	c7 01       	movw	r24, r14
    1d26:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <storeEEdwordIfChanged>
								}

								if(eemem_location)
								{
									volatile Frequency_Hz memFreq = 0; // Prevent optimizer from breaking this
									isMem = TRUE;
    1d2a:	21 e0       	ldi	r18, 0x01	; 1
				}
				break;

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;
    1d2c:	2f c0       	rjmp	.+94     	; 0x1d8c <main+0x78e>
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
								}

								if(eemem_location)
								{
									volatile Frequency_Hz memFreq = 0; // Prevent optimizer from breaking this
									isMem = TRUE;
    1d30:	2d c0       	rjmp	.+90     	; 0x1d8c <main+0x78e>
    1d32:	21 e0       	ldi	r18, 0x01	; 1
    1d34:	2b c0       	rjmp	.+86     	; 0x1d8c <main+0x78e>
    1d36:	21 e0       	ldi	r18, 0x01	; 1
    1d38:	29 c0       	rjmp	.+82     	; 0x1d8c <main+0x78e>
    1d3a:	21 e0       	ldi	r18, 0x01	; 1
    1d3c:	27 c0       	rjmp	.+78     	; 0x1d8c <main+0x78e>
    1d3e:	21 e0       	ldi	r18, 0x01	; 1
									}
								}
							}
							else
							{
								Frequency_Hz f = atol(lb_buff->fields[FIELD1]); // Prevent optimizer from breaking this							
    1d40:	25 c0       	rjmp	.+74     	; 0x1d8c <main+0x78e>
    1d42:	c8 01       	movw	r24, r16
    1d44:	03 96       	adiw	r24, 0x03	; 3
    1d46:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <atol>
								
								Frequency_Hz ff = f;
    1d4a:	69 83       	std	Y+1, r22	; 0x01
    1d4c:	7a 83       	std	Y+2, r23	; 0x02
								if(rxSetFrequency(&ff))
    1d4e:	8b 83       	std	Y+3, r24	; 0x03
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	ce 01       	movw	r24, r28
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	c1 d5       	rcall	.+2946   	; 0x28da <rxSetFrequency>
    1d58:	88 23       	and	r24, r24
								{
									g_receiver_freq = ff;
    1d5a:	61 f0       	breq	.+24     	; 0x1d74 <main+0x776>
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	ab 81       	ldd	r26, Y+3	; 0x03
    1d62:	bc 81       	ldd	r27, Y+4	; 0x04
    1d64:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <g_receiver_freq>
    1d68:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <g_receiver_freq+0x1>
    1d6c:	a0 93 7c 07 	sts	0x077C, r26	; 0x80077c <g_receiver_freq+0x2>
    1d70:	b0 93 7d 07 	sts	0x077D, r27	; 0x80077d <g_receiver_freq+0x3>
				}
				break;

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;
    1d74:	20 e0       	ldi	r18, 0x00	; 0
								}
							}
						}
						else
						{
							g_receiver_freq = rxGetFrequency();
    1d76:	0a c0       	rjmp	.+20     	; 0x1d8c <main+0x78e>
    1d78:	4c d6       	rcall	.+3224   	; 0x2a12 <rxGetFrequency>
    1d7a:	60 93 7a 07 	sts	0x077A, r22	; 0x80077a <g_receiver_freq>
    1d7e:	70 93 7b 07 	sts	0x077B, r23	; 0x80077b <g_receiver_freq+0x1>
    1d82:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <g_receiver_freq+0x2>
    1d86:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <g_receiver_freq+0x3>
				}
				break;

				case MESSAGE_SET_FREQ:
				{
						BOOL isMem = FALSE;
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
						else
						{
							g_receiver_freq = rxGetFrequency();
						}

						if(g_receiver_freq)
    1d8c:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <g_receiver_freq>
    1d90:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <g_receiver_freq+0x1>
    1d94:	a0 91 7c 07 	lds	r26, 0x077C	; 0x80077c <g_receiver_freq+0x2>
    1d98:	b0 91 7d 07 	lds	r27, 0x077D	; 0x80077d <g_receiver_freq+0x3>
    1d9c:	89 2b       	or	r24, r25
    1d9e:	8a 2b       	or	r24, r26
    1da0:	8b 2b       	or	r24, r27
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <main+0x7a8>
    1da4:	a8 c1       	rjmp	.+848    	; 0x20f6 <main+0xaf8>
						{
							lb_send_FRE(LINKBUS_MSG_REPLY, g_receiver_freq, isMem);
    1da6:	40 91 7a 07 	lds	r20, 0x077A	; 0x80077a <g_receiver_freq>
    1daa:	50 91 7b 07 	lds	r21, 0x077B	; 0x80077b <g_receiver_freq+0x1>
    1dae:	60 91 7c 07 	lds	r22, 0x077C	; 0x80077c <g_receiver_freq+0x2>
    1db2:	70 91 7d 07 	lds	r23, 0x077D	; 0x80077d <g_receiver_freq+0x3>
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	0e 94 25 02 	call	0x44a	; 0x44a <lb_send_FRE>
    1dbc:	9c c1       	rjmp	.+824    	; 0x20f6 <main+0xaf8>
				}
				break;

				case MESSAGE_ID:
				{
					if(lb_buff->fields[FIELD1][0])
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	83 81       	ldd	r24, Z+3	; 0x03
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <main+0x7ca>
    1dc6:	97 c1       	rjmp	.+814    	; 0x20f6 <main+0xaf8>
					{
						g_LB_attached_device = atoi(lb_buff->fields[FIELD1]);
    1dc8:	c8 01       	movw	r24, r16
    1dca:	03 96       	adiw	r24, 0x03	; 3
    1dcc:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>
    1dd0:	f8 2e       	mov	r15, r24
    1dd2:	80 93 83 07 	sts	0x0783, r24	; 0x800783 <g_LB_attached_device>
						DeviceID reportedID = NO_ID;

						if(lb_buff->fields[FIELD2][0])
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	80 8d       	ldd	r24, Z+24	; 0x18
    1dda:	88 23       	and	r24, r24
    1ddc:	31 f0       	breq	.+12     	; 0x1dea <main+0x7ec>
						{
							reportedID = atoi(lb_buff->fields[FIELD2]);
    1dde:	c8 01       	movw	r24, r16
    1de0:	48 96       	adiw	r24, 0x18	; 24
    1de2:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>
						}


							if(reportedID != RECEIVER_ID)
    1de6:	82 30       	cpi	r24, 0x02	; 2
    1de8:	69 f0       	breq	.+26     	; 0x1e04 <main+0x806>
							{
								lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
    1dea:	4f 2d       	mov	r20, r15
    1dec:	62 e0       	ldi	r22, 0x02	; 2
    1dee:	83 e0       	ldi	r24, 0x03	; 3
    1df0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <lb_send_ID>
								attach_success = FALSE;
								g_send_ID_countdown = SEND_ID_DELAY;
    1df4:	84 e0       	ldi	r24, 0x04	; 4
    1df6:	90 e1       	ldi	r25, 0x10	; 16
    1df8:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <g_send_ID_countdown+0x1>
    1dfc:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <g_send_ID_countdown>


							if(reportedID != RECEIVER_ID)
							{
								lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
								attach_success = FALSE;
    1e00:	c1 2c       	mov	r12, r1
    1e02:	79 c1       	rjmp	.+754    	; 0x20f6 <main+0xaf8>
								g_send_ID_countdown = SEND_ID_DELAY;
							}
							else
							{
								if(!attach_success)
    1e04:	c1 10       	cpse	r12, r1
    1e06:	05 c0       	rjmp	.+10     	; 0x1e12 <main+0x814>
								{
									lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
    1e08:	4f 2d       	mov	r20, r15
    1e0a:	62 e0       	ldi	r22, 0x02	; 2
    1e0c:	83 e0       	ldi	r24, 0x03	; 3
    1e0e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <lb_send_ID>
								}
								attach_success = TRUE;  /* stop any ongoing ID messages */
								g_send_ID_countdown = 0;
    1e12:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <g_send_ID_countdown+0x1>
							{
								if(!attach_success)
								{
									lb_send_ID(LINKBUS_MSG_REPLY, RECEIVER_ID, g_LB_attached_device);
								}
								attach_success = TRUE;  /* stop any ongoing ID messages */
    1e16:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <g_send_ID_countdown>

				case MESSAGE_BAND:
				{
					RadioBand band;

						if(lb_buff->fields[FIELD1][0])  /* band field */
    1e1a:	cc 24       	eor	r12, r12
    1e1c:	c3 94       	inc	r12
    1e1e:	6b c1       	rjmp	.+726    	; 0x20f6 <main+0xaf8>
    1e20:	f8 01       	movw	r30, r16
						{
							int b = atoi(lb_buff->fields[FIELD1]);
    1e22:	83 81       	ldd	r24, Z+3	; 0x03
    1e24:	88 23       	and	r24, r24
    1e26:	71 f0       	breq	.+28     	; 0x1e44 <main+0x846>
    1e28:	c8 01       	movw	r24, r16
							
							if(b == 80)
    1e2a:	03 96       	adiw	r24, 0x03	; 3
    1e2c:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>
							{
								rxSetBand(BAND_80M);
    1e30:	80 35       	cpi	r24, 0x50	; 80
    1e32:	91 05       	cpc	r25, r1
    1e34:	19 f4       	brne	.+6      	; 0x1e3c <main+0x83e>
    1e36:	81 e0       	ldi	r24, 0x01	; 1
							}
							else if(b == 2)
    1e38:	15 d6       	rcall	.+3114   	; 0x2a64 <rxSetBand>
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <main+0x846>
							{
								rxSetBand(BAND_2M);
    1e3c:	02 97       	sbiw	r24, 0x02	; 2
    1e3e:	11 f4       	brne	.+4      	; 0x1e44 <main+0x846>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
							}
						}

						band = rxGetBand();
    1e42:	10 d6       	rcall	.+3104   	; 0x2a64 <rxSetBand>
    1e44:	4f d6       	rcall	.+3230   	; 0x2ae4 <rxGetBand>

						if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    1e46:	f8 01       	movw	r30, r16
    1e48:	90 81       	ld	r25, Z
    1e4a:	92 30       	cpi	r25, 0x02	; 2
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <main+0x852>
    1e4e:	53 c1       	rjmp	.+678    	; 0x20f6 <main+0xaf8>
						{
							/* Send a reply */
							lb_send_BND(LINKBUS_MSG_REPLY, band);
    1e50:	68 2f       	mov	r22, r24
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	0e 94 00 04 	call	0x800	; 0x800 <lb_send_BND>
    1e58:	4e c1       	rjmp	.+668    	; 0x20f6 <main+0xaf8>
				case MESSAGE_VOLUME:
				{
					VolumeType volType;
					BOOL valid = FALSE;

					if(lb_buff->fields[FIELD1][0] == 'T')   /* volume type field */
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	83 81       	ldd	r24, Z+3	; 0x03
    1e5e:	84 35       	cpi	r24, 0x54	; 84
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <main+0x866>
    1e62:	39 c2       	rjmp	.+1138   	; 0x22d6 <main+0xcd8>
					{
						valid = TRUE;
						volType = TONE_VOLUME;
					}
					else if(lb_buff->fields[FIELD1][0] == 'M')
    1e64:	8d 34       	cpi	r24, 0x4D	; 77
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <main+0x86c>
    1e68:	46 c1       	rjmp	.+652    	; 0x20f6 <main+0xaf8>
    1e6a:	37 c2       	rjmp	.+1134   	; 0x22da <main+0xcdc>
						IncrType direction = NOCHANGE;
						int16_t holdVol = -1;

						if(lb_buff->fields[FIELD2][0])
						{
							if(lb_buff->fields[FIELD2][0] == '+')
    1e6c:	8b 32       	cpi	r24, 0x2B	; 43
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <main+0x874>
    1e70:	3b c2       	rjmp	.+1142   	; 0x22e8 <main+0xcea>
							{
								direction = UP;
							}
							else if(lb_buff->fields[FIELD2][0] == '-')
    1e72:	8d 32       	cpi	r24, 0x2D	; 45
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <main+0x87a>
    1e76:	3c c2       	rjmp	.+1144   	; 0x22f0 <main+0xcf2>
							{
								direction = DOWN;
							}
							else
							{
								holdVol = atoi(lb_buff->fields[FIELD2]);
    1e78:	c8 01       	movw	r24, r16
    1e7a:	48 96       	adiw	r24, 0x18	; 24
    1e7c:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>
								direction = SETTOVALUE;
							}
						}

						if(volType == TONE_VOLUME)
    1e80:	d1 10       	cpse	r13, r1
    1e82:	50 c0       	rjmp	.+160    	; 0x1f24 <main+0x926>
						{
							if(holdVol < 0)
    1e84:	99 23       	and	r25, r25
    1e86:	b4 f4       	brge	.+44     	; 0x1eb4 <main+0x8b6>
								direction = DOWN;
							}
							else
							{
								holdVol = atoi(lb_buff->fields[FIELD2]);
								direction = SETTOVALUE;
    1e88:	22 e0       	ldi	r18, 0x02	; 2
    1e8a:	05 c0       	rjmp	.+10     	; 0x1e96 <main+0x898>

						if(lb_buff->fields[FIELD2][0])
						{
							if(lb_buff->fields[FIELD2][0] == '+')
							{
								direction = UP;
    1e8c:	21 e0       	ldi	r18, 0x01	; 1
    1e8e:	03 c0       	rjmp	.+6      	; 0x1e96 <main+0x898>
							}
							else if(lb_buff->fields[FIELD2][0] == '-')
							{
								direction = DOWN;
    1e90:	2f ef       	ldi	r18, 0xFF	; 255
    1e92:	01 c0       	rjmp	.+2      	; 0x1e96 <main+0x898>
						volType = MAIN_VOLUME;
					}

					if(valid)
					{
						IncrType direction = NOCHANGE;
    1e94:	20 e0       	ldi	r18, 0x00	; 0

						if(volType == TONE_VOLUME)
						{
							if(holdVol < 0)
							{
								holdVol = g_tone_volume;
    1e96:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <g_tone_volume>
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
							}

							if(direction == UP)
    1e9c:	21 30       	cpi	r18, 0x01	; 1
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <main+0x8ac>
							{
								if(holdVol < MAX_TONE_VOLUME_SETTING)
    1ea0:	8f 30       	cpi	r24, 0x0F	; 15
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	3c f4       	brge	.+14     	; 0x1eb4 <main+0x8b6>
								{
									holdVol++;
    1ea6:	01 96       	adiw	r24, 0x01	; 1
    1ea8:	05 c0       	rjmp	.+10     	; 0x1eb4 <main+0x8b6>
								}
							}
							else if(direction == DOWN)
    1eaa:	2f 3f       	cpi	r18, 0xFF	; 255
    1eac:	19 f4       	brne	.+6      	; 0x1eb4 <main+0x8b6>
							{
								if(holdVol)
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <main+0x8b6>
								{
									holdVol--;
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	99 23       	and	r25, r25
    1eb6:	14 f4       	brge	.+4      	; 0x1ebc <main+0x8be>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	7c 01       	movw	r14, r24
    1ebe:	40 97       	sbiw	r24, 0x10	; 16
    1ec0:	2c f0       	brlt	.+10     	; 0x1ecc <main+0x8ce>
    1ec2:	0f 2e       	mov	r0, r31
    1ec4:	ff e0       	ldi	r31, 0x0F	; 15
    1ec6:	ef 2e       	mov	r14, r31
    1ec8:	f0 2d       	mov	r31, r0
							else if(holdVol < 0)
							{
								holdVol = 0;
							}

							if(holdVol != g_tone_volume)
    1eca:	f1 2c       	mov	r15, r1
    1ecc:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <g_tone_volume>
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	e8 16       	cp	r14, r24
    1ed4:	f9 06       	cpc	r15, r25
							{
								ad5245_set_potentiometer(TONE_POT_VAL(holdVol));
    1ed6:	49 f0       	breq	.+18     	; 0x1eea <main+0x8ec>
    1ed8:	8f ee       	ldi	r24, 0xEF	; 239
    1eda:	8e 9d       	mul	r24, r14
    1edc:	80 2d       	mov	r24, r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	81 50       	subi	r24, 0x01	; 1
    1ee2:	0e 94 80 19 	call	0x3300	; 0x3300 <ad5245_set_potentiometer>
								g_tone_volume = (uint8_t)holdVol;
    1ee6:	e0 92 78 07 	sts	0x0778, r14	; 0x800778 <g_tone_volume>
							}

							g_volume_set_beep_delay = 20;
    1eea:	84 e1       	ldi	r24, 0x14	; 20
    1eec:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <g_volume_set_beep_delay>
							}

							g_volume_set_beep_delay = 20;
						}

						saveAllEEPROM();
    1ef0:	ee da       	rcall	.-2596   	; 0x14ce <saveAllEEPROM>

						if(g_terminal_mode)
    1ef2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	36 c0       	rjmp	.+108    	; 0x1f66 <main+0x968>
    1efa:	3d c0       	rjmp	.+122    	; 0x1f76 <main+0x978>
						}
						else    /* volType == MAIN_VOLUME */
						{
							if(direction == UP)
							{
								if(g_main_volume < MAX_MAIN_VOLUME_SETTING)
    1efc:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <g_main_volume>
    1f00:	8f 30       	cpi	r24, 0x0F	; 15
    1f02:	f0 f4       	brcc	.+60     	; 0x1f40 <main+0x942>
								{
									g_main_volume++;
    1f04:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <g_main_volume>
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <g_main_volume>
    1f0e:	18 c0       	rjmp	.+48     	; 0x1f40 <main+0x942>
								}
							}
							else if(direction == DOWN)
							{
								if(g_main_volume)
    1f10:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <g_main_volume>
    1f14:	88 23       	and	r24, r24
								{
									g_main_volume--;
    1f16:	a1 f0       	breq	.+40     	; 0x1f40 <main+0x942>
    1f18:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <g_main_volume>
    1f1c:	81 50       	subi	r24, 0x01	; 1
    1f1e:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <g_main_volume>
								}
							}
							else if(direction == SETTOVALUE)
							{
								if(holdVol > MAX_MAIN_VOLUME_SETTING)
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <main+0x942>
    1f24:	80 31       	cpi	r24, 0x10	; 16
    1f26:	91 05       	cpc	r25, r1
								{
									g_main_volume = MAX_MAIN_VOLUME_SETTING;
    1f28:	24 f0       	brlt	.+8      	; 0x1f32 <main+0x934>
    1f2a:	8f e0       	ldi	r24, 0x0F	; 15
    1f2c:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <g_main_volume>
								}
								else if(holdVol < 0)
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <main+0x942>
    1f32:	99 23       	and	r25, r25
								{
									g_main_volume = 0;
    1f34:	1c f4       	brge	.+6      	; 0x1f3c <main+0x93e>
    1f36:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <g_main_volume>
								}
								else
								{
									g_main_volume = holdVol;
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <main+0x942>
    1f3c:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <g_main_volume>
								}
							}

							g_volume_set_beep_delay = 20;
    1f40:	84 e1       	ldi	r24, 0x14	; 20
    1f42:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <g_volume_set_beep_delay>
						}

						saveAllEEPROM();
    1f46:	c3 da       	rcall	.-2682   	; 0x14ce <saveAllEEPROM>

						if(g_terminal_mode)
    1f48:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    1f4c:	88 23       	and	r24, r24
    1f4e:	99 f0       	breq	.+38     	; 0x1f76 <main+0x978>
						{
							if(volType == MAIN_VOLUME)
    1f50:	21 e0       	ldi	r18, 0x01	; 1
    1f52:	d2 12       	cpse	r13, r18
    1f54:	08 c0       	rjmp	.+16     	; 0x1f66 <main+0x968>
							{
								lb_send_value(g_main_volume, "MAIN VOL");
    1f56:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <g_main_volume>
    1f5a:	66 ed       	ldi	r22, 0xD6	; 214
    1f5c:	74 e0       	ldi	r23, 0x04	; 4
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_value>
    1f64:	c8 c0       	rjmp	.+400    	; 0x20f6 <main+0xaf8>
							}
							else
							{
								lb_send_value(g_tone_volume, "TONE VOL");
    1f66:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <g_tone_volume>
    1f6a:	6f ed       	ldi	r22, 0xDF	; 223
    1f6c:	74 e0       	ldi	r23, 0x04	; 4
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_value>
    1f74:	c0 c0       	rjmp	.+384    	; 0x20f6 <main+0xaf8>
							}
						}
						else
						{
							if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 81       	ld	r24, Z
    1f7a:	82 30       	cpi	r24, 0x02	; 2
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <main+0x982>
    1f7e:	c0 c0       	rjmp	.+384    	; 0x2100 <main+0xb02>
							{
								/* Send a reply */
								lb_send_VOL(LINKBUS_MSG_REPLY, volType, VOL_NOT_SPECIFIED);
    1f80:	4d e0       	ldi	r20, 0x0D	; 13
    1f82:	6d 2d       	mov	r22, r13
    1f84:	83 e0       	ldi	r24, 0x03	; 3
    1f86:	0e 94 76 03 	call	0x6ec	; 0x6ec <lb_send_VOL>
    1f8a:	b5 c0       	rjmp	.+362    	; 0x20f6 <main+0xaf8>
				}
				break;

				case MESSAGE_TTY:
				{
					g_terminal_mode = !g_terminal_mode;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <g_terminal_mode>
    1f92:	91 11       	cpse	r25, r1
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <g_terminal_mode>
					linkbus_setTerminalMode(g_terminal_mode);
    1f9a:	0e 94 bf 01 	call	0x37e	; 0x37e <linkbus_setTerminalMode>

					if(g_terminal_mode)
    1f9e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    1fa2:	88 23       	and	r24, r24
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <main+0x9aa>
    1fa6:	ac c0       	rjmp	.+344    	; 0x2100 <main+0xb02>
					{
						g_LB_broadcasts_enabled = 0;    /* disable all broadcasts */
    1fa8:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <g_LB_broadcasts_enabled+0x1>
    1fac:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <g_LB_broadcasts_enabled>
						attach_success = TRUE;          /* stop any ongoing ID messages */
						g_send_ID_countdown = 0;
    1fb0:	10 92 8a 07 	sts	0x078A, r1	; 0x80078a <g_send_ID_countdown+0x1>
    1fb4:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <g_send_ID_countdown>
						linkbus_setLineTerm("\n\n");
    1fb8:	88 ee       	ldi	r24, 0xE8	; 232
    1fba:	94 e0       	ldi	r25, 0x04	; 4
    1fbc:	0e 94 b2 01 	call	0x364	; 0x364 <linkbus_setLineTerm>
					linkbus_setTerminalMode(g_terminal_mode);

					if(g_terminal_mode)
					{
						g_LB_broadcasts_enabled = 0;    /* disable all broadcasts */
						attach_success = TRUE;          /* stop any ongoing ID messages */
    1fc0:	cc 24       	eor	r12, r12
    1fc2:	c3 94       	inc	r12
    1fc4:	98 c0       	rjmp	.+304    	; 0x20f6 <main+0xaf8>
				}
				break;

				case MESSAGE_BCR:
				{
					LBbroadcastType bcType = atoi(lb_buff->fields[FIELD1]);
    1fc6:	c8 01       	movw	r24, r16
    1fc8:	03 96       	adiw	r24, 0x03	; 3
    1fca:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>

					if(lb_buff->type == LINKBUS_MSG_QUERY)  /* Query */
    1fce:	f8 01       	movw	r30, r16
    1fd0:	20 81       	ld	r18, Z
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	61 f4       	brne	.+24     	; 0x1fee <main+0x9f0>
					{
						g_LB_broadcasts_enabled |= bcType;
    1fd6:	20 91 81 07 	lds	r18, 0x0781	; 0x800781 <g_LB_broadcasts_enabled>
    1fda:	30 91 82 07 	lds	r19, 0x0782	; 0x800782 <g_LB_broadcasts_enabled+0x1>
    1fde:	a9 01       	movw	r20, r18
    1fe0:	48 2b       	or	r20, r24
    1fe2:	ca 01       	movw	r24, r20
    1fe4:	90 93 82 07 	sts	0x0782, r25	; 0x800782 <g_LB_broadcasts_enabled+0x1>
    1fe8:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <g_LB_broadcasts_enabled>
    1fec:	84 c0       	rjmp	.+264    	; 0x20f6 <main+0xaf8>
					}
					else
					{
						g_LB_broadcasts_enabled &= ~bcType;
    1fee:	99 27       	eor	r25, r25
    1ff0:	80 95       	com	r24
    1ff2:	90 95       	com	r25
    1ff4:	20 91 81 07 	lds	r18, 0x0781	; 0x800781 <g_LB_broadcasts_enabled>
    1ff8:	30 91 82 07 	lds	r19, 0x0782	; 0x800782 <g_LB_broadcasts_enabled+0x1>
    1ffc:	82 23       	and	r24, r18
    1ffe:	93 23       	and	r25, r19
    2000:	90 93 82 07 	sts	0x0782, r25	; 0x800782 <g_LB_broadcasts_enabled+0x1>
    2004:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <g_LB_broadcasts_enabled>
				}
				break;

				case MESSAGE_BAT_BC:
				{
					lb_broadcast_bat(g_lastConversionResult[BATTERY_READING]);
    2008:	76 c0       	rjmp	.+236    	; 0x20f6 <main+0xaf8>
    200a:	f5 01       	movw	r30, r10
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
				}
				break;
    2010:	0e 94 54 05 	call	0xaa8	; 0xaa8 <lb_broadcast_bat>
				}
				break;
				
				case MESSAGE_RSSI_BC:
				{
					lb_broadcast_rssi(g_lastConversionResult[RSSI_READING]);
    2014:	70 c0       	rjmp	.+224    	; 0x20f6 <main+0xaf8>
    2016:	f5 01       	movw	r30, r10
    2018:	84 81       	ldd	r24, Z+4	; 0x04
				}
				break;
    201a:	95 81       	ldd	r25, Z+5	; 0x05
				{
					#ifdef INCLUDE_DS3231_SUPPORT
						int32_t time;
					#endif
					
					cli(); wdt_reset(); /* HW watchdog */ sei();
    201c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lb_broadcast_rssi>
    2020:	6a c0       	rjmp	.+212    	; 0x20f6 <main+0xaf8>
					linkbus_setLineTerm("\n");
    2022:	f8 94       	cli
    2024:	a8 95       	wdr
    2026:	78 94       	sei
					lb_send_BND(LINKBUS_MSG_REPLY, rxGetBand());
    2028:	89 ee       	ldi	r24, 0xE9	; 233
    202a:	94 e0       	ldi	r25, 0x04	; 4
    202c:	0e 94 b2 01 	call	0x364	; 0x364 <linkbus_setLineTerm>
    2030:	59 d5       	rcall	.+2738   	; 0x2ae4 <rxGetBand>
					lb_send_FRE(LINKBUS_MSG_REPLY, rxGetFrequency(), FALSE);
    2032:	68 2f       	mov	r22, r24
    2034:	83 e0       	ldi	r24, 0x03	; 3
    2036:	0e 94 00 04 	call	0x800	; 0x800 <lb_send_BND>
    203a:	eb d4       	rcall	.+2518   	; 0x2a12 <rxGetFrequency>
    203c:	ab 01       	movw	r20, r22
    203e:	bc 01       	movw	r22, r24
    2040:	20 e0       	ldi	r18, 0x00	; 0
					lb_send_value(g_audio_RSSI, "TON");
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	0e 94 25 02 	call	0x44a	; 0x44a <lb_send_FRE>
    2048:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <g_audio_RSSI>
    204c:	6b ee       	ldi	r22, 0xEB	; 235
    204e:	74 e0       	ldi	r23, 0x04	; 4
					lb_send_FRE(LINKBUS_MSG_REPLY, rxGetCWOffset(), FALSE);
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_value>
    2056:	9f d6       	rcall	.+3390   	; 0x2d96 <rxGetCWOffset>
    2058:	ab 01       	movw	r20, r22
    205a:	bc 01       	movw	r22, r24
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	83 e0       	ldi	r24, 0x03	; 3
					lb_send_value(rxGetAttenuation(), "ATT");
    2060:	0e 94 25 02 	call	0x44a	; 0x44a <lb_send_FRE>
    2064:	e0 d6       	rcall	.+3520   	; 0x2e26 <rxGetAttenuation>
    2066:	6f ee       	ldi	r22, 0xEF	; 239
    2068:	74 e0       	ldi	r23, 0x04	; 4
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_value>
					lb_send_value(rxGetPreamp(), "PRE");
    2070:	24 d7       	rcall	.+3656   	; 0x2eba <rxGetPreamp>
    2072:	63 ef       	ldi	r22, 0xF3	; 243
    2074:	74 e0       	ldi	r23, 0x04	; 4
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_value>
					lb_send_value(g_main_volume, "MAIN VOL");
    207c:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <g_main_volume>
    2080:	66 ed       	ldi	r22, 0xD6	; 214
    2082:	74 e0       	ldi	r23, 0x04	; 4
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_value>
					lb_send_value(g_tone_volume, "TONE VOL");
    208a:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <g_tone_volume>
    208e:	6f ed       	ldi	r22, 0xDF	; 223
    2090:	74 e0       	ldi	r23, 0x04	; 4
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0e 94 07 02 	call	0x40e	; 0x40e <lb_send_value>
					cli(); wdt_reset(); /* HW watchdog */ sei();
    2098:	f8 94       	cli
    209a:	a8 95       	wdr
    209c:	78 94       	sei
					lb_broadcast_bat(g_lastConversionResult[BATTERY_READING]);
    209e:	f5 01       	movw	r30, r10
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	0e 94 54 05 	call	0xaa8	; 0xaa8 <lb_broadcast_bat>
					lb_broadcast_rssi(g_lastConversionResult[RSSI_READING]);
    20a8:	f5 01       	movw	r30, r10
    20aa:	84 81       	ldd	r24, Z+4	; 0x04
    20ac:	95 81       	ldd	r25, Z+5	; 0x05
    20ae:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lb_broadcast_rssi>
					linkbus_setLineTerm("\n\n");
    20b2:	88 ee       	ldi	r24, 0xE8	; 232
    20b4:	94 e0       	ldi	r25, 0x04	; 4
    20b6:	0e 94 b2 01 	call	0x364	; 0x364 <linkbus_setLineTerm>
					cli(); wdt_reset(); /* HW watchdog */ sei();
    20ba:	f8 94       	cli
    20bc:	a8 95       	wdr
    20be:	78 94       	sei
					#ifdef INCLUDE_DS3231_SUPPORT
						ds3231_read_time(&time, NULL, Time_Format_Not_Specified);
    20c0:	44 e0       	ldi	r20, 0x04	; 4
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	ce 01       	movw	r24, r28
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	0e 94 04 1a 	call	0x3408	; 0x3408 <ds3231_read_time>
						lb_send_TIM(LINKBUS_MSG_REPLY, time);
    20ce:	49 81       	ldd	r20, Y+1	; 0x01
    20d0:	5a 81       	ldd	r21, Y+2	; 0x02
    20d2:	6b 81       	ldd	r22, Y+3	; 0x03
    20d4:	7c 81       	ldd	r23, Y+4	; 0x04
    20d6:	83 e0       	ldi	r24, 0x03	; 3
    20d8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lb_send_TIM>
						cli(); wdt_reset(); /* HW watchdog */ sei();
    20dc:	f8 94       	cli
    20de:	a8 95       	wdr
    20e0:	78 94       	sei
					#endif
				}
				break;
    20e2:	09 c0       	rjmp	.+18     	; 0x20f6 <main+0xaf8>

				default:
				{
					if(g_terminal_mode)
    20e4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    20e8:	88 23       	and	r24, r24
    20ea:	19 f0       	breq	.+6      	; 0x20f2 <main+0xaf4>
					{
						lb_send_Help();
    20ec:	0e 94 75 01 	call	0x2ea	; 0x2ea <lb_send_Help>
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <main+0xaf8>
					}
					else
					{
						linkbus_reset_rx(); /* flush buffer */
    20f2:	0e 94 1d 01 	call	0x23a	; 0x23a <linkbus_reset_rx>
					}
				}
				break;
			}

			if(g_terminal_mode)
    20f6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_terminal_mode>
    20fa:	81 11       	cpse	r24, r1
			{
				lb_send_NewPrompt();
    20fc:	0e 94 6d 01 	call	0x2da	; 0x2da <lb_send_NewPrompt>
			}

			lb_buff->id = MESSAGE_EMPTY;
    2100:	f8 01       	movw	r30, r16
    2102:	12 82       	std	Z+2, r1	; 0x02
    2104:	11 82       	std	Z+1, r1	; 0x01
		}

		/***********************************************************************
		 *  Handle arriving Linkbus messages
		 ************************************************************************/
		while((lb_buff = nextFullRxBuffer()))
    2106:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <nextFullRxBuffer>
    210a:	8c 01       	movw	r16, r24
    210c:	89 2b       	or	r24, r25
    210e:	09 f0       	breq	.+2      	; 0x2112 <main+0xb14>
    2110:	e5 cb       	rjmp	.-2102   	; 0x18dc <main+0x2de>
		}


			/* ////////////////////////////////////
			 * Handle Receiver interrupts (e.g., trigger button presses) */
			if(g_radio_port_changed)
    2112:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <g_radio_port_changed>
    2116:	81 11       	cpse	r24, r1
			{
				g_radio_port_changed = FALSE;
    2118:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <g_radio_port_changed>
				 *			} */
			}

			/* ////////////////////////////////////
			 * Handle periodic tasks triggered by the tick count */
			if(hold_tick_count != g_tick_count)
    211c:	00 91 8e 07 	lds	r16, 0x078E	; 0x80078e <g_tick_count>
    2120:	10 91 8f 07 	lds	r17, 0x078F	; 0x80078f <g_tick_count+0x1>
    2124:	80 16       	cp	r8, r16
    2126:	91 06       	cpc	r9, r17
    2128:	09 f4       	brne	.+2      	; 0x212c <main+0xb2e>
    212a:	04 cb       	rjmp	.-2552   	; 0x1734 <main+0x136>
			{
				hold_tick_count = g_tick_count;
    212c:	00 91 8e 07 	lds	r16, 0x078E	; 0x80078e <g_tick_count>
    2130:	10 91 8f 07 	lds	r17, 0x078F	; 0x80078f <g_tick_count+0x1>

				if(g_lb_repeat_rssi)
    2134:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <g_lb_repeat_rssi>
    2138:	88 23       	and	r24, r24
    213a:	09 f4       	brne	.+2      	; 0x213e <main+0xb40>
    213c:	52 c0       	rjmp	.+164    	; 0x21e2 <main+0xbe4>
				{
					static uint16_t lastRSSI = 0;
					static uint16_t lastRoundedRSSI = 0;
					
					if(!g_rssi_countdown)
    213e:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <g_rssi_countdown>
    2142:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <g_rssi_countdown+0x1>
    2146:	89 2b       	or	r24, r25
    2148:	09 f0       	breq	.+2      	; 0x214c <main+0xb4e>
    214a:	4b c0       	rjmp	.+150    	; 0x21e2 <main+0xbe4>
					{
						if(lastRSSI != g_filteredRSSI)
    214c:	40 91 68 07 	lds	r20, 0x0768	; 0x800768 <g_filteredRSSI>
    2150:	50 91 69 07 	lds	r21, 0x0769	; 0x800769 <g_filteredRSSI+0x1>
    2154:	60 91 6a 07 	lds	r22, 0x076A	; 0x80076a <g_filteredRSSI+0x2>
    2158:	70 91 6b 07 	lds	r23, 0x076B	; 0x80076b <g_filteredRSSI+0x3>
    215c:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <lastRSSI.3178>
    2160:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <lastRSSI.3178+0x1>
    2164:	a0 e0       	ldi	r26, 0x00	; 0
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	84 17       	cp	r24, r20
    216a:	95 07       	cpc	r25, r21
    216c:	a6 07       	cpc	r26, r22
    216e:	b7 07       	cpc	r27, r23
    2170:	c1 f1       	breq	.+112    	; 0x21e2 <main+0xbe4>
						{
							uint16_t roundedRSSI = g_filteredRSSI / 10;
    2172:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <g_filteredRSSI>
    2176:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <g_filteredRSSI+0x1>
    217a:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <g_filteredRSSI+0x2>
    217e:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <g_filteredRSSI+0x3>
    2182:	2a e0       	ldi	r18, 0x0A	; 10
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodsi4>
							
							if(lastRoundedRSSI != roundedRSSI)
    218e:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <lastRoundedRSSI.3179>
    2192:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <lastRoundedRSSI.3179+0x1>
    2196:	82 17       	cp	r24, r18
    2198:	93 07       	cpc	r25, r19
    219a:	b9 f0       	breq	.+46     	; 0x21ca <main+0xbcc>
							{
								lastRoundedRSSI = roundedRSSI;
    219c:	30 93 3b 07 	sts	0x073B, r19	; 0x80073b <lastRoundedRSSI.3179+0x1>
    21a0:	20 93 3a 07 	sts	0x073A, r18	; 0x80073a <lastRoundedRSSI.3179>
#ifndef DEBUG_FUNCTIONS_ENABLE
								g_rssi_countdown = 100;
    21a4:	84 e6       	ldi	r24, 0x64	; 100
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <g_rssi_countdown+0x1>
    21ac:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <g_rssi_countdown>
#endif
								lb_broadcast_rssi(10*roundedRSSI);
    21b0:	c9 01       	movw	r24, r18
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	22 0f       	add	r18, r18
    21b8:	33 1f       	adc	r19, r19
    21ba:	22 0f       	add	r18, r18
    21bc:	33 1f       	adc	r19, r19
    21be:	22 0f       	add	r18, r18
    21c0:	33 1f       	adc	r19, r19
    21c2:	82 0f       	add	r24, r18
    21c4:	93 1f       	adc	r25, r19
    21c6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lb_broadcast_rssi>
							}

							lastRSSI = g_filteredRSSI;
    21ca:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <g_filteredRSSI>
    21ce:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <g_filteredRSSI+0x1>
    21d2:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <g_filteredRSSI+0x2>
    21d6:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <g_filteredRSSI+0x3>
    21da:	90 93 3d 07 	sts	0x073D, r25	; 0x80073d <lastRSSI.3178+0x1>
    21de:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <lastRSSI.3178>
#endif // DEBUG_FUNCTIONS_ENABLE

					}				
				}

				if(!g_LB_broadcast_interval && g_LB_broadcasts_enabled)
    21e2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_LB_broadcast_interval>
    21e6:	81 11       	cpse	r24, r1
    21e8:	58 c0       	rjmp	.+176    	; 0x229a <main+0xc9c>
    21ea:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <g_LB_broadcasts_enabled>
    21ee:	90 91 82 07 	lds	r25, 0x0782	; 0x800782 <g_LB_broadcasts_enabled+0x1>
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <main+0xbfa>
    21f6:	51 c0       	rjmp	.+162    	; 0x229a <main+0xc9c>
					if(g_LB_broadcasts_enabled & UPC_TEMP_BROADCAST)
					{
						/* not yet supported - gets read from processor chip */
					}

					if(g_LB_broadcasts_enabled & BATTERY_BROADCAST)
    21f8:	80 ff       	sbrs	r24, 0
    21fa:	1b c0       	rjmp	.+54     	; 0x2232 <main+0xc34>
					{
						if(g_adcUpdated[BATTERY_READING])
    21fc:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <g_adcUpdated+0x1>
    2200:	88 23       	and	r24, r24
    2202:	b9 f0       	breq	.+46     	; 0x2232 <main+0xc34>
						{
							uint16_t v = (uint16_t)( ( 1000 * ( (uint32_t)(g_lastConversionResult[BATTERY_READING] + POWER_SUPPLY_VOLTAGE_DROP_MV) ) ) / BATTERY_VOLTAGE_COEFFICIENT ); /* round up and adjust for voltage divider and drops */
    2204:	f5 01       	movw	r30, r10
    2206:	22 81       	ldd	r18, Z+2	; 0x02
    2208:	33 81       	ldd	r19, Z+3	; 0x03
							lb_broadcast_bat(v);
    220a:	26 52       	subi	r18, 0x26	; 38
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	a8 ee       	ldi	r26, 0xE8	; 232
    2210:	b3 e0       	ldi	r27, 0x03	; 3
    2212:	0e 94 8a 24 	call	0x4914	; 0x4914 <__umulhisi3>
    2216:	2f ed       	ldi	r18, 0xDF	; 223
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodsi4>
    2222:	c9 01       	movw	r24, r18
    2224:	0e 94 54 05 	call	0xaa8	; 0xaa8 <lb_broadcast_bat>
							g_adcUpdated[BATTERY_READING] = FALSE;
    2228:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <g_adcUpdated+0x1>
							g_LB_broadcast_interval = 100;                                                                                                                              /* minimum delay before next broadcast */
    222c:	84 e6       	ldi	r24, 0x64	; 100
    222e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_LB_broadcast_interval>
						}
					}

					if(g_LB_broadcasts_enabled & RSSI_BROADCAST)
    2232:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <g_LB_broadcasts_enabled>
    2236:	81 ff       	sbrs	r24, 1
    2238:	0e c0       	rjmp	.+28     	; 0x2256 <main+0xc58>
					{
						if(g_adcUpdated[RSSI_READING])
    223a:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <g_adcUpdated+0x2>
    223e:	88 23       	and	r24, r24
    2240:	51 f0       	breq	.+20     	; 0x2256 <main+0xc58>
						{
							uint16_t v = g_lastConversionResult[RSSI_READING];  /* round up and adjust for voltage divider */
    2242:	f5 01       	movw	r30, r10
    2244:	84 81       	ldd	r24, Z+4	; 0x04
    2246:	95 81       	ldd	r25, Z+5	; 0x05
							lb_broadcast_rssi(v);
    2248:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lb_broadcast_rssi>
							g_adcUpdated[RSSI_READING] = FALSE;
    224c:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <g_adcUpdated+0x2>
							g_LB_broadcast_interval = 100;                      /* minimum delay before next broadcast */
    2250:	84 e6       	ldi	r24, 0x64	; 100
    2252:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_LB_broadcast_interval>
						}
					}

					if(g_LB_broadcasts_enabled & RF_BROADCAST)
    2256:	80 91 81 07 	lds	r24, 0x0781	; 0x800781 <g_LB_broadcasts_enabled>
    225a:	82 ff       	sbrs	r24, 2
    225c:	1e c0       	rjmp	.+60     	; 0x229a <main+0xc9c>
					{
						if(g_adcUpdated[RF_READING])
    225e:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <g_adcUpdated>
    2262:	88 23       	and	r24, r24
    2264:	d1 f0       	breq	.+52     	; 0x229a <main+0xc9c>
						{
							g_adcUpdated[RF_READING] = FALSE;
    2266:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <g_adcUpdated>
							uint16_t v = (uint16_t)(((uint32_t)(g_lastConversionResult[RF_READING]) + 9) / 100);    /* round up and adjust for voltage divider */
    226a:	f5 01       	movw	r30, r10
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
							lb_broadcast_rf(v);
    2270:	cb 01       	movw	r24, r22
    2272:	a0 e0       	ldi	r26, 0x00	; 0
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	67 5f       	subi	r22, 0xF7	; 247
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	8f 4f       	sbci	r24, 0xFF	; 255
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	24 e6       	ldi	r18, 0x64	; 100
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodsi4>
    228e:	c9 01       	movw	r24, r18
    2290:	0e 94 18 06 	call	0xc30	; 0xc30 <lb_broadcast_rf>
							g_LB_broadcast_interval = 100;                                                          /* minimum delay before next broadcast */
    2294:	84 e6       	ldi	r24, 0x64	; 100
    2296:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_LB_broadcast_interval>
						}
					}
				}

				if(!g_send_ID_countdown && !attach_success)
    229a:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <g_send_ID_countdown>
    229e:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <g_send_ID_countdown+0x1>
    22a2:	89 2b       	or	r24, r25
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <main+0xcaa>
    22a6:	46 ca       	rjmp	.-2932   	; 0x1734 <main+0x136>
    22a8:	c1 10       	cpse	r12, r1
    22aa:	44 ca       	rjmp	.-2936   	; 0x1734 <main+0x136>
				{
					static uint8_t tries = 10;

					if(tries)
    22ac:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tries.3184>
    22b0:	88 23       	and	r24, r24
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <main+0xcb8>
    22b4:	3f ca       	rjmp	.-2946   	; 0x1734 <main+0x136>
					{
						tries--;
    22b6:	81 50       	subi	r24, 0x01	; 1
    22b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tries.3184>
						g_send_ID_countdown = SEND_ID_DELAY;
    22bc:	84 e0       	ldi	r24, 0x04	; 4
    22be:	90 e1       	ldi	r25, 0x10	; 16
    22c0:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <g_send_ID_countdown+0x1>
    22c4:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <g_send_ID_countdown>
						lb_send_ID(LINKBUS_MSG_COMMAND, RECEIVER_ID, g_LB_attached_device);
    22c8:	40 91 83 07 	lds	r20, 0x0783	; 0x800783 <g_LB_attached_device>
    22cc:	62 e0       	ldi	r22, 0x02	; 2
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <lb_send_ID>
    22d4:	2f ca       	rjmp	.-2978   	; 0x1734 <main+0x136>
					BOOL valid = FALSE;

					if(lb_buff->fields[FIELD1][0] == 'T')   /* volume type field */
					{
						valid = TRUE;
						volType = TONE_VOLUME;
    22d6:	d1 2c       	mov	r13, r1
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <main+0xce0>
					}
					else if(lb_buff->fields[FIELD1][0] == 'M')
					{
						valid = TRUE;
						volType = MAIN_VOLUME;
    22da:	dd 24       	eor	r13, r13
    22dc:	d3 94       	inc	r13
					if(valid)
					{
						IncrType direction = NOCHANGE;
						int16_t holdVol = -1;

						if(lb_buff->fields[FIELD2][0])
    22de:	f8 01       	movw	r30, r16
    22e0:	80 8d       	ldd	r24, Z+24	; 0x18
    22e2:	81 11       	cpse	r24, r1
    22e4:	c3 cd       	rjmp	.-1146   	; 0x1e6c <main+0x86e>
    22e6:	08 c0       	rjmp	.+16     	; 0x22f8 <main+0xcfa>
								holdVol = atoi(lb_buff->fields[FIELD2]);
								direction = SETTOVALUE;
							}
						}

						if(volType == TONE_VOLUME)
    22e8:	dd 20       	and	r13, r13
    22ea:	09 f4       	brne	.+2      	; 0x22ee <main+0xcf0>
    22ec:	cf cd       	rjmp	.-1122   	; 0x1e8c <main+0x88e>
    22ee:	06 ce       	rjmp	.-1012   	; 0x1efc <main+0x8fe>
    22f0:	dd 20       	and	r13, r13
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <main+0xcf8>
    22f4:	cd cd       	rjmp	.-1126   	; 0x1e90 <main+0x892>
    22f6:	0c ce       	rjmp	.-1000   	; 0x1f10 <main+0x912>
    22f8:	dd 20       	and	r13, r13
    22fa:	09 f4       	brne	.+2      	; 0x22fe <main+0xd00>
    22fc:	cb cd       	rjmp	.-1130   	; 0x1e94 <main+0x896>
    22fe:	20 ce       	rjmp	.-960    	; 0x1f40 <main+0x942>

00002300 <tonePitch>:
void tonePitch(uint8_t pitch)
{
	Frequency_Hz freq;
	uint16_t prescale = 8;
	
	if(g_tone_RSSI_direction == 1)
    2300:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <g_tone_RSSI_direction>
    2304:	91 30       	cpi	r25, 0x01	; 1
    2306:	09 f4       	brne	.+2      	; 0x230a <tonePitch+0xa>
	{
		pitch = 255 - pitch;
    2308:	80 95       	com	r24
	}
	
	freq = 15 + (13*pitch);
    230a:	9d e0       	ldi	r25, 0x0D	; 13
    230c:	89 9f       	mul	r24, r25
    230e:	90 01       	movw	r18, r0
    2310:	11 24       	eor	r1, r1
    2312:	21 5f       	subi	r18, 0xF1	; 241
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
    2316:	03 2e       	mov	r0, r19
    2318:	00 0c       	add	r0, r0
    231a:	44 0b       	sbc	r20, r20
    231c:	55 0b       	sbc	r21, r21
					
	TCCR0B &= 0xF8;
    231e:	85 b5       	in	r24, 0x25	; 37
    2320:	88 7f       	andi	r24, 0xF8	; 248
    2322:	85 bd       	out	0x25, r24	; 37

	if(freq < 60) // 1024
    2324:	2c 33       	cpi	r18, 0x3C	; 60
    2326:	31 05       	cpc	r19, r1
    2328:	41 05       	cpc	r20, r1
    232a:	51 05       	cpc	r21, r1
    232c:	30 f4       	brcc	.+12     	; 0x233a <tonePitch+0x3a>
	{
		TCCR0B |= 0x05;
    232e:	85 b5       	in	r24, 0x25	; 37
    2330:	85 60       	ori	r24, 0x05	; 5
    2332:	85 bd       	out	0x25, r24	; 37
		prescale = 1024;
    2334:	a0 e0       	ldi	r26, 0x00	; 0
    2336:	b4 e0       	ldi	r27, 0x04	; 4
    2338:	1c c0       	rjmp	.+56     	; 0x2372 <tonePitch+0x72>
	}
	else if(freq < 240) // 256
    233a:	20 3f       	cpi	r18, 0xF0	; 240
    233c:	31 05       	cpc	r19, r1
    233e:	41 05       	cpc	r20, r1
    2340:	51 05       	cpc	r21, r1
    2342:	30 f4       	brcc	.+12     	; 0x2350 <tonePitch+0x50>
	{
		TCCR0B |= 0x04;
    2344:	85 b5       	in	r24, 0x25	; 37
    2346:	84 60       	ori	r24, 0x04	; 4
    2348:	85 bd       	out	0x25, r24	; 37
		prescale = 256;
    234a:	a0 e0       	ldi	r26, 0x00	; 0
    234c:	b1 e0       	ldi	r27, 0x01	; 1
    234e:	11 c0       	rjmp	.+34     	; 0x2372 <tonePitch+0x72>
	}
	else if(freq < 1900) // 64
    2350:	2c 36       	cpi	r18, 0x6C	; 108
    2352:	87 e0       	ldi	r24, 0x07	; 7
    2354:	38 07       	cpc	r19, r24
    2356:	41 05       	cpc	r20, r1
    2358:	51 05       	cpc	r21, r1
    235a:	30 f4       	brcc	.+12     	; 0x2368 <tonePitch+0x68>
	{
		TCCR0B |= 0x03;
    235c:	85 b5       	in	r24, 0x25	; 37
    235e:	83 60       	ori	r24, 0x03	; 3
    2360:	85 bd       	out	0x25, r24	; 37
		prescale = 64;
    2362:	a0 e4       	ldi	r26, 0x40	; 64
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <tonePitch+0x72>
	}
	else // 8
	{
		TCCR0B |= 0x02;
    2368:	85 b5       	in	r24, 0x25	; 37
    236a:	82 60       	ori	r24, 0x02	; 2
    236c:	85 bd       	out	0x25, r24	; 37
}
	
void tonePitch(uint8_t pitch)
{
	Frequency_Hz freq;
	uint16_t prescale = 8;
    236e:	a8 e0       	ldi	r26, 0x08	; 8
    2370:	b0 e0       	ldi	r27, 0x00	; 0
	else // 8
	{
		TCCR0B |= 0x02;
	}

	OCR0A =  MIN(((8000000 / (2 * prescale * freq)) - 1), 255);
    2372:	aa 0f       	add	r26, r26
    2374:	bb 1f       	adc	r27, r27
    2376:	0e 94 99 24 	call	0x4932	; 0x4932 <__muluhisi3>
    237a:	9b 01       	movw	r18, r22
    237c:	ac 01       	movw	r20, r24
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	72 e1       	ldi	r23, 0x12	; 18
    2382:	8a e7       	ldi	r24, 0x7A	; 122
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodsi4>
    238a:	da 01       	movw	r26, r20
    238c:	c9 01       	movw	r24, r18
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	a1 09       	sbc	r26, r1
    2392:	b1 09       	sbc	r27, r1
    2394:	8f 3f       	cpi	r24, 0xFF	; 255
    2396:	91 05       	cpc	r25, r1
    2398:	a1 05       	cpc	r26, r1
    239a:	b1 05       	cpc	r27, r1
    239c:	29 f0       	breq	.+10     	; 0x23a8 <tonePitch+0xa8>
    239e:	20 f0       	brcs	.+8      	; 0x23a8 <tonePitch+0xa8>
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e0       	ldi	r26, 0x00	; 0
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	87 bd       	out	0x27, r24	; 39
    23aa:	08 95       	ret

000023ac <__vector_8>:
 * Timer/Counter2 Compare Match A ISR
 *
 * Handles periodic tasks not requiring precise timing.
 ************************************************************************/
ISR( TIMER2_COMPB_vect )
{
    23ac:	1f 92       	push	r1
    23ae:	0f 92       	push	r0
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	0f 92       	push	r0
    23b4:	11 24       	eor	r1, r1
    23b6:	4f 92       	push	r4
    23b8:	5f 92       	push	r5
    23ba:	6f 92       	push	r6
    23bc:	7f 92       	push	r7
    23be:	8f 92       	push	r8
    23c0:	9f 92       	push	r9
    23c2:	af 92       	push	r10
    23c4:	bf 92       	push	r11
    23c6:	cf 92       	push	r12
    23c8:	df 92       	push	r13
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	0f 93       	push	r16
    23d0:	2f 93       	push	r18
    23d2:	3f 93       	push	r19
    23d4:	4f 93       	push	r20
    23d6:	5f 93       	push	r21
    23d8:	6f 93       	push	r22
    23da:	7f 93       	push	r23
    23dc:	8f 93       	push	r24
    23de:	9f 93       	push	r25
    23e0:	af 93       	push	r26
    23e2:	bf 93       	push	r27
    23e4:	ef 93       	push	r30
    23e6:	ff 93       	push	r31
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	25 97       	sbiw	r28, 0x05	; 5
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	cd bf       	out	0x3d, r28	; 61
	static BOOL conversionInProcess = FALSE;
	static int8_t indexConversionInProcess;

	g_tick_count++;
    23f6:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <g_tick_count>
    23fa:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <g_tick_count+0x1>
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <g_tick_count+0x1>
    2404:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <g_tick_count>

	if(g_power_off_countdown)
    2408:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
    240c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    2410:	89 2b       	or	r24, r25
    2412:	49 f0       	breq	.+18     	; 0x2426 <__vector_8+0x7a>
	{
		g_power_off_countdown--;
    2414:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <g_power_off_countdown>
    2418:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <g_power_off_countdown+0x1>
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <g_power_off_countdown+0x1>
    2422:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <g_power_off_countdown>
	}
	if(g_low_voltage_shutdown_delay)
    2426:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_low_voltage_shutdown_delay>
    242a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    242e:	89 2b       	or	r24, r25
    2430:	49 f0       	breq	.+18     	; 0x2444 <__vector_8+0x98>
	{
		g_low_voltage_shutdown_delay--;
    2432:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <g_low_voltage_shutdown_delay>
    2436:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <g_low_voltage_shutdown_delay+0x1>
    2440:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <g_low_voltage_shutdown_delay>
	}
	if(g_send_ID_countdown)
    2444:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <g_send_ID_countdown>
    2448:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <g_send_ID_countdown+0x1>
    244c:	89 2b       	or	r24, r25
    244e:	49 f0       	breq	.+18     	; 0x2462 <__vector_8+0xb6>
	{
		g_send_ID_countdown--;
    2450:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <g_send_ID_countdown>
    2454:	90 91 8a 07 	lds	r25, 0x078A	; 0x80078a <g_send_ID_countdown+0x1>
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	90 93 8a 07 	sts	0x078A, r25	; 0x80078a <g_send_ID_countdown+0x1>
    245e:	80 93 89 07 	sts	0x0789, r24	; 0x800789 <g_send_ID_countdown>
	}
	if(g_headphone_removed_delay)
    2462:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_headphone_removed_delay>
    2466:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_headphone_removed_delay+0x1>
    246a:	89 2b       	or	r24, r25
    246c:	49 f0       	breq	.+18     	; 0x2480 <__vector_8+0xd4>
	{
		g_headphone_removed_delay--;
    246e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <g_headphone_removed_delay>
    2472:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <g_headphone_removed_delay+0x1>
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <g_headphone_removed_delay+0x1>
    247c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <g_headphone_removed_delay>
	}
	if(g_lb_repeat_rssi)
    2480:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <g_lb_repeat_rssi>
    2484:	88 23       	and	r24, r24
    2486:	59 f0       	breq	.+22     	; 0x249e <__vector_8+0xf2>
	{
		if(g_rssi_countdown)
    2488:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <g_rssi_countdown>
    248c:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <g_rssi_countdown+0x1>
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	29 f0       	breq	.+10     	; 0x249e <__vector_8+0xf2>
		{
			g_rssi_countdown--;
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <g_rssi_countdown+0x1>
    249a:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <g_rssi_countdown>
		}
	}

	if(g_LB_broadcast_interval)
    249e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <g_LB_broadcast_interval>
    24a2:	88 23       	and	r24, r24
    24a4:	19 f0       	breq	.+6      	; 0x24ac <__vector_8+0x100>
	{
		g_LB_broadcast_interval--;
    24a6:	81 50       	subi	r24, 0x01	; 1
    24a8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_LB_broadcast_interval>
	static BOOL volumeSetInProcess = FALSE;
	static BOOL beepInProcess = FALSE;

	/**
	 * Handle earphone beeps */
	if(g_beep_length)
    24ac:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <g_beep_length>
    24b0:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <g_beep_length+0x1>
    24b4:	89 2b       	or	r24, r25
    24b6:	f9 f0       	breq	.+62     	; 0x24f6 <__vector_8+0x14a>
	{
		if(!beepInProcess)
    24b8:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <beepInProcess.3025>
    24bc:	81 11       	cpse	r24, r1
    24be:	07 c0       	rjmp	.+14     	; 0x24ce <__vector_8+0x122>
		{
			TCCR0A |= (1 << COM0B0);    /* Toggle OC0B (PD5) on Compare Match */
    24c0:	84 b5       	in	r24, 0x24	; 36
    24c2:	80 61       	ori	r24, 0x10	; 16
    24c4:	84 bd       	out	0x24, r24	; 36
			beepInProcess = TRUE;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <beepInProcess.3025>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <__vector_8+0x14a>
		}
		else
		{
			g_beep_length--;
    24ce:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <g_beep_length>
    24d2:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <g_beep_length+0x1>
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	90 93 92 07 	sts	0x0792, r25	; 0x800792 <g_beep_length+0x1>
    24dc:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <g_beep_length>

			if(!g_beep_length)
    24e0:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <g_beep_length>
    24e4:	90 91 92 07 	lds	r25, 0x0792	; 0x800792 <g_beep_length+0x1>
    24e8:	89 2b       	or	r24, r25
    24ea:	29 f4       	brne	.+10     	; 0x24f6 <__vector_8+0x14a>
			{
				TCCR0A &= ~(1 << COM0B0);   /* Turn off toggling of OC0B (PD5) */
    24ec:	84 b5       	in	r24, 0x24	; 36
    24ee:	8f 7e       	andi	r24, 0xEF	; 239
    24f0:	84 bd       	out	0x24, r24	; 36
				beepInProcess = FALSE;
    24f2:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <beepInProcess.3025>
			}
		}
	}

	if(volumeSetInProcess)
    24f6:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <volumeSetInProcess.3024>
    24fa:	88 23       	and	r24, r24
    24fc:	41 f0       	breq	.+16     	; 0x250e <__vector_8+0x162>
	{
		if(PORTC & (1 << PORTC0))
    24fe:	40 9b       	sbis	0x08, 0	; 8
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <__vector_8+0x15a>
		{
			PORTC &= ~(1 << PORTC0);    /* set clock low */
    2502:	40 98       	cbi	0x08, 0	; 8
    2504:	26 c0       	rjmp	.+76     	; 0x2552 <__vector_8+0x1a6>
		}
		else
		{
			PORTC |= (1 << PORTC0);     /* set clock high */
    2506:	40 9a       	sbi	0x08, 0	; 8
			volumeSetInProcess = FALSE;
    2508:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <volumeSetInProcess.3024>
    250c:	22 c0       	rjmp	.+68     	; 0x2552 <__vector_8+0x1a6>
		}
	}
	else if(g_hw_main_volume != g_main_volume)
    250e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_hw_main_volume>
    2512:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <g_main_volume>
    2516:	98 17       	cp	r25, r24
    2518:	e1 f0       	breq	.+56     	; 0x2552 <__vector_8+0x1a6>
	{
		if(g_sufficient_power_detected) // wait until audio amp is powered up
    251a:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <g_sufficient_power_detected>
    251e:	88 23       	and	r24, r24
    2520:	c1 f0       	breq	.+48     	; 0x2552 <__vector_8+0x1a6>
		{
			if(!(PORTC & (1 << PORTC0)))
    2522:	40 9b       	sbis	0x08, 0	; 8
			{
				PORTC |= (1 << PORTC0); /* set clock high */
    2524:	40 9a       	sbi	0x08, 0	; 8
			}
			if(g_hw_main_volume > g_main_volume)
    2526:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_hw_main_volume>
    252a:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <g_main_volume>
    252e:	89 17       	cp	r24, r25
    2530:	38 f4       	brcc	.+14     	; 0x2540 <__vector_8+0x194>
			{
				PORTC &= ~(1 << PORTC1);    /* set direction down */
    2532:	41 98       	cbi	0x08, 1	; 8
				g_hw_main_volume--;
    2534:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_hw_main_volume>
    2538:	81 50       	subi	r24, 0x01	; 1
    253a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_hw_main_volume>
    253e:	06 c0       	rjmp	.+12     	; 0x254c <__vector_8+0x1a0>
			}
			else                            /* if(g_hw_main_volume < g_main_volume) */
			{
				PORTC |= (1 << PORTC1);     /* set direction up */
    2540:	41 9a       	sbi	0x08, 1	; 8
				g_hw_main_volume++;
    2542:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <g_hw_main_volume>
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <g_hw_main_volume>
			}

			volumeSetInProcess = TRUE;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <volumeSetInProcess.3024>
	}

	/**
	 * Handle Periodic ADC Readings
	 * The following algorithm allows multipe ADC channel readings to be performed at different polling intervals. */
	if(!conversionInProcess)
    2552:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <conversionInProcess.3022>
    2556:	81 11       	cpse	r24, r1
    2558:	5f c0       	rjmp	.+190    	; 0x2618 <__vector_8+0x26c>
	{
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;
    255a:	8f ef       	ldi	r24, 0xFF	; 255
    255c:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <indexConversionInProcess.3023>

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
    2560:	1d 82       	std	Y+5, r1	; 0x05
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	08 f0       	brcs	.+2      	; 0x256a <__vector_8+0x1be>
    2568:	93 c1       	rjmp	.+806    	; 0x2890 <__vector_8+0x4e4>
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	9f ef       	ldi	r25, 0xFF	; 255
				g_tickCountdownADCFlag[i]--;
			}

			if(g_tickCountdownADCFlag[i] == 0)
			{
				indexConversionInProcess = (int8_t)i;
    256e:	31 e0       	ldi	r19, 0x01	; 1
		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
		{
			if(g_tickCountdownADCFlag[i])
    2570:	ed 81       	ldd	r30, Y+5	; 0x05
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	ee 0f       	add	r30, r30
    2576:	ff 1f       	adc	r31, r31
    2578:	ec 5e       	subi	r30, 0xEC	; 236
    257a:	fe 4f       	sbci	r31, 0xFE	; 254
    257c:	40 81       	ld	r20, Z
    257e:	51 81       	ldd	r21, Z+1	; 0x01
    2580:	45 2b       	or	r20, r21
    2582:	61 f0       	breq	.+24     	; 0x259c <__vector_8+0x1f0>
			{
				g_tickCountdownADCFlag[i]--;
    2584:	ed 81       	ldd	r30, Y+5	; 0x05
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	ee 0f       	add	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	ec 5e       	subi	r30, 0xEC	; 236
    258e:	fe 4f       	sbci	r31, 0xFE	; 254
    2590:	40 81       	ld	r20, Z
    2592:	51 81       	ldd	r21, Z+1	; 0x01
    2594:	41 50       	subi	r20, 0x01	; 1
    2596:	51 09       	sbc	r21, r1
    2598:	51 83       	std	Z+1, r21	; 0x01
    259a:	40 83       	st	Z, r20
			}

			if(g_tickCountdownADCFlag[i] == 0)
    259c:	ed 81       	ldd	r30, Y+5	; 0x05
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	ec 5e       	subi	r30, 0xEC	; 236
    25a6:	fe 4f       	sbci	r31, 0xFE	; 254
    25a8:	40 81       	ld	r20, Z
    25aa:	51 81       	ldd	r21, Z+1	; 0x01
    25ac:	45 2b       	or	r20, r21
    25ae:	11 f4       	brne	.+4      	; 0x25b4 <__vector_8+0x208>
			{
				indexConversionInProcess = (int8_t)i;
    25b0:	9d 81       	ldd	r25, Y+5	; 0x05
    25b2:	23 2f       	mov	r18, r19
		/* Note: countdowns will pause while a conversion is in process. Conversions are so fast that this should not be an issue though. */

		volatile uint8_t i; /* volatile to prevent optimization performing undefined behavior */
		indexConversionInProcess = -1;

		for(i = 0; i < NUMBER_OF_POLLED_ADC_CHANNELS; i++)
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	83 30       	cpi	r24, 0x03	; 3
    25be:	c0 f2       	brcs	.-80     	; 0x2570 <__vector_8+0x1c4>
    25c0:	22 23       	and	r18, r18
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <__vector_8+0x21a>
    25c4:	65 c1       	rjmp	.+714    	; 0x2890 <__vector_8+0x4e4>
    25c6:	90 93 62 07 	sts	0x0762, r25	; 0x800762 <indexConversionInProcess.3023>
			{
				indexConversionInProcess = (int8_t)i;
			}
		}

		if(indexConversionInProcess >= 0)
    25ca:	99 23       	and	r25, r25
    25cc:	0c f4       	brge	.+2      	; 0x25d0 <__vector_8+0x224>
    25ce:	60 c1       	rjmp	.+704    	; 0x2890 <__vector_8+0x4e4>
		{
			g_tickCountdownADCFlag[indexConversionInProcess] = g_adcChannelConversionPeriod_ticks[indexConversionInProcess];    /* reset the tick countdown */
    25d0:	89 2f       	mov	r24, r25
    25d2:	99 0f       	add	r25, r25
    25d4:	99 0b       	sbc	r25, r25
    25d6:	9c 01       	movw	r18, r24
    25d8:	22 0f       	add	r18, r18
    25da:	33 1f       	adc	r19, r19
    25dc:	f9 01       	movw	r30, r18
    25de:	e0 59       	subi	r30, 0x90	; 144
    25e0:	fc 4f       	sbci	r31, 0xFC	; 252
    25e2:	40 81       	ld	r20, Z
    25e4:	51 81       	ldd	r21, Z+1	; 0x01
    25e6:	f9 01       	movw	r30, r18
    25e8:	ec 5e       	subi	r30, 0xEC	; 236
    25ea:	fe 4f       	sbci	r31, 0xFE	; 254
    25ec:	51 83       	std	Z+1, r21	; 0x01
    25ee:	40 83       	st	Z, r20
			ADMUX = (ADMUX & 0xF0) | activeADC[indexConversionInProcess];                                                       /* index through all active channels */
    25f0:	ec e7       	ldi	r30, 0x7C	; 124
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	20 81       	ld	r18, Z
    25f6:	20 7f       	andi	r18, 0xF0	; 240
    25f8:	dc 01       	movw	r26, r24
    25fa:	aa 58       	subi	r26, 0x8A	; 138
    25fc:	bc 4f       	sbci	r27, 0xFC	; 252
    25fe:	9c 91       	ld	r25, X
    2600:	82 2f       	mov	r24, r18
    2602:	89 2b       	or	r24, r25
    2604:	80 83       	st	Z, r24
			ADCSRA |= (1 << ADSC);                                                                                              /*single conversion mode */
    2606:	ea e7       	ldi	r30, 0x7A	; 122
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	80 64       	ori	r24, 0x40	; 64
    260e:	80 83       	st	Z, r24
			conversionInProcess = TRUE;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <conversionInProcess.3022>
    2616:	3c c1       	rjmp	.+632    	; 0x2890 <__vector_8+0x4e4>
		}
	}
	else if(!( ADCSRA & (1 << ADSC) ))                                                                                          /* wait for conversion to complete */
    2618:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    261c:	86 fd       	sbrc	r24, 6
    261e:	38 c1       	rjmp	.+624    	; 0x2890 <__vector_8+0x4e4>
	{
		uint16_t hold = ADC;
    2620:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    2624:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
		uint16_t holdConversionResult = (uint16_t)(((uint32_t)hold * ADC_REF_VOLTAGE_mV) >> 10);                                /* millivolts at ADC pin */
    2628:	a4 ee       	ldi	r26, 0xE4	; 228
    262a:	bc e0       	ldi	r27, 0x0C	; 12
    262c:	0e 94 8a 24 	call	0x4914	; 0x4914 <__umulhisi3>
    2630:	6b 01       	movw	r12, r22
    2632:	7c 01       	movw	r14, r24
    2634:	0b 2e       	mov	r0, r27
    2636:	ba e0       	ldi	r27, 0x0A	; 10
    2638:	f6 94       	lsr	r15
    263a:	e7 94       	ror	r14
    263c:	d7 94       	ror	r13
    263e:	c7 94       	ror	r12
    2640:	ba 95       	dec	r27
    2642:	d1 f7       	brne	.-12     	; 0x2638 <__vector_8+0x28c>
    2644:	b0 2d       	mov	r27, r0
    2646:	b6 01       	movw	r22, r12
		uint16_t lastResult = g_lastConversionResult[indexConversionInProcess];
    2648:	40 91 62 07 	lds	r20, 0x0762	; 0x800762 <indexConversionInProcess.3023>
    264c:	24 2f       	mov	r18, r20
    264e:	04 2e       	mov	r0, r20
    2650:	00 0c       	add	r0, r0
    2652:	33 0b       	sbc	r19, r19
    2654:	f9 01       	movw	r30, r18
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	e4 59       	subi	r30, 0x94	; 148
    265c:	f8 4f       	sbci	r31, 0xF8	; 248
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
		BOOL directionUP = holdConversionResult > lastResult;
		uint16_t delta = directionUP ? holdConversionResult - lastResult : lastResult - holdConversionResult;
    2662:	8c 15       	cp	r24, r12
    2664:	9d 05       	cpc	r25, r13
    2666:	20 f4       	brcc	.+8      	; 0x2670 <__vector_8+0x2c4>
    2668:	d6 01       	movw	r26, r12
    266a:	a8 1b       	sub	r26, r24
    266c:	b9 0b       	sbc	r27, r25
    266e:	03 c0       	rjmp	.+6      	; 0x2676 <__vector_8+0x2ca>
    2670:	dc 01       	movw	r26, r24
    2672:	ac 19       	sub	r26, r12
    2674:	bd 09       	sbc	r27, r13

		g_adcUpdated[indexConversionInProcess] = TRUE;
    2676:	51 e0       	ldi	r21, 0x01	; 1
    2678:	f9 01       	movw	r30, r18
    267a:	ee 58       	subi	r30, 0x8E	; 142
    267c:	f8 4f       	sbci	r31, 0xF8	; 248
    267e:	50 83       	st	Z, r21

		if(indexConversionInProcess == BATTERY_READING)
    2680:	41 30       	cpi	r20, 0x01	; 1
    2682:	81 f5       	brne	.+96     	; 0x26e4 <__vector_8+0x338>
		{
			if(delta > g_filterADCValue[indexConversionInProcess])
    2684:	f9 01       	movw	r30, r18
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	e6 59       	subi	r30, 0x96	; 150
    268c:	fc 4f       	sbci	r31, 0xFC	; 252
    268e:	40 81       	ld	r20, Z
    2690:	51 81       	ldd	r21, Z+1	; 0x01
    2692:	4a 17       	cp	r20, r26
    2694:	5b 07       	cpc	r21, r27
    2696:	58 f4       	brcc	.+22     	; 0x26ae <__vector_8+0x302>
			{
				lastResult = holdConversionResult;
				g_tickCountdownADCFlag[indexConversionInProcess] = 100; /* speed up next conversion */
    2698:	22 0f       	add	r18, r18
    269a:	33 1f       	adc	r19, r19
    269c:	f9 01       	movw	r30, r18
    269e:	ec 5e       	subi	r30, 0xEC	; 236
    26a0:	fe 4f       	sbci	r31, 0xFE	; 254
    26a2:	84 e6       	ldi	r24, 0x64	; 100
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24

		if(indexConversionInProcess == BATTERY_READING)
		{
			if(delta > g_filterADCValue[indexConversionInProcess])
			{
				lastResult = holdConversionResult;
    26aa:	c6 01       	movw	r24, r12
    26ac:	e7 c0       	rjmp	.+462    	; 0x287c <__vector_8+0x4d0>
				g_tickCountdownADCFlag[indexConversionInProcess] = 100; /* speed up next conversion */
			}
			else
			{
				if(directionUP)
    26ae:	86 17       	cp	r24, r22
    26b0:	97 07       	cpc	r25, r23
    26b2:	10 f4       	brcc	.+4      	; 0x26b8 <__vector_8+0x30c>
				{
					lastResult++;
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	03 c0       	rjmp	.+6      	; 0x26be <__vector_8+0x312>
				}
				else if(delta)
    26b8:	ab 2b       	or	r26, r27
    26ba:	09 f0       	breq	.+2      	; 0x26be <__vector_8+0x312>
				{
					lastResult--;
    26bc:	01 97       	sbiw	r24, 0x01	; 1
				}

				g_battery_measurements_active = TRUE;
    26be:	21 e0       	ldi	r18, 0x01	; 1
    26c0:	20 93 8d 07 	sts	0x078D, r18	; 0x80078d <g_battery_measurements_active>
	
				if(lastResult > VOLTS_5)
    26c4:	82 38       	cpi	r24, 0x82	; 130
    26c6:	23 e0       	ldi	r18, 0x03	; 3
    26c8:	92 07       	cpc	r25, r18
    26ca:	18 f0       	brcs	.+6      	; 0x26d2 <__vector_8+0x326>
				{
					g_battery_type = BATTERY_9V;
    26cc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <g_battery_type>
    26d0:	d5 c0       	rjmp	.+426    	; 0x287c <__vector_8+0x4d0>
				}
				else if(lastResult > VOLTS_3_0)
    26d2:	84 3c       	cpi	r24, 0xC4	; 196
    26d4:	21 e0       	ldi	r18, 0x01	; 1
    26d6:	92 07       	cpc	r25, r18
    26d8:	08 f4       	brcc	.+2      	; 0x26dc <__vector_8+0x330>
    26da:	d0 c0       	rjmp	.+416    	; 0x287c <__vector_8+0x4d0>
				{
					g_battery_type = BATTERY_4r2V;
    26dc:	21 e0       	ldi	r18, 0x01	; 1
    26de:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <g_battery_type>
    26e2:	cc c0       	rjmp	.+408    	; 0x287c <__vector_8+0x4d0>
				}
			}
		}
		else if(indexConversionInProcess == RSSI_READING)
    26e4:	42 30       	cpi	r20, 0x02	; 2
    26e6:	09 f0       	breq	.+2      	; 0x26ea <__vector_8+0x33e>
    26e8:	c9 c0       	rjmp	.+402    	; 0x287c <__vector_8+0x4d0>
		{
			uint16_t thresh = 0;
			
			lastResult = holdConversionResult;
			
			switch(g_rssi_filter)
    26ea:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <g_rssi_filter>
    26ee:	83 30       	cpi	r24, 0x03	; 3
    26f0:	71 f0       	breq	.+28     	; 0x270e <__vector_8+0x362>
    26f2:	28 f4       	brcc	.+10     	; 0x26fe <__vector_8+0x352>
    26f4:	81 30       	cpi	r24, 0x01	; 1
    26f6:	b9 f0       	breq	.+46     	; 0x2726 <__vector_8+0x37a>
    26f8:	82 30       	cpi	r24, 0x02	; 2
    26fa:	31 f0       	breq	.+12     	; 0x2708 <__vector_8+0x35c>
    26fc:	11 c0       	rjmp	.+34     	; 0x2720 <__vector_8+0x374>
    26fe:	84 30       	cpi	r24, 0x04	; 4
    2700:	49 f0       	breq	.+18     	; 0x2714 <__vector_8+0x368>
    2702:	85 30       	cpi	r24, 0x05	; 5
    2704:	51 f0       	breq	.+20     	; 0x271a <__vector_8+0x36e>
    2706:	0c c0       	rjmp	.+24     	; 0x2720 <__vector_8+0x374>
				case 1:
				     thresh = 2500;
				break;
				
				case 2:
				     thresh = 1000;
    2708:	88 ee       	ldi	r24, 0xE8	; 232
    270a:	93 e0       	ldi	r25, 0x03	; 3
    270c:	0e c0       	rjmp	.+28     	; 0x272a <__vector_8+0x37e>
				break;
				
				case 3:
				     thresh = 500;
    270e:	84 ef       	ldi	r24, 0xF4	; 244
    2710:	91 e0       	ldi	r25, 0x01	; 1
				break;
    2712:	0b c0       	rjmp	.+22     	; 0x272a <__vector_8+0x37e>
				
				case 4:
				     thresh = 200;
    2714:	88 ec       	ldi	r24, 0xC8	; 200
    2716:	90 e0       	ldi	r25, 0x00	; 0
				break;
    2718:	08 c0       	rjmp	.+16     	; 0x272a <__vector_8+0x37e>
				
				case 5:
					thresh = 50;
    271a:	82 e3       	ldi	r24, 0x32	; 50
    271c:	90 e0       	ldi	r25, 0x00	; 0
				break;
    271e:	05 c0       	rjmp	.+10     	; 0x272a <__vector_8+0x37e>
				
				default:
				     thresh = 5;
    2720:	85 e0       	ldi	r24, 0x05	; 5
    2722:	90 e0       	ldi	r25, 0x00	; 0
				break;
    2724:	02 c0       	rjmp	.+4      	; 0x272a <__vector_8+0x37e>
			lastResult = holdConversionResult;
			
			switch(g_rssi_filter)
			{
				case 1:
				     thresh = 2500;
    2726:	84 ec       	ldi	r24, 0xC4	; 196
    2728:	99 e0       	ldi	r25, 0x09	; 9
				default:
				     thresh = 5;
				break;
			}

			if(delta > thresh)
    272a:	8a 17       	cp	r24, r26
    272c:	9b 07       	cpc	r25, r27
    272e:	68 f4       	brcc	.+26     	; 0x274a <__vector_8+0x39e>
    2730:	d7 01       	movw	r26, r14
    2732:	c6 01       	movw	r24, r12
    2734:	aa 27       	eor	r26, r26
    2736:	bb 27       	eor	r27, r27
			{
				g_filteredRSSI = lastResult;
    2738:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <g_filteredRSSI>
    273c:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <g_filteredRSSI+0x1>
    2740:	a0 93 6a 07 	sts	0x076A, r26	; 0x80076a <g_filteredRSSI+0x2>
    2744:	b0 93 6b 07 	sts	0x076B, r27	; 0x80076b <g_filteredRSSI+0x3>
    2748:	57 c0       	rjmp	.+174    	; 0x27f8 <__vector_8+0x44c>
			}
			else
			{
				const int n = 3;
				g_filteredRSSI = g_filteredRSSI << n;
    274a:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <g_filteredRSSI>
    274e:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <g_filteredRSSI+0x1>
    2752:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <g_filteredRSSI+0x2>
    2756:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <g_filteredRSSI+0x3>
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	aa 1f       	adc	r26, r26
    2760:	bb 1f       	adc	r27, r27
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	aa 1f       	adc	r26, r26
    2768:	bb 1f       	adc	r27, r27
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	aa 1f       	adc	r26, r26
    2770:	bb 1f       	adc	r27, r27
    2772:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <g_filteredRSSI>
    2776:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <g_filteredRSSI+0x1>
    277a:	a0 93 6a 07 	sts	0x076A, r26	; 0x80076a <g_filteredRSSI+0x2>
    277e:	b0 93 6b 07 	sts	0x076B, r27	; 0x80076b <g_filteredRSSI+0x3>
				g_filteredRSSI += lastResult;
    2782:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <g_filteredRSSI>
    2786:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <g_filteredRSSI+0x1>
    278a:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <g_filteredRSSI+0x2>
    278e:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <g_filteredRSSI+0x3>
    2792:	b7 01       	movw	r22, r14
    2794:	a6 01       	movw	r20, r12
    2796:	66 27       	eor	r22, r22
    2798:	77 27       	eor	r23, r23
    279a:	84 0f       	add	r24, r20
    279c:	95 1f       	adc	r25, r21
    279e:	a6 1f       	adc	r26, r22
    27a0:	b7 1f       	adc	r27, r23
    27a2:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <g_filteredRSSI>
    27a6:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <g_filteredRSSI+0x1>
    27aa:	a0 93 6a 07 	sts	0x076A, r26	; 0x80076a <g_filteredRSSI+0x2>
    27ae:	b0 93 6b 07 	sts	0x076B, r27	; 0x80076b <g_filteredRSSI+0x3>
				g_filteredRSSI /= ((1 << n) + 1);
    27b2:	60 91 68 07 	lds	r22, 0x0768	; 0x800768 <g_filteredRSSI>
    27b6:	70 91 69 07 	lds	r23, 0x0769	; 0x800769 <g_filteredRSSI+0x1>
    27ba:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <g_filteredRSSI+0x2>
    27be:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <g_filteredRSSI+0x3>
    27c2:	29 e3       	ldi	r18, 0x39	; 57
    27c4:	3e e8       	ldi	r19, 0x8E	; 142
    27c6:	43 ee       	ldi	r20, 0xE3	; 227
    27c8:	58 e3       	ldi	r21, 0x38	; 56
    27ca:	0e 94 a3 24 	call	0x4946	; 0x4946 <__umulsidi3>
    27ce:	00 e2       	ldi	r16, 0x20	; 32
    27d0:	0e 94 cc 24 	call	0x4998	; 0x4998 <__lshrdi3>
    27d4:	42 2e       	mov	r4, r18
    27d6:	53 2e       	mov	r5, r19
    27d8:	64 2e       	mov	r6, r20
    27da:	75 2e       	mov	r7, r21
    27dc:	d3 01       	movw	r26, r6
    27de:	c2 01       	movw	r24, r4
    27e0:	b6 95       	lsr	r27
    27e2:	a7 95       	ror	r26
    27e4:	97 95       	ror	r25
    27e6:	87 95       	ror	r24
    27e8:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <g_filteredRSSI>
    27ec:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <g_filteredRSSI+0x1>
    27f0:	a0 93 6a 07 	sts	0x076A, r26	; 0x80076a <g_filteredRSSI+0x2>
    27f4:	b0 93 6b 07 	sts	0x076B, r27	; 0x80076b <g_filteredRSSI+0x3>
			}
			
			if(g_audio_RSSI)
    27f8:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <g_audio_RSSI>
    27fc:	88 23       	and	r24, r24
    27fe:	e9 f1       	breq	.+122    	; 0x287a <__vector_8+0x4ce>
			{
				g_filteredRSSI = MAX(g_filteredRSSI, 100);
    2800:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <g_filteredRSSI>
    2804:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <g_filteredRSSI+0x1>
    2808:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <g_filteredRSSI+0x2>
    280c:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <g_filteredRSSI+0x3>
    2810:	89 83       	std	Y+1, r24	; 0x01
    2812:	9a 83       	std	Y+2, r25	; 0x02
    2814:	ab 83       	std	Y+3, r26	; 0x03
    2816:	bc 83       	std	Y+4, r27	; 0x04
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	ab 81       	ldd	r26, Y+3	; 0x03
    281e:	bc 81       	ldd	r27, Y+4	; 0x04
    2820:	84 36       	cpi	r24, 0x64	; 100
    2822:	91 05       	cpc	r25, r1
    2824:	a1 05       	cpc	r26, r1
    2826:	b1 05       	cpc	r27, r1
    2828:	28 f0       	brcs	.+10     	; 0x2834 <__vector_8+0x488>
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	ab 81       	ldd	r26, Y+3	; 0x03
    2830:	bc 81       	ldd	r27, Y+4	; 0x04
    2832:	04 c0       	rjmp	.+8      	; 0x283c <__vector_8+0x490>
    2834:	84 e6       	ldi	r24, 0x64	; 100
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e0       	ldi	r26, 0x00	; 0
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <g_filteredRSSI>
    2840:	90 93 69 07 	sts	0x0769, r25	; 0x800769 <g_filteredRSSI+0x1>
    2844:	a0 93 6a 07 	sts	0x076A, r26	; 0x80076a <g_filteredRSSI+0x2>
    2848:	b0 93 6b 07 	sts	0x076B, r27	; 0x80076b <g_filteredRSSI+0x3>
				tonePitch((g_filteredRSSI - 100) >> 3);
    284c:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <g_filteredRSSI>
    2850:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <g_filteredRSSI+0x1>
    2854:	a0 91 6a 07 	lds	r26, 0x076A	; 0x80076a <g_filteredRSSI+0x2>
    2858:	b0 91 6b 07 	lds	r27, 0x076B	; 0x80076b <g_filteredRSSI+0x3>
    285c:	84 56       	subi	r24, 0x64	; 100
    285e:	91 09       	sbc	r25, r1
    2860:	a1 09       	sbc	r26, r1
    2862:	b1 09       	sbc	r27, r1
    2864:	68 94       	set
    2866:	12 f8       	bld	r1, 2
    2868:	b6 95       	lsr	r27
    286a:	a7 95       	ror	r26
    286c:	97 95       	ror	r25
    286e:	87 95       	ror	r24
    2870:	16 94       	lsr	r1
    2872:	d1 f7       	brne	.-12     	; 0x2868 <__vector_8+0x4bc>
    2874:	45 dd       	rcall	.-1398   	; 0x2300 <tonePitch>
		}
		else if(indexConversionInProcess == RSSI_READING)
		{
			uint16_t thresh = 0;
			
			lastResult = holdConversionResult;
    2876:	c6 01       	movw	r24, r12
    2878:	01 c0       	rjmp	.+2      	; 0x287c <__vector_8+0x4d0>
    287a:	c6 01       	movw	r24, r12
				g_filteredRSSI = MAX(g_filteredRSSI, 100);
				tonePitch((g_filteredRSSI - 100) >> 3);
			}
		}

		g_lastConversionResult[indexConversionInProcess] = lastResult;
    287c:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <indexConversionInProcess.3023>
    2880:	ee 0f       	add	r30, r30
    2882:	ff 0b       	sbc	r31, r31
    2884:	e4 59       	subi	r30, 0x94	; 148
    2886:	f8 4f       	sbci	r31, 0xF8	; 248
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24

		conversionInProcess = FALSE;
    288c:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <conversionInProcess.3022>
	}
}/* ISR */
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	ff 91       	pop	r31
    28a0:	ef 91       	pop	r30
    28a2:	bf 91       	pop	r27
    28a4:	af 91       	pop	r26
    28a6:	9f 91       	pop	r25
    28a8:	8f 91       	pop	r24
    28aa:	7f 91       	pop	r23
    28ac:	6f 91       	pop	r22
    28ae:	5f 91       	pop	r21
    28b0:	4f 91       	pop	r20
    28b2:	3f 91       	pop	r19
    28b4:	2f 91       	pop	r18
    28b6:	0f 91       	pop	r16
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	df 90       	pop	r13
    28be:	cf 90       	pop	r12
    28c0:	bf 90       	pop	r11
    28c2:	af 90       	pop	r10
    28c4:	9f 90       	pop	r9
    28c6:	8f 90       	pop	r8
    28c8:	7f 90       	pop	r7
    28ca:	6f 90       	pop	r6
    28cc:	5f 90       	pop	r5
    28ce:	4f 90       	pop	r4
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	0f 90       	pop	r0
    28d6:	1f 90       	pop	r1
    28d8:	18 95       	reti

000028da <rxSetFrequency>:
 *       This function sets the VFO frequency (CLK0 of the Si5351) based on the intended receive frequency passed in by the parameter (freq),
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL rxSetFrequency(Frequency_Hz *freq)
	{
    28da:	0f 93       	push	r16
    28dc:	1f 93       	push	r17
		BOOL activeBandSet = FALSE;
		Frequency_Hz vfo;
		RadioBand bandSet = BAND_INVALID;

		if((*freq < RX_MAXIMUM_80M_FREQUENCY) && (*freq > RX_MINIMUM_80M_FREQUENCY))    /* 80m */
    28de:	fc 01       	movw	r30, r24
    28e0:	40 81       	ld	r20, Z
    28e2:	51 81       	ldd	r21, Z+1	; 0x01
    28e4:	62 81       	ldd	r22, Z+2	; 0x02
    28e6:	73 81       	ldd	r23, Z+3	; 0x03
    28e8:	8a 01       	movw	r16, r20
    28ea:	9b 01       	movw	r18, r22
    28ec:	01 5e       	subi	r16, 0xE1	; 225
    28ee:	17 46       	sbci	r17, 0x67	; 103
    28f0:	25 43       	sbci	r18, 0x35	; 53
    28f2:	31 09       	sbc	r19, r1
    28f4:	0f 31       	cpi	r16, 0x1F	; 31
    28f6:	11 4a       	sbci	r17, 0xA1	; 161
    28f8:	27 40       	sbci	r18, 0x07	; 7
    28fa:	31 05       	cpc	r19, r1
    28fc:	68 f5       	brcc	.+90     	; 0x2958 <rxSetFrequency+0x7e>
		{
			g_freq_80m = *freq;
    28fe:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <g_freq_80m>
    2902:	50 93 23 01 	sts	0x0123, r21	; 0x800123 <g_freq_80m+0x1>
    2906:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <g_freq_80m+0x2>
    290a:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <g_freq_80m+0x3>

			if(g_vfo_configuration & VFO_2M_LOW_80M_HIGH)
    290e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_vfo_configuration>
    2912:	81 ff       	sbrs	r24, 1
    2914:	06 c0       	rjmp	.+12     	; 0x2922 <rxSetFrequency+0x48>
			{
				vfo = RADIO_IF_FREQUENCY + *freq;
    2916:	40 52       	subi	r20, 0x20	; 32
    2918:	5b 4b       	sbci	r21, 0xBB	; 187
    291a:	6c 45       	sbci	r22, 0x5C	; 92
    291c:	7f 4f       	sbci	r23, 0xFF	; 255
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
				}
			}
			
			bandSet = BAND_80M;
    291e:	91 e0       	ldi	r25, 0x01	; 1
    2920:	70 c0       	rjmp	.+224    	; 0x2a02 <rxSetFrequency+0x128>
			{
				vfo = RADIO_IF_FREQUENCY + *freq;
			}
			else
			{
				if(*freq > RADIO_IF_FREQUENCY)
    2922:	41 3e       	cpi	r20, 0xE1	; 225
    2924:	04 e4       	ldi	r16, 0x44	; 68
    2926:	50 07       	cpc	r21, r16
    2928:	03 ea       	ldi	r16, 0xA3	; 163
    292a:	60 07       	cpc	r22, r16
    292c:	71 05       	cpc	r23, r1
    292e:	30 f0       	brcs	.+12     	; 0x293c <rxSetFrequency+0x62>
				{
					vfo = *freq - RADIO_IF_FREQUENCY;
    2930:	40 5e       	subi	r20, 0xE0	; 224
    2932:	54 44       	sbci	r21, 0x44	; 68
    2934:	63 4a       	sbci	r22, 0xA3	; 163
    2936:	71 09       	sbc	r23, r1
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
				}
			}
			
			bandSet = BAND_80M;
    2938:	91 e0       	ldi	r25, 0x01	; 1
    293a:	63 c0       	rjmp	.+198    	; 0x2a02 <rxSetFrequency+0x128>
				{
					vfo = *freq - RADIO_IF_FREQUENCY;
				}
				else
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
    293c:	80 ee       	ldi	r24, 0xE0	; 224
    293e:	94 e4       	ldi	r25, 0x44	; 68
    2940:	a3 ea       	ldi	r26, 0xA3	; 163
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	8c 01       	movw	r16, r24
    2946:	9d 01       	movw	r18, r26
    2948:	04 1b       	sub	r16, r20
    294a:	15 0b       	sbc	r17, r21
    294c:	26 0b       	sbc	r18, r22
    294e:	37 0b       	sbc	r19, r23
    2950:	b9 01       	movw	r22, r18
    2952:	a8 01       	movw	r20, r16
				}
			}
			
			bandSet = BAND_80M;
    2954:	91 e0       	ldi	r25, 0x01	; 1
    2956:	55 c0       	rjmp	.+170    	; 0x2a02 <rxSetFrequency+0x128>
		}
		else if((*freq < RX_MAXIMUM_2M_FREQUENCY) && (*freq > RX_MINIMUM_2M_FREQUENCY))
    2958:	8a 01       	movw	r16, r20
    295a:	9b 01       	movw	r18, r22
    295c:	01 50       	subi	r16, 0x01	; 1
    295e:	14 44       	sbci	r17, 0x44	; 68
    2960:	25 49       	sbci	r18, 0x95	; 149
    2962:	38 40       	sbci	r19, 0x08	; 8
    2964:	0f 3f       	cpi	r16, 0xFF	; 255
    2966:	18 40       	sbci	r17, 0x08	; 8
    2968:	2d 43       	sbci	r18, 0x3D	; 61
    296a:	31 05       	cpc	r19, r1
    296c:	08 f0       	brcs	.+2      	; 0x2970 <rxSetFrequency+0x96>
    296e:	42 c0       	rjmp	.+132    	; 0x29f4 <rxSetFrequency+0x11a>
		{
			g_freq_2m = *freq;
    2970:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <g_freq_2m>
    2974:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <g_freq_2m+0x1>
    2978:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <g_freq_2m+0x2>
    297c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <g_freq_2m+0x3>

			if(g_vfo_configuration & VFO_2M_HIGH_80M_LOW)
    2980:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <g_vfo_configuration>
    2984:	80 ff       	sbrs	r24, 0
    2986:	06 c0       	rjmp	.+12     	; 0x2994 <rxSetFrequency+0xba>
			{
				vfo = RADIO_IF_FREQUENCY + *freq;
    2988:	40 52       	subi	r20, 0x20	; 32
    298a:	5b 4b       	sbci	r21, 0xBB	; 187
    298c:	6c 45       	sbci	r22, 0x5C	; 92
    298e:	7f 4f       	sbci	r23, 0xFF	; 255
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
				}
			}

			bandSet = BAND_2M;
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	37 c0       	rjmp	.+110    	; 0x2a02 <rxSetFrequency+0x128>
			{
				vfo = RADIO_IF_FREQUENCY + *freq;
			}
			else
			{
				if(*freq > RADIO_IF_FREQUENCY)
    2994:	41 3e       	cpi	r20, 0xE1	; 225
    2996:	f4 e4       	ldi	r31, 0x44	; 68
    2998:	5f 07       	cpc	r21, r31
    299a:	f3 ea       	ldi	r31, 0xA3	; 163
    299c:	6f 07       	cpc	r22, r31
    299e:	71 05       	cpc	r23, r1
    29a0:	30 f0       	brcs	.+12     	; 0x29ae <rxSetFrequency+0xd4>
				{
					vfo = *freq - RADIO_IF_FREQUENCY;
    29a2:	40 5e       	subi	r20, 0xE0	; 224
    29a4:	54 44       	sbci	r21, 0x44	; 68
    29a6:	63 4a       	sbci	r22, 0xA3	; 163
    29a8:	71 09       	sbc	r23, r1
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
				}
			}

			bandSet = BAND_2M;
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	2a c0       	rjmp	.+84     	; 0x2a02 <rxSetFrequency+0x128>
				{
					vfo = *freq - RADIO_IF_FREQUENCY;
				}
				else
				{
					vfo = RADIO_IF_FREQUENCY - *freq;
    29ae:	80 ee       	ldi	r24, 0xE0	; 224
    29b0:	94 e4       	ldi	r25, 0x44	; 68
    29b2:	a3 ea       	ldi	r26, 0xA3	; 163
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	8c 01       	movw	r16, r24
    29b8:	9d 01       	movw	r18, r26
    29ba:	04 1b       	sub	r16, r20
    29bc:	15 0b       	sbc	r17, r21
    29be:	26 0b       	sbc	r18, r22
    29c0:	37 0b       	sbc	r19, r23
    29c2:	b9 01       	movw	r22, r18
    29c4:	a8 01       	movw	r20, r16
				}
			}

			bandSet = BAND_2M;
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	1c c0       	rjmp	.+56     	; 0x2a02 <rxSetFrequency+0x128>
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
		}
		else if(g_activeBand == bandSet)
		{
			vfo -= g_cw_offset; // apply CW offset
    29ca:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_cw_offset>
    29ce:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_cw_offset+0x1>
    29d2:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <g_cw_offset+0x2>
    29d6:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <g_cw_offset+0x3>
			si5351_set_freq(vfo, RX_CLOCK_VFO);
    29da:	8a 01       	movw	r16, r20
    29dc:	9b 01       	movw	r18, r22
    29de:	08 1b       	sub	r16, r24
    29e0:	19 0b       	sbc	r17, r25
    29e2:	2a 0b       	sbc	r18, r26
    29e4:	3b 0b       	sbc	r19, r27
    29e6:	c9 01       	movw	r24, r18
    29e8:	b8 01       	movw	r22, r16
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	0e 94 16 23 	call	0x462c	; 0x462c <si5351_set_freq>
			activeBandSet = TRUE;
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	0c c0       	rjmp	.+24     	; 0x2a0c <rxSetFrequency+0x132>
			bandSet = BAND_2M;
		}

		if(bandSet == BAND_INVALID)
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
    29f4:	fc 01       	movw	r30, r24
    29f6:	10 82       	st	Z, r1
    29f8:	11 82       	std	Z+1, r1	; 0x01
    29fa:	12 82       	std	Z+2, r1	; 0x02
    29fc:	13 82       	std	Z+3, r1	; 0x03
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL rxSetFrequency(Frequency_Hz *freq)
	{
		BOOL activeBandSet = FALSE;
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	05 c0       	rjmp	.+10     	; 0x2a0c <rxSetFrequency+0x132>

		if(bandSet == BAND_INVALID)
		{
			*freq = FREQUENCY_NOT_SPECIFIED;
		}
		else if(g_activeBand == bandSet)
    2a02:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>
    2a06:	89 17       	cp	r24, r25
    2a08:	01 f3       	breq	.-64     	; 0x29ca <rxSetFrequency+0xf0>
 *       and the VFO configuration in effect. The VFO  frequency might be above or below the intended receive frequency, depending on the VFO
 *       configuration setting in effect for the radio band of the receive frequency.
 */
	BOOL rxSetFrequency(Frequency_Hz *freq)
	{
		BOOL activeBandSet = FALSE;
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
			si5351_set_freq(vfo, RX_CLOCK_VFO);
			activeBandSet = TRUE;
		}

		return( activeBandSet);
	}
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	08 95       	ret

00002a12 <rxGetFrequency>:

	Frequency_Hz rxGetFrequency(void)
	{
		if(g_rx_initialized)
    2a12:	80 91 95 07 	lds	r24, 0x0795	; 0x800795 <g_rx_initialized>
    2a16:	88 23       	and	r24, r24
    2a18:	d1 f0       	breq	.+52     	; 0x2a4e <rxGetFrequency+0x3c>
		{
			if(g_activeBand == BAND_2M)
    2a1a:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>
    2a1e:	81 11       	cpse	r24, r1
    2a20:	09 c0       	rjmp	.+18     	; 0x2a34 <rxGetFrequency+0x22>
			{
				return( g_freq_2m);
    2a22:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <g_freq_2m>
    2a26:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <g_freq_2m+0x1>
    2a2a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <g_freq_2m+0x2>
    2a2e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <g_freq_2m+0x3>
    2a32:	08 95       	ret
			}
			else if(g_activeBand == BAND_80M)
    2a34:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	69 f4       	brne	.+26     	; 0x2a56 <rxGetFrequency+0x44>
			{
				return( g_freq_80m);
    2a3c:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <g_freq_80m>
    2a40:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <g_freq_80m+0x1>
    2a44:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <g_freq_80m+0x2>
    2a48:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <g_freq_80m+0x3>
    2a4c:	08 95       	ret
			}
		}

		return( FREQUENCY_NOT_SPECIFIED);
    2a4e:	60 e0       	ldi	r22, 0x00	; 0
    2a50:	70 e0       	ldi	r23, 0x00	; 0
    2a52:	cb 01       	movw	r24, r22
    2a54:	08 95       	ret
    2a56:	60 e0       	ldi	r22, 0x00	; 0
    2a58:	70 e0       	ldi	r23, 0x00	; 0
    2a5a:	cb 01       	movw	r24, r22
	}
    2a5c:	08 95       	ret

00002a5e <rxSetVFOConfiguration>:

	void rxSetVFOConfiguration(RadioVFOConfig config)
	{
		g_vfo_configuration = config;
    2a5e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <g_vfo_configuration>
    2a62:	08 95       	ret

00002a64 <rxSetBand>:
	}

	void __attribute__((optimize("O0"))) rxSetBand(RadioBand band) 
	{
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	29 97       	sbiw	r28, 0x09	; 9
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	89 87       	std	Y+9, r24	; 0x09
		if(band == BAND_80M)
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	99 f4       	brne	.+38     	; 0x2aa6 <rxSetBand+0x42>
		{
			g_activeBand = band;
    2a80:	89 85       	ldd	r24, Y+9	; 0x09
    2a82:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <g_activeBand>
			Frequency_Hz f = g_freq_80m;
    2a86:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <g_freq_80m>
    2a8a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <g_freq_80m+0x1>
    2a8e:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <g_freq_80m+0x2>
    2a92:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <g_freq_80m+0x3>
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	ab 83       	std	Y+3, r26	; 0x03
    2a9c:	bc 83       	std	Y+4, r27	; 0x04
			rxSetFrequency(&f);
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	01 96       	adiw	r24, 0x01	; 1
    2aa2:	1b df       	rcall	.-458    	; 0x28da <rxSetFrequency>
		{
			g_activeBand = band;
			Frequency_Hz f = g_freq_2m;
			rxSetFrequency(&f);
		}
	}
    2aa4:	15 c0       	rjmp	.+42     	; 0x2ad0 <rxSetBand+0x6c>
		{
			g_activeBand = band;
			Frequency_Hz f = g_freq_80m;
			rxSetFrequency(&f);
		}
		else if(band == BAND_2M)
    2aa6:	89 85       	ldd	r24, Y+9	; 0x09
    2aa8:	88 23       	and	r24, r24
    2aaa:	91 f4       	brne	.+36     	; 0x2ad0 <rxSetBand+0x6c>
		{
			g_activeBand = band;
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <g_activeBand>
			Frequency_Hz f = g_freq_2m;
    2ab2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <g_freq_2m>
    2ab6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <g_freq_2m+0x1>
    2aba:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <g_freq_2m+0x2>
    2abe:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <g_freq_2m+0x3>
    2ac2:	8d 83       	std	Y+5, r24	; 0x05
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	af 83       	std	Y+7, r26	; 0x07
    2ac8:	b8 87       	std	Y+8, r27	; 0x08
			rxSetFrequency(&f);
    2aca:	ce 01       	movw	r24, r28
    2acc:	05 96       	adiw	r24, 0x05	; 5
    2ace:	05 df       	rcall	.-502    	; 0x28da <rxSetFrequency>
		}
	}
    2ad0:	00 00       	nop
    2ad2:	29 96       	adiw	r28, 0x09	; 9
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	08 95       	ret

00002ae4 <rxGetBand>:

	RadioBand rxGetBand(void)
	{
		return(g_activeBand);
    2ae4:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>
	}
    2ae8:	08 95       	ret

00002aea <init_receiver>:

	void init_receiver(void)
	{
		si5351_init(SI5351_CRYSTAL_LOAD_6PF, 0);
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	ba 01       	movw	r22, r20
    2af0:	80 e4       	ldi	r24, 0x40	; 64
    2af2:	0e 94 4d 21 	call	0x429a	; 0x429a <si5351_init>

//		g_freq_2m = DEFAULT_RX_2M_FREQUENCY;
//		g_freq_80m = DEFAULT_RX_80M_FREQUENCY;
//		g_activeBand = DEFAULT_RX_ACTIVE_BAND;
		
		initializeReceiverEEPROMVars();
    2af6:	34 d0       	rcall	.+104    	; 0x2b60 <initializeReceiverEEPROMVars>

		g_freq_bfo = RADIO_IF_FREQUENCY;
    2af8:	80 ee       	ldi	r24, 0xE0	; 224
    2afa:	94 e4       	ldi	r25, 0x44	; 68
    2afc:	a3 ea       	ldi	r26, 0xA3	; 163
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_freq_bfo>
    2b04:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_freq_bfo+0x1>
    2b08:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <g_freq_bfo+0x2>
    2b0c:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <g_freq_bfo+0x3>
		rxSetBand(g_activeBand);    /* also sets RX_CLOCK_VFO to VFO frequency */
    2b10:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>
    2b14:	a7 df       	rcall	.-178    	; 0x2a64 <rxSetBand>

		si5351_set_freq(g_freq_bfo, RX_CLOCK_BFO);
    2b16:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <g_freq_bfo>
    2b1a:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <g_freq_bfo+0x1>
    2b1e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_freq_bfo+0x2>
    2b22:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <g_freq_bfo+0x3>
    2b26:	42 e0       	ldi	r20, 0x02	; 2
    2b28:	0e 94 16 23 	call	0x462c	; 0x462c <si5351_set_freq>
		si5351_drive_strength(RX_CLOCK_BFO, SI5351_DRIVE_2MA);
    2b2c:	60 e0       	ldi	r22, 0x00	; 0
    2b2e:	82 e0       	ldi	r24, 0x02	; 2
    2b30:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <si5351_drive_strength>
		si5351_clock_enable(RX_CLOCK_BFO, TRUE);
    2b34:	61 e0       	ldi	r22, 0x01	; 1
    2b36:	82 e0       	ldi	r24, 0x02	; 2
    2b38:	0e 94 bb 21 	call	0x4376	; 0x4376 <si5351_clock_enable>
		
		si5351_drive_strength(RX_CLOCK_VFO, SI5351_DRIVE_2MA);
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <si5351_drive_strength>
		si5351_clock_enable(RX_CLOCK_VFO, TRUE);
    2b44:	61 e0       	ldi	r22, 0x01	; 1
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	0e 94 bb 21 	call	0x4376	; 0x4376 <si5351_clock_enable>
		
		/**
		 * Initialize port expander on receiver board */
		g_receiver_port_shadow = 0;
    2b4c:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <g_receiver_port_shadow>
//		mcp23017_writePort(g_receiver_port_shadow); /* initialize receiver port expander */
		
//		rxSetAttenuation(g_attenuation_setting);
		if(g_activeBand == BAND_2M)
    2b50:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>
		else
		{
//			rxSetPreamp(g_preamp_80m);
		}

		g_rx_initialized = TRUE;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	80 93 95 07 	sts	0x0795, r24	; 0x800795 <g_rx_initialized>
	}
	
	void store_receiver_values(void)
	{
		saveAllReceiverEEPROM();
    2b5a:	08 95       	ret

00002b5c <store_receiver_values>:
    2b5c:	c9 c0       	rjmp	.+402    	; 0x2cf0 <saveAllReceiverEEPROM>
    2b5e:	08 95       	ret

00002b60 <initializeReceiverEEPROMVars>:
	}


	void initializeReceiverEEPROMVars(void)
	{
		if(eeprom_read_byte(&ee_receiver_eeprom_initialization_flag) == EEPROM_INITIALIZED_FLAG)
    2b60:	86 e0       	ldi	r24, 0x06	; 6
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    2b68:	88 3a       	cpi	r24, 0xA8	; 168
    2b6a:	e9 f5       	brne	.+122    	; 0x2be6 <initializeReceiverEEPROMVars+0x86>
		{
			g_activeBand = eeprom_read_byte(&ee_active_band);
    2b6c:	8b e0       	ldi	r24, 0x0B	; 11
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    2b74:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <g_activeBand>
			g_freq_2m = eeprom_read_dword(&ee_active_2m_frequency);
    2b78:	8c e0       	ldi	r24, 0x0C	; 12
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 08 28 	call	0x5010	; 0x5010 <eeprom_read_dword>
    2b80:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <g_freq_2m>
    2b84:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <g_freq_2m+0x1>
    2b88:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <g_freq_2m+0x2>
    2b8c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <g_freq_2m+0x3>
			g_freq_80m = eeprom_read_dword(&ee_active_80m_frequency);
    2b90:	80 e1       	ldi	r24, 0x10	; 16
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 08 28 	call	0x5010	; 0x5010 <eeprom_read_dword>
    2b98:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <g_freq_80m>
    2b9c:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <g_freq_80m+0x1>
    2ba0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <g_freq_80m+0x2>
    2ba4:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <g_freq_80m+0x3>
			g_cw_offset = eeprom_read_dword(&ee_cw_offset_frequency);
    2ba8:	84 e1       	ldi	r24, 0x14	; 20
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 08 28 	call	0x5010	; 0x5010 <eeprom_read_dword>
    2bb0:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <g_cw_offset>
    2bb4:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <g_cw_offset+0x1>
    2bb8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_cw_offset+0x2>
    2bbc:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_cw_offset+0x3>
			g_preamp_80m = eeprom_read_byte(&ee_preamp_80m);
    2bc0:	88 e1       	ldi	r24, 0x18	; 24
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    2bc8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_preamp_80m>
			g_preamp_2m = eeprom_read_byte(&ee_preamp_2m);
    2bcc:	89 e1       	ldi	r24, 0x19	; 25
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    2bd4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_preamp_2m>
			g_attenuation_setting = eeprom_read_byte(&ee_attenuation_setting);
    2bd8:	8a e1       	ldi	r24, 0x1A	; 26
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    2be0:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <g_attenuation_setting>
    2be4:	08 95       	ret
		}
		else
		{
			eeprom_write_dword(&ee_receiver_2m_mem1_freq, EEPROM_2M_MEM1_DEFAULT);
    2be6:	40 e9       	ldi	r20, 0x90	; 144
    2be8:	54 e1       	ldi	r21, 0x14	; 20
    2bea:	69 e9       	ldi	r22, 0x99	; 153
    2bec:	78 e0       	ldi	r23, 0x08	; 8
    2bee:	8b e1       	ldi	r24, 0x1B	; 27
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_2m_mem2_freq, EEPROM_2M_MEM2_DEFAULT);
    2bf6:	40 ee       	ldi	r20, 0xE0	; 224
    2bf8:	57 ed       	ldi	r21, 0xD7	; 215
    2bfa:	69 e9       	ldi	r22, 0x99	; 153
    2bfc:	78 e0       	ldi	r23, 0x08	; 8
    2bfe:	8f e1       	ldi	r24, 0x1F	; 31
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_2m_mem3_freq, EEPROM_2M_MEM3_DEFAULT);
    2c06:	40 e3       	ldi	r20, 0x30	; 48
    2c08:	5b e9       	ldi	r21, 0x9B	; 155
    2c0a:	6a e9       	ldi	r22, 0x9A	; 154
    2c0c:	78 e0       	ldi	r23, 0x08	; 8
    2c0e:	83 e2       	ldi	r24, 0x23	; 35
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_2m_mem4_freq, EEPROM_2M_MEM4_DEFAULT);
    2c16:	40 e8       	ldi	r20, 0x80	; 128
    2c18:	5e e5       	ldi	r21, 0x5E	; 94
    2c1a:	6b e9       	ldi	r22, 0x9B	; 155
    2c1c:	78 e0       	ldi	r23, 0x08	; 8
    2c1e:	87 e2       	ldi	r24, 0x27	; 39
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_2m_mem5_freq, EEPROM_2M_MEM5_DEFAULT);
    2c26:	40 ed       	ldi	r20, 0xD0	; 208
    2c28:	51 e2       	ldi	r21, 0x21	; 33
    2c2a:	6c e9       	ldi	r22, 0x9C	; 156
    2c2c:	78 e0       	ldi	r23, 0x08	; 8
    2c2e:	8b e2       	ldi	r24, 0x2B	; 43
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem1_freq, EEPROM_80M_MEM1_DEFAULT);
    2c36:	4c e6       	ldi	r20, 0x6C	; 108
    2c38:	5e e9       	ldi	r21, 0x9E	; 158
    2c3a:	66 e3       	ldi	r22, 0x36	; 54
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	8f e2       	ldi	r24, 0x2F	; 47
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem2_freq, EEPROM_80M_MEM2_DEFAULT);
    2c46:	40 e4       	ldi	r20, 0x40	; 64
    2c48:	52 e5       	ldi	r21, 0x52	; 82
    2c4a:	66 e3       	ldi	r22, 0x36	; 54
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	83 e3       	ldi	r24, 0x33	; 51
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem3_freq, EEPROM_80M_MEM3_DEFAULT);
    2c56:	48 ec       	ldi	r20, 0xC8	; 200
    2c58:	55 e6       	ldi	r21, 0x65	; 101
    2c5a:	66 e3       	ldi	r22, 0x36	; 54
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	87 e3       	ldi	r24, 0x37	; 55
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem4_freq, EEPROM_80M_MEM4_DEFAULT);
    2c66:	40 e5       	ldi	r20, 0x50	; 80
    2c68:	59 e7       	ldi	r21, 0x79	; 121
    2c6a:	66 e3       	ldi	r22, 0x36	; 54
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	8b e3       	ldi	r24, 0x3B	; 59
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_dword(&ee_receiver_80m_mem5_freq, EEPROM_80M_MEM5_DEFAULT);
    2c76:	48 ed       	ldi	r20, 0xD8	; 216
    2c78:	5c e8       	ldi	r21, 0x8C	; 140
    2c7a:	66 e3       	ldi	r22, 0x36	; 54
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	8f e3       	ldi	r24, 0x3F	; 63
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
			eeprom_write_byte(&ee_receiver_eeprom_initialization_flag, EEPROM_INITIALIZED_FLAG);
    2c86:	68 ea       	ldi	r22, 0xA8	; 168
    2c88:	86 e0       	ldi	r24, 0x06	; 6
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 0d 28 	call	0x501a	; 0x501a <eeprom_write_byte>

			g_activeBand = EEPROM_BAND_DEFAULT;
    2c90:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <g_activeBand>
			g_freq_2m = DEFAULT_RX_2M_FREQUENCY;
    2c94:	80 e3       	ldi	r24, 0x30	; 48
    2c96:	99 e2       	ldi	r25, 0x29	; 41
    2c98:	ad ea       	ldi	r26, 0xAD	; 173
    2c9a:	b8 e0       	ldi	r27, 0x08	; 8
    2c9c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <g_freq_2m>
    2ca0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <g_freq_2m+0x1>
    2ca4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <g_freq_2m+0x2>
    2ca8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <g_freq_2m+0x3>
			g_freq_80m = DEFAULT_RX_80M_FREQUENCY;
    2cac:	80 e3       	ldi	r24, 0x30	; 48
    2cae:	9b e2       	ldi	r25, 0x2B	; 43
    2cb0:	a6 e3       	ldi	r26, 0x36	; 54
    2cb2:	b0 e0       	ldi	r27, 0x00	; 0
    2cb4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <g_freq_80m>
    2cb8:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <g_freq_80m+0x1>
    2cbc:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <g_freq_80m+0x2>
    2cc0:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <g_freq_80m+0x3>
			g_cw_offset = DEFAULT_RX_CW_OFFSET_FREQUENCY;
    2cc4:	84 ef       	ldi	r24, 0xF4	; 244
    2cc6:	91 e0       	ldi	r25, 0x01	; 1
    2cc8:	a0 e0       	ldi	r26, 0x00	; 0
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_cw_offset>
    2cd0:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_cw_offset+0x1>
    2cd4:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <g_cw_offset+0x2>
    2cd8:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <g_cw_offset+0x3>
			g_preamp_80m = DEFAULT_PREAMP_80M;
    2cdc:	8f ef       	ldi	r24, 0xFF	; 255
    2cde:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_preamp_80m>
			g_preamp_2m = DEFAULT_PREAMP_2M;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_preamp_2m>
			g_attenuation_setting = DEFAULT_ATTENUATION;
    2ce8:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <g_attenuation_setting>

			saveAllReceiverEEPROM();
    2cec:	01 c0       	rjmp	.+2      	; 0x2cf0 <saveAllReceiverEEPROM>
		}
	}

	void saveAllReceiverEEPROM(void)
	{
		storeEEbyteIfChanged(&ee_active_band, g_activeBand);
    2cee:	08 95       	ret

00002cf0 <saveAllReceiverEEPROM>:
    2cf0:	60 91 97 07 	lds	r22, 0x0797	; 0x800797 <g_activeBand>
    2cf4:	8b e0       	ldi	r24, 0x0B	; 11
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0c d1       	rcall	.+536    	; 0x2f12 <storeEEbyteIfChanged>
		storeEEdwordIfChanged((uint32_t*)&ee_active_2m_frequency, g_freq_2m);
    2cfa:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <g_freq_2m>
    2cfe:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <g_freq_2m+0x1>
    2d02:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <g_freq_2m+0x2>
    2d06:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <g_freq_2m+0x3>
    2d0a:	8c e0       	ldi	r24, 0x0C	; 12
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	12 d1       	rcall	.+548    	; 0x2f34 <storeEEdwordIfChanged>
		storeEEdwordIfChanged((uint32_t*)&ee_active_80m_frequency, g_freq_80m);
    2d10:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <g_freq_80m>
    2d14:	50 91 23 01 	lds	r21, 0x0123	; 0x800123 <g_freq_80m+0x1>
    2d18:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <g_freq_80m+0x2>
    2d1c:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <g_freq_80m+0x3>
    2d20:	80 e1       	ldi	r24, 0x10	; 16
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	07 d1       	rcall	.+526    	; 0x2f34 <storeEEdwordIfChanged>
		storeEEdwordIfChanged((uint32_t*)&ee_cw_offset_frequency, g_cw_offset);
    2d26:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <g_cw_offset>
    2d2a:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <g_cw_offset+0x1>
    2d2e:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <g_cw_offset+0x2>
    2d32:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <g_cw_offset+0x3>
    2d36:	84 e1       	ldi	r24, 0x14	; 20
		storeEEdwordIfChanged((uint32_t*)&ee_si5351_ref_correction, si5351_get_correction());
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	fc d0       	rcall	.+504    	; 0x2f34 <storeEEdwordIfChanged>
    2d3c:	36 d7       	rcall	.+3692   	; 0x3baa <si5351_get_correction>
    2d3e:	ab 01       	movw	r20, r22
    2d40:	bc 01       	movw	r22, r24
    2d42:	87 e0       	ldi	r24, 0x07	; 7
		storeEEbyteIfChanged(&ee_preamp_80m, g_preamp_80m);
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	f6 d0       	rcall	.+492    	; 0x2f34 <storeEEdwordIfChanged>
    2d48:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <g_preamp_80m>
    2d4c:	88 e1       	ldi	r24, 0x18	; 24
		storeEEbyteIfChanged(&ee_preamp_2m, g_preamp_2m);
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	e0 d0       	rcall	.+448    	; 0x2f12 <storeEEbyteIfChanged>
    2d52:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <g_preamp_2m>
    2d56:	89 e1       	ldi	r24, 0x19	; 25
    2d58:	90 e0       	ldi	r25, 0x00	; 0
		storeEEbyteIfChanged(&ee_attenuation_setting, g_attenuation_setting);
    2d5a:	db d0       	rcall	.+438    	; 0x2f12 <storeEEbyteIfChanged>
    2d5c:	60 91 96 07 	lds	r22, 0x0796	; 0x800796 <g_attenuation_setting>
    2d60:	8a e1       	ldi	r24, 0x1A	; 26
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	d6 c0       	rjmp	.+428    	; 0x2f12 <storeEEbyteIfChanged>
    2d66:	08 95       	ret

00002d68 <rxSetCWOffset>:

BOOL rxSetCWOffset(Frequency_Hz offset)
{
	BOOL success = FALSE;
	
	if((offset >= 0) && (offset <= MAX_CW_OFFSET))
    2d68:	61 3d       	cpi	r22, 0xD1	; 209
    2d6a:	27 e0       	ldi	r18, 0x07	; 7
    2d6c:	72 07       	cpc	r23, r18
    2d6e:	81 05       	cpc	r24, r1
    2d70:	91 05       	cpc	r25, r1
    2d72:	78 f4       	brcc	.+30     	; 0x2d92 <rxSetCWOffset+0x2a>
    2d74:	dc 01       	movw	r26, r24
	{
		g_cw_offset = offset;
    2d76:	cb 01       	movw	r24, r22
    2d78:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_cw_offset>
    2d7c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_cw_offset+0x1>
    2d80:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <g_cw_offset+0x2>
    2d84:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <g_cw_offset+0x3>
		rxSetBand(g_activeBand); // apply offset to currect frequency setting
    2d88:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>
    2d8c:	6b de       	rcall	.-810    	; 0x2a64 <rxSetBand>
		success = TRUE;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	08 95       	ret

#endif  /*#ifdef INCLUDE_RECEIVER_SUPPORT */

BOOL rxSetCWOffset(Frequency_Hz offset)
{
	BOOL success = FALSE;
    2d92:	80 e0       	ldi	r24, 0x00	; 0
		rxSetBand(g_activeBand); // apply offset to currect frequency setting
		success = TRUE;
	}
	
	return success;
}
    2d94:	08 95       	ret

00002d96 <rxGetCWOffset>:

Frequency_Hz rxGetCWOffset(void)
{
	return g_cw_offset;
    2d96:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <g_cw_offset>
    2d9a:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <g_cw_offset+0x1>
    2d9e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_cw_offset+0x2>
    2da2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_cw_offset+0x3>
}
    2da6:	08 95       	ret

00002da8 <bandForFrequency>:

RadioBand bandForFrequency(Frequency_Hz freq)
{
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
	RadioBand result = BAND_INVALID;

	if((freq >= RX_MINIMUM_2M_FREQUENCY) && (freq <= RX_MAXIMUM_2M_FREQUENCY))
    2dac:	8b 01       	movw	r16, r22
    2dae:	9c 01       	movw	r18, r24
    2db0:	14 54       	subi	r17, 0x44	; 68
    2db2:	25 49       	sbci	r18, 0x95	; 149
    2db4:	38 40       	sbci	r19, 0x08	; 8
    2db6:	01 30       	cpi	r16, 0x01	; 1
    2db8:	19 40       	sbci	r17, 0x09	; 9
    2dba:	2d 43       	sbci	r18, 0x3D	; 61
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	68 f0       	brcs	.+26     	; 0x2dda <bandForFrequency+0x32>
	{
		result = BAND_2M;
	}
	else if((freq >= RX_MINIMUM_80M_FREQUENCY) && (freq <= RX_MAXIMUM_80M_FREQUENCY))
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	80 5e       	subi	r24, 0xE0	; 224
    2dc6:	97 46       	sbci	r25, 0x67	; 103
    2dc8:	a5 43       	sbci	r26, 0x35	; 53
    2dca:	b1 09       	sbc	r27, r1
    2dcc:	81 32       	cpi	r24, 0x21	; 33
    2dce:	91 4a       	sbci	r25, 0xA1	; 161
    2dd0:	a7 40       	sbci	r26, 0x07	; 7
    2dd2:	b1 05       	cpc	r27, r1
    2dd4:	20 f4       	brcc	.+8      	; 0x2dde <bandForFrequency+0x36>
	{
		result = BAND_80M;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <bandForFrequency+0x38>
{
	RadioBand result = BAND_INVALID;

	if((freq >= RX_MINIMUM_2M_FREQUENCY) && (freq <= RX_MAXIMUM_2M_FREQUENCY))
	{
		result = BAND_2M;
    2dda:	80 e0       	ldi	r24, 0x00	; 0
	return g_cw_offset;
}

RadioBand bandForFrequency(Frequency_Hz freq)
{
	RadioBand result = BAND_INVALID;
    2ddc:	01 c0       	rjmp	.+2      	; 0x2de0 <bandForFrequency+0x38>
	{
		result = BAND_80M;
	}

	return(result);
}
    2dde:	82 e0       	ldi	r24, 0x02	; 2
    2de0:	1f 91       	pop	r17
    2de2:	0f 91       	pop	r16

uint8_t rxSetAttenuation(uint8_t att)
{
    2de4:	08 95       	ret

00002de6 <rxSetAttenuation>:
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	c8 2f       	mov	r28, r24
    2dec:	d0 e0       	ldi	r29, 0x00	; 0
    2dee:	c5 36       	cpi	r28, 0x65	; 101
    2df0:	d1 05       	cpc	r29, r1
    2df2:	14 f0       	brlt	.+4      	; 0x2df8 <rxSetAttenuation+0x12>
    2df4:	c4 e6       	ldi	r28, 0x64	; 100
	uint16_t attenuation = CLAMP(0, att, 100); 
	max5478_set_dualpotentiometer_wipers(potValFromAtten(attenuation));
    2df6:	d0 e0       	ldi	r29, 0x00	; 0
    2df8:	ce 01       	movw	r24, r28
    2dfa:	18 d0       	rcall	.+48     	; 0x2e2c <potValFromAtten>
    2dfc:	39 d6       	rcall	.+3186   	; 0x3a70 <max5478_set_dualpotentiometer_wipers>
    2dfe:	c0 93 96 07 	sts	0x0796, r28	; 0x800796 <g_attenuation_setting>
	g_attenuation_setting = attenuation;
    2e02:	cd 2b       	or	r28, r29
						
	if(attenuation)
    2e04:	31 f0       	breq	.+12     	; 0x2e12 <rxSetAttenuation+0x2c>
    2e06:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <g_receiver_port_shadow>
	{
		g_receiver_port_shadow |= 0b00000100;
    2e0a:	84 60       	ori	r24, 0x04	; 4
    2e0c:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <g_receiver_port_shadow>
    2e10:	05 c0       	rjmp	.+10     	; 0x2e1c <rxSetAttenuation+0x36>
    2e12:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <g_receiver_port_shadow>
//		mcp23017_writePort(g_receiver_port_shadow); /* set receiver port expander */
	}
	else
	{
		g_receiver_port_shadow &= 0b11111011;
    2e16:	8b 7f       	andi	r24, 0xFB	; 251
    2e18:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <g_receiver_port_shadow>
    2e1c:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <g_attenuation_setting>
//		mcp23017_writePort(g_receiver_port_shadow); /* set receiver port expander */
	}
	
	return g_attenuation_setting;
    2e20:	df 91       	pop	r29
}
    2e22:	cf 91       	pop	r28
    2e24:	08 95       	ret

00002e26 <rxGetAttenuation>:
    2e26:	80 91 96 07 	lds	r24, 0x0796	; 0x800796 <g_attenuation_setting>

uint8_t rxGetAttenuation(void)
{
	return g_attenuation_setting;
    2e2a:	08 95       	ret

00002e2c <potValFromAtten>:
}
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
uint16_t potValFromAtten(uint16_t atten)
{
	uint16_t valLow = 0x00FF;
	uint16_t valHigh = 0;
		
	if(atten)
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <potValFromAtten+0x6>
    2e30:	41 c0       	rjmp	.+130    	; 0x2eb4 <potValFromAtten+0x88>
    2e32:	87 31       	cpi	r24, 0x17	; 23
	{							
		if(atten < 23) // 0xFFF -> 0x23FF
    2e34:	91 05       	cpc	r25, r1
    2e36:	90 f4       	brcc	.+36     	; 0x2e5c <potValFromAtten+0x30>
    2e38:	40 e0       	ldi	r20, 0x00	; 0
		{
			valHigh = 0xFF00 - (atten * 0x0A00);
    2e3a:	5a e0       	ldi	r21, 0x0A	; 10
    2e3c:	84 9f       	mul	r24, r20
    2e3e:	90 01       	movw	r18, r0
    2e40:	85 9f       	mul	r24, r21
    2e42:	30 0d       	add	r19, r0
    2e44:	94 9f       	mul	r25, r20
    2e46:	30 0d       	add	r19, r0
    2e48:	11 24       	eor	r1, r1
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	9f ef       	ldi	r25, 0xFF	; 255
    2e4e:	ac 01       	movw	r20, r24
    2e50:	42 1b       	sub	r20, r18
    2e52:	53 0b       	sbc	r21, r19
    2e54:	9a 01       	movw	r18, r20
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
	return g_attenuation_setting;
}
	
uint16_t potValFromAtten(uint16_t atten)
{
	uint16_t valLow = 0x00FF;
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	29 c0       	rjmp	.+82     	; 0x2eae <potValFromAtten+0x82>
    2e5c:	89 32       	cpi	r24, 0x29	; 41
	{							
		if(atten < 23) // 0xFFF -> 0x23FF
		{
			valHigh = 0xFF00 - (atten * 0x0A00);
		}
		else if(atten < 41) // 0x23FF -> 0x00FF
    2e5e:	91 05       	cpc	r25, r1
    2e60:	78 f4       	brcc	.+30     	; 0x2e80 <potValFromAtten+0x54>
    2e62:	87 59       	subi	r24, 0x97	; 151
		{
			valHigh = 0x2300 - (0x0200 * (atten - 23));
    2e64:	9f 4f       	sbci	r25, 0xFF	; 255
    2e66:	9c 01       	movw	r18, r24
    2e68:	32 2f       	mov	r19, r18
    2e6a:	22 27       	eor	r18, r18
    2e6c:	33 0f       	add	r19, r19
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	93 e2       	ldi	r25, 0x23	; 35
    2e72:	ac 01       	movw	r20, r24
    2e74:	42 1b       	sub	r20, r18
    2e76:	53 0b       	sbc	r21, r19
    2e78:	9a 01       	movw	r18, r20
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
	return g_attenuation_setting;
}
	
uint16_t potValFromAtten(uint16_t atten)
{
	uint16_t valLow = 0x00FF;
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	17 c0       	rjmp	.+46     	; 0x2eae <potValFromAtten+0x82>
    2e80:	41 e0       	ldi	r20, 0x01	; 1
		{
			valHigh = 0x2300 - (0x0200 * (atten - 23));
		}
		else // 0x00FF -> 0x0000
		{
			valLow = (255 * (100 - atten)) / 59;
    2e82:	48 9f       	mul	r20, r24
    2e84:	90 01       	movw	r18, r0
    2e86:	49 9f       	mul	r20, r25
    2e88:	30 0d       	add	r19, r0
    2e8a:	38 1b       	sub	r19, r24
    2e8c:	11 24       	eor	r1, r1
    2e8e:	24 56       	subi	r18, 0x64	; 100
    2e90:	3c 49       	sbci	r19, 0x9C	; 156
    2e92:	a9 ed       	ldi	r26, 0xD9	; 217
    2e94:	ba e8       	ldi	r27, 0x8A	; 138
    2e96:	0e 94 8a 24 	call	0x4914	; 0x4914 <__umulhisi3>
    2e9a:	96 95       	lsr	r25
    2e9c:	87 95       	ror	r24
    2e9e:	92 95       	swap	r25
    2ea0:	82 95       	swap	r24
    2ea2:	8f 70       	andi	r24, 0x0F	; 15
    2ea4:	89 27       	eor	r24, r25
    2ea6:	9f 70       	andi	r25, 0x0F	; 15
    2ea8:	89 27       	eor	r24, r25
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
}
	
uint16_t potValFromAtten(uint16_t atten)
{
	uint16_t valLow = 0x00FF;
	uint16_t valHigh = 0;
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	82 0f       	add	r24, r18
		else // 0x00FF -> 0x0000
		{
			valLow = (255 * (100 - atten)) / 59;
		}
			
		valHigh += valLow;
    2eb0:	93 1f       	adc	r25, r19
    2eb2:	08 95       	ret
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
}
	
uint16_t potValFromAtten(uint16_t atten)
{
	uint16_t valLow = 0x00FF;
	uint16_t valHigh = 0;
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	08 95       	ret

00002eba <rxGetPreamp>:
			
		valHigh += valLow;
	}
		
	return valHigh;
}
    2eba:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>

uint8_t rxGetPreamp(void)
{
	if(g_activeBand == BAND_2M)
    2ebe:	81 11       	cpse	r24, r1
    2ec0:	03 c0       	rjmp	.+6      	; 0x2ec8 <rxGetPreamp+0xe>
    2ec2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <g_preamp_2m>
	{
		return g_preamp_2m;
    2ec6:	08 95       	ret
    2ec8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_preamp_80m>
	}
	else
	{
		return g_preamp_80m;
    2ecc:	08 95       	ret

00002ece <rxSetPreamp>:
	}
}
    2ece:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <g_activeBand>

uint8_t rxSetPreamp(uint8_t setting)
{
	uint8_t result;
	
	if(g_activeBand == BAND_2M)
    2ed2:	91 11       	cpse	r25, r1
    2ed4:	0d c0       	rjmp	.+26     	; 0x2ef0 <rxSetPreamp+0x22>
    2ed6:	81 11       	cpse	r24, r1
	{
		if(setting == 0)
    2ed8:	06 c0       	rjmp	.+12     	; 0x2ee6 <rxSetPreamp+0x18>
    2eda:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <g_receiver_port_shadow>
		{
			g_receiver_port_shadow &= 0b11011111;
    2ede:	8f 7d       	andi	r24, 0xDF	; 223
    2ee0:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <g_receiver_port_shadow>
    2ee4:	05 c0       	rjmp	.+10     	; 0x2ef0 <rxSetPreamp+0x22>
    2ee6:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <g_receiver_port_shadow>
//			mcp23017_writePort(g_receiver_port_shadow); /* set receiver port expander */
		}
		else // if(setting == 1)
		{
			g_receiver_port_shadow |= 0b00100000;
    2eea:	80 62       	ori	r24, 0x20	; 32
    2eec:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <g_receiver_port_shadow>
    2ef0:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <g_activeBand>
	else // if g_activeBand == BAND_80M
	{
//		dac081c_set_dac(setting);
	}
					
	if(g_activeBand == BAND_2M)
    2ef4:	81 11       	cpse	r24, r1
    2ef6:	0a c0       	rjmp	.+20     	; 0x2f0c <rxSetPreamp+0x3e>
    2ef8:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <g_receiver_port_shadow>
	{
		g_preamp_2m = (g_receiver_port_shadow & 0b00100000) >> 5;
    2efc:	85 fb       	bst	r24, 5
    2efe:	88 27       	eor	r24, r24
    2f00:	80 f9       	bld	r24, 0
    2f02:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <g_preamp_2m>
    2f06:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <g_preamp_2m>
		result = g_preamp_2m;
    2f0a:	08 95       	ret
    2f0c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_preamp_80m>
	}
	else
	{
//		g_preamp_80m = dac081c_read_dac();
		result = g_preamp_80m;
    2f10:	08 95       	ret

00002f12 <storeEEbyteIfChanged>:
 *  EEPROM Utility Functions
 ************************************************************************************************/


void storeEEbyteIfChanged(uint8_t* ee_var, uint8_t val)
{
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	ec 01       	movw	r28, r24
    2f1a:	16 2f       	mov	r17, r22
	if(eeprom_read_byte((uint8_t*)ee_var) != val)
    2f1c:	0e 94 00 28 	call	0x5000	; 0x5000 <eeprom_read_byte>
    2f20:	81 17       	cp	r24, r17
    2f22:	21 f0       	breq	.+8      	; 0x2f2c <storeEEbyteIfChanged+0x1a>
	{
		eeprom_write_byte(ee_var, val);
    2f24:	61 2f       	mov	r22, r17
    2f26:	ce 01       	movw	r24, r28
    2f28:	0e 94 0d 28 	call	0x501a	; 0x501a <eeprom_write_byte>
	}
}
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	08 95       	ret

00002f34 <storeEEdwordIfChanged>:

void storeEEdwordIfChanged(uint32_t* ee_var, uint32_t val)
{
    2f34:	cf 92       	push	r12
    2f36:	df 92       	push	r13
    2f38:	ef 92       	push	r14
    2f3a:	ff 92       	push	r15
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	ec 01       	movw	r28, r24
    2f42:	6a 01       	movw	r12, r20
    2f44:	7b 01       	movw	r14, r22
	if(eeprom_read_dword(ee_var) != val)
    2f46:	0e 94 08 28 	call	0x5010	; 0x5010 <eeprom_read_dword>
    2f4a:	6c 15       	cp	r22, r12
    2f4c:	7d 05       	cpc	r23, r13
    2f4e:	8e 05       	cpc	r24, r14
    2f50:	9f 05       	cpc	r25, r15
    2f52:	29 f0       	breq	.+10     	; 0x2f5e <storeEEdwordIfChanged+0x2a>
	{
		eeprom_write_dword(ee_var, val);
    2f54:	b7 01       	movw	r22, r14
    2f56:	a6 01       	movw	r20, r12
    2f58:	ce 01       	movw	r24, r28
    2f5a:	0e 94 1b 28 	call	0x5036	; 0x5036 <eeprom_write_dword>
	}
}
    2f5e:	df 91       	pop	r29
    2f60:	cf 91       	pop	r28
    2f62:	ff 90       	pop	r15
    2f64:	ef 90       	pop	r14
    2f66:	df 90       	pop	r13
    2f68:	cf 90       	pop	r12
    2f6a:	08 95       	ret

00002f6c <timeValToString>:
/***********************************************************************************************
 *  Print Formatting Utility Functions
 ************************************************************************************************/

void timeValToString(char *str, int32_t timeVal, TimeFormat tf)
{
    2f6c:	4f 92       	push	r4
    2f6e:	5f 92       	push	r5
    2f70:	6f 92       	push	r6
    2f72:	7f 92       	push	r7
    2f74:	8f 92       	push	r8
    2f76:	9f 92       	push	r9
    2f78:	af 92       	push	r10
    2f7a:	bf 92       	push	r11
    2f7c:	cf 92       	push	r12
    2f7e:	df 92       	push	r13
    2f80:	ef 92       	push	r14
    2f82:	ff 92       	push	r15
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
    2f8c:	ec 01       	movw	r28, r24
    2f8e:	6a 01       	movw	r12, r20
    2f90:	7b 01       	movw	r14, r22
    2f92:	62 2e       	mov	r6, r18
	int32_t temp;
	uint8_t hold;
	uint8_t index = 7;
	BOOL done = FALSE;

	if(tf == Minutes_Seconds_Elapsed)
    2f94:	83 e0       	ldi	r24, 0x03	; 3
    2f96:	28 13       	cpse	r18, r24
    2f98:	7e c0       	rjmp	.+252    	; 0x3096 <timeValToString+0x12a>
	{
		if(timeVal < 0)
    2f9a:	77 23       	and	r23, r23
    2f9c:	3c f4       	brge	.+14     	; 0x2fac <timeValToString+0x40>
		{
			timeVal += 86400L;  /* account for midnight rollover */
    2f9e:	90 e8       	ldi	r25, 0x80	; 128
    2fa0:	c9 0e       	add	r12, r25
    2fa2:	91 e5       	ldi	r25, 0x51	; 81
    2fa4:	d9 1e       	adc	r13, r25
    2fa6:	91 e0       	ldi	r25, 0x01	; 1
    2fa8:	e9 1e       	adc	r14, r25
    2faa:	f1 1c       	adc	r15, r1

		}
		if(timeVal < 6000)
    2fac:	e0 e7       	ldi	r30, 0x70	; 112
    2fae:	ce 16       	cp	r12, r30
    2fb0:	e7 e1       	ldi	r30, 0x17	; 23
    2fb2:	de 06       	cpc	r13, r30
    2fb4:	e1 04       	cpc	r14, r1
    2fb6:	f1 04       	cpc	r15, r1
    2fb8:	2c f4       	brge	.+10     	; 0x2fc4 <timeValToString+0x58>
		{
			str[5] = '\0';
    2fba:	1d 82       	std	Y+5, r1	; 0x05
			index = 4;
    2fbc:	68 94       	set
    2fbe:	77 24       	eor	r7, r7
    2fc0:	72 f8       	bld	r7, 2
    2fc2:	ce c0       	rjmp	.+412    	; 0x3160 <timeValToString+0x1f4>
		}
		else
		{
			if(timeVal < 60000)
    2fc4:	f0 e6       	ldi	r31, 0x60	; 96
    2fc6:	cf 16       	cp	r12, r31
    2fc8:	fa ee       	ldi	r31, 0xEA	; 234
    2fca:	df 06       	cpc	r13, r31
    2fcc:	e1 04       	cpc	r14, r1
    2fce:	f1 04       	cpc	r15, r1
    2fd0:	ec f4       	brge	.+58     	; 0x300c <timeValToString+0xa0>
			{
				sprintf(str, ">%ldm", timeVal / 60);
    2fd2:	c7 01       	movw	r24, r14
    2fd4:	b6 01       	movw	r22, r12
    2fd6:	2c e3       	ldi	r18, 0x3C	; 60
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    2fe2:	5f 93       	push	r21
    2fe4:	4f 93       	push	r20
    2fe6:	3f 93       	push	r19
    2fe8:	2f 93       	push	r18
    2fea:	87 ef       	ldi	r24, 0xF7	; 247
    2fec:	94 e0       	ldi	r25, 0x04	; 4
    2fee:	9f 93       	push	r25
    2ff0:	8f 93       	push	r24
    2ff2:	df 93       	push	r29
    2ff4:	cf 93       	push	r28
    2ff6:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
    2ffa:	ed b7       	in	r30, 0x3d	; 61
    2ffc:	fe b7       	in	r31, 0x3e	; 62
    2ffe:	38 96       	adiw	r30, 0x08	; 8
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	fe bf       	out	0x3e, r31	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	ed bf       	out	0x3d, r30	; 61
    300a:	fb c0       	rjmp	.+502    	; 0x3202 <timeValToString+0x296>
			}
			else
			{
				sprintf(str, "%ld.%1ldh", timeVal / 3600, (10 * (timeVal % 3600) / 3600));
    300c:	0f 2e       	mov	r0, r31
    300e:	f0 e1       	ldi	r31, 0x10	; 16
    3010:	8f 2e       	mov	r8, r31
    3012:	fe e0       	ldi	r31, 0x0E	; 14
    3014:	9f 2e       	mov	r9, r31
    3016:	a1 2c       	mov	r10, r1
    3018:	b1 2c       	mov	r11, r1
    301a:	f0 2d       	mov	r31, r0
    301c:	c7 01       	movw	r24, r14
    301e:	b6 01       	movw	r22, r12
    3020:	a5 01       	movw	r20, r10
    3022:	94 01       	movw	r18, r8
    3024:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    3028:	12 2f       	mov	r17, r18
    302a:	03 2f       	mov	r16, r19
    302c:	f4 2e       	mov	r15, r20
    302e:	e5 2e       	mov	r14, r21
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	aa 1f       	adc	r26, r26
    303a:	bb 1f       	adc	r27, r27
    303c:	2c 01       	movw	r4, r24
    303e:	3d 01       	movw	r6, r26
    3040:	44 0c       	add	r4, r4
    3042:	55 1c       	adc	r5, r5
    3044:	66 1c       	adc	r6, r6
    3046:	77 1c       	adc	r7, r7
    3048:	44 0c       	add	r4, r4
    304a:	55 1c       	adc	r5, r5
    304c:	66 1c       	adc	r6, r6
    304e:	77 1c       	adc	r7, r7
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	64 0d       	add	r22, r4
    3056:	75 1d       	adc	r23, r5
    3058:	86 1d       	adc	r24, r6
    305a:	97 1d       	adc	r25, r7
    305c:	a5 01       	movw	r20, r10
    305e:	94 01       	movw	r18, r8
    3060:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    3064:	5f 93       	push	r21
    3066:	4f 93       	push	r20
    3068:	3f 93       	push	r19
    306a:	2f 93       	push	r18
    306c:	ef 92       	push	r14
    306e:	ff 92       	push	r15
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	8d ef       	ldi	r24, 0xFD	; 253
    3076:	94 e0       	ldi	r25, 0x04	; 4
    3078:	9f 93       	push	r25
    307a:	8f 93       	push	r24
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
    3084:	ed b7       	in	r30, 0x3d	; 61
    3086:	fe b7       	in	r31, 0x3e	; 62
    3088:	3c 96       	adiw	r30, 0x0c	; 12
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	fe bf       	out	0x3e, r31	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	ed bf       	out	0x3d, r30	; 61
    3094:	b6 c0       	rjmp	.+364    	; 0x3202 <timeValToString+0x296>
			done = TRUE;
		}
	}
	else
	{
		if(timeVal < 0)
    3096:	77 23       	and	r23, r23
    3098:	7c f4       	brge	.+30     	; 0x30b8 <timeValToString+0x14c>
		{
			timeVal = -timeVal;
    309a:	f0 94       	com	r15
    309c:	e0 94       	com	r14
    309e:	d0 94       	com	r13
    30a0:	c0 94       	com	r12
    30a2:	c1 1c       	adc	r12, r1
    30a4:	d1 1c       	adc	r13, r1
    30a6:	e1 1c       	adc	r14, r1
    30a8:	f1 1c       	adc	r15, r1
			str[9] = '\0';
    30aa:	19 86       	std	Y+9, r1	; 0x09
			str[0] = '-';
    30ac:	8d e2       	ldi	r24, 0x2D	; 45
    30ae:	88 83       	st	Y, r24
			index = 8;
    30b0:	68 94       	set
    30b2:	77 24       	eor	r7, r7
    30b4:	73 f8       	bld	r7, 3
    30b6:	54 c0       	rjmp	.+168    	; 0x3160 <timeValToString+0x1f4>
		}
		else
		{
			str[8] = '\0';
    30b8:	18 86       	std	Y+8, r1	; 0x08

void timeValToString(char *str, int32_t timeVal, TimeFormat tf)
{
	int32_t temp;
	uint8_t hold;
	uint8_t index = 7;
    30ba:	0f 2e       	mov	r0, r31
    30bc:	f7 e0       	ldi	r31, 0x07	; 7
    30be:	7f 2e       	mov	r7, r31
    30c0:	f0 2d       	mov	r31, r0
    30c2:	4e c0       	rjmp	.+156    	; 0x3160 <timeValToString+0x1f4>
		str[index--] = '0' + (temp % 10);   /* minutes */
		temp /= 10;

		if(tf == Minutes_Seconds_Elapsed)
		{
			str[index--] = '0' + (temp % 10);   /* 10s of minutes */
    30c4:	c5 0d       	add	r28, r5
    30c6:	d1 1d       	adc	r29, r1
    30c8:	ca 01       	movw	r24, r20
    30ca:	b9 01       	movw	r22, r18
    30cc:	2a e0       	ldi	r18, 0x0A	; 10
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    30d8:	60 5d       	subi	r22, 0xD0	; 208
    30da:	68 83       	st	Y, r22
    30dc:	92 c0       	rjmp	.+292    	; 0x3202 <timeValToString+0x296>
		}
		else
		{
			str[index--] = '0' + (temp % 6);    /* 10s of minutes */
    30de:	8e 01       	movw	r16, r28
    30e0:	05 0d       	add	r16, r5
    30e2:	11 1d       	adc	r17, r1
    30e4:	ca 01       	movw	r24, r20
    30e6:	b9 01       	movw	r22, r18
    30e8:	26 e0       	ldi	r18, 0x06	; 6
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	40 e0       	ldi	r20, 0x00	; 0
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    30f4:	60 5d       	subi	r22, 0xD0	; 208
    30f6:	f8 01       	movw	r30, r16
    30f8:	60 83       	st	Z, r22
			temp /= 6;

			str[index--] = ':';
    30fa:	8b ef       	ldi	r24, 0xFB	; 251
    30fc:	87 0d       	add	r24, r7
    30fe:	fe 01       	movw	r30, r28
    3100:	e8 0f       	add	r30, r24
    3102:	f1 1d       	adc	r31, r1
    3104:	8a e3       	ldi	r24, 0x3A	; 58
    3106:	80 83       	st	Z, r24

			hold = temp % 24;
    3108:	c7 01       	movw	r24, r14
    310a:	b6 01       	movw	r22, r12
    310c:	20 e1       	ldi	r18, 0x10	; 16
    310e:	3e e0       	ldi	r19, 0x0E	; 14
    3110:	40 e0       	ldi	r20, 0x00	; 0
    3112:	50 e0       	ldi	r21, 0x00	; 0
    3114:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    3118:	ca 01       	movw	r24, r20
    311a:	b9 01       	movw	r22, r18
    311c:	28 e1       	ldi	r18, 0x18	; 24
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
			str[index--] = '0' + (hold % 10);   /* hours */
    3128:	8a ef       	ldi	r24, 0xFA	; 250
    312a:	87 0d       	add	r24, r7
    312c:	fe 01       	movw	r30, r28
    312e:	e8 0f       	add	r30, r24
    3130:	f1 1d       	adc	r31, r1
    3132:	8d ec       	ldi	r24, 0xCD	; 205
    3134:	68 9f       	mul	r22, r24
    3136:	81 2d       	mov	r24, r1
    3138:	11 24       	eor	r1, r1
    313a:	86 95       	lsr	r24
    313c:	86 95       	lsr	r24
    313e:	86 95       	lsr	r24
    3140:	28 2f       	mov	r18, r24
    3142:	22 0f       	add	r18, r18
    3144:	92 2f       	mov	r25, r18
    3146:	99 0f       	add	r25, r25
    3148:	99 0f       	add	r25, r25
    314a:	92 0f       	add	r25, r18
    314c:	69 1b       	sub	r22, r25
    314e:	60 5d       	subi	r22, 0xD0	; 208
    3150:	60 83       	st	Z, r22
			hold /= 10;
			str[index--] = '0' + hold;          /* 10s of hours */
    3152:	99 ef       	ldi	r25, 0xF9	; 249
    3154:	97 0d       	add	r25, r7
    3156:	c9 0f       	add	r28, r25
    3158:	d1 1d       	adc	r29, r1
    315a:	80 5d       	subi	r24, 0xD0	; 208
    315c:	88 83       	st	Y, r24
		}
	}
}
    315e:	51 c0       	rjmp	.+162    	; 0x3202 <timeValToString+0x296>
		}
	}

	if(!done)
	{
		str[index--] = '0' + (timeVal % 10);    /* seconds */
    3160:	8e 01       	movw	r16, r28
    3162:	07 0d       	add	r16, r7
    3164:	11 1d       	adc	r17, r1
    3166:	0f 2e       	mov	r0, r31
    3168:	fa e0       	ldi	r31, 0x0A	; 10
    316a:	8f 2e       	mov	r8, r31
    316c:	91 2c       	mov	r9, r1
    316e:	a1 2c       	mov	r10, r1
    3170:	b1 2c       	mov	r11, r1
    3172:	f0 2d       	mov	r31, r0
    3174:	c7 01       	movw	r24, r14
    3176:	b6 01       	movw	r22, r12
    3178:	a5 01       	movw	r20, r10
    317a:	94 01       	movw	r18, r8
    317c:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    3180:	60 5d       	subi	r22, 0xD0	; 208
    3182:	f8 01       	movw	r30, r16
    3184:	60 83       	st	Z, r22
		temp = timeVal / 10;
		str[index--] = '0' + (temp % 6);        /* 10s of seconds */
    3186:	8f ef       	ldi	r24, 0xFF	; 255
    3188:	87 0d       	add	r24, r7
    318a:	8e 01       	movw	r16, r28
    318c:	08 0f       	add	r16, r24
    318e:	11 1d       	adc	r17, r1
    3190:	ca 01       	movw	r24, r20
    3192:	b9 01       	movw	r22, r18
    3194:	26 e0       	ldi	r18, 0x06	; 6
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e0       	ldi	r20, 0x00	; 0
    319a:	50 e0       	ldi	r21, 0x00	; 0
    319c:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    31a0:	60 5d       	subi	r22, 0xD0	; 208
    31a2:	f8 01       	movw	r30, r16
    31a4:	60 83       	st	Z, r22
		temp /= 6;

		str[index--] = ':';
    31a6:	8e ef       	ldi	r24, 0xFE	; 254
    31a8:	87 0d       	add	r24, r7
    31aa:	fe 01       	movw	r30, r28
    31ac:	e8 0f       	add	r30, r24
    31ae:	f1 1d       	adc	r31, r1
    31b0:	8a e3       	ldi	r24, 0x3A	; 58
    31b2:	80 83       	st	Z, r24

		str[index--] = '0' + (temp % 10);   /* minutes */
    31b4:	0f 2e       	mov	r0, r31
    31b6:	fc ef       	ldi	r31, 0xFC	; 252
    31b8:	5f 2e       	mov	r5, r31
    31ba:	f0 2d       	mov	r31, r0
    31bc:	57 0c       	add	r5, r7
    31be:	8d ef       	ldi	r24, 0xFD	; 253
    31c0:	87 0d       	add	r24, r7
    31c2:	8e 01       	movw	r16, r28
    31c4:	08 0f       	add	r16, r24
    31c6:	11 1d       	adc	r17, r1
    31c8:	c7 01       	movw	r24, r14
    31ca:	b6 01       	movw	r22, r12
    31cc:	2c e3       	ldi	r18, 0x3C	; 60
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	50 e0       	ldi	r21, 0x00	; 0
    31d4:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    31d8:	ca 01       	movw	r24, r20
    31da:	b9 01       	movw	r22, r18
    31dc:	a5 01       	movw	r20, r10
    31de:	94 01       	movw	r18, r8
    31e0:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    31e4:	60 5d       	subi	r22, 0xD0	; 208
    31e6:	f8 01       	movw	r30, r16
    31e8:	60 83       	st	Z, r22
		temp /= 10;
    31ea:	c7 01       	movw	r24, r14
    31ec:	b6 01       	movw	r22, r12
    31ee:	28 e5       	ldi	r18, 0x58	; 88
    31f0:	32 e0       	ldi	r19, 0x02	; 2
    31f2:	40 e0       	ldi	r20, 0x00	; 0
    31f4:	50 e0       	ldi	r21, 0x00	; 0
    31f6:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>

		if(tf == Minutes_Seconds_Elapsed)
    31fa:	f3 e0       	ldi	r31, 0x03	; 3
    31fc:	6f 12       	cpse	r6, r31
    31fe:	6f cf       	rjmp	.-290    	; 0x30de <timeValToString+0x172>
    3200:	61 cf       	rjmp	.-318    	; 0x30c4 <timeValToString+0x158>
			str[index--] = '0' + (hold % 10);   /* hours */
			hold /= 10;
			str[index--] = '0' + hold;          /* 10s of hours */
		}
	}
}
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	bf 90       	pop	r11
    3214:	af 90       	pop	r10
    3216:	9f 90       	pop	r9
    3218:	8f 90       	pop	r8
    321a:	7f 90       	pop	r7
    321c:	6f 90       	pop	r6
    321e:	5f 90       	pop	r5
    3220:	4f 90       	pop	r4
    3222:	08 95       	ret

00003224 <stringToTimeVal>:

int32_t stringToTimeVal(char *str)
{
    3224:	8f 92       	push	r8
    3226:	9f 92       	push	r9
    3228:	af 92       	push	r10
    322a:	bf 92       	push	r11
    322c:	ff 92       	push	r15
    322e:	0f 93       	push	r16
    3230:	1f 93       	push	r17
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	00 d0       	rcall	.+0      	; 0x3238 <stringToTimeVal+0x14>
    3238:	1f 92       	push	r1
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	8c 01       	movw	r16, r24
	int32_t time_sec = 0;
	BOOL missingTens = FALSE;
	uint8_t index = 0;
	char field[3];

	field[2] = '\0';
    3240:	1b 82       	std	Y+3, r1	; 0x03
	field[1] = '\0';
    3242:	1a 82       	std	Y+2, r1	; 0x02

	if(str[1] == ':')
    3244:	fc 01       	movw	r30, r24
    3246:	81 81       	ldd	r24, Z+1	; 0x01
	{
		missingTens = TRUE;
	}

	/* hh:mm:ss or h:mm:ss */
	field[0] = str[index++];        /* tens of hours or hours */
    3248:	90 81       	ld	r25, Z
    324a:	99 83       	std	Y+1, r25	; 0x01
	if(!missingTens)
    324c:	8a 33       	cpi	r24, 0x3A	; 58
    324e:	29 f0       	breq	.+10     	; 0x325a <stringToTimeVal+0x36>
	{
		field[1] = str[index++];    /* hours */
    3250:	8a 83       	std	Y+2, r24	; 0x02
    3252:	68 94       	set
    3254:	ff 24       	eor	r15, r15
    3256:	f1 f8       	bld	r15, 1
    3258:	02 c0       	rjmp	.+4      	; 0x325e <stringToTimeVal+0x3a>
	{
		missingTens = TRUE;
	}

	/* hh:mm:ss or h:mm:ss */
	field[0] = str[index++];        /* tens of hours or hours */
    325a:	ff 24       	eor	r15, r15
    325c:	f3 94       	inc	r15
	if(!missingTens)
	{
		field[1] = str[index++];    /* hours */
	}
	
	time_sec = SecondsFromHours(atol(field));
    325e:	ce 01       	movw	r24, r28
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <atol>
    3266:	9b 01       	movw	r18, r22
    3268:	ac 01       	movw	r20, r24
    326a:	a0 e1       	ldi	r26, 0x10	; 16
    326c:	be e0       	ldi	r27, 0x0E	; 14
    326e:	0e 94 99 24 	call	0x4932	; 0x4932 <__muluhisi3>
    3272:	4b 01       	movw	r8, r22
    3274:	5c 01       	movw	r10, r24
	index++;

	field[0] = str[index++];
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	8f 0d       	add	r24, r15
    327a:	f8 01       	movw	r30, r16
    327c:	e8 0f       	add	r30, r24
    327e:	f1 1d       	adc	r31, r1
    3280:	80 81       	ld	r24, Z
    3282:	89 83       	std	Y+1, r24	; 0x01
	field[1] = str[index++];    /* minutes */
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	8f 0d       	add	r24, r15
    3288:	f8 01       	movw	r30, r16
    328a:	e8 0f       	add	r30, r24
    328c:	f1 1d       	adc	r31, r1
    328e:	80 81       	ld	r24, Z
    3290:	8a 83       	std	Y+2, r24	; 0x02
	time_sec += SecondsFromMinutes(atol(field));
    3292:	ce 01       	movw	r24, r28
    3294:	01 96       	adiw	r24, 0x01	; 1
    3296:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <atol>
    329a:	9b 01       	movw	r18, r22
    329c:	ac 01       	movw	r20, r24
    329e:	ac e3       	ldi	r26, 0x3C	; 60
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	0e 94 99 24 	call	0x4932	; 0x4932 <__muluhisi3>
    32a6:	86 0e       	add	r8, r22
    32a8:	97 1e       	adc	r9, r23
    32aa:	a8 1e       	adc	r10, r24
    32ac:	b9 1e       	adc	r11, r25
	index++;

	field[0] = str[index++];
    32ae:	84 e0       	ldi	r24, 0x04	; 4
    32b0:	8f 0d       	add	r24, r15
    32b2:	f8 01       	movw	r30, r16
    32b4:	e8 0f       	add	r30, r24
    32b6:	f1 1d       	adc	r31, r1
    32b8:	80 81       	ld	r24, Z
    32ba:	89 83       	std	Y+1, r24	; 0x01
	field[1] = str[index++];    /* seconds */
    32bc:	95 e0       	ldi	r25, 0x05	; 5
    32be:	9f 0d       	add	r25, r15
    32c0:	f8 01       	movw	r30, r16
    32c2:	e9 0f       	add	r30, r25
    32c4:	f1 1d       	adc	r31, r1
    32c6:	80 81       	ld	r24, Z
    32c8:	8a 83       	std	Y+2, r24	; 0x02
	time_sec += atoi(field);
    32ca:	ce 01       	movw	r24, r28
    32cc:	01 96       	adiw	r24, 0x01	; 1
    32ce:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <atoi>

	return(time_sec);
    32d2:	09 2e       	mov	r0, r25
    32d4:	00 0c       	add	r0, r0
    32d6:	aa 0b       	sbc	r26, r26
    32d8:	bb 0b       	sbc	r27, r27
    32da:	bc 01       	movw	r22, r24
    32dc:	cd 01       	movw	r24, r26
    32de:	68 0d       	add	r22, r8
    32e0:	79 1d       	adc	r23, r9
    32e2:	8a 1d       	adc	r24, r10
    32e4:	9b 1d       	adc	r25, r11
}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	df 91       	pop	r29
    32ee:	cf 91       	pop	r28
    32f0:	1f 91       	pop	r17
    32f2:	0f 91       	pop	r16
    32f4:	ff 90       	pop	r15
    32f6:	bf 90       	pop	r11
    32f8:	af 90       	pop	r10
    32fa:	9f 90       	pop	r9
    32fc:	8f 90       	pop	r8
    32fe:	08 95       	ret

00003300 <ad5245_set_potentiometer>:
#include <util/twi.h>

#define AD5245_I2C_SLAVE_ADDR_A0_0 0x58

void ad5245_set_potentiometer(uint8_t setting)
{
    3300:	cf 93       	push	r28
    3302:	df 93       	push	r29
    3304:	1f 92       	push	r1
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(AD5245_I2C_SLAVE_ADDR_A0_0, 0x00, &setting, 1);
    330c:	21 e0       	ldi	r18, 0x01	; 1
    330e:	ae 01       	movw	r20, r28
    3310:	4f 5f       	subi	r20, 0xFF	; 255
    3312:	5f 4f       	sbci	r21, 0xFF	; 255
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	88 e5       	ldi	r24, 0x58	; 88
    3318:	f8 d2       	rcall	.+1520   	; 0x390a <i2c_device_write>
}
    331a:	0f 90       	pop	r0
    331c:	df 91       	pop	r29
    331e:	cf 91       	pop	r28
    3320:	08 95       	ret

00003322 <dac081c_set_dac>:
#include <util/twi.h>

#define DAC081C_I2C_SLAVE_ADDR_A0 0x18

void dac081c_set_dac(uint8_t setting)
{
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	1f 92       	push	r1
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte1=0, byte2=0;
	
	byte1 |= (setting >> 4);
	byte2 |= (setting << 4);
    332c:	90 e1       	ldi	r25, 0x10	; 16
    332e:	89 9f       	mul	r24, r25
    3330:	90 01       	movw	r18, r0
    3332:	11 24       	eor	r1, r1
    3334:	29 83       	std	Y+1, r18	; 0x01
	i2c_device_write(DAC081C_I2C_SLAVE_ADDR_A0, byte1, &byte2, 1);
    3336:	68 2f       	mov	r22, r24
    3338:	62 95       	swap	r22
    333a:	6f 70       	andi	r22, 0x0F	; 15
    333c:	21 e0       	ldi	r18, 0x01	; 1
    333e:	ae 01       	movw	r20, r28
    3340:	4f 5f       	subi	r20, 0xFF	; 255
    3342:	5f 4f       	sbci	r21, 0xFF	; 255
    3344:	88 e1       	ldi	r24, 0x18	; 24
    3346:	e1 d2       	rcall	.+1474   	; 0x390a <i2c_device_write>
}
    3348:	0f 90       	pop	r0
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	08 95       	ret

00003350 <dac081c_read_dac>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	uint8_t __attribute__((optimize("O0"))) dac081c_read_dac(void)
#else
	uint8_t dac081c_read_dac(void)
#endif
{
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	00 d0       	rcall	.+0      	; 0x335a <dac081c_read_dac+0xa>
    335a:	00 d0       	rcall	.+0      	; 0x335c <dac081c_read_dac+0xc>
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
	uint8_t bytes[2];
	uint8_t bytes2read = 2;
    3360:	82 e0       	ldi	r24, 0x02	; 2
    3362:	89 83       	std	Y+1, r24	; 0x01
	uint8_t index = 0;
	
	i2c_start();
    3364:	1a 82       	std	Y+2, r1	; 0x02
	if(i2c_status(TW_START))
    3366:	6b d2       	rcall	.+1238   	; 0x383e <i2c_start>
    3368:	88 e0       	ldi	r24, 0x08	; 8
    336a:	c0 d2       	rcall	.+1408   	; 0x38ec <i2c_status>
    336c:	88 23       	and	r24, r24
    336e:	11 f0       	breq	.+4      	; 0x3374 <dac081c_read_dac+0x24>
	{
		return(TRUE);
    3370:	81 e0       	ldi	r24, 0x01	; 1
	}

	if(i2c_write_success((DAC081C_I2C_SLAVE_ADDR_A0 | TW_READ), TW_MR_SLA_ACK))
    3372:	41 c0       	rjmp	.+130    	; 0x33f6 <dac081c_read_dac+0xa6>
    3374:	60 e4       	ldi	r22, 0x40	; 64
    3376:	89 e1       	ldi	r24, 0x19	; 25
    3378:	7f d2       	rcall	.+1278   	; 0x3878 <i2c_write_success>
    337a:	88 23       	and	r24, r24
    337c:	51 f1       	breq	.+84     	; 0x33d2 <dac081c_read_dac+0x82>
	{
		return(TRUE);
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	3a c0       	rjmp	.+116    	; 0x33f6 <dac081c_read_dac+0xa6>
	}

	while(bytes2read--)
	{
		if(bytes2read)
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	88 23       	and	r24, r24
    3386:	a1 f0       	breq	.+40     	; 0x33b0 <dac081c_read_dac+0x60>
		{
			bytes[index++] = i2c_read_ack();
    3388:	8a 81       	ldd	r24, Y+2	; 0x02
    338a:	91 e0       	ldi	r25, 0x01	; 1
    338c:	98 0f       	add	r25, r24
    338e:	9a 83       	std	Y+2, r25	; 0x02
    3390:	08 2f       	mov	r16, r24
    3392:	10 e0       	ldi	r17, 0x00	; 0
    3394:	8d d2       	rcall	.+1306   	; 0x38b0 <i2c_read_ack>
    3396:	28 2f       	mov	r18, r24
    3398:	ce 01       	movw	r24, r28
    339a:	03 96       	adiw	r24, 0x03	; 3
    339c:	80 0f       	add	r24, r16
    339e:	91 1f       	adc	r25, r17
    33a0:	fc 01       	movw	r30, r24
			if(i2c_status(TW_MR_DATA_ACK))
    33a2:	20 83       	st	Z, r18
    33a4:	80 e5       	ldi	r24, 0x50	; 80
    33a6:	a2 d2       	rcall	.+1348   	; 0x38ec <i2c_status>
    33a8:	88 23       	and	r24, r24
			{
				return(TRUE);
    33aa:	99 f0       	breq	.+38     	; 0x33d2 <dac081c_read_dac+0x82>
    33ac:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		else
		{
			bytes[index] = i2c_read_nack();
    33ae:	23 c0       	rjmp	.+70     	; 0x33f6 <dac081c_read_dac+0xa6>
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	08 2f       	mov	r16, r24
    33b4:	10 e0       	ldi	r17, 0x00	; 0
    33b6:	8b d2       	rcall	.+1302   	; 0x38ce <i2c_read_nack>
    33b8:	28 2f       	mov	r18, r24
    33ba:	ce 01       	movw	r24, r28
    33bc:	03 96       	adiw	r24, 0x03	; 3
    33be:	80 0f       	add	r24, r16
    33c0:	91 1f       	adc	r25, r17
    33c2:	fc 01       	movw	r30, r24
			if(i2c_status(TW_MR_DATA_NACK))
    33c4:	20 83       	st	Z, r18
    33c6:	88 e5       	ldi	r24, 0x58	; 88
    33c8:	91 d2       	rcall	.+1314   	; 0x38ec <i2c_status>
    33ca:	88 23       	and	r24, r24
    33cc:	11 f0       	breq	.+4      	; 0x33d2 <dac081c_read_dac+0x82>
			{
				return(TRUE);
    33ce:	81 e0       	ldi	r24, 0x01	; 1
	if(i2c_write_success((DAC081C_I2C_SLAVE_ADDR_A0 | TW_READ), TW_MR_SLA_ACK))
	{
		return(TRUE);
	}

	while(bytes2read--)
    33d0:	12 c0       	rjmp	.+36     	; 0x33f6 <dac081c_read_dac+0xa6>
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	9f ef       	ldi	r25, 0xFF	; 255
    33d6:	98 0f       	add	r25, r24
    33d8:	99 83       	std	Y+1, r25	; 0x01
    33da:	88 23       	and	r24, r24
				return(TRUE);
			}
		}
	}

	i2c_stop();
    33dc:	91 f6       	brne	.-92     	; 0x3382 <dac081c_read_dac+0x32>
    33de:	48 d2       	rcall	.+1168   	; 0x3870 <i2c_stop>
		
	bytes[0] = (bytes[0] << 4);
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	82 95       	swap	r24
    33e4:	80 7f       	andi	r24, 0xF0	; 240
    33e6:	8b 83       	std	Y+3, r24	; 0x03
	bytes[0] |= (bytes[1] >> 4);
    33e8:	9b 81       	ldd	r25, Y+3	; 0x03
    33ea:	8c 81       	ldd	r24, Y+4	; 0x04
    33ec:	82 95       	swap	r24
    33ee:	8f 70       	andi	r24, 0x0F	; 15
    33f0:	89 2b       	or	r24, r25
    33f2:	8b 83       	std	Y+3, r24	; 0x03

	return(bytes[0]);
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	0f 90       	pop	r0
    33fe:	df 91       	pop	r29
    3400:	cf 91       	pop	r28
    3402:	1f 91       	pop	r17
    3404:	0f 91       	pop	r16
    3406:	08 95       	ret

00003408 <ds3231_read_time>:
   #define RTC_TEMP_MSB                    0x11
   #define RTC_TEMP_LSB                    0x12


	void ds3231_read_time(int32_t* val, char* buffer, TimeFormat format)
	{
    3408:	7f 92       	push	r7
    340a:	8f 92       	push	r8
    340c:	9f 92       	push	r9
    340e:	af 92       	push	r10
    3410:	bf 92       	push	r11
    3412:	cf 92       	push	r12
    3414:	df 92       	push	r13
    3416:	ef 92       	push	r14
    3418:	ff 92       	push	r15
    341a:	0f 93       	push	r16
    341c:	1f 93       	push	r17
    341e:	cf 93       	push	r28
    3420:	df 93       	push	r29
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	27 97       	sbiw	r28, 0x07	; 7
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	8c 01       	movw	r16, r24
    3434:	7b 01       	movw	r14, r22
    3436:	d4 2e       	mov	r13, r20
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
    3438:	ae 01       	movw	r20, r28
    343a:	4f 5f       	subi	r20, 0xFF	; 255
    343c:	5f 4f       	sbci	r21, 0xFF	; 255
    343e:	87 e0       	ldi	r24, 0x07	; 7
    3440:	fa 01       	movw	r30, r20
    3442:	11 92       	st	Z+, r1
    3444:	8a 95       	dec	r24
    3446:	e9 f7       	brne	.-6      	; 0x3442 <ds3231_read_time+0x3a>
		uint8_t hour10;
		uint8_t hour;
		BOOL am_pm;
		BOOL twelvehour;

		if(!i2c_device_read(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, data, 7))
    3448:	27 e0       	ldi	r18, 0x07	; 7
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	80 ed       	ldi	r24, 0xD0	; 208
    344e:	a2 d2       	rcall	.+1348   	; 0x3994 <i2c_device_read>
    3450:	81 11       	cpse	r24, r1
    3452:	de c0       	rjmp	.+444    	; 0x3610 <ds3231_read_time+0x208>
		{
			second10 = ((data[0] & 0xf0) >> 4);
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	c8 2e       	mov	r12, r24
    3458:	c6 94       	lsr	r12
    345a:	c6 94       	lsr	r12
    345c:	c6 94       	lsr	r12
    345e:	c6 94       	lsr	r12
			second = (data[0] & 0x0f);
    3460:	8f 70       	andi	r24, 0x0F	; 15
    3462:	78 2e       	mov	r7, r24

			minute10 = ((data[1] & 0xf0) >> 4);
    3464:	2a 81       	ldd	r18, Y+2	; 0x02
    3466:	a2 2e       	mov	r10, r18
    3468:	a6 94       	lsr	r10
    346a:	a6 94       	lsr	r10
    346c:	a6 94       	lsr	r10
    346e:	a6 94       	lsr	r10
			minute = (data[1] & 0x0f);
    3470:	2f 70       	andi	r18, 0x0F	; 15
    3472:	b2 2e       	mov	r11, r18

			am_pm = ((data[2] >> 5) & 0x01);
    3474:	8b 81       	ldd	r24, Y+3	; 0x03
    3476:	85 fb       	bst	r24, 5
    3478:	99 27       	eor	r25, r25
    347a:	90 f9       	bld	r25, 0
			hour10 = ((data[2] >> 4) & 0x01);
    347c:	84 fb       	bst	r24, 4
    347e:	99 24       	eor	r9, r9
    3480:	90 f8       	bld	r9, 0
			hour = (data[2] & 0x0f);
    3482:	f8 2f       	mov	r31, r24
    3484:	ff 70       	andi	r31, 0x0F	; 15
    3486:	8f 2e       	mov	r8, r31

			twelvehour = ((data[2] >> 6) & 0x01);

			if(!twelvehour && am_pm)
    3488:	86 fb       	bst	r24, 6
    348a:	22 27       	eor	r18, r18
    348c:	20 f9       	bld	r18, 0
    348e:	86 fd       	sbrc	r24, 6
    3490:	05 c0       	rjmp	.+10     	; 0x349c <ds3231_read_time+0x94>
    3492:	99 23       	and	r25, r25
    3494:	19 f0       	breq	.+6      	; 0x349c <ds3231_read_time+0x94>
			{
				hour10 = 2;
    3496:	68 94       	set
    3498:	99 24       	eor	r9, r9
    349a:	91 f8       	bld	r9, 1
			}

			if(buffer)
    349c:	e1 14       	cp	r14, r1
    349e:	f1 04       	cpc	r15, r1
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <ds3231_read_time+0x9c>
    34a2:	70 c0       	rjmp	.+224    	; 0x3584 <ds3231_read_time+0x17c>
			{
				switch(format)
    34a4:	dd 20       	and	r13, r13
    34a6:	21 f0       	breq	.+8      	; 0x34b0 <ds3231_read_time+0xa8>
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	d8 16       	cp	r13, r24
    34ac:	b9 f0       	breq	.+46     	; 0x34dc <ds3231_read_time+0xd4>
    34ae:	55 c0       	rjmp	.+170    	; 0x355a <ds3231_read_time+0x152>
				{
					case Minutes_Seconds:
					{
						sprintf(buffer, "%1d%1d:%1d%1d", minute10, minute, second10, second);
    34b0:	1f 92       	push	r1
    34b2:	7f 92       	push	r7
    34b4:	1f 92       	push	r1
    34b6:	cf 92       	push	r12
    34b8:	1f 92       	push	r1
    34ba:	bf 92       	push	r11
    34bc:	1f 92       	push	r1
    34be:	af 92       	push	r10
    34c0:	8b e2       	ldi	r24, 0x2B	; 43
    34c2:	95 e0       	ldi	r25, 0x05	; 5
    34c4:	9f 93       	push	r25
    34c6:	8f 93       	push	r24
    34c8:	ff 92       	push	r15
    34ca:	ef 92       	push	r14
    34cc:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
					}
					break;
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	54 c0       	rjmp	.+168    	; 0x3584 <ds3231_read_time+0x17c>

					case Hours_Minutes_Seconds:
					{
						if(twelvehour)  /* 12-hour */
    34dc:	22 23       	and	r18, r18
    34de:	19 f1       	breq	.+70     	; 0x3526 <ds3231_read_time+0x11e>
						{
							sprintf(buffer, "%1d%1d:%1d%1d:%1d%1d%s", hour10, hour, minute10, minute, second10, second, am_pm ? "AM" : "PM");
    34e0:	91 11       	cpse	r25, r1
    34e2:	03 c0       	rjmp	.+6      	; 0x34ea <ds3231_read_time+0xe2>
    34e4:	8a e0       	ldi	r24, 0x0A	; 10
    34e6:	95 e0       	ldi	r25, 0x05	; 5
    34e8:	02 c0       	rjmp	.+4      	; 0x34ee <ds3231_read_time+0xe6>
    34ea:	87 e0       	ldi	r24, 0x07	; 7
    34ec:	95 e0       	ldi	r25, 0x05	; 5
    34ee:	9f 93       	push	r25
    34f0:	8f 93       	push	r24
    34f2:	1f 92       	push	r1
    34f4:	7f 92       	push	r7
    34f6:	1f 92       	push	r1
    34f8:	cf 92       	push	r12
    34fa:	1f 92       	push	r1
    34fc:	bf 92       	push	r11
    34fe:	1f 92       	push	r1
    3500:	af 92       	push	r10
    3502:	1f 92       	push	r1
    3504:	8f 92       	push	r8
    3506:	1f 92       	push	r1
    3508:	9f 92       	push	r9
    350a:	8d e0       	ldi	r24, 0x0D	; 13
    350c:	95 e0       	ldi	r25, 0x05	; 5
    350e:	9f 93       	push	r25
    3510:	8f 93       	push	r24
    3512:	ff 92       	push	r15
    3514:	ef 92       	push	r14
    3516:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	2f c0       	rjmp	.+94     	; 0x3584 <ds3231_read_time+0x17c>
						}
						else            /* 24 hour */
						{
							sprintf(buffer, "%1d%1d:%1d%1d:%1d%1d", hour10, hour, minute10, minute, second10, second);
    3526:	1f 92       	push	r1
    3528:	7f 92       	push	r7
    352a:	1f 92       	push	r1
    352c:	cf 92       	push	r12
    352e:	1f 92       	push	r1
    3530:	bf 92       	push	r11
    3532:	1f 92       	push	r1
    3534:	af 92       	push	r10
    3536:	1f 92       	push	r1
    3538:	8f 92       	push	r8
    353a:	1f 92       	push	r1
    353c:	9f 92       	push	r9
    353e:	84 e2       	ldi	r24, 0x24	; 36
    3540:	95 e0       	ldi	r25, 0x05	; 5
    3542:	9f 93       	push	r25
    3544:	8f 93       	push	r24
    3546:	ff 92       	push	r15
    3548:	ef 92       	push	r14
    354a:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	15 c0       	rjmp	.+42     	; 0x3584 <ds3231_read_time+0x17c>
					}
					break;

					default:    /* Day_Month_Year_Hours_Minutes_Seconds: */
					{
						sprintf(buffer, "%1d%1d:%1d%1d", minute10, minute, second10, second);
    355a:	1f 92       	push	r1
    355c:	7f 92       	push	r7
    355e:	1f 92       	push	r1
    3560:	cf 92       	push	r12
    3562:	1f 92       	push	r1
    3564:	bf 92       	push	r11
    3566:	1f 92       	push	r1
    3568:	af 92       	push	r10
    356a:	8b e2       	ldi	r24, 0x2B	; 43
    356c:	95 e0       	ldi	r25, 0x05	; 5
    356e:	9f 93       	push	r25
    3570:	8f 93       	push	r24
    3572:	ff 92       	push	r15
    3574:	ef 92       	push	r14
    3576:	0e 94 5f 25 	call	0x4abe	; 0x4abe <sprintf>
					}
					break;
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
				}
			}

			if(val)
    3584:	01 15       	cp	r16, r1
    3586:	11 05       	cpc	r17, r1
    3588:	09 f4       	brne	.+2      	; 0x358c <ds3231_read_time+0x184>
    358a:	42 c0       	rjmp	.+132    	; 0x3610 <ds3231_read_time+0x208>
			{
				*val = second + 10 * second10 + 60 * (int32_t)minute + 600 * (int32_t)minute10 +  3600 * (int32_t)hour + 36000 * (int32_t)hour10;
    358c:	8c 2d       	mov	r24, r12
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	6c 01       	movw	r12, r24
    3592:	cc 0c       	add	r12, r12
    3594:	dd 1c       	adc	r13, r13
    3596:	88 0f       	add	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	88 0f       	add	r24, r24
    359c:	99 1f       	adc	r25, r25
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	c8 0e       	add	r12, r24
    35a4:	d9 1e       	adc	r13, r25
    35a6:	c7 0c       	add	r12, r7
    35a8:	d1 1c       	adc	r13, r1
    35aa:	0d 2c       	mov	r0, r13
    35ac:	00 0c       	add	r0, r0
    35ae:	ee 08       	sbc	r14, r14
    35b0:	ff 08       	sbc	r15, r15
    35b2:	2b 2d       	mov	r18, r11
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	ac e3       	ldi	r26, 0x3C	; 60
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	0e 94 8a 24 	call	0x4914	; 0x4914 <__umulhisi3>
    35be:	c6 0e       	add	r12, r22
    35c0:	d7 1e       	adc	r13, r23
    35c2:	e8 1e       	adc	r14, r24
    35c4:	f9 1e       	adc	r15, r25
    35c6:	2a 2d       	mov	r18, r10
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	a8 e5       	ldi	r26, 0x58	; 88
    35cc:	b2 e0       	ldi	r27, 0x02	; 2
    35ce:	0e 94 8a 24 	call	0x4914	; 0x4914 <__umulhisi3>
    35d2:	c6 0e       	add	r12, r22
    35d4:	d7 1e       	adc	r13, r23
    35d6:	e8 1e       	adc	r14, r24
    35d8:	f9 1e       	adc	r15, r25
    35da:	28 2d       	mov	r18, r8
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	a0 e1       	ldi	r26, 0x10	; 16
    35e0:	be e0       	ldi	r27, 0x0E	; 14
    35e2:	0e 94 8a 24 	call	0x4914	; 0x4914 <__umulhisi3>
    35e6:	c6 0e       	add	r12, r22
    35e8:	d7 1e       	adc	r13, r23
    35ea:	e8 1e       	adc	r14, r24
    35ec:	f9 1e       	adc	r15, r25
    35ee:	29 2d       	mov	r18, r9
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	a0 ea       	ldi	r26, 0xA0	; 160
    35f4:	bc e8       	ldi	r27, 0x8C	; 140
    35f6:	0e 94 8a 24 	call	0x4914	; 0x4914 <__umulhisi3>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	8c 0d       	add	r24, r12
    3600:	9d 1d       	adc	r25, r13
    3602:	ae 1d       	adc	r26, r14
    3604:	bf 1d       	adc	r27, r15
    3606:	f8 01       	movw	r30, r16
    3608:	80 83       	st	Z, r24
    360a:	91 83       	std	Z+1, r25	; 0x01
    360c:	a2 83       	std	Z+2, r26	; 0x02
    360e:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
	}
    3610:	27 96       	adiw	r28, 0x07	; 7
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    3624:	ff 90       	pop	r15
    3626:	ef 90       	pop	r14
    3628:	df 90       	pop	r13
    362a:	cf 90       	pop	r12
    362c:	bf 90       	pop	r11
    362e:	af 90       	pop	r10
    3630:	9f 90       	pop	r9
    3632:	8f 90       	pop	r8
    3634:	7f 90       	pop	r7
    3636:	08 95       	ret

00003638 <ds3231_set_time>:


	void ds3231_set_time(int32_t offsetSeconds)
	{
    3638:	3f 92       	push	r3
    363a:	4f 92       	push	r4
    363c:	5f 92       	push	r5
    363e:	6f 92       	push	r6
    3640:	7f 92       	push	r7
    3642:	8f 92       	push	r8
    3644:	9f 92       	push	r9
    3646:	af 92       	push	r10
    3648:	bf 92       	push	r11
    364a:	cf 92       	push	r12
    364c:	df 92       	push	r13
    364e:	ef 92       	push	r14
    3650:	ff 92       	push	r15
    3652:	0f 93       	push	r16
    3654:	1f 93       	push	r17
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
    365e:	2b 97       	sbiw	r28, 0x0b	; 11
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	f8 94       	cli
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	0f be       	out	0x3f, r0	; 63
    3668:	cd bf       	out	0x3d, r28	; 61
    366a:	6b 01       	movw	r12, r22
    366c:	7c 01       	movw	r14, r24
		int32_t timeVal;
		uint8_t data[7] = { 0, 0, 0, 0, 0, 0, 0 };
    366e:	8e 01       	movw	r16, r28
    3670:	0b 5f       	subi	r16, 0xFB	; 251
    3672:	1f 4f       	sbci	r17, 0xFF	; 255
    3674:	87 e0       	ldi	r24, 0x07	; 7
    3676:	f8 01       	movw	r30, r16
    3678:	11 92       	st	Z+, r1
    367a:	8a 95       	dec	r24
    367c:	e9 f7       	brne	.-6      	; 0x3678 <ds3231_set_time+0x40>
		int32_t temp;
		uint8_t hold;

		ds3231_read_time(&timeVal, NULL, Time_Format_Not_Specified);
    367e:	44 e0       	ldi	r20, 0x04	; 4
    3680:	60 e0       	ldi	r22, 0x00	; 0
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	ce 01       	movw	r24, r28
    3686:	01 96       	adiw	r24, 0x01	; 1
    3688:	bf de       	rcall	.-642    	; 0x3408 <ds3231_read_time>
		timeVal += offsetSeconds;
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	9a 81       	ldd	r25, Y+2	; 0x02
    368e:	ab 81       	ldd	r26, Y+3	; 0x03
    3690:	bc 81       	ldd	r27, Y+4	; 0x04
    3692:	c8 0e       	add	r12, r24
    3694:	d9 1e       	adc	r13, r25
    3696:	ea 1e       	adc	r14, r26
    3698:	fb 1e       	adc	r15, r27
    369a:	c9 82       	std	Y+1, r12	; 0x01
    369c:	da 82       	std	Y+2, r13	; 0x02
    369e:	eb 82       	std	Y+3, r14	; 0x03
    36a0:	fc 82       	std	Y+4, r15	; 0x04

		data[0] = timeVal % 10;     /* seconds */
		temp = timeVal / 10;
		data[0] |= (temp % 6) << 4; /* 10s of seconds */
    36a2:	0f 2e       	mov	r0, r31
    36a4:	fa e0       	ldi	r31, 0x0A	; 10
    36a6:	4f 2e       	mov	r4, r31
    36a8:	51 2c       	mov	r5, r1
    36aa:	61 2c       	mov	r6, r1
    36ac:	71 2c       	mov	r7, r1
    36ae:	f0 2d       	mov	r31, r0
    36b0:	c7 01       	movw	r24, r14
    36b2:	b6 01       	movw	r22, r12
    36b4:	a3 01       	movw	r20, r6
    36b6:	92 01       	movw	r18, r4
    36b8:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    36bc:	36 2e       	mov	r3, r22
    36be:	0f 2e       	mov	r0, r31
    36c0:	f6 e0       	ldi	r31, 0x06	; 6
    36c2:	8f 2e       	mov	r8, r31
    36c4:	91 2c       	mov	r9, r1
    36c6:	a1 2c       	mov	r10, r1
    36c8:	b1 2c       	mov	r11, r1
    36ca:	f0 2d       	mov	r31, r0
    36cc:	ca 01       	movw	r24, r20
    36ce:	b9 01       	movw	r22, r18
    36d0:	a5 01       	movw	r20, r10
    36d2:	94 01       	movw	r18, r8
    36d4:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	88 0f       	add	r24, r24
    36de:	99 1f       	adc	r25, r25
    36e0:	aa 1f       	adc	r26, r26
    36e2:	bb 1f       	adc	r27, r27
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	aa 1f       	adc	r26, r26
    36ea:	bb 1f       	adc	r27, r27
    36ec:	88 0f       	add	r24, r24
    36ee:	99 1f       	adc	r25, r25
    36f0:	aa 1f       	adc	r26, r26
    36f2:	bb 1f       	adc	r27, r27
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	aa 1f       	adc	r26, r26
    36fa:	bb 1f       	adc	r27, r27
    36fc:	68 2f       	mov	r22, r24
    36fe:	63 29       	or	r22, r3
    3700:	6d 83       	std	Y+5, r22	; 0x05
		temp /= 6;
		data[1] = temp % 10;        /* minutes */
		temp /= 10;
		data[1] |= (temp % 6) << 4; /* 10s of minutes */
    3702:	c7 01       	movw	r24, r14
    3704:	b6 01       	movw	r22, r12
    3706:	28 e5       	ldi	r18, 0x58	; 88
    3708:	32 e0       	ldi	r19, 0x02	; 2
    370a:	40 e0       	ldi	r20, 0x00	; 0
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    3712:	ca 01       	movw	r24, r20
    3714:	b9 01       	movw	r22, r18
    3716:	a5 01       	movw	r20, r10
    3718:	94 01       	movw	r18, r8
    371a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    371e:	4b 01       	movw	r8, r22
    3720:	5c 01       	movw	r10, r24
    3722:	88 0c       	add	r8, r8
    3724:	99 1c       	adc	r9, r9
    3726:	aa 1c       	adc	r10, r10
    3728:	bb 1c       	adc	r11, r11
    372a:	88 0c       	add	r8, r8
    372c:	99 1c       	adc	r9, r9
    372e:	aa 1c       	adc	r10, r10
    3730:	bb 1c       	adc	r11, r11
    3732:	88 0c       	add	r8, r8
    3734:	99 1c       	adc	r9, r9
    3736:	aa 1c       	adc	r10, r10
    3738:	bb 1c       	adc	r11, r11
    373a:	88 0c       	add	r8, r8
    373c:	99 1c       	adc	r9, r9
    373e:	aa 1c       	adc	r10, r10
    3740:	bb 1c       	adc	r11, r11
    3742:	c7 01       	movw	r24, r14
    3744:	b6 01       	movw	r22, r12
    3746:	2c e3       	ldi	r18, 0x3C	; 60
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    3752:	ca 01       	movw	r24, r20
    3754:	b9 01       	movw	r22, r18
    3756:	a3 01       	movw	r20, r6
    3758:	92 01       	movw	r18, r4
    375a:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    375e:	86 2a       	or	r8, r22
    3760:	8e 82       	std	Y+6, r8	; 0x06
		temp /= 6;
		hold = temp % 24;
    3762:	c7 01       	movw	r24, r14
    3764:	b6 01       	movw	r22, r12
    3766:	20 e1       	ldi	r18, 0x10	; 16
    3768:	3e e0       	ldi	r19, 0x0E	; 14
    376a:	40 e0       	ldi	r20, 0x00	; 0
    376c:	50 e0       	ldi	r21, 0x00	; 0
    376e:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
    3772:	ca 01       	movw	r24, r20
    3774:	b9 01       	movw	r22, r18
    3776:	28 e1       	ldi	r18, 0x18	; 24
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	40 e0       	ldi	r20, 0x00	; 0
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__divmodsi4>
		data[2] = hold % 10;        /* hours */
		hold /= 10;
		data[2] |= hold << 4;       /* 10s of hours */
    3782:	8d ec       	ldi	r24, 0xCD	; 205
    3784:	68 9f       	mul	r22, r24
    3786:	81 2d       	mov	r24, r1
    3788:	11 24       	eor	r1, r1
    378a:	86 95       	lsr	r24
    378c:	86 95       	lsr	r24
    378e:	86 95       	lsr	r24
    3790:	f0 e1       	ldi	r31, 0x10	; 16
    3792:	8f 9f       	mul	r24, r31
    3794:	90 01       	movw	r18, r0
    3796:	11 24       	eor	r1, r1
    3798:	88 0f       	add	r24, r24
    379a:	98 2f       	mov	r25, r24
    379c:	99 0f       	add	r25, r25
    379e:	99 0f       	add	r25, r25
    37a0:	89 0f       	add	r24, r25
    37a2:	68 1b       	sub	r22, r24
    37a4:	62 2b       	or	r22, r18
    37a6:	6f 83       	std	Y+7, r22	; 0x07

		i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_SECONDS, data, 3);
    37a8:	23 e0       	ldi	r18, 0x03	; 3
    37aa:	a8 01       	movw	r20, r16
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	80 ed       	ldi	r24, 0xD0	; 208
    37b0:	ac d0       	rcall	.+344    	; 0x390a <i2c_device_write>

/*	temp /= 24; */

	}
    37b2:	2b 96       	adiw	r28, 0x0b	; 11
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	df 91       	pop	r29
    37c0:	cf 91       	pop	r28
    37c2:	1f 91       	pop	r17
    37c4:	0f 91       	pop	r16
    37c6:	ff 90       	pop	r15
    37c8:	ef 90       	pop	r14
    37ca:	df 90       	pop	r13
    37cc:	cf 90       	pop	r12
    37ce:	bf 90       	pop	r11
    37d0:	af 90       	pop	r10
    37d2:	9f 90       	pop	r9
    37d4:	8f 90       	pop	r8
    37d6:	7f 90       	pop	r7
    37d8:	6f 90       	pop	r6
    37da:	5f 90       	pop	r5
    37dc:	4f 90       	pop	r4
    37de:	3f 90       	pop	r3
    37e0:	08 95       	ret

000037e2 <ds3231_1s_sqw>:

	void ds3231_1s_sqw(BOOL enable)
	{
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
    37e6:	1f 92       	push	r1
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
		if(enable)
    37ec:	88 23       	and	r24, r24
    37ee:	49 f0       	breq	.+18     	; 0x3802 <ds3231_1s_sqw+0x20>
		{
			uint8_t byte = 0x00;
    37f0:	19 82       	std	Y+1, r1	; 0x01
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
    37f2:	21 e0       	ldi	r18, 0x01	; 1
    37f4:	ae 01       	movw	r20, r28
    37f6:	4f 5f       	subi	r20, 0xFF	; 255
    37f8:	5f 4f       	sbci	r21, 0xFF	; 255
    37fa:	6e e0       	ldi	r22, 0x0E	; 14
    37fc:	80 ed       	ldi	r24, 0xD0	; 208
    37fe:	85 d0       	rcall	.+266    	; 0x390a <i2c_device_write>
    3800:	09 c0       	rjmp	.+18     	; 0x3814 <ds3231_1s_sqw+0x32>
		}
		else
		{
			uint8_t byte = 0x04;
    3802:	84 e0       	ldi	r24, 0x04	; 4
    3804:	89 83       	std	Y+1, r24	; 0x01
			i2c_device_write(DS3231_I2C_SLAVE_ADDR, RTC_CONTROL, &byte, 1);
    3806:	21 e0       	ldi	r18, 0x01	; 1
    3808:	ae 01       	movw	r20, r28
    380a:	4f 5f       	subi	r20, 0xFF	; 255
    380c:	5f 4f       	sbci	r21, 0xFF	; 255
    380e:	6e e0       	ldi	r22, 0x0E	; 14
    3810:	80 ed       	ldi	r24, 0xD0	; 208
    3812:	7b d0       	rcall	.+246    	; 0x390a <i2c_device_write>
		}
	}
    3814:	0f 90       	pop	r0
    3816:	df 91       	pop	r29
    3818:	cf 91       	pop	r28
    381a:	08 95       	ret

0000381c <i2c_init>:
	}
#endif /* SUPPORT_I2C_CLEARBUS_FUNCTION */

void i2c_init(void)
{
	power_twi_enable();
    381c:	e4 e6       	ldi	r30, 0x64	; 100
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	8f 77       	andi	r24, 0x7F	; 127
    3824:	80 83       	st	Z, r24

	/* set SCL to ~100 kHz for 8 MHz CPU clock */
	TWSR = 0;   /* Prescale /1 */
    3826:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 0x25;
    382a:	85 e2       	ldi	r24, 0x25	; 37
    382c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>

	/* enable I2C */
	TWCR = _BV(TWEN);
    3830:	84 e0       	ldi	r24, 0x04	; 4
    3832:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	g_i2c_not_timed_out = TRUE;
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_i2c_not_timed_out>
    383c:	08 95       	ret

0000383e <i2c_start>:
#else
	void i2c_start(void)
#endif
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    383e:	84 ea       	ldi	r24, 0xA4	; 164
    3840:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    3844:	ec eb       	ldi	r30, 0xBC	; 188
    3846:	f0 e0       	ldi	r31, 0x00	; 0
    3848:	80 81       	ld	r24, Z
    384a:	88 23       	and	r24, r24
    384c:	24 f0       	brlt	.+8      	; 0x3856 <i2c_start+0x18>
    384e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_i2c_not_timed_out>
    3852:	81 11       	cpse	r24, r1
    3854:	f9 cf       	rjmp	.-14     	; 0x3848 <i2c_start+0xa>
		{
			;
		}

		if(!g_i2c_not_timed_out)    /* if timed out, reset the bus */
    3856:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_i2c_not_timed_out>
    385a:	81 11       	cpse	r24, r1
    385c:	07 c0       	rjmp	.+14     	; 0x386c <i2c_start+0x2e>
		{
			TWCR = (1 << TWINT) | (1 << TWSTO);
    385e:	80 e9       	ldi	r24, 0x90	; 144
    3860:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			g_i2c_not_timed_out = TRUE;
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_i2c_not_timed_out>
			return( TRUE);
    386a:	08 95       	ret
		}

		return( FALSE);
    386c:	80 e0       	ldi	r24, 0x00	; 0
		while(!(TWCR & _BV(TWINT)))
		{
			;
		}
#endif
}
    386e:	08 95       	ret

00003870 <i2c_stop>:

void i2c_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    3870:	84 e9       	ldi	r24, 0x94	; 148
    3872:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3876:	08 95       	ret

00003878 <i2c_write_success>:
}

BOOL i2c_write_success(uint8_t data, uint8_t success)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWDR = data;
    3878:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR = _BV(TWINT) | _BV(TWEN);
    387c:	84 e8       	ldi	r24, 0x84	; 132
    387e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    3882:	ec eb       	ldi	r30, 0xBC	; 188
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	88 23       	and	r24, r24
    388a:	24 f0       	brlt	.+8      	; 0x3894 <i2c_write_success+0x1c>
    388c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_i2c_not_timed_out>
    3890:	81 11       	cpse	r24, r1
    3892:	f9 cf       	rjmp	.-14     	; 0x3886 <i2c_write_success+0xe>
		{
			;
		}

		uint8_t stat = TW_STATUS;
    3894:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

		/* ignore timeout condition to ensure i2c_stop() gets sent */
		if(stat != success)
    3898:	88 7f       	andi	r24, 0xF8	; 248
    389a:	86 17       	cp	r24, r22
    389c:	39 f0       	breq	.+14     	; 0x38ac <i2c_write_success+0x34>
		{
			TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    389e:	84 e9       	ldi	r24, 0x94	; 148
    38a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			g_i2c_not_timed_out = TRUE;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <g_i2c_not_timed_out>
			return(TRUE);
    38aa:	08 95       	ret
		}

		return( FALSE);
    38ac:	80 e0       	ldi	r24, 0x00	; 0
			return(TRUE);
		}

		return(FALSE);
#endif
}
    38ae:	08 95       	ret

000038b0 <i2c_read_ack>:

uint8_t i2c_read_ack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    38b0:	84 ec       	ldi	r24, 0xC4	; 196
    38b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    38b6:	ec eb       	ldi	r30, 0xBC	; 188
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	80 81       	ld	r24, Z
    38bc:	88 23       	and	r24, r24
    38be:	24 f0       	brlt	.+8      	; 0x38c8 <i2c_read_ack+0x18>
    38c0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_i2c_not_timed_out>
    38c4:	81 11       	cpse	r24, r1
    38c6:	f9 cf       	rjmp	.-14     	; 0x38ba <i2c_read_ack+0xa>
		{
			;
		}
		
		return(TWDR);
    38c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			;
		}
		
		return( TWDR);
#endif
}
    38cc:	08 95       	ret

000038ce <i2c_read_nack>:

uint8_t i2c_read_nack(void)
{
#ifdef I2C_TIMEOUT_SUPPORT
		TWCR = _BV(TWINT) | _BV(TWEN);
    38ce:	84 e8       	ldi	r24, 0x84	; 132
    38d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & _BV(TWINT)) && g_i2c_not_timed_out)
    38d4:	ec eb       	ldi	r30, 0xBC	; 188
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	80 81       	ld	r24, Z
    38da:	88 23       	and	r24, r24
    38dc:	24 f0       	brlt	.+8      	; 0x38e6 <i2c_read_nack+0x18>
    38de:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <g_i2c_not_timed_out>
    38e2:	81 11       	cpse	r24, r1
    38e4:	f9 cf       	rjmp	.-14     	; 0x38d8 <i2c_read_nack+0xa>
		{
			;
		}
		
		return( TWDR);
    38e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			;
		}
		
		return( TWDR);
#endif
}
    38ea:	08 95       	ret

000038ec <i2c_status>:

BOOL i2c_status(uint8_t status)
{
	if(TW_STATUS != status)
    38ec:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    38f0:	28 7f       	andi	r18, 0xF8	; 248
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	28 17       	cp	r18, r24
    38f8:	39 07       	cpc	r19, r25
    38fa:	29 f0       	breq	.+10     	; 0x3906 <i2c_status+0x1a>
	{
		TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
    38fc:	84 e9       	ldi	r24, 0x94	; 148
    38fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		return(TRUE);
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	08 95       	ret
	}

	return(FALSE);
    3906:	80 e0       	ldi	r24, 0x00	; 0
}
    3908:	08 95       	ret

0000390a <i2c_device_write>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#else
	BOOL i2c_device_write(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2write)
#endif
{
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	00 d0       	rcall	.+0      	; 0x3910 <i2c_device_write+0x6>
    3910:	00 d0       	rcall	.+0      	; 0x3912 <i2c_device_write+0x8>
    3912:	00 d0       	rcall	.+0      	; 0x3914 <i2c_device_write+0xa>
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
    3918:	8a 83       	std	Y+2, r24	; 0x02
    391a:	6b 83       	std	Y+3, r22	; 0x03
    391c:	5d 83       	std	Y+5, r21	; 0x05
    391e:	4c 83       	std	Y+4, r20	; 0x04
    3920:	2e 83       	std	Y+6, r18	; 0x06
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    3922:	19 82       	std	Y+1, r1	; 0x01

		i2c_start();
    3924:	8c df       	rcall	.-232    	; 0x383e <i2c_start>
		if(i2c_status(TW_START))
    3926:	88 e0       	ldi	r24, 0x08	; 8
    3928:	e1 df       	rcall	.-62     	; 0x38ec <i2c_status>
    392a:	88 23       	and	r24, r24
    392c:	11 f0       	breq	.+4      	; 0x3932 <i2c_device_write+0x28>
		{
			return(TRUE);
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	28 c0       	rjmp	.+80     	; 0x3982 <i2c_device_write+0x78>
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    3932:	68 e1       	ldi	r22, 0x18	; 24
    3934:	8a 81       	ldd	r24, Y+2	; 0x02
    3936:	a0 df       	rcall	.-192    	; 0x3878 <i2c_write_success>
    3938:	88 23       	and	r24, r24
    393a:	11 f0       	breq	.+4      	; 0x3940 <i2c_device_write+0x36>
		{
			return(TRUE);
    393c:	81 e0       	ldi	r24, 0x01	; 1
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    393e:	21 c0       	rjmp	.+66     	; 0x3982 <i2c_device_write+0x78>
    3940:	68 e2       	ldi	r22, 0x28	; 40
    3942:	8b 81       	ldd	r24, Y+3	; 0x03
    3944:	99 df       	rcall	.-206    	; 0x3878 <i2c_write_success>
    3946:	88 23       	and	r24, r24
    3948:	a1 f0       	breq	.+40     	; 0x3972 <i2c_device_write+0x68>
		{
			return(TRUE);
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	1a c0       	rjmp	.+52     	; 0x3982 <i2c_device_write+0x78>
		}

		while(bytes2write--)
		{
			if(i2c_write_success(data[index++], TW_MT_DATA_ACK))
    394e:	89 81       	ldd	r24, Y+1	; 0x01
    3950:	91 e0       	ldi	r25, 0x01	; 1
    3952:	98 0f       	add	r25, r24
    3954:	99 83       	std	Y+1, r25	; 0x01
    3956:	88 2f       	mov	r24, r24
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	2c 81       	ldd	r18, Y+4	; 0x04
    395c:	3d 81       	ldd	r19, Y+5	; 0x05
    395e:	82 0f       	add	r24, r18
    3960:	93 1f       	adc	r25, r19
    3962:	fc 01       	movw	r30, r24
    3964:	80 81       	ld	r24, Z
    3966:	68 e2       	ldi	r22, 0x28	; 40
    3968:	87 df       	rcall	.-242    	; 0x3878 <i2c_write_success>
    396a:	88 23       	and	r24, r24
    396c:	11 f0       	breq	.+4      	; 0x3972 <i2c_device_write+0x68>
			{
				return(TRUE);
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	08 c0       	rjmp	.+16     	; 0x3982 <i2c_device_write+0x78>
		if(i2c_write_success(addr, TW_MT_DATA_ACK))
		{
			return(TRUE);
		}

		while(bytes2write--)
    3972:	8e 81       	ldd	r24, Y+6	; 0x06
    3974:	9f ef       	ldi	r25, 0xFF	; 255
    3976:	98 0f       	add	r25, r24
    3978:	9e 83       	std	Y+6, r25	; 0x06
    397a:	88 23       	and	r24, r24
			{
				return(TRUE);
			}
		}

		i2c_stop();
    397c:	41 f7       	brne	.-48     	; 0x394e <i2c_device_write+0x44>
    397e:	78 df       	rcall	.-272    	; 0x3870 <i2c_stop>

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    3980:	80 e0       	ldi	r24, 0x00	; 0
}
    3982:	26 96       	adiw	r28, 0x06	; 6
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	f8 94       	cli
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	cd bf       	out	0x3d, r28	; 61
    398e:	df 91       	pop	r29
    3990:	cf 91       	pop	r28
    3992:	08 95       	ret

00003994 <i2c_device_read>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	BOOL __attribute__((optimize("O0"))) i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#else
	BOOL i2c_device_read(uint8_t slaveAddr, uint8_t addr, uint8_t data[], uint8_t bytes2read)
#endif
{
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	00 d0       	rcall	.+0      	; 0x399e <i2c_device_read+0xa>
    399e:	00 d0       	rcall	.+0      	; 0x39a0 <i2c_device_read+0xc>
    39a0:	00 d0       	rcall	.+0      	; 0x39a2 <i2c_device_read+0xe>
    39a2:	cd b7       	in	r28, 0x3d	; 61
    39a4:	de b7       	in	r29, 0x3e	; 62
    39a6:	8a 83       	std	Y+2, r24	; 0x02
    39a8:	6b 83       	std	Y+3, r22	; 0x03
    39aa:	5d 83       	std	Y+5, r21	; 0x05
		#ifndef DEBUG_WITHOUT_I2C
		uint8_t index = 0;
    39ac:	4c 83       	std	Y+4, r20	; 0x04

		i2c_start();
    39ae:	2e 83       	std	Y+6, r18	; 0x06
    39b0:	19 82       	std	Y+1, r1	; 0x01
		if(i2c_status(TW_START))
    39b2:	45 df       	rcall	.-374    	; 0x383e <i2c_start>
    39b4:	88 e0       	ldi	r24, 0x08	; 8
    39b6:	9a df       	rcall	.-204    	; 0x38ec <i2c_status>
    39b8:	88 23       	and	r24, r24
		{
			return(TRUE);
    39ba:	11 f0       	breq	.+4      	; 0x39c0 <i2c_device_read+0x2c>
    39bc:	81 e0       	ldi	r24, 0x01	; 1
		}

		if(i2c_write_success(slaveAddr, TW_MT_SLA_ACK))
    39be:	4d c0       	rjmp	.+154    	; 0x3a5a <i2c_device_read+0xc6>
    39c0:	68 e1       	ldi	r22, 0x18	; 24
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	59 df       	rcall	.-334    	; 0x3878 <i2c_write_success>
    39c6:	88 23       	and	r24, r24
		{
			return(TRUE);
    39c8:	11 f0       	breq	.+4      	; 0x39ce <i2c_device_read+0x3a>
		}

		if(i2c_write_success(addr, TW_MT_DATA_ACK))
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	46 c0       	rjmp	.+140    	; 0x3a5a <i2c_device_read+0xc6>
    39ce:	68 e2       	ldi	r22, 0x28	; 40
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	52 df       	rcall	.-348    	; 0x3878 <i2c_write_success>
		{
			return(TRUE);
    39d4:	88 23       	and	r24, r24
    39d6:	11 f0       	breq	.+4      	; 0x39dc <i2c_device_read+0x48>
		}

		i2c_start();
    39d8:	81 e0       	ldi	r24, 0x01	; 1
		if(i2c_status(TW_REP_START))
    39da:	3f c0       	rjmp	.+126    	; 0x3a5a <i2c_device_read+0xc6>
    39dc:	30 df       	rcall	.-416    	; 0x383e <i2c_start>
    39de:	80 e1       	ldi	r24, 0x10	; 16
    39e0:	85 df       	rcall	.-246    	; 0x38ec <i2c_status>
    39e2:	88 23       	and	r24, r24
		{
			return(TRUE);
    39e4:	11 f0       	breq	.+4      	; 0x39ea <i2c_device_read+0x56>
    39e6:	81 e0       	ldi	r24, 0x01	; 1
		}
		
		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
    39e8:	38 c0       	rjmp	.+112    	; 0x3a5a <i2c_device_read+0xc6>
    39ea:	8a 81       	ldd	r24, Y+2	; 0x02
    39ec:	81 60       	ori	r24, 0x01	; 1
    39ee:	60 e4       	ldi	r22, 0x40	; 64
    39f0:	43 df       	rcall	.-378    	; 0x3878 <i2c_write_success>
    39f2:	88 23       	and	r24, r24
    39f4:	51 f1       	breq	.+84     	; 0x3a4a <i2c_device_read+0xb6>
		{
			return(TRUE);
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	30 c0       	rjmp	.+96     	; 0x3a5a <i2c_device_read+0xc6>
		}

		while(bytes2read--)
		{
			if(bytes2read)
    39fa:	8e 81       	ldd	r24, Y+6	; 0x06
    39fc:	88 23       	and	r24, r24
			{
				data[index++] = i2c_read_ack();
    39fe:	a1 f0       	breq	.+40     	; 0x3a28 <i2c_device_read+0x94>
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	91 e0       	ldi	r25, 0x01	; 1
    3a04:	98 0f       	add	r25, r24
    3a06:	99 83       	std	Y+1, r25	; 0x01
    3a08:	88 2f       	mov	r24, r24
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	2c 81       	ldd	r18, Y+4	; 0x04
    3a0e:	3d 81       	ldd	r19, Y+5	; 0x05
    3a10:	89 01       	movw	r16, r18
    3a12:	08 0f       	add	r16, r24
    3a14:	19 1f       	adc	r17, r25
    3a16:	4c df       	rcall	.-360    	; 0x38b0 <i2c_read_ack>
    3a18:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_ACK))
    3a1a:	80 83       	st	Z, r24
    3a1c:	80 e5       	ldi	r24, 0x50	; 80
    3a1e:	66 df       	rcall	.-308    	; 0x38ec <i2c_status>
    3a20:	88 23       	and	r24, r24
				{
					return(TRUE);
    3a22:	99 f0       	breq	.+38     	; 0x3a4a <i2c_device_read+0xb6>
    3a24:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
			else
			{
				data[index] = i2c_read_nack();
    3a26:	19 c0       	rjmp	.+50     	; 0x3a5a <i2c_device_read+0xc6>
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	88 2f       	mov	r24, r24
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	2c 81       	ldd	r18, Y+4	; 0x04
    3a30:	3d 81       	ldd	r19, Y+5	; 0x05
    3a32:	89 01       	movw	r16, r18
    3a34:	08 0f       	add	r16, r24
    3a36:	19 1f       	adc	r17, r25
    3a38:	4a df       	rcall	.-364    	; 0x38ce <i2c_read_nack>
    3a3a:	f8 01       	movw	r30, r16
				if(i2c_status(TW_MR_DATA_NACK))
    3a3c:	80 83       	st	Z, r24
    3a3e:	88 e5       	ldi	r24, 0x58	; 88
    3a40:	55 df       	rcall	.-342    	; 0x38ec <i2c_status>
    3a42:	88 23       	and	r24, r24
    3a44:	11 f0       	breq	.+4      	; 0x3a4a <i2c_device_read+0xb6>
				{
					return(TRUE);
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	08 c0       	rjmp	.+16     	; 0x3a5a <i2c_device_read+0xc6>
		if(i2c_write_success((slaveAddr | TW_READ), TW_MR_SLA_ACK))
		{
			return(TRUE);
		}

		while(bytes2read--)
    3a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4c:	9f ef       	ldi	r25, 0xFF	; 255
    3a4e:	98 0f       	add	r25, r24
    3a50:	9e 83       	std	Y+6, r25	; 0x06
    3a52:	88 23       	and	r24, r24
    3a54:	91 f6       	brne	.-92     	; 0x39fa <i2c_device_read+0x66>
					return(TRUE);
				}
			}
		}

		i2c_stop();
    3a56:	0c df       	rcall	.-488    	; 0x3870 <i2c_stop>
    3a58:	80 e0       	ldi	r24, 0x00	; 0

		#endif  /* #ifndef DEBUG_WITHOUT_I2C */

	return(FALSE);
    3a5a:	26 96       	adiw	r28, 0x06	; 6
}
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	de bf       	out	0x3e, r29	; 62
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	df 91       	pop	r29
    3a68:	cf 91       	pop	r28
    3a6a:	1f 91       	pop	r17
    3a6c:	0f 91       	pop	r16
    3a6e:	08 95       	ret

00003a70 <max5478_set_dualpotentiometer_wipers>:
#define MAX_5478_WIPER_B_NVREG_COMMAND 0x22
#define MAX_5478_WIPER_B_NVREG_TO_VREG_COMMAND 0x62
#define MAX_5478_WIPER_B_VREG_TO_NVREG_COMMAND 0x52

void max5478_set_dualpotentiometer_wipers(uint16_t setting)
{
    3a70:	1f 93       	push	r17
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	1f 92       	push	r1
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	19 2f       	mov	r17, r25
	uint8_t data = setting & 0xFF;
    3a7e:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(MAX5478_I2C_SLAVE_ADDR_A0_0, MAX_5478_WIPER_A_VREG_COMMAND, &data, 1); // Fine attenuation
    3a80:	21 e0       	ldi	r18, 0x01	; 1
    3a82:	ae 01       	movw	r20, r28
    3a84:	4f 5f       	subi	r20, 0xFF	; 255
    3a86:	5f 4f       	sbci	r21, 0xFF	; 255
    3a88:	61 e1       	ldi	r22, 0x11	; 17
    3a8a:	80 e5       	ldi	r24, 0x50	; 80
    3a8c:	3e df       	rcall	.-388    	; 0x390a <i2c_device_write>
	data = (setting >> 8);
    3a8e:	19 83       	std	Y+1, r17	; 0x01
	i2c_device_write(MAX5478_I2C_SLAVE_ADDR_A0_0, MAX_5478_WIPER_B_VREG_COMMAND, &data, 1); // Coarse attenuation
    3a90:	21 e0       	ldi	r18, 0x01	; 1
    3a92:	ae 01       	movw	r20, r28
    3a94:	4f 5f       	subi	r20, 0xFF	; 255
    3a96:	5f 4f       	sbci	r21, 0xFF	; 255
    3a98:	62 e1       	ldi	r22, 0x12	; 18
    3a9a:	80 e5       	ldi	r24, 0x50	; 80
    3a9c:	36 df       	rcall	.-404    	; 0x390a <i2c_device_write>
    3a9e:	0f 90       	pop	r0
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	1f 91       	pop	r17
    3aa6:	08 95       	ret

00003aa8 <mcp23017_init>:
#ifdef SELECTIVELY_DISABLE_OPTIMIZATION
	void __attribute__((optimize("O0"))) mcp23017_init(void)
#else
	void mcp23017_init(void)
#endif
{
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <mcp23017_init+0x6>
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[2] = {0, 0};
    3ab2:	19 82       	std	Y+1, r1	; 0x01
    3ab4:	1a 82       	std	Y+2, r1	; 0x02
	/*
	* PortA
	*	P
	*/

	data[0] = 0b00100000; // disable SEQOP
    3ab6:	80 e2       	ldi	r24, 0x20	; 32
    3ab8:	89 83       	std	Y+1, r24	; 0x01
	if(i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_IOCON, data, 1))
    3aba:	21 e0       	ldi	r18, 0x01	; 1
    3abc:	ce 01       	movw	r24, r28
    3abe:	01 96       	adiw	r24, 0x01	; 1
    3ac0:	ac 01       	movw	r20, r24
    3ac2:	6b e0       	ldi	r22, 0x0B	; 11
    3ac4:	88 e4       	ldi	r24, 0x48	; 72
    3ac6:	21 df       	rcall	.-446    	; 0x390a <i2c_device_write>
    3ac8:	88 23       	and	r24, r24
    3aca:	09 f0       	breq	.+2      	; 0x3ace <mcp23017_init+0x26>
	{
		data[0] = 0;
    3acc:	19 82       	std	Y+1, r1	; 0x01
	}
	
	data[0] = 0b00000111;
    3ace:	87 e0       	ldi	r24, 0x07	; 7
    3ad0:	89 83       	std	Y+1, r24	; 0x01
	if(i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_IODIRA, data, 1))
    3ad2:	21 e0       	ldi	r18, 0x01	; 1
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	01 96       	adiw	r24, 0x01	; 1
    3ad8:	ac 01       	movw	r20, r24
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	88 e4       	ldi	r24, 0x48	; 72
    3ade:	15 df       	rcall	.-470    	; 0x390a <i2c_device_write>
    3ae0:	88 23       	and	r24, r24
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <mcp23017_init+0x3e>
	{
		data[0] = 0;
    3ae4:	19 82       	std	Y+1, r1	; 0x01
	}

	data[0] = 0b10101000; // 0b00000000;
    3ae6:	88 ea       	ldi	r24, 0xA8	; 168
    3ae8:	89 83       	std	Y+1, r24	; 0x01
	if(i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_OLATA, data, 1))
    3aea:	21 e0       	ldi	r18, 0x01	; 1
    3aec:	ce 01       	movw	r24, r28
    3aee:	01 96       	adiw	r24, 0x01	; 1
    3af0:	ac 01       	movw	r20, r24
    3af2:	64 e1       	ldi	r22, 0x14	; 20
    3af4:	88 e4       	ldi	r24, 0x48	; 72
    3af6:	09 df       	rcall	.-494    	; 0x390a <i2c_device_write>
    3af8:	88 23       	and	r24, r24
    3afa:	09 f0       	breq	.+2      	; 0x3afe <mcp23017_init+0x56>
	{
		data[0] = 0;
    3afc:	19 82       	std	Y+1, r1	; 0x01
	*	PB4 - DI Master/Clone Output (high = Master; low = Clone)
	*	PB5 - Audio Amp Enable Output (high)
	*	PB6 - Headphone Power Latch (high)
	*	PB7 - Client UART Enable (low)
	*/
	data[0] = 0b00000011;
    3afe:	83 e0       	ldi	r24, 0x03	; 3
    3b00:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_IODIRB, data, 1);
    3b02:	21 e0       	ldi	r18, 0x01	; 1
    3b04:	ce 01       	movw	r24, r28
    3b06:	01 96       	adiw	r24, 0x01	; 1
    3b08:	ac 01       	movw	r20, r24
    3b0a:	61 e0       	ldi	r22, 0x01	; 1
    3b0c:	88 e4       	ldi	r24, 0x48	; 72
    3b0e:	fd de       	rcall	.-518    	; 0x390a <i2c_device_write>

	data[0] = 0b10000000;
    3b10:	80 e8       	ldi	r24, 0x80	; 128
    3b12:	89 83       	std	Y+1, r24	; 0x01
	i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_OLATB, data, 1);
    3b14:	21 e0       	ldi	r18, 0x01	; 1
    3b16:	ce 01       	movw	r24, r28
    3b18:	01 96       	adiw	r24, 0x01	; 1
    3b1a:	ac 01       	movw	r20, r24
    3b1c:	65 e1       	ldi	r22, 0x15	; 21
    3b1e:	88 e4       	ldi	r24, 0x48	; 72
    3b20:	f4 de       	rcall	.-536    	; 0x390a <i2c_device_write>
}
    3b22:	00 00       	nop
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	08 95       	ret

00003b2e <mcp23017_writePort>:

void mcp23017_writePort( uint8_t data, uint8_t port)
{
    3b2e:	cf 93       	push	r28
    3b30:	df 93       	push	r29
    3b32:	1f 92       	push	r1
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	89 83       	std	Y+1, r24	; 0x01
	if(port == MCP23017_PORTA)
    3b3a:	61 11       	cpse	r22, r1
    3b3c:	08 c0       	rjmp	.+16     	; 0x3b4e <mcp23017_writePort+0x20>
	{
		i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_GPIOA, &data, 1);
    3b3e:	21 e0       	ldi	r18, 0x01	; 1
    3b40:	ae 01       	movw	r20, r28
    3b42:	4f 5f       	subi	r20, 0xFF	; 255
    3b44:	5f 4f       	sbci	r21, 0xFF	; 255
    3b46:	62 e1       	ldi	r22, 0x12	; 18
    3b48:	88 e4       	ldi	r24, 0x48	; 72
    3b4a:	df de       	rcall	.-578    	; 0x390a <i2c_device_write>
    3b4c:	07 c0       	rjmp	.+14     	; 0x3b5c <mcp23017_writePort+0x2e>
	}
	else
	{
		i2c_device_write(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_GPIOB, &data, 1);
    3b4e:	21 e0       	ldi	r18, 0x01	; 1
    3b50:	ae 01       	movw	r20, r28
    3b52:	4f 5f       	subi	r20, 0xFF	; 255
    3b54:	5f 4f       	sbci	r21, 0xFF	; 255
    3b56:	63 e1       	ldi	r22, 0x13	; 19
    3b58:	88 e4       	ldi	r24, 0x48	; 72
    3b5a:	d7 de       	rcall	.-594    	; 0x390a <i2c_device_write>
	}
}
    3b5c:	0f 90       	pop	r0
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28

BOOL mcp23017_readPort(uint8_t *data, uint8_t port)
{
	BOOL failure;

	if(port == MCP23017_PORTA)
    3b62:	08 95       	ret

00003b64 <mcp23017_readPort>:
    3b64:	61 11       	cpse	r22, r1
	{
		failure = i2c_device_read(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_GPIOA, data, 1);
    3b66:	06 c0       	rjmp	.+12     	; 0x3b74 <mcp23017_readPort+0x10>
    3b68:	21 e0       	ldi	r18, 0x01	; 1
    3b6a:	ac 01       	movw	r20, r24
    3b6c:	62 e1       	ldi	r22, 0x12	; 18
    3b6e:	88 e4       	ldi	r24, 0x48	; 72
    3b70:	11 cf       	rjmp	.-478    	; 0x3994 <i2c_device_read>
	}
	else
	{
		failure = i2c_device_read(MCP23017_I2C_SLAVE_ADDR_A100, ADDR_GPIOB, data, 1);
    3b72:	08 95       	ret
    3b74:	21 e0       	ldi	r18, 0x01	; 1
    3b76:	ac 01       	movw	r20, r24
    3b78:	63 e1       	ldi	r22, 0x13	; 19
    3b7a:	88 e4       	ldi	r24, 0x48	; 72
    3b7c:	0b cf       	rjmp	.-490    	; 0x3994 <i2c_device_read>
	}

	return(failure);
}
    3b7e:	08 95       	ret

00003b80 <si5351_get_frequency>:
 * Returns TRUE on failure
 *
 */
	Frequency_Hz si5351_get_frequency(Si5351_clock clock)
	{
		return(clock_out[clock]);
    3b80:	24 e0       	ldi	r18, 0x04	; 4
    3b82:	82 9f       	mul	r24, r18
    3b84:	c0 01       	movw	r24, r0
    3b86:	11 24       	eor	r1, r1
    3b88:	fc 01       	movw	r30, r24
    3b8a:	e7 56       	subi	r30, 0x67	; 103
    3b8c:	f8 4f       	sbci	r31, 0xF8	; 248
    3b8e:	60 81       	ld	r22, Z
    3b90:	71 81       	ldd	r23, Z+1	; 0x01
    3b92:	82 81       	ldd	r24, Z+2	; 0x02
    3b94:	93 81       	ldd	r25, Z+3	; 0x03
	}
    3b96:	08 95       	ret

00003b98 <si5351_set_correction>:
 * EEPROM during initialization for use by the tuning
 * algorithms.
 */
	void si5351_set_correction(int32_t corr)
	{
		g_si5351_ref_correction = corr;
    3b98:	60 93 aa 07 	sts	0x07AA, r22	; 0x8007aa <g_si5351_ref_correction>
    3b9c:	70 93 ab 07 	sts	0x07AB, r23	; 0x8007ab <g_si5351_ref_correction+0x1>
    3ba0:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <g_si5351_ref_correction+0x2>
    3ba4:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <g_si5351_ref_correction+0x3>
    3ba8:	08 95       	ret

00003baa <si5351_get_correction>:
 *
 * Returns the oscillator correction factor.
 */
	int32_t si5351_get_correction(void)
	{
		return(g_si5351_ref_correction);
    3baa:	60 91 aa 07 	lds	r22, 0x07AA	; 0x8007aa <g_si5351_ref_correction>
    3bae:	70 91 ab 07 	lds	r23, 0x07AB	; 0x8007ab <g_si5351_ref_correction+0x1>
    3bb2:	80 91 ac 07 	lds	r24, 0x07AC	; 0x8007ac <g_si5351_ref_correction+0x2>
    3bb6:	90 91 ad 07 	lds	r25, 0x07AD	; 0x8007ad <g_si5351_ref_correction+0x3>
	}
    3bba:	08 95       	ret

00003bbc <reduce_by_gcd>:
 *
 * Simple implementation of Euclid's Algorithm for calculating GCD of two uint32's
 *
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
    3bbc:	4f 92       	push	r4
    3bbe:	5f 92       	push	r5
    3bc0:	6f 92       	push	r6
    3bc2:	7f 92       	push	r7
    3bc4:	8f 92       	push	r8
    3bc6:	9f 92       	push	r9
    3bc8:	af 92       	push	r10
    3bca:	bf 92       	push	r11
    3bcc:	cf 92       	push	r12
    3bce:	df 92       	push	r13
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	cf 93       	push	r28
    3bda:	df 93       	push	r29
    3bdc:	ec 01       	movw	r28, r24
    3bde:	8b 01       	movw	r16, r22
		uint32_t r;
		uint32_t b = *m;
    3be0:	48 80       	ld	r4, Y
    3be2:	59 80       	ldd	r5, Y+1	; 0x01
    3be4:	6a 80       	ldd	r6, Y+2	; 0x02
    3be6:	7b 80       	ldd	r7, Y+3	; 0x03
		uint32_t c = *n;

		if(!b || !c)
    3be8:	41 14       	cp	r4, r1
    3bea:	51 04       	cpc	r5, r1
    3bec:	61 04       	cpc	r6, r1
    3bee:	71 04       	cpc	r7, r1
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <reduce_by_gcd+0x38>
    3bf2:	43 c0       	rjmp	.+134    	; 0x3c7a <reduce_by_gcd+0xbe>
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
		uint32_t r;
		uint32_t b = *m;
		uint32_t c = *n;
    3bf4:	fb 01       	movw	r30, r22
    3bf6:	80 80       	ld	r8, Z
    3bf8:	91 80       	ldd	r9, Z+1	; 0x01
    3bfa:	a2 80       	ldd	r10, Z+2	; 0x02
    3bfc:	b3 80       	ldd	r11, Z+3	; 0x03

		if(!b || !c)
    3bfe:	81 14       	cp	r8, r1
    3c00:	91 04       	cpc	r9, r1
    3c02:	a1 04       	cpc	r10, r1
    3c04:	b1 04       	cpc	r11, r1
    3c06:	c9 f1       	breq	.+114    	; 0x3c7a <reduce_by_gcd+0xbe>
		{
			return;
		}

		for(r = b % c; r; b = c, c = r, r = b % c)
    3c08:	c3 01       	movw	r24, r6
    3c0a:	b2 01       	movw	r22, r4
    3c0c:	a5 01       	movw	r20, r10
    3c0e:	94 01       	movw	r18, r8
    3c10:	43 d6       	rcall	.+3206   	; 0x4898 <__udivmodsi4>
    3c12:	6b 01       	movw	r12, r22
    3c14:	7c 01       	movw	r14, r24
    3c16:	67 2b       	or	r22, r23
    3c18:	68 2b       	or	r22, r24
    3c1a:	69 2b       	or	r22, r25
    3c1c:	19 f4       	brne	.+6      	; 0x3c24 <reduce_by_gcd+0x68>
    3c1e:	0f c0       	rjmp	.+30     	; 0x3c3e <reduce_by_gcd+0x82>
    3c20:	6b 01       	movw	r12, r22
    3c22:	7c 01       	movw	r14, r24
    3c24:	c5 01       	movw	r24, r10
    3c26:	b4 01       	movw	r22, r8
    3c28:	a7 01       	movw	r20, r14
    3c2a:	96 01       	movw	r18, r12
    3c2c:	35 d6       	rcall	.+3178   	; 0x4898 <__udivmodsi4>
    3c2e:	46 01       	movw	r8, r12
    3c30:	57 01       	movw	r10, r14
    3c32:	61 15       	cp	r22, r1
    3c34:	71 05       	cpc	r23, r1
    3c36:	81 05       	cpc	r24, r1
    3c38:	91 05       	cpc	r25, r1
    3c3a:	91 f7       	brne	.-28     	; 0x3c20 <reduce_by_gcd+0x64>
    3c3c:	02 c0       	rjmp	.+4      	; 0x3c42 <reduce_by_gcd+0x86>
 */
	void reduce_by_gcd(uint32_t *m, uint32_t *n)
	{
		uint32_t r;
		uint32_t b = *m;
		uint32_t c = *n;
    3c3e:	75 01       	movw	r14, r10
    3c40:	64 01       	movw	r12, r8
		for(r = b % c; r; b = c, c = r, r = b % c)
		{
			;
		}

		if(c > 1)
    3c42:	f2 e0       	ldi	r31, 0x02	; 2
    3c44:	cf 16       	cp	r12, r31
    3c46:	d1 04       	cpc	r13, r1
    3c48:	e1 04       	cpc	r14, r1
    3c4a:	f1 04       	cpc	r15, r1
    3c4c:	b0 f0       	brcs	.+44     	; 0x3c7a <reduce_by_gcd+0xbe>
		{
			*m /= c;
    3c4e:	c3 01       	movw	r24, r6
    3c50:	b2 01       	movw	r22, r4
    3c52:	a7 01       	movw	r20, r14
    3c54:	96 01       	movw	r18, r12
    3c56:	20 d6       	rcall	.+3136   	; 0x4898 <__udivmodsi4>
    3c58:	28 83       	st	Y, r18
    3c5a:	39 83       	std	Y+1, r19	; 0x01
    3c5c:	4a 83       	std	Y+2, r20	; 0x02
    3c5e:	5b 83       	std	Y+3, r21	; 0x03
			*n /= c;
    3c60:	f8 01       	movw	r30, r16
    3c62:	60 81       	ld	r22, Z
    3c64:	71 81       	ldd	r23, Z+1	; 0x01
    3c66:	82 81       	ldd	r24, Z+2	; 0x02
    3c68:	93 81       	ldd	r25, Z+3	; 0x03
    3c6a:	a7 01       	movw	r20, r14
    3c6c:	96 01       	movw	r18, r12
    3c6e:	14 d6       	rcall	.+3112   	; 0x4898 <__udivmodsi4>
    3c70:	f8 01       	movw	r30, r16
    3c72:	20 83       	st	Z, r18
    3c74:	31 83       	std	Z+1, r19	; 0x01
    3c76:	42 83       	std	Z+2, r20	; 0x02
    3c78:	53 83       	std	Z+3, r21	; 0x03
		}

		return;
	}
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	bf 90       	pop	r11
    3c8c:	af 90       	pop	r10
    3c8e:	9f 90       	pop	r9
    3c90:	8f 90       	pop	r8
    3c92:	7f 90       	pop	r7
    3c94:	6f 90       	pop	r6
    3c96:	5f 90       	pop	r5
    3c98:	4f 90       	pop	r4
    3c9a:	08 95       	ret

00003c9c <pll_calc>:
#ifdef DEBUGGING_ONLY
		Frequency_Hz pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
#else
		BOOL pll_calc(Frequency_Hz vco_freq, Union_si5351_regs *reg, int32_t correction)
#endif
	{
    3c9c:	4f 92       	push	r4
    3c9e:	5f 92       	push	r5
    3ca0:	6f 92       	push	r6
    3ca2:	7f 92       	push	r7
    3ca4:	8f 92       	push	r8
    3ca6:	9f 92       	push	r9
    3ca8:	af 92       	push	r10
    3caa:	bf 92       	push	r11
    3cac:	cf 92       	push	r12
    3cae:	df 92       	push	r13
    3cb0:	ef 92       	push	r14
    3cb2:	ff 92       	push	r15
    3cb4:	0f 93       	push	r16
    3cb6:	1f 93       	push	r17
    3cb8:	cf 93       	push	r28
    3cba:	df 93       	push	r29
    3cbc:	cd b7       	in	r28, 0x3d	; 61
    3cbe:	de b7       	in	r29, 0x3e	; 62
    3cc0:	28 97       	sbiw	r28, 0x08	; 8
    3cc2:	0f b6       	in	r0, 0x3f	; 63
    3cc4:	f8 94       	cli
    3cc6:	de bf       	out	0x3e, r29	; 62
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	cd bf       	out	0x3d, r28	; 61
    3ccc:	8a 01       	movw	r16, r20
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = 0;
#endif
		Frequency_Hz ref_freq = xtal_freq;
    3cce:	c0 90 32 01 	lds	r12, 0x0132	; 0x800132 <xtal_freq>
    3cd2:	d0 90 33 01 	lds	r13, 0x0133	; 0x800133 <xtal_freq+0x1>
    3cd6:	e0 90 34 01 	lds	r14, 0x0134	; 0x800134 <xtal_freq+0x2>
    3cda:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <xtal_freq+0x3>
				return(TRUE);
			}
#endif

		/* Determine integer part of feedback equation */
		a = vco_freq / ref_freq;
    3cde:	a7 01       	movw	r20, r14
    3ce0:	96 01       	movw	r18, r12
    3ce2:	da d5       	rcall	.+2996   	; 0x4898 <__udivmodsi4>
    3ce4:	49 01       	movw	r8, r18
    3ce6:	5a 01       	movw	r10, r20
				return(TRUE);
			}
#endif

		/* Find best approximation for b/c = fVCO mod fIN */
		b = vco_freq % ref_freq;
    3ce8:	69 83       	std	Y+1, r22	; 0x01
    3cea:	7a 83       	std	Y+2, r23	; 0x02
    3cec:	8b 83       	std	Y+3, r24	; 0x03
    3cee:	9c 83       	std	Y+4, r25	; 0x04
		c = ref_freq;
    3cf0:	cd 82       	std	Y+5, r12	; 0x05
    3cf2:	de 82       	std	Y+6, r13	; 0x06
    3cf4:	ef 82       	std	Y+7, r14	; 0x07
    3cf6:	f8 86       	std	Y+8, r15	; 0x08

		reduce_by_gcd(&b, &c);
    3cf8:	be 01       	movw	r22, r28
    3cfa:	6b 5f       	subi	r22, 0xFB	; 251
    3cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfe:	ce 01       	movw	r24, r28
    3d00:	01 96       	adiw	r24, 0x01	; 1
    3d02:	5c df       	rcall	.-328    	; 0x3bbc <reduce_by_gcd>

		uint32_t bx128 = b << 7;
    3d04:	c9 80       	ldd	r12, Y+1	; 0x01
    3d06:	da 80       	ldd	r13, Y+2	; 0x02
    3d08:	eb 80       	ldd	r14, Y+3	; 0x03
    3d0a:	fc 80       	ldd	r15, Y+4	; 0x04
    3d0c:	cc 0c       	add	r12, r12
    3d0e:	dd 1c       	adc	r13, r13
    3d10:	ee 1c       	adc	r14, r14
    3d12:	ff 1c       	adc	r15, r15
    3d14:	cc 0c       	add	r12, r12
    3d16:	dd 1c       	adc	r13, r13
    3d18:	ee 1c       	adc	r14, r14
    3d1a:	ff 1c       	adc	r15, r15
    3d1c:	cc 0c       	add	r12, r12
    3d1e:	dd 1c       	adc	r13, r13
    3d20:	ee 1c       	adc	r14, r14
    3d22:	ff 1c       	adc	r15, r15
    3d24:	cc 0c       	add	r12, r12
    3d26:	dd 1c       	adc	r13, r13
    3d28:	ee 1c       	adc	r14, r14
    3d2a:	ff 1c       	adc	r15, r15
    3d2c:	cc 0c       	add	r12, r12
    3d2e:	dd 1c       	adc	r13, r13
    3d30:	ee 1c       	adc	r14, r14
    3d32:	ff 1c       	adc	r15, r15
    3d34:	cc 0c       	add	r12, r12
    3d36:	dd 1c       	adc	r13, r13
    3d38:	ee 1c       	adc	r14, r14
    3d3a:	ff 1c       	adc	r15, r15
    3d3c:	cc 0c       	add	r12, r12
    3d3e:	dd 1c       	adc	r13, r13
    3d40:	ee 1c       	adc	r14, r14
    3d42:	ff 1c       	adc	r15, r15
		uint32_t bx128overc = bx128 / c;
    3d44:	4d 80       	ldd	r4, Y+5	; 0x05
    3d46:	5e 80       	ldd	r5, Y+6	; 0x06
    3d48:	6f 80       	ldd	r6, Y+7	; 0x07
    3d4a:	78 84       	ldd	r7, Y+8	; 0x08
    3d4c:	c7 01       	movw	r24, r14
    3d4e:	b6 01       	movw	r22, r12
    3d50:	a3 01       	movw	r20, r6
    3d52:	92 01       	movw	r18, r4
    3d54:	a1 d5       	rcall	.+2882   	; 0x4898 <__udivmodsi4>
    3d56:	ca 01       	movw	r24, r20
    3d58:	b9 01       	movw	r22, r18
		reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    3d5a:	88 0c       	add	r8, r8
    3d5c:	99 1c       	adc	r9, r9
    3d5e:	aa 1c       	adc	r10, r10
    3d60:	bb 1c       	adc	r11, r11
    3d62:	88 0c       	add	r8, r8
    3d64:	99 1c       	adc	r9, r9
    3d66:	aa 1c       	adc	r10, r10
    3d68:	bb 1c       	adc	r11, r11
    3d6a:	88 0c       	add	r8, r8
    3d6c:	99 1c       	adc	r9, r9
    3d6e:	aa 1c       	adc	r10, r10
    3d70:	bb 1c       	adc	r11, r11
    3d72:	88 0c       	add	r8, r8
    3d74:	99 1c       	adc	r9, r9
    3d76:	aa 1c       	adc	r10, r10
    3d78:	bb 1c       	adc	r11, r11
    3d7a:	88 0c       	add	r8, r8
    3d7c:	99 1c       	adc	r9, r9
    3d7e:	aa 1c       	adc	r10, r10
    3d80:	bb 1c       	adc	r11, r11
    3d82:	88 0c       	add	r8, r8
    3d84:	99 1c       	adc	r9, r9
    3d86:	aa 1c       	adc	r10, r10
    3d88:	bb 1c       	adc	r11, r11
    3d8a:	88 0c       	add	r8, r8
    3d8c:	99 1c       	adc	r9, r9
    3d8e:	aa 1c       	adc	r10, r10
    3d90:	bb 1c       	adc	r11, r11
    3d92:	32 50       	subi	r19, 0x02	; 2
    3d94:	41 09       	sbc	r20, r1
    3d96:	51 09       	sbc	r21, r1
    3d98:	82 0e       	add	r8, r18
    3d9a:	93 1e       	adc	r9, r19
    3d9c:	a4 1e       	adc	r10, r20
    3d9e:	b5 1e       	adc	r11, r21
    3da0:	f8 01       	movw	r30, r16
    3da2:	80 82       	st	Z, r8
    3da4:	91 82       	std	Z+1, r9	; 0x01
    3da6:	a2 82       	std	Z+2, r10	; 0x02
		reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    3da8:	b3 82       	std	Z+3, r11	; 0x03
    3daa:	a3 01       	movw	r20, r6
    3dac:	92 01       	movw	r18, r4
    3dae:	65 d5       	rcall	.+2762   	; 0x487a <__mulsi3>
    3db0:	c6 1a       	sub	r12, r22
    3db2:	d7 0a       	sbc	r13, r23
    3db4:	e8 0a       	sbc	r14, r24
    3db6:	f9 0a       	sbc	r15, r25
    3db8:	c4 82       	std	Z+4, r12	; 0x04
    3dba:	d5 82       	std	Z+5, r13	; 0x05
    3dbc:	e6 82       	std	Z+6, r14	; 0x06
    3dbe:	f7 82       	std	Z+7, r15	; 0x07
		reg->ms.p3 = c;
    3dc0:	40 86       	std	Z+8, r4	; 0x08
    3dc2:	51 86       	std	Z+9, r5	; 0x09
    3dc4:	62 86       	std	Z+10, r6	; 0x0a
    3dc6:	73 86       	std	Z+11, r7	; 0x0b
#else

			return(FALSE);

#endif
	}
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	28 96       	adiw	r28, 0x08	; 8
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	f8 94       	cli
    3dd0:	de bf       	out	0x3e, r29	; 62
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	cd bf       	out	0x3d, r28	; 61
    3dd6:	df 91       	pop	r29
    3dd8:	cf 91       	pop	r28
    3dda:	1f 91       	pop	r17
    3ddc:	0f 91       	pop	r16
    3dde:	ff 90       	pop	r15
    3de0:	ef 90       	pop	r14
    3de2:	df 90       	pop	r13
    3de4:	cf 90       	pop	r12
    3de6:	bf 90       	pop	r11
    3de8:	af 90       	pop	r10
    3dea:	9f 90       	pop	r9
    3dec:	8f 90       	pop	r8
    3dee:	7f 90       	pop	r7
    3df0:	6f 90       	pop	r6
    3df2:	5f 90       	pop	r5
    3df4:	4f 90       	pop	r4
    3df6:	08 95       	ret

00003df8 <multisynth_calc>:
#ifdef DEBUGGING_ONLY
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4, uint32_t *div)
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
    3df8:	3f 92       	push	r3
    3dfa:	4f 92       	push	r4
    3dfc:	5f 92       	push	r5
    3dfe:	6f 92       	push	r6
    3e00:	7f 92       	push	r7
    3e02:	8f 92       	push	r8
    3e04:	9f 92       	push	r9
    3e06:	af 92       	push	r10
    3e08:	bf 92       	push	r11
    3e0a:	cf 92       	push	r12
    3e0c:	df 92       	push	r13
    3e0e:	ef 92       	push	r14
    3e10:	ff 92       	push	r15
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	4b 01       	movw	r8, r22
    3e1c:	5c 01       	movw	r10, r24
    3e1e:	ea 01       	movw	r28, r20
		uint32_t a = 0;
		Frequency_Hz freq_VCO = 0;

		*int_mode = TRUE;   /* assumed */
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	f9 01       	movw	r30, r18
    3e24:	80 83       	st	Z, r24
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
    3e26:	f0 e8       	ldi	r31, 0x80	; 128
    3e28:	8f 16       	cp	r8, r31
    3e2a:	f1 ed       	ldi	r31, 0xD1	; 209
    3e2c:	9f 06       	cpc	r9, r31
    3e2e:	f0 ef       	ldi	r31, 0xF0	; 240
    3e30:	af 06       	cpc	r10, r31
    3e32:	f8 e0       	ldi	r31, 0x08	; 8
    3e34:	bf 06       	cpc	r11, r31
    3e36:	40 f1       	brcs	.+80     	; 0x3e88 <multisynth_calc+0x90>
		{
			a = 4;
			freq_VCO = a * freq_Fout;
    3e38:	c5 01       	movw	r24, r10
    3e3a:	b4 01       	movw	r22, r8
    3e3c:	66 0f       	add	r22, r22
    3e3e:	77 1f       	adc	r23, r23
    3e40:	88 1f       	adc	r24, r24
    3e42:	99 1f       	adc	r25, r25
    3e44:	66 0f       	add	r22, r22
    3e46:	77 1f       	adc	r23, r23
    3e48:	88 1f       	adc	r24, r24
    3e4a:	99 1f       	adc	r25, r25
#endif  /* DO_BOUNDS_CHECKING */

		/* All frequencies above 150 MHz must use divide by 4 */
		if(freq_Fout >= SI5351_MULTISYNTH_DIVBY4_FREQ)
		{
			a = 4;
    3e4c:	c1 2c       	mov	r12, r1
    3e4e:	d1 2c       	mov	r13, r1
    3e50:	76 01       	movw	r14, r12
    3e52:	68 94       	set
    3e54:	c2 f8       	bld	r12, 2
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
			{
				temp = SI5351_PLL_VCO_MAX - (count * freq_Fout);    /* SI5351_PLL_VCO_MAX assumed even */
    3e56:	3b c0       	rjmp	.+118    	; 0x3ece <multisynth_calc+0xd6>
    3e58:	a3 2d       	mov	r26, r3
    3e5a:	b0 e0       	ldi	r27, 0x00	; 0
    3e5c:	a5 01       	movw	r20, r10
    3e5e:	94 01       	movw	r18, r8
    3e60:	68 d5       	rcall	.+2768   	; 0x4932 <__muluhisi3>
    3e62:	a3 01       	movw	r20, r6
    3e64:	92 01       	movw	r18, r4
    3e66:	26 1b       	sub	r18, r22
    3e68:	37 0b       	sbc	r19, r23
    3e6a:	48 0b       	sbc	r20, r24
    3e6c:	59 0b       	sbc	r21, r25
    3e6e:	ca 01       	movw	r24, r20
    3e70:	b9 01       	movw	r22, r18
				count += 2;
    3e72:	33 94       	inc	r3
    3e74:	33 94       	inc	r3

				if(temp >= SI5351_PLL_VCO_MIN)
    3e76:	61 15       	cp	r22, r1
    3e78:	36 e4       	ldi	r19, 0x46	; 70
    3e7a:	73 07       	cpc	r23, r19
    3e7c:	33 ec       	ldi	r19, 0xC3	; 195
    3e7e:	83 07       	cpc	r24, r19
    3e80:	33 e2       	ldi	r19, 0x23	; 35
    3e82:	93 07       	cpc	r25, r19
    3e84:	f0 f0       	brcs	.+60     	; 0x3ec2 <multisynth_calc+0xca>
    3e86:	10 c0       	rjmp	.+32     	; 0x3ea8 <multisynth_calc+0xb0>
    3e88:	68 94       	set
    3e8a:	33 24       	eor	r3, r3
    3e8c:	31 f8       	bld	r3, 1
    3e8e:	60 e0       	ldi	r22, 0x00	; 0
    3e90:	79 ee       	ldi	r23, 0xE9	; 233
    3e92:	84 ea       	ldi	r24, 0xA4	; 164
    3e94:	95 e3       	ldi	r25, 0x35	; 53
			uint8_t count = 0;

			/* Find a VCO frequency that is an even integer multiple of the desired Fout frequency */
			while(!done)
			{
				temp = SI5351_PLL_VCO_MAX - (count * freq_Fout);    /* SI5351_PLL_VCO_MAX assumed even */
    3e96:	0f 2e       	mov	r0, r31
    3e98:	41 2c       	mov	r4, r1
    3e9a:	f9 ee       	ldi	r31, 0xE9	; 233
    3e9c:	5f 2e       	mov	r5, r31
    3e9e:	f4 ea       	ldi	r31, 0xA4	; 164
    3ea0:	6f 2e       	mov	r6, r31
    3ea2:	f5 e3       	ldi	r31, 0x35	; 53
    3ea4:	7f 2e       	mov	r7, r31
				count += 2;

				if(temp >= SI5351_PLL_VCO_MIN)
				{
					temp /= freq_Fout;
    3ea6:	f0 2d       	mov	r31, r0
    3ea8:	a5 01       	movw	r20, r10
    3eaa:	94 01       	movw	r18, r8
    3eac:	f5 d4       	rcall	.+2538   	; 0x4898 <__udivmodsi4>
    3eae:	69 01       	movw	r12, r18
    3eb0:	7a 01       	movw	r14, r20

					if(temp >= 4)   /* accepts only even integers of 4 or greater */
    3eb2:	44 e0       	ldi	r20, 0x04	; 4
    3eb4:	c4 16       	cp	r12, r20
    3eb6:	d1 04       	cpc	r13, r1
    3eb8:	e1 04       	cpc	r14, r1
    3eba:	f1 04       	cpc	r15, r1
    3ebc:	08 f0       	brcs	.+2      	; 0x3ec0 <multisynth_calc+0xc8>
    3ebe:	42 c0       	rjmp	.+132    	; 0x3f44 <multisynth_calc+0x14c>
    3ec0:	cb cf       	rjmp	.-106    	; 0x3e58 <multisynth_calc+0x60>
#else
		Frequency_Hz multisynth_calc(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
#endif
	{
		uint32_t a = 0;
		Frequency_Hz freq_VCO = 0;
    3ec2:	60 e0       	ldi	r22, 0x00	; 0
    3ec4:	70 e0       	ldi	r23, 0x00	; 0
    3ec6:	cb 01       	movw	r24, r22
    3ec8:	c1 2c       	mov	r12, r1
    3eca:	d1 2c       	mov	r13, r1
    3ecc:	76 01       	movw	r14, r12
			{
				freq_VCO = a * freq_Fout;
			}
		}

		*divBy4 = (a == 4);
    3ece:	21 e0       	ldi	r18, 0x01	; 1
    3ed0:	54 e0       	ldi	r21, 0x04	; 4
    3ed2:	c5 16       	cp	r12, r21
    3ed4:	d1 04       	cpc	r13, r1
    3ed6:	e1 04       	cpc	r14, r1
    3ed8:	f1 04       	cpc	r15, r1
    3eda:	09 f0       	breq	.+2      	; 0x3ede <multisynth_calc+0xe6>
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	f8 01       	movw	r30, r16
    3ee0:	20 83       	st	Z, r18
		reg->ms.p1 = (uint32_t)(a << 7) - 512;  /* 128 * a + floor((128 * b) / c) - 512 */
    3ee2:	cc 0c       	add	r12, r12
    3ee4:	dd 1c       	adc	r13, r13
    3ee6:	ee 1c       	adc	r14, r14
    3ee8:	ff 1c       	adc	r15, r15
    3eea:	cc 0c       	add	r12, r12
    3eec:	dd 1c       	adc	r13, r13
    3eee:	ee 1c       	adc	r14, r14
    3ef0:	ff 1c       	adc	r15, r15
    3ef2:	cc 0c       	add	r12, r12
    3ef4:	dd 1c       	adc	r13, r13
    3ef6:	ee 1c       	adc	r14, r14
    3ef8:	ff 1c       	adc	r15, r15
    3efa:	cc 0c       	add	r12, r12
    3efc:	dd 1c       	adc	r13, r13
    3efe:	ee 1c       	adc	r14, r14
    3f00:	ff 1c       	adc	r15, r15
    3f02:	cc 0c       	add	r12, r12
    3f04:	dd 1c       	adc	r13, r13
    3f06:	ee 1c       	adc	r14, r14
    3f08:	ff 1c       	adc	r15, r15
    3f0a:	cc 0c       	add	r12, r12
    3f0c:	dd 1c       	adc	r13, r13
    3f0e:	ee 1c       	adc	r14, r14
    3f10:	ff 1c       	adc	r15, r15
    3f12:	cc 0c       	add	r12, r12
    3f14:	dd 1c       	adc	r13, r13
    3f16:	ee 1c       	adc	r14, r14
    3f18:	ff 1c       	adc	r15, r15
    3f1a:	f2 e0       	ldi	r31, 0x02	; 2
    3f1c:	df 1a       	sub	r13, r31
    3f1e:	e1 08       	sbc	r14, r1
    3f20:	f1 08       	sbc	r15, r1
    3f22:	c8 82       	st	Y, r12
    3f24:	d9 82       	std	Y+1, r13	; 0x01
    3f26:	ea 82       	std	Y+2, r14	; 0x02
    3f28:	fb 82       	std	Y+3, r15	; 0x03
		reg->ms.p2 = 0;                         /* 128 * b - c * floor((128 * b) / c) */
    3f2a:	1c 82       	std	Y+4, r1	; 0x04
    3f2c:	1d 82       	std	Y+5, r1	; 0x05
    3f2e:	1e 82       	std	Y+6, r1	; 0x06
    3f30:	1f 82       	std	Y+7, r1	; 0x07
		reg->ms.p3 = 1;
    3f32:	01 e0       	ldi	r16, 0x01	; 1
    3f34:	10 e0       	ldi	r17, 0x00	; 0
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	08 87       	std	Y+8, r16	; 0x08
    3f3c:	19 87       	std	Y+9, r17	; 0x09
    3f3e:	2a 87       	std	Y+10, r18	; 0x0a

#ifdef DEBUGGING_ONLY
			*div = a;
#endif

		return(freq_VCO);
    3f40:	3b 87       	std	Y+11, r19	; 0x0b
				}
			}

			if(success)
			{
				freq_VCO = a * freq_Fout;
    3f42:	06 c0       	rjmp	.+12     	; 0x3f50 <multisynth_calc+0x158>
    3f44:	a5 01       	movw	r20, r10
    3f46:	94 01       	movw	r18, r8
    3f48:	c7 01       	movw	r24, r14
    3f4a:	b6 01       	movw	r22, r12
    3f4c:	96 d4       	rcall	.+2348   	; 0x487a <__mulsi3>
    3f4e:	bf cf       	rjmp	.-130    	; 0x3ece <multisynth_calc+0xd6>
#ifdef DEBUGGING_ONLY
			*div = a;
#endif

		return(freq_VCO);
	}
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	ff 90       	pop	r15
    3f5a:	ef 90       	pop	r14
    3f5c:	df 90       	pop	r13
    3f5e:	cf 90       	pop	r12
    3f60:	bf 90       	pop	r11
    3f62:	af 90       	pop	r10
    3f64:	9f 90       	pop	r9
    3f66:	8f 90       	pop	r8
    3f68:	7f 90       	pop	r7
    3f6a:	6f 90       	pop	r6
    3f6c:	5f 90       	pop	r5
    3f6e:	4f 90       	pop	r4
    3f70:	3f 90       	pop	r3
    3f72:	08 95       	ret

00003f74 <multisynth_estimate>:
 * Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
 *
 * Note: do not call this function with global value freqVCOB == zero
 */
	Frequency_Hz multisynth_estimate(Frequency_Hz freq_Fout, Union_si5351_regs *reg, BOOL *int_mode, BOOL *divBy4)
	{
    3f74:	2f 92       	push	r2
    3f76:	3f 92       	push	r3
    3f78:	4f 92       	push	r4
    3f7a:	5f 92       	push	r5
    3f7c:	6f 92       	push	r6
    3f7e:	7f 92       	push	r7
    3f80:	8f 92       	push	r8
    3f82:	9f 92       	push	r9
    3f84:	af 92       	push	r10
    3f86:	bf 92       	push	r11
    3f88:	cf 92       	push	r12
    3f8a:	df 92       	push	r13
    3f8c:	ef 92       	push	r14
    3f8e:	ff 92       	push	r15
    3f90:	0f 93       	push	r16
    3f92:	1f 93       	push	r17
    3f94:	cf 93       	push	r28
    3f96:	df 93       	push	r29
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
    3f9c:	62 97       	sbiw	r28, 0x12	; 18
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	de bf       	out	0x3e, r29	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	cd bf       	out	0x3d, r28	; 61
    3fa8:	6b 01       	movw	r12, r22
    3faa:	7c 01       	movw	r14, r24
    3fac:	1a 01       	movw	r2, r20
    3fae:	3e 87       	std	Y+14, r19	; 0x0e
    3fb0:	2d 87       	std	Y+13, r18	; 0x0d
				return(0);
			}
#endif  /* DO_BOUNDS_CHECKING */

		/* Determine integer part of feedback equation */
		a = freqVCOB / freq_Fout;
    3fb2:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <freqVCOB>
    3fb6:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <freqVCOB+0x1>
    3fba:	a0 91 a8 07 	lds	r26, 0x07A8	; 0x8007a8 <freqVCOB+0x2>
    3fbe:	b0 91 a9 07 	lds	r27, 0x07A9	; 0x8007a9 <freqVCOB+0x3>
    3fc2:	89 87       	std	Y+9, r24	; 0x09
    3fc4:	9a 87       	std	Y+10, r25	; 0x0a
    3fc6:	ab 87       	std	Y+11, r26	; 0x0b
    3fc8:	bc 87       	std	Y+12, r27	; 0x0c
    3fca:	bc 01       	movw	r22, r24
    3fcc:	cd 01       	movw	r24, r26
    3fce:	a7 01       	movw	r20, r14
    3fd0:	96 01       	movw	r18, r12
    3fd2:	62 d4       	rcall	.+2244   	; 0x4898 <__udivmodsi4>
    3fd4:	49 01       	movw	r8, r18
    3fd6:	5a 01       	movw	r10, r20
    3fd8:	2f 87       	std	Y+15, r18	; 0x0f
    3fda:	38 8b       	std	Y+16, r19	; 0x10
    3fdc:	49 8b       	std	Y+17, r20	; 0x11
    3fde:	5a 8b       	std	Y+18, r21	; 0x12
		b = freqVCOB % freq_Fout;
    3fe0:	69 83       	std	Y+1, r22	; 0x01
    3fe2:	7a 83       	std	Y+2, r23	; 0x02
    3fe4:	8b 83       	std	Y+3, r24	; 0x03
		c = freq_Fout;
    3fe6:	9c 83       	std	Y+4, r25	; 0x04
    3fe8:	cd 82       	std	Y+5, r12	; 0x05
    3fea:	de 82       	std	Y+6, r13	; 0x06
    3fec:	ef 82       	std	Y+7, r14	; 0x07
		reduce_by_gcd(&b, &c);  /* prevents overflow conditions and makes results agree with ClockBuilder */
    3fee:	f8 86       	std	Y+8, r15	; 0x08
    3ff0:	be 01       	movw	r22, r28
    3ff2:	6b 5f       	subi	r22, 0xFB	; 251
    3ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff6:	ce 01       	movw	r24, r28
    3ff8:	01 96       	adiw	r24, 0x01	; 1

		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
    3ffa:	e0 dd       	rcall	.-1088   	; 0x3bbc <reduce_by_gcd>
    3ffc:	4d 80       	ldd	r4, Y+5	; 0x05
    3ffe:	5e 80       	ldd	r5, Y+6	; 0x06
    4000:	6f 80       	ldd	r6, Y+7	; 0x07
    4002:	78 84       	ldd	r7, Y+8	; 0x08
    4004:	c9 80       	ldd	r12, Y+1	; 0x01
    4006:	da 80       	ldd	r13, Y+2	; 0x02
    4008:	eb 80       	ldd	r14, Y+3	; 0x03
    400a:	fc 80       	ldd	r15, Y+4	; 0x04
    400c:	a5 01       	movw	r20, r10
    400e:	94 01       	movw	r18, r8
    4010:	c3 01       	movw	r24, r6
    4012:	b2 01       	movw	r22, r4
    4014:	32 d4       	rcall	.+2148   	; 0x487a <__mulsi3>
    4016:	9b 01       	movw	r18, r22
    4018:	ac 01       	movw	r20, r24
    401a:	2c 0d       	add	r18, r12
    401c:	3d 1d       	adc	r19, r13
    401e:	4e 1d       	adc	r20, r14
    4020:	5f 1d       	adc	r21, r15
    4022:	69 85       	ldd	r22, Y+9	; 0x09
    4024:	7a 85       	ldd	r23, Y+10	; 0x0a
    4026:	8b 85       	ldd	r24, Y+11	; 0x0b
    4028:	9c 85       	ldd	r25, Y+12	; 0x0c
    402a:	36 d4       	rcall	.+2156   	; 0x4898 <__udivmodsi4>
    402c:	ca 01       	movw	r24, r20
		freq_Fout *= c;
    402e:	b9 01       	movw	r22, r18
    4030:	a3 01       	movw	r20, r6
    4032:	92 01       	movw	r18, r4
    4034:	22 d4       	rcall	.+2116   	; 0x487a <__mulsi3>
    4036:	69 87       	std	Y+9, r22	; 0x09
    4038:	7a 87       	std	Y+10, r23	; 0x0a
    403a:	8b 87       	std	Y+11, r24	; 0x0b
    403c:	9c 87       	std	Y+12, r25	; 0x0c

		*int_mode = (b == 0) && !(a % 2);
    403e:	c1 14       	cp	r12, r1
    4040:	d1 04       	cpc	r13, r1
    4042:	e1 04       	cpc	r14, r1
    4044:	f1 04       	cpc	r15, r1
    4046:	09 f0       	breq	.+2      	; 0x404a <multisynth_estimate+0xd6>
    4048:	85 c0       	rjmp	.+266    	; 0x4154 <multisynth_estimate+0x1e0>
    404a:	80 fe       	sbrs	r8, 0
    404c:	75 c0       	rjmp	.+234    	; 0x4138 <multisynth_estimate+0x1c4>
    404e:	82 c0       	rjmp	.+260    	; 0x4154 <multisynth_estimate+0x1e0>
		*divBy4 = (a == 4) && *int_mode;
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	d8 01       	movw	r26, r16
    4054:	8c 93       	st	X, r24

		/* Calculate parameters */
		if(*divBy4)
		{
			reg->ms.p1 = 0;
    4056:	f1 01       	movw	r30, r2
    4058:	10 82       	st	Z, r1
    405a:	11 82       	std	Z+1, r1	; 0x01
    405c:	12 82       	std	Z+2, r1	; 0x02
    405e:	13 82       	std	Z+3, r1	; 0x03
			reg->ms.p2 = 0;
    4060:	14 82       	std	Z+4, r1	; 0x04
    4062:	15 82       	std	Z+5, r1	; 0x05
    4064:	16 82       	std	Z+6, r1	; 0x06
    4066:	17 82       	std	Z+7, r1	; 0x07
			reg->ms.p3 = 1;
    4068:	81 e0       	ldi	r24, 0x01	; 1
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	a0 e0       	ldi	r26, 0x00	; 0
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	80 87       	std	Z+8, r24	; 0x08
    4072:	91 87       	std	Z+9, r25	; 0x09
    4074:	a2 87       	std	Z+10, r26	; 0x0a
    4076:	b3 87       	std	Z+11, r27	; 0x0b
    4078:	71 c0       	rjmp	.+226    	; 0x415c <multisynth_estimate+0x1e8>
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
		*divBy4 = (a == 4) && *int_mode;
    407a:	d8 01       	movw	r26, r16
    407c:	1c 92       	st	X, r1
			reg->ms.p2 = 0;
			reg->ms.p3 = 1;
		}
		else
		{
			uint32_t bx128 = b << 7;
    407e:	cc 0c       	add	r12, r12
    4080:	dd 1c       	adc	r13, r13
    4082:	ee 1c       	adc	r14, r14
    4084:	ff 1c       	adc	r15, r15
    4086:	cc 0c       	add	r12, r12
    4088:	dd 1c       	adc	r13, r13
    408a:	ee 1c       	adc	r14, r14
    408c:	ff 1c       	adc	r15, r15
    408e:	cc 0c       	add	r12, r12
    4090:	dd 1c       	adc	r13, r13
    4092:	ee 1c       	adc	r14, r14
    4094:	ff 1c       	adc	r15, r15
    4096:	cc 0c       	add	r12, r12
    4098:	dd 1c       	adc	r13, r13
    409a:	ee 1c       	adc	r14, r14
    409c:	ff 1c       	adc	r15, r15
    409e:	cc 0c       	add	r12, r12
    40a0:	dd 1c       	adc	r13, r13
    40a2:	ee 1c       	adc	r14, r14
    40a4:	ff 1c       	adc	r15, r15
    40a6:	cc 0c       	add	r12, r12
    40a8:	dd 1c       	adc	r13, r13
    40aa:	ee 1c       	adc	r14, r14
    40ac:	ff 1c       	adc	r15, r15
    40ae:	cc 0c       	add	r12, r12
    40b0:	dd 1c       	adc	r13, r13
    40b2:	ee 1c       	adc	r14, r14
			uint32_t bx128overc = bx128 / c;
    40b4:	ff 1c       	adc	r15, r15
    40b6:	c7 01       	movw	r24, r14
    40b8:	b6 01       	movw	r22, r12
    40ba:	a3 01       	movw	r20, r6
    40bc:	92 01       	movw	r18, r4
    40be:	ec d3       	rcall	.+2008   	; 0x4898 <__udivmodsi4>
    40c0:	ca 01       	movw	r24, r20
    40c2:	b9 01       	movw	r22, r18
			reg->ms.p1 = (uint32_t)((a << 7) + bx128overc) - 512;   /* 128 * a + floor((128 * b) / c) - 512 */
    40c4:	88 0c       	add	r8, r8
    40c6:	99 1c       	adc	r9, r9
    40c8:	aa 1c       	adc	r10, r10
    40ca:	bb 1c       	adc	r11, r11
    40cc:	88 0c       	add	r8, r8
    40ce:	99 1c       	adc	r9, r9
    40d0:	aa 1c       	adc	r10, r10
    40d2:	bb 1c       	adc	r11, r11
    40d4:	88 0c       	add	r8, r8
    40d6:	99 1c       	adc	r9, r9
    40d8:	aa 1c       	adc	r10, r10
    40da:	bb 1c       	adc	r11, r11
    40dc:	88 0c       	add	r8, r8
    40de:	99 1c       	adc	r9, r9
    40e0:	aa 1c       	adc	r10, r10
    40e2:	bb 1c       	adc	r11, r11
    40e4:	88 0c       	add	r8, r8
    40e6:	99 1c       	adc	r9, r9
    40e8:	aa 1c       	adc	r10, r10
    40ea:	bb 1c       	adc	r11, r11
    40ec:	88 0c       	add	r8, r8
    40ee:	99 1c       	adc	r9, r9
    40f0:	aa 1c       	adc	r10, r10
    40f2:	bb 1c       	adc	r11, r11
    40f4:	88 0c       	add	r8, r8
    40f6:	99 1c       	adc	r9, r9
    40f8:	aa 1c       	adc	r10, r10
    40fa:	bb 1c       	adc	r11, r11
    40fc:	89 01       	movw	r16, r18
    40fe:	9a 01       	movw	r18, r20
    4100:	12 50       	subi	r17, 0x02	; 2
    4102:	21 09       	sbc	r18, r1
    4104:	31 09       	sbc	r19, r1
    4106:	80 0e       	add	r8, r16
    4108:	91 1e       	adc	r9, r17
    410a:	a2 1e       	adc	r10, r18
    410c:	b3 1e       	adc	r11, r19
    410e:	f1 01       	movw	r30, r2
    4110:	80 82       	st	Z, r8
    4112:	91 82       	std	Z+1, r9	; 0x01
    4114:	a2 82       	std	Z+2, r10	; 0x02
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
    4116:	b3 82       	std	Z+3, r11	; 0x03
    4118:	a3 01       	movw	r20, r6
    411a:	92 01       	movw	r18, r4
    411c:	ae d3       	rcall	.+1884   	; 0x487a <__mulsi3>
    411e:	c6 1a       	sub	r12, r22
    4120:	d7 0a       	sbc	r13, r23
    4122:	e8 0a       	sbc	r14, r24
    4124:	f9 0a       	sbc	r15, r25
    4126:	c4 82       	std	Z+4, r12	; 0x04
    4128:	d5 82       	std	Z+5, r13	; 0x05
    412a:	e6 82       	std	Z+6, r14	; 0x06
    412c:	f7 82       	std	Z+7, r15	; 0x07
			reg->ms.p3 = c;
    412e:	40 86       	std	Z+8, r4	; 0x08
    4130:	51 86       	std	Z+9, r5	; 0x09
    4132:	62 86       	std	Z+10, r6	; 0x0a
    4134:	73 86       	std	Z+11, r7	; 0x0b
		}

		return(freq_Fout);
    4136:	12 c0       	rjmp	.+36     	; 0x415c <multisynth_estimate+0x1e8>
		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	ad 85       	ldd	r26, Y+13	; 0x0d
    413c:	be 85       	ldd	r27, Y+14	; 0x0e
    413e:	8c 93       	st	X, r24
		*divBy4 = (a == 4) && *int_mode;
    4140:	8f 85       	ldd	r24, Y+15	; 0x0f
    4142:	98 89       	ldd	r25, Y+16	; 0x10
    4144:	a9 89       	ldd	r26, Y+17	; 0x11
    4146:	ba 89       	ldd	r27, Y+18	; 0x12
    4148:	04 97       	sbiw	r24, 0x04	; 4
    414a:	a1 05       	cpc	r26, r1
    414c:	b1 05       	cpc	r27, r1
    414e:	09 f0       	breq	.+2      	; 0x4152 <multisynth_estimate+0x1de>
    4150:	94 cf       	rjmp	.-216    	; 0x407a <multisynth_estimate+0x106>
    4152:	7e cf       	rjmp	.-260    	; 0x4050 <multisynth_estimate+0xdc>
		/* Calculate the approximated output frequency given by fOUT = fvco / (a + b/c) */
		freq_Fout = freqVCOB;
		freq_Fout /= (a * c + b);
		freq_Fout *= c;

		*int_mode = (b == 0) && !(a % 2);
    4154:	ad 85       	ldd	r26, Y+13	; 0x0d
    4156:	be 85       	ldd	r27, Y+14	; 0x0e
    4158:	1c 92       	st	X, r1
    415a:	8f cf       	rjmp	.-226    	; 0x407a <multisynth_estimate+0x106>
			reg->ms.p2 = (uint32_t)bx128 - (c * bx128overc);        /* 128 * b - c * floor((128 * b) / c) */
			reg->ms.p3 = c;
		}

		return(freq_Fout);
	}
    415c:	69 85       	ldd	r22, Y+9	; 0x09
    415e:	7a 85       	ldd	r23, Y+10	; 0x0a
    4160:	8b 85       	ldd	r24, Y+11	; 0x0b
    4162:	9c 85       	ldd	r25, Y+12	; 0x0c
    4164:	62 96       	adiw	r28, 0x12	; 18
    4166:	0f b6       	in	r0, 0x3f	; 63
    4168:	f8 94       	cli
    416a:	de bf       	out	0x3e, r29	; 62
    416c:	0f be       	out	0x3f, r0	; 63
    416e:	cd bf       	out	0x3d, r28	; 61
    4170:	df 91       	pop	r29
    4172:	cf 91       	pop	r28
    4174:	1f 91       	pop	r17
    4176:	0f 91       	pop	r16
    4178:	ff 90       	pop	r15
    417a:	ef 90       	pop	r14
    417c:	df 90       	pop	r13
    417e:	cf 90       	pop	r12
    4180:	bf 90       	pop	r11
    4182:	af 90       	pop	r10
    4184:	9f 90       	pop	r9
    4186:	8f 90       	pop	r8
    4188:	7f 90       	pop	r7
    418a:	6f 90       	pop	r6
    418c:	5f 90       	pop	r5
    418e:	4f 90       	pop	r4
    4190:	3f 90       	pop	r3
    4192:	2f 90       	pop	r2


	BOOL si5351_write_bulk(uint8_t addr, uint8_t bytes, uint8_t *data)
	{
    4194:	08 95       	ret

00004196 <si5351_write_bulk>:
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, data, bytes));
    4196:	26 2f       	mov	r18, r22
    4198:	68 2f       	mov	r22, r24
    419a:	80 ec       	ldi	r24, 0xC0	; 192
    419c:	b6 cb       	rjmp	.-2196   	; 0x390a <i2c_device_write>
	}
    419e:	08 95       	ret

000041a0 <set_pll>:
#ifdef DEBUGGING_ONLY
		uint32_t set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#else
		void set_pll(Frequency_Hz freq_VCO, Si5351_pll target_pll)
#endif
	{
    41a0:	ff 92       	push	r15
    41a2:	0f 93       	push	r16
    41a4:	1f 93       	push	r17
    41a6:	cf 93       	push	r28
    41a8:	df 93       	push	r29
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	66 97       	sbiw	r28, 0x16	; 22
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
		/* Output Multisynth Settings (Synthesis Stage 2) */
#ifdef DEBUGGING_ONLY
			Frequency_Hz result = pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
			Frequency_Hz pll_error = freq_VCO - result;
#else
			pll_calc(freq_VCO, &pll_reg, g_si5351_ref_correction);
    41ba:	f4 2e       	mov	r15, r20
    41bc:	00 91 aa 07 	lds	r16, 0x07AA	; 0x8007aa <g_si5351_ref_correction>
    41c0:	10 91 ab 07 	lds	r17, 0x07AB	; 0x8007ab <g_si5351_ref_correction+0x1>
    41c4:	20 91 ac 07 	lds	r18, 0x07AC	; 0x8007ac <g_si5351_ref_correction+0x2>
    41c8:	30 91 ad 07 	lds	r19, 0x07AD	; 0x8007ad <g_si5351_ref_correction+0x3>
    41cc:	ae 01       	movw	r20, r28
    41ce:	4f 5f       	subi	r20, 0xFF	; 255
    41d0:	5f 4f       	sbci	r21, 0xFF	; 255
    41d2:	64 dd       	rcall	.-1336   	; 0x3c9c <pll_calc>

		/* Prepare an array for parameters to be written to */
		uint8_t i = 0;

		/* Registers 26-27 */
		params[i++] = pll_reg.reg.p3_1;
    41d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    41d6:	8d 87       	std	Y+13, r24	; 0x0d
		params[i++] = pll_reg.reg.p3_0;
    41d8:	89 85       	ldd	r24, Y+9	; 0x09
    41da:	8e 87       	std	Y+14, r24	; 0x0e

		/* Register 28 */
		params[i++] = pll_reg.reg.p1_2 & 0x03;
    41dc:	8b 81       	ldd	r24, Y+3	; 0x03
    41de:	83 70       	andi	r24, 0x03	; 3
    41e0:	8f 87       	std	Y+15, r24	; 0x0f

		/* Registers 29-30 */
		params[i++] = pll_reg.reg.p1_1;
    41e2:	8a 81       	ldd	r24, Y+2	; 0x02
    41e4:	88 8b       	std	Y+16, r24	; 0x10
		params[i++] = pll_reg.reg.p1_0;
    41e6:	89 81       	ldd	r24, Y+1	; 0x01
    41e8:	89 8b       	std	Y+17, r24	; 0x11

		/* Register 31 */
		params[i] = pll_reg.reg.p3_2 << 4;
		params[i++] += pll_reg.reg.p2_2 & 0x0F;
    41ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    41ec:	8f 81       	ldd	r24, Y+7	; 0x07
    41ee:	8f 70       	andi	r24, 0x0F	; 15
    41f0:	20 e1       	ldi	r18, 0x10	; 16
    41f2:	92 9f       	mul	r25, r18
    41f4:	80 0d       	add	r24, r0
    41f6:	11 24       	eor	r1, r1

		/* Registers 32-33 */
		params[i++] = pll_reg.reg.p2_1;
    41f8:	8a 8b       	std	Y+18, r24	; 0x12
    41fa:	8e 81       	ldd	r24, Y+6	; 0x06
		params[i++] = pll_reg.reg.p2_0;
    41fc:	8b 8b       	std	Y+19, r24	; 0x13
    41fe:	8d 81       	ldd	r24, Y+5	; 0x05

		/* Write the parameters */
		if(target_pll == SI5351_PLLA)
    4200:	8c 8b       	std	Y+20, r24	; 0x14
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	f8 12       	cpse	r15, r24
		{
			si5351_write_bulk(SI5351_PLLA_PARAMETERS, i, params);
    4206:	07 c0       	rjmp	.+14     	; 0x4216 <set_pll+0x76>
    4208:	ae 01       	movw	r20, r28
    420a:	43 5f       	subi	r20, 0xF3	; 243
    420c:	5f 4f       	sbci	r21, 0xFF	; 255
    420e:	68 e0       	ldi	r22, 0x08	; 8
    4210:	8a e1       	ldi	r24, 0x1A	; 26
    4212:	c1 df       	rcall	.-126    	; 0x4196 <si5351_write_bulk>
    4214:	06 c0       	rjmp	.+12     	; 0x4222 <set_pll+0x82>
		}
		else    /* if(target_pll == SI5351_PLLB) */
		{
			si5351_write_bulk(SI5351_PLLB_PARAMETERS, i, params);
    4216:	ae 01       	movw	r20, r28
    4218:	43 5f       	subi	r20, 0xF3	; 243
    421a:	5f 4f       	sbci	r21, 0xFF	; 255
    421c:	68 e0       	ldi	r22, 0x08	; 8
    421e:	82 e2       	ldi	r24, 0x22	; 34
    4220:	ba df       	rcall	.-140    	; 0x4196 <si5351_write_bulk>
		}

#ifdef DEBUGGING_ONLY
			return(result);
#endif
	}
    4222:	66 96       	adiw	r28, 0x16	; 22
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	df 91       	pop	r29
    4230:	cf 91       	pop	r28
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	ff 90       	pop	r15
    4238:	08 95       	ret

0000423a <si5351_set_vcoB_freq>:
 * Currently this only works for PLLB.
 *
 */
	void si5351_set_vcoB_freq(Frequency_Hz freq_VCO)
	{
		freqVCOB = freq_VCO;
    423a:	60 93 a6 07 	sts	0x07A6, r22	; 0x8007a6 <freqVCOB>
    423e:	70 93 a7 07 	sts	0x07A7, r23	; 0x8007a7 <freqVCOB+0x1>
    4242:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <freqVCOB+0x2>
    4246:	90 93 a9 07 	sts	0x07A9, r25	; 0x8007a9 <freqVCOB+0x3>
		set_pll(freq_VCO, SI5351_PLLB);
    424a:	42 e0       	ldi	r20, 0x02	; 2
    424c:	a9 cf       	rjmp	.-174    	; 0x41a0 <set_pll>
    424e:	08 95       	ret

00004250 <si5351_write>:
	{
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, data, bytes));
	}

	BOOL si5351_write(uint8_t addr, uint8_t data)
	{
    4250:	cf 93       	push	r28
    4252:	df 93       	push	r29
    4254:	1f 92       	push	r1
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, &data, 1));
    425a:	69 83       	std	Y+1, r22	; 0x01
    425c:	21 e0       	ldi	r18, 0x01	; 1
    425e:	ae 01       	movw	r20, r28
    4260:	4f 5f       	subi	r20, 0xFF	; 255
    4262:	5f 4f       	sbci	r21, 0xFF	; 255
    4264:	68 2f       	mov	r22, r24
    4266:	80 ec       	ldi	r24, 0xC0	; 192
	}
    4268:	50 db       	rcall	.-2400   	; 0x390a <i2c_device_write>
    426a:	0f 90       	pop	r0
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
 *
 * Apply a reset to the indicated PLL(s).
 *
 */
	void pll_reset(Si5351_pll target_pll)
	{
    4270:	08 95       	ret

00004272 <pll_reset>:
    4272:	cf 93       	push	r28
		if(target_pll & SI5351_PLLA)
    4274:	c8 2f       	mov	r28, r24
    4276:	80 ff       	sbrs	r24, 0
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_A);
    4278:	03 c0       	rjmp	.+6      	; 0x4280 <pll_reset+0xe>
    427a:	60 e2       	ldi	r22, 0x20	; 32
    427c:	81 eb       	ldi	r24, 0xB1	; 177
    427e:	e8 df       	rcall	.-48     	; 0x4250 <si5351_write>
		}

		if(target_pll & SI5351_PLLB)
    4280:	c1 ff       	sbrs	r28, 1
		{
			si5351_write(SI5351_PLL_RESET, SI5351_PLL_RESET_B);
    4282:	03 c0       	rjmp	.+6      	; 0x428a <pll_reset+0x18>
    4284:	60 e8       	ldi	r22, 0x80	; 128
    4286:	81 eb       	ldi	r24, 0xB1	; 177
    4288:	e3 df       	rcall	.-58     	; 0x4250 <si5351_write>
		}
	}
    428a:	cf 91       	pop	r28
    428c:	08 95       	ret

0000428e <si5351_read>:
	{
		return(i2c_device_write(SI5351_I2C_SLAVE_ADDR, addr, &data, 1));
	}

	BOOL si5351_read(uint8_t addr, uint8_t *data)
	{
    428e:	ab 01       	movw	r20, r22
		return(i2c_device_read(SI5351_I2C_SLAVE_ADDR, addr, data, 1));
    4290:	21 e0       	ldi	r18, 0x01	; 1
    4292:	68 2f       	mov	r22, r24
    4294:	80 ec       	ldi	r24, 0xC0	; 192
    4296:	7e cb       	rjmp	.-2308   	; 0x3994 <i2c_device_read>
    4298:	08 95       	ret

0000429a <si5351_init>:
	}
    429a:	cf 92       	push	r12
 * xtal_load_c - Crystal load capacitance.
 * ref_osc_freq - Crystal/reference oscillator frequency (Hz).
 *
 */
	void si5351_init(Si5351_Xtal_load_pF xtal_load_c, Frequency_Hz ref_osc_freq)
	{
    429c:	df 92       	push	r13
    429e:	ef 92       	push	r14
    42a0:	ff 92       	push	r15
    42a2:	1f 93       	push	r17
    42a4:	cf 93       	push	r28
    42a6:	df 93       	push	r29
    42a8:	1f 92       	push	r1
    42aa:	cd b7       	in	r28, 0x3d	; 61
    42ac:	de b7       	in	r29, 0x3e	; 62
    42ae:	18 2f       	mov	r17, r24
    42b0:	6a 01       	movw	r12, r20
    42b2:	7b 01       	movw	r14, r22
#ifndef DEBUG_WITHOUT_I2C
			/* Start I2C comms */
			i2c_init();
    42b4:	b3 da       	rcall	.-2714   	; 0x381c <i2c_init>
			uint8_t result_val = 0x00;
			BOOL result = FALSE;
#endif
		uint8_t reg_val;

		freqVCOB = 0;
    42b6:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <freqVCOB>
    42ba:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <freqVCOB+0x1>
    42be:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <freqVCOB+0x2>
		xtal_freq = SI5351_XTAL_FREQ;
    42c2:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <freqVCOB+0x3>
    42c6:	80 e4       	ldi	r24, 0x40	; 64
    42c8:	98 e7       	ldi	r25, 0x78	; 120
    42ca:	ad e7       	ldi	r26, 0x7D	; 125
    42cc:	b1 e0       	ldi	r27, 0x01	; 1
    42ce:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <xtal_freq>
    42d2:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <xtal_freq+0x1>
    42d6:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <xtal_freq+0x2>
		enabledClocksMask = 0x00;
    42da:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <xtal_freq+0x3>

		/* Disable Outputs */
		/* Set CLKx_DIS high; Reg. 3 = 0xFF */
		si5351_write(3, 0xff);
    42de:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <enabledClocksMask>
    42e2:	6f ef       	ldi	r22, 0xFF	; 255

		/* Power down clocks */
		si5351_write(16, 0xCC);
    42e4:	83 e0       	ldi	r24, 0x03	; 3
    42e6:	b4 df       	rcall	.-152    	; 0x4250 <si5351_write>
    42e8:	6c ec       	ldi	r22, 0xCC	; 204
    42ea:	80 e1       	ldi	r24, 0x10	; 16
		si5351_write(17, 0xCC);
    42ec:	b1 df       	rcall	.-158    	; 0x4250 <si5351_write>
    42ee:	6c ec       	ldi	r22, 0xCC	; 204
    42f0:	81 e1       	ldi	r24, 0x11	; 17
    42f2:	ae df       	rcall	.-164    	; 0x4250 <si5351_write>
		si5351_write(18, 0xCC);
    42f4:	6c ec       	ldi	r22, 0xCC	; 204
    42f6:	82 e1       	ldi	r24, 0x12	; 18
    42f8:	ab df       	rcall	.-170    	; 0x4250 <si5351_write>
    42fa:	61 2f       	mov	r22, r17

		/* Set crystal load capacitance */
		reg_val = 0x12; /* 0b010010 reserved value bits */
		reg_val |= xtal_load_c;
    42fc:	62 61       	ori	r22, 0x12	; 18
    42fe:	69 83       	std	Y+1, r22	; 0x01
    4300:	87 eb       	ldi	r24, 0xB7	; 183

		si5351_write(SI5351_CRYSTAL_LOAD, reg_val);
    4302:	a6 df       	rcall	.-180    	; 0x4250 <si5351_write>
    4304:	c1 14       	cp	r12, r1

		if(!ref_osc_freq)
    4306:	d1 04       	cpc	r13, r1
    4308:	e1 04       	cpc	r14, r1
    430a:	f1 04       	cpc	r15, r1
    430c:	51 f4       	brne	.+20     	; 0x4322 <si5351_init+0x88>
    430e:	0f 2e       	mov	r0, r31
		{
			ref_osc_freq = SI5351_XTAL_FREQ;
    4310:	f0 e4       	ldi	r31, 0x40	; 64
    4312:	cf 2e       	mov	r12, r31
    4314:	f8 e7       	ldi	r31, 0x78	; 120
    4316:	df 2e       	mov	r13, r31
    4318:	fd e7       	ldi	r31, 0x7D	; 125
    431a:	ef 2e       	mov	r14, r31
    431c:	ff 24       	eor	r15, r15
    431e:	f3 94       	inc	r15
    4320:	f0 2d       	mov	r31, r0
		}

		/* Change the ref osc freq if different from default */
		if(ref_osc_freq != xtal_freq)
    4322:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <xtal_freq>
    4326:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <xtal_freq+0x1>
    432a:	a0 91 34 01 	lds	r26, 0x0134	; 0x800134 <xtal_freq+0x2>
    432e:	b0 91 35 01 	lds	r27, 0x0135	; 0x800135 <xtal_freq+0x3>
    4332:	c8 16       	cp	r12, r24
    4334:	d9 06       	cpc	r13, r25
    4336:	ea 06       	cpc	r14, r26
    4338:	fb 06       	cpc	r15, r27
    433a:	a1 f0       	breq	.+40     	; 0x4364 <si5351_init+0xca>
		{
			if(si5351_read(SI5351_PLL_INPUT_SOURCE, &reg_val))
    433c:	be 01       	movw	r22, r28
    433e:	6f 5f       	subi	r22, 0xFF	; 255
    4340:	7f 4f       	sbci	r23, 0xFF	; 255
    4342:	8f e0       	ldi	r24, 0x0F	; 15
    4344:	a4 df       	rcall	.-184    	; 0x428e <si5351_read>
    4346:	81 11       	cpse	r24, r1
    4348:	0d c0       	rjmp	.+26     	; 0x4364 <si5351_init+0xca>
    434a:	69 81       	ldd	r22, Y+1	; 0x01
			{
				return;
			}

			/* Clear the bits first */
			reg_val &= ~(SI5351_CLKIN_DIV_MASK);
    434c:	6f 73       	andi	r22, 0x3F	; 63
    434e:	69 83       	std	Y+1, r22	; 0x01

			xtal_freq = ref_osc_freq;
    4350:	c0 92 32 01 	sts	0x0132, r12	; 0x800132 <xtal_freq>
    4354:	d0 92 33 01 	sts	0x0133, r13	; 0x800133 <xtal_freq+0x1>
    4358:	e0 92 34 01 	sts	0x0134, r14	; 0x800134 <xtal_freq+0x2>
    435c:	f0 92 35 01 	sts	0x0135, r15	; 0x800135 <xtal_freq+0x3>
					reg_val |= SI5351_CLKIN_DIV_4;
				}

#endif  /* #ifndef DIVIDE_XTAL_FREQ_IF_NEEDED */

			si5351_write(SI5351_PLL_INPUT_SOURCE, reg_val);
    4360:	8f e0       	ldi	r24, 0x0F	; 15
    4362:	76 df       	rcall	.-276    	; 0x4250 <si5351_write>
    4364:	0f 90       	pop	r0
		}
	}
    4366:	df 91       	pop	r29
    4368:	cf 91       	pop	r28
    436a:	1f 91       	pop	r17
    436c:	ff 90       	pop	r15
    436e:	ef 90       	pop	r14
    4370:	df 90       	pop	r13
    4372:	cf 90       	pop	r12
    4374:	08 95       	ret

00004376 <si5351_clock_enable>:
    4376:	0f 93       	push	r16
 * clk - Clock output
 * enable - 1 to enable, 0 to disable
 *
 */
	void si5351_clock_enable(Si5351_clock clk, BOOL enable)
	{
    4378:	1f 93       	push	r17
    437a:	cf 93       	push	r28
    437c:	df 93       	push	r29
    437e:	1f 92       	push	r1
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
    4384:	18 2f       	mov	r17, r24
    4386:	06 2f       	mov	r16, r22
		uint8_t reg_val;

		if(si5351_read(SI5351_OUTPUT_ENABLE_CTRL, &reg_val))
    4388:	be 01       	movw	r22, r28
    438a:	6f 5f       	subi	r22, 0xFF	; 255
    438c:	7f 4f       	sbci	r23, 0xFF	; 255
    438e:	83 e0       	ldi	r24, 0x03	; 3
    4390:	7e df       	rcall	.-260    	; 0x428e <si5351_read>
    4392:	81 11       	cpse	r24, r1
    4394:	1b c0       	rjmp	.+54     	; 0x43cc <si5351_clock_enable+0x56>
    4396:	00 23       	and	r16, r16
		{
			return;
		}

		if(enable)
    4398:	61 f0       	breq	.+24     	; 0x43b2 <si5351_clock_enable+0x3c>
    439a:	81 e0       	ldi	r24, 0x01	; 1
		{
			reg_val &= ~(1 << (uint8_t)clk);
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	02 c0       	rjmp	.+4      	; 0x43a4 <si5351_clock_enable+0x2e>
    43a0:	88 0f       	add	r24, r24
    43a2:	99 1f       	adc	r25, r25
    43a4:	1a 95       	dec	r17
    43a6:	e2 f7       	brpl	.-8      	; 0x43a0 <si5351_clock_enable+0x2a>
    43a8:	80 95       	com	r24
    43aa:	99 81       	ldd	r25, Y+1	; 0x01
    43ac:	89 23       	and	r24, r25
    43ae:	89 83       	std	Y+1, r24	; 0x01
    43b0:	0a c0       	rjmp	.+20     	; 0x43c6 <si5351_clock_enable+0x50>
		}
		else
		{
			reg_val |= (1 << (uint8_t)clk);
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <si5351_clock_enable+0x46>
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	1a 95       	dec	r17
    43be:	e2 f7       	brpl	.-8      	; 0x43b8 <si5351_clock_enable+0x42>
    43c0:	99 81       	ldd	r25, Y+1	; 0x01
    43c2:	89 2b       	or	r24, r25
    43c4:	89 83       	std	Y+1, r24	; 0x01
		}

		si5351_write(SI5351_OUTPUT_ENABLE_CTRL, reg_val);
    43c6:	69 81       	ldd	r22, Y+1	; 0x01
    43c8:	83 e0       	ldi	r24, 0x03	; 3
    43ca:	42 df       	rcall	.-380    	; 0x4250 <si5351_write>
    43cc:	0f 90       	pop	r0
	}
    43ce:	df 91       	pop	r29
    43d0:	cf 91       	pop	r28
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	08 95       	ret

000043d8 <si5351_drive_strength>:
    43d8:	0f 93       	push	r16
 * clk - Clock output
 * drive - Desired drive level
 *
 */
	void si5351_drive_strength(Si5351_clock clk, Si5351_drive drive)
	{
    43da:	1f 93       	push	r17
    43dc:	cf 93       	push	r28
    43de:	df 93       	push	r29
    43e0:	1f 92       	push	r1
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
    43e6:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		const uint8_t mask = 0x03;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    43e8:	10 e1       	ldi	r17, 0x10	; 16
    43ea:	18 0f       	add	r17, r24
    43ec:	be 01       	movw	r22, r28
    43ee:	6f 5f       	subi	r22, 0xFF	; 255
    43f0:	7f 4f       	sbci	r23, 0xFF	; 255
    43f2:	81 2f       	mov	r24, r17
    43f4:	4c df       	rcall	.-360    	; 0x428e <si5351_read>
    43f6:	81 11       	cpse	r24, r1
    43f8:	1c c0       	rjmp	.+56     	; 0x4432 <si5351_drive_strength+0x5a>
    43fa:	01 30       	cpi	r16, 0x01	; 1
		{
			return;
		}

		switch(drive)
    43fc:	51 f0       	breq	.+20     	; 0x4412 <si5351_drive_strength+0x3a>
    43fe:	28 f0       	brcs	.+10     	; 0x440a <si5351_drive_strength+0x32>
    4400:	02 30       	cpi	r16, 0x02	; 2
    4402:	61 f0       	breq	.+24     	; 0x441c <si5351_drive_strength+0x44>
    4404:	03 30       	cpi	r16, 0x03	; 3
    4406:	79 f0       	breq	.+30     	; 0x4426 <si5351_drive_strength+0x4e>
    4408:	11 c0       	rjmp	.+34     	; 0x442c <si5351_drive_strength+0x54>
    440a:	89 81       	ldd	r24, Y+1	; 0x01
		{
			case SI5351_DRIVE_2MA:
			{
				reg_val &= ~(mask);
    440c:	8c 7f       	andi	r24, 0xFC	; 252
    440e:	89 83       	std	Y+1, r24	; 0x01
				reg_val |= 0x00;
			}
			break;
    4410:	0d c0       	rjmp	.+26     	; 0x442c <si5351_drive_strength+0x54>

			case SI5351_DRIVE_4MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x01;
    4412:	89 81       	ldd	r24, Y+1	; 0x01
    4414:	8c 7f       	andi	r24, 0xFC	; 252
    4416:	81 60       	ori	r24, 0x01	; 1
    4418:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
    441a:	08 c0       	rjmp	.+16     	; 0x442c <si5351_drive_strength+0x54>

			case SI5351_DRIVE_6MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x02;
    441c:	89 81       	ldd	r24, Y+1	; 0x01
    441e:	8c 7f       	andi	r24, 0xFC	; 252
    4420:	82 60       	ori	r24, 0x02	; 2
    4422:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
    4424:	03 c0       	rjmp	.+6      	; 0x442c <si5351_drive_strength+0x54>

			case SI5351_DRIVE_8MA:
			{
				reg_val &= ~(mask);
				reg_val |= 0x03;
    4426:	89 81       	ldd	r24, Y+1	; 0x01
    4428:	83 60       	ori	r24, 0x03	; 3
    442a:	89 83       	std	Y+1, r24	; 0x01
			{
			}
			break;
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    442c:	69 81       	ldd	r22, Y+1	; 0x01
    442e:	81 2f       	mov	r24, r17
    4430:	0f df       	rcall	.-482    	; 0x4250 <si5351_write>
	}
    4432:	0f 90       	pop	r0
    4434:	df 91       	pop	r29
    4436:	cf 91       	pop	r28
    4438:	1f 91       	pop	r17
    443a:	0f 91       	pop	r16
    443c:	08 95       	ret

0000443e <set_multisynth_registers_source>:
 *
 * Set the desired PLL source for a multisynth.
 *
 */
	void set_multisynth_registers_source(Si5351_clock clk, Si5351_pll pll)
	{
    443e:	0f 93       	push	r16
    4440:	1f 93       	push	r17
    4442:	cf 93       	push	r28
    4444:	df 93       	push	r29
    4446:	1f 92       	push	r1
    4448:	cd b7       	in	r28, 0x3d	; 61
    444a:	de b7       	in	r29, 0x3e	; 62
    444c:	06 2f       	mov	r16, r22
		uint8_t reg_val;
		uint8_t addr = SI5351_CLK0_CTRL + (uint8_t)clk;
    444e:	10 e1       	ldi	r17, 0x10	; 16
    4450:	18 0f       	add	r17, r24

		if(si5351_read(addr, &reg_val))
    4452:	be 01       	movw	r22, r28
    4454:	6f 5f       	subi	r22, 0xFF	; 255
    4456:	7f 4f       	sbci	r23, 0xFF	; 255
    4458:	81 2f       	mov	r24, r17
    445a:	19 df       	rcall	.-462    	; 0x428e <si5351_read>
    445c:	81 11       	cpse	r24, r1
    445e:	0e c0       	rjmp	.+28     	; 0x447c <set_multisynth_registers_source+0x3e>
		{
			return;
		}

		if(pll == SI5351_PLLA)
    4460:	01 30       	cpi	r16, 0x01	; 1
    4462:	21 f4       	brne	.+8      	; 0x446c <set_multisynth_registers_source+0x2e>
		{
			reg_val &= ~(SI5351_CLK_PLL_SELECT);
    4464:	89 81       	ldd	r24, Y+1	; 0x01
    4466:	8f 7d       	andi	r24, 0xDF	; 223
    4468:	89 83       	std	Y+1, r24	; 0x01
    446a:	05 c0       	rjmp	.+10     	; 0x4476 <set_multisynth_registers_source+0x38>
		}
		else if(pll == SI5351_PLLB)
    446c:	02 30       	cpi	r16, 0x02	; 2
    446e:	19 f4       	brne	.+6      	; 0x4476 <set_multisynth_registers_source+0x38>
		{
			reg_val |= SI5351_CLK_PLL_SELECT;
    4470:	89 81       	ldd	r24, Y+1	; 0x01
    4472:	80 62       	ori	r24, 0x20	; 32
		}

		si5351_write(addr, reg_val);
    4474:	89 83       	std	Y+1, r24	; 0x01
    4476:	69 81       	ldd	r22, Y+1	; 0x01
    4478:	81 2f       	mov	r24, r17
    447a:	ea de       	rcall	.-556    	; 0x4250 <si5351_write>
	}
    447c:	0f 90       	pop	r0
    447e:	df 91       	pop	r29
    4480:	cf 91       	pop	r28
    4482:	1f 91       	pop	r17
    4484:	0f 91       	pop	r16
    4486:	08 95       	ret

00004488 <set_integer_mode>:
 * enable - 1 to enable, 0 to disable
 *
 * Set the indicated multisynth into integer mode.
 */
	void set_integer_mode(Si5351_clock clk, BOOL enable)
	{
    4488:	0f 93       	push	r16
    448a:	1f 93       	push	r17
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	1f 92       	push	r1
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	06 2f       	mov	r16, r22
		uint8_t reg_val;

		if(si5351_read(SI5351_CLK0_CTRL + (uint8_t)clk, &reg_val))
    4498:	10 e1       	ldi	r17, 0x10	; 16
    449a:	18 0f       	add	r17, r24
    449c:	be 01       	movw	r22, r28
    449e:	6f 5f       	subi	r22, 0xFF	; 255
    44a0:	7f 4f       	sbci	r23, 0xFF	; 255
    44a2:	81 2f       	mov	r24, r17
    44a4:	f4 de       	rcall	.-536    	; 0x428e <si5351_read>
    44a6:	81 11       	cpse	r24, r1
    44a8:	0c c0       	rjmp	.+24     	; 0x44c2 <set_integer_mode+0x3a>
    44aa:	00 23       	and	r16, r16
		{
			return;
		}

		if(enable)
    44ac:	21 f0       	breq	.+8      	; 0x44b6 <set_integer_mode+0x2e>
    44ae:	89 81       	ldd	r24, Y+1	; 0x01
		{
			reg_val |= (SI5351_CLK_INTEGER_MODE);
    44b0:	80 64       	ori	r24, 0x40	; 64
    44b2:	89 83       	std	Y+1, r24	; 0x01
    44b4:	03 c0       	rjmp	.+6      	; 0x44bc <set_integer_mode+0x34>
    44b6:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else
		{
			reg_val &= ~(SI5351_CLK_INTEGER_MODE);
    44b8:	8f 7b       	andi	r24, 0xBF	; 191
    44ba:	89 83       	std	Y+1, r24	; 0x01
    44bc:	69 81       	ldd	r22, Y+1	; 0x01
		}

		si5351_write(SI5351_CLK0_CTRL + (uint8_t)clk, reg_val);
    44be:	81 2f       	mov	r24, r17
    44c0:	c7 de       	rcall	.-626    	; 0x4250 <si5351_write>
    44c2:	0f 90       	pop	r0
	}
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	1f 91       	pop	r17
    44ca:	0f 91       	pop	r16
    44cc:	08 95       	ret

000044ce <ms_div>:
    44ce:	ff 92       	push	r15


	void ms_div(Si5351_clock clk, uint8_t r_div, BOOL div_by_4)
	{
    44d0:	0f 93       	push	r16
    44d2:	1f 93       	push	r17
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	1f 92       	push	r1
    44da:	cd b7       	in	r28, 0x3d	; 61
    44dc:	de b7       	in	r29, 0x3e	; 62
    44de:	81 30       	cpi	r24, 0x01	; 1
		uint8_t reg_val, reg_addr;

		switch(clk)
    44e0:	21 f0       	breq	.+8      	; 0x44ea <ms_div+0x1c>
    44e2:	68 f0       	brcs	.+26     	; 0x44fe <ms_div+0x30>
    44e4:	82 30       	cpi	r24, 0x02	; 2
    44e6:	31 f0       	breq	.+12     	; 0x44f4 <ms_div+0x26>
    44e8:	28 c0       	rjmp	.+80     	; 0x453a <ms_div+0x6c>
			}
			break;

			case SI5351_CLK1:
			{
				reg_addr = SI5351_CLK1_PARAMETERS + 2;
    44ea:	0f 2e       	mov	r0, r31
    44ec:	f4 e3       	ldi	r31, 0x34	; 52
    44ee:	ff 2e       	mov	r15, r31
    44f0:	f0 2d       	mov	r31, r0
    44f2:	09 c0       	rjmp	.+18     	; 0x4506 <ms_div+0x38>
			}
			break;

			case SI5351_CLK2:
			{
				reg_addr = SI5351_CLK2_PARAMETERS + 2;
    44f4:	0f 2e       	mov	r0, r31
    44f6:	fc e3       	ldi	r31, 0x3C	; 60
    44f8:	ff 2e       	mov	r15, r31
    44fa:	f0 2d       	mov	r31, r0
			}
			break;
    44fc:	04 c0       	rjmp	.+8      	; 0x4506 <ms_div+0x38>

		switch(clk)
		{
			case SI5351_CLK0:
			{
				reg_addr = SI5351_CLK0_PARAMETERS + 2;
    44fe:	0f 2e       	mov	r0, r31
    4500:	fc e2       	ldi	r31, 0x2C	; 44
    4502:	ff 2e       	mov	r15, r31
    4504:	f0 2d       	mov	r31, r0
    4506:	04 2f       	mov	r16, r20
    4508:	16 2f       	mov	r17, r22

			default:
				return;
		}

		if(si5351_read(reg_addr, &reg_val))
    450a:	be 01       	movw	r22, r28
    450c:	6f 5f       	subi	r22, 0xFF	; 255
    450e:	7f 4f       	sbci	r23, 0xFF	; 255
    4510:	8f 2d       	mov	r24, r15
    4512:	bd de       	rcall	.-646    	; 0x428e <si5351_read>
    4514:	81 11       	cpse	r24, r1
    4516:	11 c0       	rjmp	.+34     	; 0x453a <ms_div+0x6c>
    4518:	89 81       	ldd	r24, Y+1	; 0x01
		{
			return;
		}

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    451a:	83 78       	andi	r24, 0x83	; 131
    451c:	01 11       	cpse	r16, r1

		if(div_by_4)
    451e:	02 c0       	rjmp	.+4      	; 0x4524 <ms_div+0x56>
    4520:	89 83       	std	Y+1, r24	; 0x01
		{
			return;
		}

		/* Clear the appropriate bits */
		reg_val &= ~(0x7c);
    4522:	02 c0       	rjmp	.+4      	; 0x4528 <ms_div+0x5a>
    4524:	8c 60       	ori	r24, 0x0C	; 12

		if(div_by_4)
		{
			reg_val |= (SI5351_OUTPUT_CLK_DIVBY4);
    4526:	89 83       	std	Y+1, r24	; 0x01
    4528:	80 e1       	ldi	r24, 0x10	; 16
		else
		{
			reg_val &= ~(SI5351_OUTPUT_CLK_DIVBY4);
		}

		reg_val |= (r_div << SI5351_OUTPUT_CLK_DIV_SHIFT);
    452a:	18 9f       	mul	r17, r24
    452c:	b0 01       	movw	r22, r0
    452e:	11 24       	eor	r1, r1
    4530:	89 81       	ldd	r24, Y+1	; 0x01
    4532:	68 2b       	or	r22, r24
    4534:	69 83       	std	Y+1, r22	; 0x01
    4536:	8f 2d       	mov	r24, r15

		si5351_write(reg_addr, reg_val);
    4538:	8b de       	rcall	.-746    	; 0x4250 <si5351_write>
    453a:	0f 90       	pop	r0
	}
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	1f 91       	pop	r17
    4542:	0f 91       	pop	r16
    4544:	ff 90       	pop	r15
    4546:	08 95       	ret

00004548 <set_multisynth_registers>:
    4548:	8f 92       	push	r8
 * r_div - Desired r_div ratio
 * div_by_4 - 1 Divide By 4 mode: 0 to disable
 *
 */
	void set_multisynth_registers(Si5351_clock clk, Union_si5351_regs ms_reg, BOOL int_mode, uint8_t r_div, BOOL div_by_4)
	{
    454a:	af 92       	push	r10
    454c:	cf 92       	push	r12
    454e:	df 92       	push	r13
    4550:	ef 92       	push	r14
    4552:	ff 92       	push	r15
    4554:	0f 93       	push	r16
    4556:	1f 93       	push	r17
    4558:	cf 93       	push	r28
    455a:	df 93       	push	r29
    455c:	cd b7       	in	r28, 0x3d	; 61
    455e:	de b7       	in	r29, 0x3e	; 62
    4560:	67 97       	sbiw	r28, 0x17	; 23
    4562:	0f b6       	in	r0, 0x3f	; 63
    4564:	f8 94       	cli
    4566:	de bf       	out	0x3e, r29	; 62
    4568:	0f be       	out	0x3f, r0	; 63
    456a:	cd bf       	out	0x3d, r28	; 61
    456c:	f8 2e       	mov	r15, r24
    456e:	cc 86       	std	Y+12, r12	; 0x0c
    4570:	dd 86       	std	Y+13, r13	; 0x0d
    4572:	ee 86       	std	Y+14, r14	; 0x0e
    4574:	08 8b       	std	Y+16, r16	; 0x10
    4576:	19 8b       	std	Y+17, r17	; 0x11
    4578:	2a 8b       	std	Y+18, r18	; 0x12
    457a:	6e 8b       	std	Y+22, r22	; 0x16
    457c:	59 83       	std	Y+1, r21	; 0x01
		uint8_t params[10];
		uint8_t i = 0;
		uint8_t reg_val;

		/* Registers 42-43 for CLK0; 50-51 for CLK1 */
		params[i++] = ms_reg.reg.p3_1;
    457e:	4a 83       	std	Y+2, r20	; 0x02
		params[i++] = ms_reg.reg.p3_0;
    4580:	88 0f       	add	r24, r24

		/* Register 44 for CLK0; 52 for CLK1 */
		if(si5351_read((SI5351_CLK0_PARAMETERS + 2) + (clk * 8), &reg_val))
    4582:	88 0f       	add	r24, r24
    4584:	88 0f       	add	r24, r24
    4586:	be 01       	movw	r22, r28
    4588:	65 5f       	subi	r22, 0xF5	; 245
    458a:	7f 4f       	sbci	r23, 0xFF	; 255
    458c:	84 5d       	subi	r24, 0xD4	; 212
    458e:	7f de       	rcall	.-770    	; 0x428e <si5351_read>
    4590:	81 11       	cpse	r24, r1
    4592:	3b c0       	rjmp	.+118    	; 0x460a <set_multisynth_registers+0xc2>
		{
			return;
		}

		reg_val &= 0xFC;    /*~(0x03); */
    4594:	8b 85       	ldd	r24, Y+11	; 0x0b
    4596:	8c 7f       	andi	r24, 0xFC	; 252
    4598:	8b 87       	std	Y+11, r24	; 0x0b
		params[i++] = reg_val | (ms_reg.reg.p1_2 & 0x03);
    459a:	9e 85       	ldd	r25, Y+14	; 0x0e
    459c:	93 70       	andi	r25, 0x03	; 3
    459e:	89 2b       	or	r24, r25

		/* Registers 45-46 for CLK0 */
		params[i++] = ms_reg.reg.p1_1;
    45a0:	8b 83       	std	Y+3, r24	; 0x03
		params[i++] = ms_reg.reg.p1_0;
    45a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    45a4:	8c 83       	std	Y+4, r24	; 0x04

		/* Register 47 for CLK0 */
		params[i] = (ms_reg.reg.p3_2 << 4);
		params[i++] += (ms_reg.reg.p2_2 & 0x0F);
    45a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    45a8:	8d 83       	std	Y+5, r24	; 0x05
    45aa:	9e 89       	ldd	r25, Y+22	; 0x16
    45ac:	8a 89       	ldd	r24, Y+18	; 0x12
    45ae:	8f 70       	andi	r24, 0x0F	; 15
    45b0:	20 e1       	ldi	r18, 0x10	; 16
    45b2:	92 9f       	mul	r25, r18

		/* Registers 48-49 for CLK0 */
		params[i++] = ms_reg.reg.p2_1;
    45b4:	80 0d       	add	r24, r0
    45b6:	11 24       	eor	r1, r1
		params[i++] = ms_reg.reg.p2_0;
    45b8:	8e 83       	std	Y+6, r24	; 0x06
    45ba:	89 89       	ldd	r24, Y+17	; 0x11

		/* Write the parameters */
		switch(clk)
    45bc:	8f 83       	std	Y+7, r24	; 0x07
    45be:	88 89       	ldd	r24, Y+16	; 0x10
    45c0:	88 87       	std	Y+8, r24	; 0x08
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	f8 16       	cp	r15, r24
    45c6:	69 f0       	breq	.+26     	; 0x45e2 <set_multisynth_registers+0x9a>
    45c8:	f8 16       	cp	r15, r24
    45ca:	20 f0       	brcs	.+8      	; 0x45d4 <set_multisynth_registers+0x8c>
    45cc:	22 e0       	ldi	r18, 0x02	; 2
		{
			case SI5351_CLK0:
			{
				si5351_write_bulk(SI5351_CLK0_PARAMETERS, i, params);
    45ce:	f2 16       	cp	r15, r18
    45d0:	79 f0       	breq	.+30     	; 0x45f0 <set_multisynth_registers+0xa8>
    45d2:	14 c0       	rjmp	.+40     	; 0x45fc <set_multisynth_registers+0xb4>
    45d4:	ae 01       	movw	r20, r28
    45d6:	4f 5f       	subi	r20, 0xFF	; 255
    45d8:	5f 4f       	sbci	r21, 0xFF	; 255
    45da:	68 e0       	ldi	r22, 0x08	; 8
			}
			break;
    45dc:	8a e2       	ldi	r24, 0x2A	; 42

			case SI5351_CLK1:
			{
				si5351_write_bulk(SI5351_CLK1_PARAMETERS, i, params);
    45de:	db dd       	rcall	.-1098   	; 0x4196 <si5351_write_bulk>
    45e0:	0d c0       	rjmp	.+26     	; 0x45fc <set_multisynth_registers+0xb4>
    45e2:	ae 01       	movw	r20, r28
    45e4:	4f 5f       	subi	r20, 0xFF	; 255
    45e6:	5f 4f       	sbci	r21, 0xFF	; 255
    45e8:	68 e0       	ldi	r22, 0x08	; 8
    45ea:	82 e3       	ldi	r24, 0x32	; 50
			}
			break;
    45ec:	d4 dd       	rcall	.-1112   	; 0x4196 <si5351_write_bulk>

			case SI5351_CLK2:
			{
				si5351_write_bulk(SI5351_CLK2_PARAMETERS, i, params);
    45ee:	06 c0       	rjmp	.+12     	; 0x45fc <set_multisynth_registers+0xb4>
    45f0:	ae 01       	movw	r20, r28
    45f2:	4f 5f       	subi	r20, 0xFF	; 255
    45f4:	5f 4f       	sbci	r21, 0xFF	; 255
    45f6:	68 e0       	ldi	r22, 0x08	; 8
    45f8:	8a e3       	ldi	r24, 0x3A	; 58
    45fa:	cd dd       	rcall	.-1126   	; 0x4196 <si5351_write_bulk>
			{
			}
			break;
		}

		set_integer_mode(clk, int_mode);
    45fc:	6a 2d       	mov	r22, r10
    45fe:	8f 2d       	mov	r24, r15
    4600:	43 df       	rcall	.-378    	; 0x4488 <set_integer_mode>
    4602:	4c a1       	ldd	r20, Y+36	; 0x24
		ms_div(clk, r_div, div_by_4);
    4604:	68 2d       	mov	r22, r8
    4606:	8f 2d       	mov	r24, r15
    4608:	62 df       	rcall	.-316    	; 0x44ce <ms_div>
    460a:	67 96       	adiw	r28, 0x17	; 23
    460c:	0f b6       	in	r0, 0x3f	; 63
	}
    460e:	f8 94       	cli
    4610:	de bf       	out	0x3e, r29	; 62
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	cd bf       	out	0x3d, r28	; 61
    4616:	df 91       	pop	r29
    4618:	cf 91       	pop	r28
    461a:	1f 91       	pop	r17
    461c:	0f 91       	pop	r16
    461e:	ff 90       	pop	r15
    4620:	ef 90       	pop	r14
    4622:	df 90       	pop	r13
    4624:	cf 90       	pop	r12
    4626:	af 90       	pop	r10
    4628:	8f 90       	pop	r8
    462a:	08 95       	ret

0000462c <si5351_set_freq>:
 *
 * Returns TRUE on failure
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk)
	{
    462c:	3f 92       	push	r3
    462e:	4f 92       	push	r4
    4630:	5f 92       	push	r5
    4632:	6f 92       	push	r6
    4634:	7f 92       	push	r7
    4636:	8f 92       	push	r8
    4638:	9f 92       	push	r9
    463a:	af 92       	push	r10
    463c:	bf 92       	push	r11
    463e:	cf 92       	push	r12
    4640:	df 92       	push	r13
    4642:	ef 92       	push	r14
    4644:	ff 92       	push	r15
    4646:	0f 93       	push	r16
    4648:	1f 93       	push	r17
    464a:	cf 93       	push	r28
    464c:	df 93       	push	r29
    464e:	cd b7       	in	r28, 0x3d	; 61
    4650:	de b7       	in	r29, 0x3e	; 62
    4652:	2e 97       	sbiw	r28, 0x0e	; 14
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	f8 94       	cli
    4658:	de bf       	out	0x3e, r29	; 62
    465a:	0f be       	out	0x3f, r0	; 63
    465c:	cd bf       	out	0x3d, r28	; 61
    465e:	6b 01       	movw	r12, r22
    4660:	7c 01       	movw	r14, r24
    4662:	b4 2e       	mov	r11, r20
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
		Si5351_pll target_pll;
		uint8_t clock_ctrl_addr;
		uint8_t r_div = SI5351_OUTPUT_CLK_DIV_1;
		BOOL int_mode = FALSE;
    4664:	1d 86       	std	Y+13, r1	; 0x0d
		BOOL div_by_4 = FALSE;
    4666:	1e 86       	std	Y+14, r1	; 0x0e
#endif

#ifdef PREVENT_UNACHIEVABLE_FREQUENCIES
			/* Prevent unachievable frequencies from being entered. The Si5351 will accept these, but some may result */
			/* in no clock output. */
			if(freq_Fout > 999999)
    4668:	80 e4       	ldi	r24, 0x40	; 64
    466a:	c8 16       	cp	r12, r24
    466c:	82 e4       	ldi	r24, 0x42	; 66
    466e:	d8 06       	cpc	r13, r24
    4670:	8f e0       	ldi	r24, 0x0F	; 15
    4672:	e8 06       	cpc	r14, r24
    4674:	f1 04       	cpc	r15, r1
			{
				freq_Fout /= 100;
    4676:	60 f0       	brcs	.+24     	; 0x4690 <si5351_set_freq+0x64>
    4678:	c7 01       	movw	r24, r14
    467a:	b6 01       	movw	r22, r12
    467c:	24 e6       	ldi	r18, 0x64	; 100
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	40 e0       	ldi	r20, 0x00	; 0
    4682:	50 e0       	ldi	r21, 0x00	; 0
    4684:	09 d1       	rcall	.+530    	; 0x4898 <__udivmodsi4>
				freq_Fout *= 100;
    4686:	a4 e6       	ldi	r26, 0x64	; 100
    4688:	b0 e0       	ldi	r27, 0x00	; 0
    468a:	53 d1       	rcall	.+678    	; 0x4932 <__muluhisi3>
    468c:	6b 01       	movw	r12, r22
    468e:	7c 01       	movw	r14, r24
    4690:	81 e0       	ldi	r24, 0x01	; 1
		/* Determine which PLL to use: CLK0 gets PLLA, CLK1 and CLK2 get PLLB */
		/* The first of CLK1 or CLK2 to be configured, determines the VCO frequency used for PLLB. */
		/* The second of CLK1 or CLK2 to be configured will attempt to achieve Fout by adjusting the */
		/* Multisynth Divider values only. */
		/* Only good for Si5351A3 variant */
		switch(clk)
    4692:	b8 16       	cp	r11, r24
    4694:	c9 f0       	breq	.+50     	; 0x46c8 <si5351_set_freq+0x9c>
    4696:	b8 16       	cp	r11, r24
    4698:	20 f0       	brcs	.+8      	; 0x46a2 <si5351_set_freq+0x76>
    469a:	82 e0       	ldi	r24, 0x02	; 2
    469c:	b8 16       	cp	r11, r24
    469e:	51 f1       	breq	.+84     	; 0x46f4 <si5351_set_freq+0xc8>
    46a0:	c1 c0       	rjmp	.+386    	; 0x4824 <si5351_set_freq+0x1f8>
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
    46a2:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <enabledClocksMask>
    46a6:	81 60       	ori	r24, 0x01	; 1
    46a8:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <enabledClocksMask>
				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
				clock_out[SI5351_CLK0] = freq_Fout; /* store the value for reference */
    46ac:	c0 92 99 07 	sts	0x0799, r12	; 0x800799 <clock_out>
    46b0:	d0 92 9a 07 	sts	0x079A, r13	; 0x80079a <clock_out+0x1>
    46b4:	e0 92 9b 07 	sts	0x079B, r14	; 0x80079b <clock_out+0x2>
    46b8:	f0 92 9c 07 	sts	0x079C, r15	; 0x80079c <clock_out+0x3>
		switch(clk)
		{
			case SI5351_CLK0:
			{
				enabledClocksMask |= 0x01;
				clock_ctrl_addr = 16;
    46bc:	68 94       	set
    46be:	33 24       	eor	r3, r3
    46c0:	34 f8       	bld	r3, 4

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
/*			si5351_write(3, ~enabledClocksMask | 0xF9); // only disable CLK0 */

				target_pll = SI5351_PLLA;
    46c2:	99 24       	eor	r9, r9
    46c4:	93 94       	inc	r9
    46c6:	2f c0       	rjmp	.+94     	; 0x4726 <si5351_set_freq+0xfa>
			case SI5351_CLK1:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
    46c8:	60 91 a5 07 	lds	r22, 0x07A5	; 0x8007a5 <enabledClocksMask>
    46cc:	62 60       	ori	r22, 0x02	; 2
    46ce:	60 93 a5 07 	sts	0x07A5, r22	; 0x8007a5 <enabledClocksMask>
				clock_ctrl_addr = 17;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */
    46d2:	60 95       	com	r22
    46d4:	6a 6f       	ori	r22, 0xFA	; 250
    46d6:	83 e0       	ldi	r24, 0x03	; 3
    46d8:	bb dd       	rcall	.-1162   	; 0x4250 <si5351_write>

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
    46da:	c0 92 9d 07 	sts	0x079D, r12	; 0x80079d <clock_out+0x4>
    46de:	d0 92 9e 07 	sts	0x079E, r13	; 0x80079e <clock_out+0x5>
    46e2:	e0 92 9f 07 	sts	0x079F, r14	; 0x80079f <clock_out+0x6>
    46e6:	f0 92 a0 07 	sts	0x07A0, r15	; 0x8007a0 <clock_out+0x7>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x02;
				clock_ctrl_addr = 17;
    46ea:	0f 2e       	mov	r0, r31
    46ec:	f1 e1       	ldi	r31, 0x11	; 17
    46ee:	3f 2e       	mov	r3, r31
				si5351_write(3, ~enabledClocksMask | 0xFA); /* only disable CLK1 */

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK1] = freq_Fout;         /* store the value for reference */
			}
			break;
    46f0:	f0 2d       	mov	r31, r0
			case SI5351_CLK2:
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
    46f2:	9c c0       	rjmp	.+312    	; 0x482c <si5351_set_freq+0x200>
    46f4:	60 91 a5 07 	lds	r22, 0x07A5	; 0x8007a5 <enabledClocksMask>
    46f8:	64 60       	ori	r22, 0x04	; 4
    46fa:	60 93 a5 07 	sts	0x07A5, r22	; 0x8007a5 <enabledClocksMask>
				clock_ctrl_addr = 18;

				/* Block 1: Disable Outputs */
				/* Set CLKx_DIS high; Reg. 3 = 0xFF */
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */
    46fe:	60 95       	com	r22
    4700:	6c 6f       	ori	r22, 0xFC	; 252
    4702:	83 e0       	ldi	r24, 0x03	; 3

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
    4704:	a5 dd       	rcall	.-1206   	; 0x4250 <si5351_write>
    4706:	c0 92 a1 07 	sts	0x07A1, r12	; 0x8007a1 <clock_out+0x8>
    470a:	d0 92 a2 07 	sts	0x07A2, r13	; 0x8007a2 <clock_out+0x9>
    470e:	e0 92 a3 07 	sts	0x07A3, r14	; 0x8007a3 <clock_out+0xa>
    4712:	f0 92 a4 07 	sts	0x07A4, r15	; 0x8007a4 <clock_out+0xb>
			{
				/* No checking is performed to ensure that PLLB is not unavailable due to other output being < 1.024 MHz or >= 112.5 MHz */
				/* User must ensure the clock design is valid before setting clocks */

				enabledClocksMask |= 0x04;
				clock_ctrl_addr = 18;
    4716:	0f 2e       	mov	r0, r31
    4718:	f2 e1       	ldi	r31, 0x12	; 18
    471a:	3f 2e       	mov	r3, r31
				si5351_write(3, ~enabledClocksMask | 0xFC); /* only disable CLK2 */

				target_pll = SI5351_PLLB;
				clock_out[SI5351_CLK2] = freq_Fout;         /* store the value for reference */
			}
			break;
    471c:	f0 2d       	mov	r31, r0
    471e:	86 c0       	rjmp	.+268    	; 0x482c <si5351_set_freq+0x200>
    4720:	68 94       	set
		if((target_pll == SI5351_PLLA) || !freqVCOB)
		{
#ifdef DEBUGGING_ONLY
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4, &div);
#else
				freq_VCO = multisynth_calc(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    4722:	99 24       	eor	r9, r9
    4724:	91 f8       	bld	r9, 1
    4726:	8e 01       	movw	r16, r28
    4728:	02 5f       	subi	r16, 0xF2	; 242
    472a:	1f 4f       	sbci	r17, 0xFF	; 255
    472c:	9e 01       	movw	r18, r28
    472e:	23 5f       	subi	r18, 0xF3	; 243
    4730:	3f 4f       	sbci	r19, 0xFF	; 255
    4732:	ae 01       	movw	r20, r28
    4734:	4f 5f       	subi	r20, 0xFF	; 255
    4736:	5f 4f       	sbci	r21, 0xFF	; 255
    4738:	c7 01       	movw	r24, r14
    473a:	b6 01       	movw	r22, r12
    473c:	5d db       	rcall	.-2374   	; 0x3df8 <multisynth_calc>
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    473e:	2b 01       	movw	r4, r22
    4740:	3c 01       	movw	r6, r24
    4742:	69 2d       	mov	r22, r9
    4744:	8b 2d       	mov	r24, r11
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    4746:	7b de       	rcall	.-778    	; 0x443e <set_multisynth_registers_source>
    4748:	8e 85       	ldd	r24, Y+14	; 0x0e
    474a:	8f 93       	push	r24
    474c:	81 2c       	mov	r8, r1
    474e:	ad 84       	ldd	r10, Y+13	; 0x0d
    4750:	c9 80       	ldd	r12, Y+1	; 0x01
    4752:	da 80       	ldd	r13, Y+2	; 0x02
    4754:	eb 80       	ldd	r14, Y+3	; 0x03
    4756:	fc 80       	ldd	r15, Y+4	; 0x04
    4758:	0d 81       	ldd	r16, Y+5	; 0x05
    475a:	1e 81       	ldd	r17, Y+6	; 0x06
    475c:	2f 81       	ldd	r18, Y+7	; 0x07
    475e:	38 85       	ldd	r19, Y+8	; 0x08
    4760:	49 85       	ldd	r20, Y+9	; 0x09
    4762:	5a 85       	ldd	r21, Y+10	; 0x0a
    4764:	6b 85       	ldd	r22, Y+11	; 0x0b
				fout_calc = freq_VCO_calc / div;
			}

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
    4766:	7c 85       	ldd	r23, Y+12	; 0x0c
    4768:	8b 2d       	mov	r24, r11
    476a:	ee de       	rcall	.-548    	; 0x4548 <set_multisynth_registers>
    476c:	0f 90       	pop	r0
    476e:	41 14       	cp	r4, r1
    4770:	51 04       	cpc	r5, r1
		else
		{
#ifdef DEBUGGING_ONLY
				fout_calc = freq_Fout;  /* save the intended output frequency */
#endif
			freq_Fout = multisynth_estimate(freq_Fout, &ms_reg, &int_mode, &div_by_4);
    4772:	61 04       	cpc	r6, r1
    4774:	71 04       	cpc	r7, r1
    4776:	81 f1       	breq	.+96     	; 0x47d8 <si5351_set_freq+0x1ac>
    4778:	2b c0       	rjmp	.+86     	; 0x47d0 <si5351_set_freq+0x1a4>
    477a:	8e 01       	movw	r16, r28
    477c:	02 5f       	subi	r16, 0xF2	; 242
    477e:	1f 4f       	sbci	r17, 0xFF	; 255
    4780:	9e 01       	movw	r18, r28
    4782:	23 5f       	subi	r18, 0xF3	; 243
    4784:	3f 4f       	sbci	r19, 0xFF	; 255
    4786:	ae 01       	movw	r20, r28
		}

		/* Set multisynth registers (MS must be set before PLL) */
		set_multisynth_registers_source(clk, target_pll);
    4788:	4f 5f       	subi	r20, 0xFF	; 255
    478a:	5f 4f       	sbci	r21, 0xFF	; 255
    478c:	c7 01       	movw	r24, r14
    478e:	b6 01       	movw	r22, r12
		set_multisynth_registers(clk, ms_reg, int_mode, r_div, div_by_4);
    4790:	f1 db       	rcall	.-2078   	; 0x3f74 <multisynth_estimate>
    4792:	62 e0       	ldi	r22, 0x02	; 2
    4794:	8b 2d       	mov	r24, r11
    4796:	53 de       	rcall	.-858    	; 0x443e <set_multisynth_registers_source>
    4798:	8e 85       	ldd	r24, Y+14	; 0x0e
    479a:	8f 93       	push	r24
    479c:	81 2c       	mov	r8, r1
    479e:	ad 84       	ldd	r10, Y+13	; 0x0d
    47a0:	c9 80       	ldd	r12, Y+1	; 0x01
    47a2:	da 80       	ldd	r13, Y+2	; 0x02
    47a4:	eb 80       	ldd	r14, Y+3	; 0x03
    47a6:	fc 80       	ldd	r15, Y+4	; 0x04
    47a8:	0d 81       	ldd	r16, Y+5	; 0x05
    47aa:	1e 81       	ldd	r17, Y+6	; 0x06
    47ac:	2f 81       	ldd	r18, Y+7	; 0x07
    47ae:	38 85       	ldd	r19, Y+8	; 0x08
    47b0:	49 85       	ldd	r20, Y+9	; 0x09
    47b2:	5a 85       	ldd	r21, Y+10	; 0x0a
    47b4:	6b 85       	ldd	r22, Y+11	; 0x0b
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		si5351_write(3, ~enabledClocksMask);    /* only enable clock(s) in use */
    47b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    47b8:	8b 2d       	mov	r24, r11
    47ba:	c6 de       	rcall	.-628    	; 0x4548 <set_multisynth_registers>
    47bc:	60 91 a5 07 	lds	r22, 0x07A5	; 0x8007a5 <enabledClocksMask>
    47c0:	60 95       	com	r22
    47c2:	83 e0       	ldi	r24, 0x03	; 3
 *
 */
	BOOL si5351_set_freq(Frequency_Hz freq_Fout, Si5351_clock clk)
	{
		Union_si5351_regs ms_reg;
		Frequency_Hz freq_VCO = 0;
    47c4:	45 dd       	rcall	.-1398   	; 0x4250 <si5351_write>
    47c6:	0f 90       	pop	r0
    47c8:	41 2c       	mov	r4, r1
    47ca:	51 2c       	mov	r5, r1

			f_err = freq_Fout - fout_calc;
#else
			if(freq_VCO)
			{
				set_pll(freq_VCO, target_pll);
    47cc:	32 01       	movw	r6, r4
    47ce:	11 c0       	rjmp	.+34     	; 0x47f2 <si5351_set_freq+0x1c6>
    47d0:	49 2d       	mov	r20, r9
    47d2:	c3 01       	movw	r24, r6
    47d4:	b2 01       	movw	r22, r4
/*	pll_reset(target_pll); */

		/* Block 6: */
		/* Enable desired outputs */
		/* (see Register 3) */
		si5351_write(3, ~enabledClocksMask);    /* only enable clock(s) in use */
    47d6:	e4 dc       	rcall	.-1592   	; 0x41a0 <set_pll>
    47d8:	60 91 a5 07 	lds	r22, 0x07A5	; 0x8007a5 <enabledClocksMask>
    47dc:	60 95       	com	r22
    47de:	83 e0       	ldi	r24, 0x03	; 3
    47e0:	37 dd       	rcall	.-1426   	; 0x4250 <si5351_write>

		/* power up the clock */
		if(target_pll == SI5351_PLLA)
    47e2:	81 e0       	ldi	r24, 0x01	; 1
    47e4:	98 12       	cpse	r9, r24
    47e6:	05 c0       	rjmp	.+10     	; 0x47f2 <si5351_set_freq+0x1c6>
		{
			si5351_write(clock_ctrl_addr, 0x4C);    /* power up only clock being set, leaving that clock configured as follows: */
    47e8:	6c e4       	ldi	r22, 0x4C	; 76
    47ea:	83 2d       	mov	r24, r3
    47ec:	31 dd       	rcall	.-1438   	; 0x4250 <si5351_write>
    47ee:	80 e0       	ldi	r24, 0x00	; 0
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    47f0:	2b c0       	rjmp	.+86     	; 0x4848 <si5351_set_freq+0x21c>
    47f2:	8d 85       	ldd	r24, Y+13	; 0x0d
			/*   o Integer mode set */
			/*   o Clock powered up */
		}
		else
		{
			if(int_mode)
    47f4:	88 23       	and	r24, r24
    47f6:	21 f0       	breq	.+8      	; 0x4800 <si5351_set_freq+0x1d4>
    47f8:	6c e6       	ldi	r22, 0x6C	; 108
			{
				si5351_write(clock_ctrl_addr, 0x6C);    /* power up only clock being set, leaving that clock configured as follows: */
    47fa:	83 2d       	mov	r24, r3
    47fc:	29 dd       	rcall	.-1454   	; 0x4250 <si5351_write>
    47fe:	03 c0       	rjmp	.+6      	; 0x4806 <si5351_set_freq+0x1da>
    4800:	6c e2       	ldi	r22, 0x2C	; 44
    4802:	83 2d       	mov	r24, r3
				/*   o Integer mode set */
				/*   o Clock powered up */
			}
			else
			{
				si5351_write(clock_ctrl_addr, 0x2C);    /* power up only clock being set, leaving that clock configured as follows: */
    4804:	25 dd       	rcall	.-1462   	; 0x4250 <si5351_write>
    4806:	41 14       	cp	r4, r1
    4808:	51 04       	cpc	r5, r1
    480a:	61 04       	cpc	r6, r1
				/*   o PLLB is multisynth source */
				/*   o Integer mode cleared */
				/*   o Clock powered up */
			}

			if(freq_VCO)
    480c:	71 04       	cpc	r7, r1
    480e:	61 f0       	breq	.+24     	; 0x4828 <si5351_set_freq+0x1fc>
    4810:	40 92 a6 07 	sts	0x07A6, r4	; 0x8007a6 <freqVCOB>
    4814:	50 92 a7 07 	sts	0x07A7, r5	; 0x8007a7 <freqVCOB+0x1>
			{
				freqVCOB = freq_VCO;
    4818:	60 92 a8 07 	sts	0x07A8, r6	; 0x8007a8 <freqVCOB+0x2>
    481c:	70 92 a9 07 	sts	0x07A9, r7	; 0x8007a9 <freqVCOB+0x3>
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	12 c0       	rjmp	.+36     	; 0x4848 <si5351_set_freq+0x21c>
    4824:	81 e0       	ldi	r24, 0x01	; 1
			}
		}

		return(FALSE);
    4826:	10 c0       	rjmp	.+32     	; 0x4848 <si5351_set_freq+0x21c>
    4828:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;

			default:
			{
				return(TRUE);
    482a:	0e c0       	rjmp	.+28     	; 0x4848 <si5351_set_freq+0x21c>
    482c:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <freqVCOB>
			{
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
    4830:	90 91 a7 07 	lds	r25, 0x07A7	; 0x8007a7 <freqVCOB+0x1>
			Frequency_Hz freq_VCO_calc;
			Frequency_Hz fout_calc;
			int32_t f_err;
#endif

		if((target_pll == SI5351_PLLA) || !freqVCOB)
    4834:	a0 91 a8 07 	lds	r26, 0x07A8	; 0x8007a8 <freqVCOB+0x2>
    4838:	b0 91 a9 07 	lds	r27, 0x07A9	; 0x8007a9 <freqVCOB+0x3>
    483c:	89 2b       	or	r24, r25
    483e:	8a 2b       	or	r24, r26
    4840:	8b 2b       	or	r24, r27
    4842:	09 f4       	brne	.+2      	; 0x4846 <si5351_set_freq+0x21a>
    4844:	6d cf       	rjmp	.-294    	; 0x4720 <si5351_set_freq+0xf4>
    4846:	99 cf       	rjmp	.-206    	; 0x477a <si5351_set_freq+0x14e>
    4848:	2e 96       	adiw	r28, 0x0e	; 14
    484a:	0f b6       	in	r0, 0x3f	; 63
    484c:	f8 94       	cli
				freqVCOB = freq_VCO;
			}
		}

		return(FALSE);
	}
    484e:	de bf       	out	0x3e, r29	; 62
    4850:	0f be       	out	0x3f, r0	; 63
    4852:	cd bf       	out	0x3d, r28	; 61
    4854:	df 91       	pop	r29
    4856:	cf 91       	pop	r28
    4858:	1f 91       	pop	r17
    485a:	0f 91       	pop	r16
    485c:	ff 90       	pop	r15
    485e:	ef 90       	pop	r14
    4860:	df 90       	pop	r13
    4862:	cf 90       	pop	r12
    4864:	bf 90       	pop	r11
    4866:	af 90       	pop	r10
    4868:	9f 90       	pop	r9
    486a:	8f 90       	pop	r8
    486c:	7f 90       	pop	r7
    486e:	6f 90       	pop	r6
    4870:	5f 90       	pop	r5
    4872:	4f 90       	pop	r4
    4874:	3f 90       	pop	r3
    4876:	08 95       	ret

00004878 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    4878:	08 95       	ret

0000487a <__mulsi3>:
    487a:	db 01       	movw	r26, r22
    487c:	8f 93       	push	r24
    487e:	9f 93       	push	r25
    4880:	58 d0       	rcall	.+176    	; 0x4932 <__muluhisi3>
    4882:	bf 91       	pop	r27
    4884:	af 91       	pop	r26
    4886:	a2 9f       	mul	r26, r18
    4888:	80 0d       	add	r24, r0
    488a:	91 1d       	adc	r25, r1
    488c:	a3 9f       	mul	r26, r19
    488e:	90 0d       	add	r25, r0
    4890:	b2 9f       	mul	r27, r18
    4892:	90 0d       	add	r25, r0
    4894:	11 24       	eor	r1, r1
    4896:	08 95       	ret

00004898 <__udivmodsi4>:
    4898:	a1 e2       	ldi	r26, 0x21	; 33
    489a:	1a 2e       	mov	r1, r26
    489c:	aa 1b       	sub	r26, r26
    489e:	bb 1b       	sub	r27, r27
    48a0:	fd 01       	movw	r30, r26
    48a2:	0d c0       	rjmp	.+26     	; 0x48be <__udivmodsi4_ep>

000048a4 <__udivmodsi4_loop>:
    48a4:	aa 1f       	adc	r26, r26
    48a6:	bb 1f       	adc	r27, r27
    48a8:	ee 1f       	adc	r30, r30
    48aa:	ff 1f       	adc	r31, r31
    48ac:	a2 17       	cp	r26, r18
    48ae:	b3 07       	cpc	r27, r19
    48b0:	e4 07       	cpc	r30, r20
    48b2:	f5 07       	cpc	r31, r21
    48b4:	20 f0       	brcs	.+8      	; 0x48be <__udivmodsi4_ep>
    48b6:	a2 1b       	sub	r26, r18
    48b8:	b3 0b       	sbc	r27, r19
    48ba:	e4 0b       	sbc	r30, r20
    48bc:	f5 0b       	sbc	r31, r21

000048be <__udivmodsi4_ep>:
    48be:	66 1f       	adc	r22, r22
    48c0:	77 1f       	adc	r23, r23
    48c2:	88 1f       	adc	r24, r24
    48c4:	99 1f       	adc	r25, r25
    48c6:	1a 94       	dec	r1
    48c8:	69 f7       	brne	.-38     	; 0x48a4 <__udivmodsi4_loop>
    48ca:	60 95       	com	r22
    48cc:	70 95       	com	r23
    48ce:	80 95       	com	r24
    48d0:	90 95       	com	r25
    48d2:	9b 01       	movw	r18, r22
    48d4:	ac 01       	movw	r20, r24
    48d6:	bd 01       	movw	r22, r26
    48d8:	cf 01       	movw	r24, r30
    48da:	08 95       	ret

000048dc <__divmodsi4>:
    48dc:	05 2e       	mov	r0, r21
    48de:	97 fb       	bst	r25, 7
    48e0:	16 f4       	brtc	.+4      	; 0x48e6 <__divmodsi4+0xa>
    48e2:	00 94       	com	r0
    48e4:	0f d0       	rcall	.+30     	; 0x4904 <__negsi2>
    48e6:	57 fd       	sbrc	r21, 7
    48e8:	05 d0       	rcall	.+10     	; 0x48f4 <__divmodsi4_neg2>
    48ea:	d6 df       	rcall	.-84     	; 0x4898 <__udivmodsi4>
    48ec:	07 fc       	sbrc	r0, 7
    48ee:	02 d0       	rcall	.+4      	; 0x48f4 <__divmodsi4_neg2>
    48f0:	46 f4       	brtc	.+16     	; 0x4902 <__divmodsi4_exit>
    48f2:	08 c0       	rjmp	.+16     	; 0x4904 <__negsi2>

000048f4 <__divmodsi4_neg2>:
    48f4:	50 95       	com	r21
    48f6:	40 95       	com	r20
    48f8:	30 95       	com	r19
    48fa:	21 95       	neg	r18
    48fc:	3f 4f       	sbci	r19, 0xFF	; 255
    48fe:	4f 4f       	sbci	r20, 0xFF	; 255
    4900:	5f 4f       	sbci	r21, 0xFF	; 255

00004902 <__divmodsi4_exit>:
    4902:	08 95       	ret

00004904 <__negsi2>:
    4904:	90 95       	com	r25
    4906:	80 95       	com	r24
    4908:	70 95       	com	r23
    490a:	61 95       	neg	r22
    490c:	7f 4f       	sbci	r23, 0xFF	; 255
    490e:	8f 4f       	sbci	r24, 0xFF	; 255
    4910:	9f 4f       	sbci	r25, 0xFF	; 255
    4912:	08 95       	ret

00004914 <__umulhisi3>:
    4914:	a2 9f       	mul	r26, r18
    4916:	b0 01       	movw	r22, r0
    4918:	b3 9f       	mul	r27, r19
    491a:	c0 01       	movw	r24, r0
    491c:	a3 9f       	mul	r26, r19
    491e:	70 0d       	add	r23, r0
    4920:	81 1d       	adc	r24, r1
    4922:	11 24       	eor	r1, r1
    4924:	91 1d       	adc	r25, r1
    4926:	b2 9f       	mul	r27, r18
    4928:	70 0d       	add	r23, r0
    492a:	81 1d       	adc	r24, r1
    492c:	11 24       	eor	r1, r1
    492e:	91 1d       	adc	r25, r1
    4930:	08 95       	ret

00004932 <__muluhisi3>:
    4932:	f0 df       	rcall	.-32     	; 0x4914 <__umulhisi3>
    4934:	a5 9f       	mul	r26, r21
    4936:	90 0d       	add	r25, r0
    4938:	b4 9f       	mul	r27, r20
    493a:	90 0d       	add	r25, r0
    493c:	a4 9f       	mul	r26, r20
    493e:	80 0d       	add	r24, r0
    4940:	91 1d       	adc	r25, r1
    4942:	11 24       	eor	r1, r1
    4944:	08 95       	ret

00004946 <__umulsidi3>:
    4946:	e8 94       	clt

00004948 <__umulsidi3_helper>:
    4948:	df 93       	push	r29
    494a:	cf 93       	push	r28
    494c:	fc 01       	movw	r30, r24
    494e:	db 01       	movw	r26, r22
    4950:	e1 df       	rcall	.-62     	; 0x4914 <__umulhisi3>
    4952:	7f 93       	push	r23
    4954:	6f 93       	push	r22
    4956:	e9 01       	movw	r28, r18
    4958:	9a 01       	movw	r18, r20
    495a:	ac 01       	movw	r20, r24
    495c:	bf 93       	push	r27
    495e:	af 93       	push	r26
    4960:	3f 93       	push	r19
    4962:	2f 93       	push	r18
    4964:	df 01       	movw	r26, r30
    4966:	d6 df       	rcall	.-84     	; 0x4914 <__umulhisi3>
    4968:	26 f4       	brtc	.+8      	; 0x4972 <__umulsidi3_helper+0x2a>
    496a:	6c 1b       	sub	r22, r28
    496c:	7d 0b       	sbc	r23, r29
    496e:	82 0b       	sbc	r24, r18
    4970:	93 0b       	sbc	r25, r19
    4972:	9e 01       	movw	r18, r28
    4974:	eb 01       	movw	r28, r22
    4976:	fc 01       	movw	r30, r24
    4978:	2b d0       	rcall	.+86     	; 0x49d0 <__muldi3_6>
    497a:	af 91       	pop	r26
    497c:	bf 91       	pop	r27
    497e:	2f 91       	pop	r18
    4980:	3f 91       	pop	r19
    4982:	26 d0       	rcall	.+76     	; 0x49d0 <__muldi3_6>
    4984:	be 01       	movw	r22, r28
    4986:	cf 01       	movw	r24, r30
    4988:	f9 01       	movw	r30, r18
    498a:	2f 91       	pop	r18
    498c:	3f 91       	pop	r19
    498e:	cf 91       	pop	r28
    4990:	df 91       	pop	r29
    4992:	08 95       	ret

00004994 <__ashrdi3>:
    4994:	97 fb       	bst	r25, 7
    4996:	10 f8       	bld	r1, 0

00004998 <__lshrdi3>:
    4998:	16 94       	lsr	r1
    499a:	00 08       	sbc	r0, r0
    499c:	0f 93       	push	r16
    499e:	08 30       	cpi	r16, 0x08	; 8
    49a0:	98 f0       	brcs	.+38     	; 0x49c8 <__lshrdi3+0x30>
    49a2:	08 50       	subi	r16, 0x08	; 8
    49a4:	23 2f       	mov	r18, r19
    49a6:	34 2f       	mov	r19, r20
    49a8:	45 2f       	mov	r20, r21
    49aa:	56 2f       	mov	r21, r22
    49ac:	67 2f       	mov	r22, r23
    49ae:	78 2f       	mov	r23, r24
    49b0:	89 2f       	mov	r24, r25
    49b2:	90 2d       	mov	r25, r0
    49b4:	f4 cf       	rjmp	.-24     	; 0x499e <__lshrdi3+0x6>
    49b6:	05 94       	asr	r0
    49b8:	97 95       	ror	r25
    49ba:	87 95       	ror	r24
    49bc:	77 95       	ror	r23
    49be:	67 95       	ror	r22
    49c0:	57 95       	ror	r21
    49c2:	47 95       	ror	r20
    49c4:	37 95       	ror	r19
    49c6:	27 95       	ror	r18
    49c8:	0a 95       	dec	r16
    49ca:	aa f7       	brpl	.-22     	; 0x49b6 <__lshrdi3+0x1e>
    49cc:	0f 91       	pop	r16
    49ce:	08 95       	ret

000049d0 <__muldi3_6>:
    49d0:	a1 df       	rcall	.-190    	; 0x4914 <__umulhisi3>
    49d2:	46 0f       	add	r20, r22
    49d4:	57 1f       	adc	r21, r23
    49d6:	c8 1f       	adc	r28, r24
    49d8:	d9 1f       	adc	r29, r25
    49da:	08 f4       	brcc	.+2      	; 0x49de <__muldi3_6+0xe>
    49dc:	31 96       	adiw	r30, 0x01	; 1
    49de:	08 95       	ret

000049e0 <atoi>:
    49e0:	fc 01       	movw	r30, r24
    49e2:	88 27       	eor	r24, r24
    49e4:	99 27       	eor	r25, r25
    49e6:	e8 94       	clt
    49e8:	21 91       	ld	r18, Z+
    49ea:	20 32       	cpi	r18, 0x20	; 32
    49ec:	e9 f3       	breq	.-6      	; 0x49e8 <atoi+0x8>
    49ee:	29 30       	cpi	r18, 0x09	; 9
    49f0:	10 f0       	brcs	.+4      	; 0x49f6 <atoi+0x16>
    49f2:	2e 30       	cpi	r18, 0x0E	; 14
    49f4:	c8 f3       	brcs	.-14     	; 0x49e8 <atoi+0x8>
    49f6:	2b 32       	cpi	r18, 0x2B	; 43
    49f8:	39 f0       	breq	.+14     	; 0x4a08 <atoi+0x28>
    49fa:	2d 32       	cpi	r18, 0x2D	; 45
    49fc:	31 f4       	brne	.+12     	; 0x4a0a <atoi+0x2a>
    49fe:	68 94       	set
    4a00:	03 c0       	rjmp	.+6      	; 0x4a08 <atoi+0x28>
    4a02:	55 d0       	rcall	.+170    	; 0x4aae <__mulhi_const_10>
    4a04:	82 0f       	add	r24, r18
    4a06:	91 1d       	adc	r25, r1
    4a08:	21 91       	ld	r18, Z+
    4a0a:	20 53       	subi	r18, 0x30	; 48
    4a0c:	2a 30       	cpi	r18, 0x0A	; 10
    4a0e:	c8 f3       	brcs	.-14     	; 0x4a02 <atoi+0x22>
    4a10:	1e f4       	brtc	.+6      	; 0x4a18 <atoi+0x38>
    4a12:	90 95       	com	r25
    4a14:	81 95       	neg	r24
    4a16:	9f 4f       	sbci	r25, 0xFF	; 255
    4a18:	08 95       	ret

00004a1a <atol>:
    4a1a:	1f 93       	push	r17
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	99 27       	eor	r25, r25
    4a20:	88 27       	eor	r24, r24
    4a22:	bc 01       	movw	r22, r24
    4a24:	e8 94       	clt
    4a26:	11 91       	ld	r17, Z+
    4a28:	10 32       	cpi	r17, 0x20	; 32
    4a2a:	e9 f3       	breq	.-6      	; 0x4a26 <atol+0xc>
    4a2c:	19 30       	cpi	r17, 0x09	; 9
    4a2e:	10 f0       	brcs	.+4      	; 0x4a34 <atol+0x1a>
    4a30:	1e 30       	cpi	r17, 0x0E	; 14
    4a32:	c8 f3       	brcs	.-14     	; 0x4a26 <atol+0xc>
    4a34:	1b 32       	cpi	r17, 0x2B	; 43
    4a36:	49 f0       	breq	.+18     	; 0x4a4a <atol+0x30>
    4a38:	1d 32       	cpi	r17, 0x2D	; 45
    4a3a:	41 f4       	brne	.+16     	; 0x4a4c <atol+0x32>
    4a3c:	68 94       	set
    4a3e:	05 c0       	rjmp	.+10     	; 0x4a4a <atol+0x30>
    4a40:	21 d0       	rcall	.+66     	; 0x4a84 <__mulsi_const_10>
    4a42:	61 0f       	add	r22, r17
    4a44:	71 1d       	adc	r23, r1
    4a46:	81 1d       	adc	r24, r1
    4a48:	91 1d       	adc	r25, r1
    4a4a:	11 91       	ld	r17, Z+
    4a4c:	10 53       	subi	r17, 0x30	; 48
    4a4e:	1a 30       	cpi	r17, 0x0A	; 10
    4a50:	b8 f3       	brcs	.-18     	; 0x4a40 <atol+0x26>
    4a52:	3e f4       	brtc	.+14     	; 0x4a62 <atol+0x48>
    4a54:	90 95       	com	r25
    4a56:	80 95       	com	r24
    4a58:	70 95       	com	r23
    4a5a:	61 95       	neg	r22
    4a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a60:	9f 4f       	sbci	r25, 0xFF	; 255
    4a62:	1f 91       	pop	r17
    4a64:	08 95       	ret

00004a66 <toupper>:
    4a66:	91 11       	cpse	r25, r1
    4a68:	08 95       	ret
    4a6a:	81 56       	subi	r24, 0x61	; 97
    4a6c:	8a 51       	subi	r24, 0x1A	; 26
    4a6e:	08 f4       	brcc	.+2      	; 0x4a72 <toupper+0xc>
    4a70:	80 52       	subi	r24, 0x20	; 32
    4a72:	85 58       	subi	r24, 0x85	; 133
    4a74:	08 95       	ret

00004a76 <strcpy>:
    4a76:	fb 01       	movw	r30, r22
    4a78:	dc 01       	movw	r26, r24
    4a7a:	01 90       	ld	r0, Z+
    4a7c:	0d 92       	st	X+, r0
    4a7e:	00 20       	and	r0, r0
    4a80:	e1 f7       	brne	.-8      	; 0x4a7a <strcpy+0x4>
    4a82:	08 95       	ret

00004a84 <__mulsi_const_10>:
    4a84:	59 2f       	mov	r21, r25
    4a86:	48 2f       	mov	r20, r24
    4a88:	37 2f       	mov	r19, r23
    4a8a:	26 2f       	mov	r18, r22
    4a8c:	66 0f       	add	r22, r22
    4a8e:	77 1f       	adc	r23, r23
    4a90:	88 1f       	adc	r24, r24
    4a92:	99 1f       	adc	r25, r25
    4a94:	66 0f       	add	r22, r22
    4a96:	77 1f       	adc	r23, r23
    4a98:	88 1f       	adc	r24, r24
    4a9a:	99 1f       	adc	r25, r25
    4a9c:	62 0f       	add	r22, r18
    4a9e:	73 1f       	adc	r23, r19
    4aa0:	84 1f       	adc	r24, r20
    4aa2:	95 1f       	adc	r25, r21
    4aa4:	66 0f       	add	r22, r22
    4aa6:	77 1f       	adc	r23, r23
    4aa8:	88 1f       	adc	r24, r24
    4aaa:	99 1f       	adc	r25, r25
    4aac:	08 95       	ret

00004aae <__mulhi_const_10>:
    4aae:	7a e0       	ldi	r23, 0x0A	; 10
    4ab0:	97 9f       	mul	r25, r23
    4ab2:	90 2d       	mov	r25, r0
    4ab4:	87 9f       	mul	r24, r23
    4ab6:	80 2d       	mov	r24, r0
    4ab8:	91 0d       	add	r25, r1
    4aba:	11 24       	eor	r1, r1
    4abc:	08 95       	ret

00004abe <sprintf>:
    4abe:	ae e0       	ldi	r26, 0x0E	; 14
    4ac0:	b0 e0       	ldi	r27, 0x00	; 0
    4ac2:	e4 e6       	ldi	r30, 0x64	; 100
    4ac4:	f5 e2       	ldi	r31, 0x25	; 37
    4ac6:	dd c2       	rjmp	.+1466   	; 0x5082 <__prologue_saves__+0x1c>
    4ac8:	0d 89       	ldd	r16, Y+21	; 0x15
    4aca:	1e 89       	ldd	r17, Y+22	; 0x16
    4acc:	86 e0       	ldi	r24, 0x06	; 6
    4ace:	8c 83       	std	Y+4, r24	; 0x04
    4ad0:	1a 83       	std	Y+2, r17	; 0x02
    4ad2:	09 83       	std	Y+1, r16	; 0x01
    4ad4:	8f ef       	ldi	r24, 0xFF	; 255
    4ad6:	9f e7       	ldi	r25, 0x7F	; 127
    4ad8:	9e 83       	std	Y+6, r25	; 0x06
    4ada:	8d 83       	std	Y+5, r24	; 0x05
    4adc:	ae 01       	movw	r20, r28
    4ade:	47 5e       	subi	r20, 0xE7	; 231
    4ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ae2:	6f 89       	ldd	r22, Y+23	; 0x17
    4ae4:	78 8d       	ldd	r23, Y+24	; 0x18
    4ae6:	ce 01       	movw	r24, r28
    4ae8:	01 96       	adiw	r24, 0x01	; 1
    4aea:	08 d0       	rcall	.+16     	; 0x4afc <vfprintf>
    4aec:	ef 81       	ldd	r30, Y+7	; 0x07
    4aee:	f8 85       	ldd	r31, Y+8	; 0x08
    4af0:	e0 0f       	add	r30, r16
    4af2:	f1 1f       	adc	r31, r17
    4af4:	10 82       	st	Z, r1
    4af6:	2e 96       	adiw	r28, 0x0e	; 14
    4af8:	e4 e0       	ldi	r30, 0x04	; 4
    4afa:	df c2       	rjmp	.+1470   	; 0x50ba <__epilogue_restores__+0x1c>

00004afc <vfprintf>:
    4afc:	ab e0       	ldi	r26, 0x0B	; 11
    4afe:	b0 e0       	ldi	r27, 0x00	; 0
    4b00:	e3 e8       	ldi	r30, 0x83	; 131
    4b02:	f5 e2       	ldi	r31, 0x25	; 37
    4b04:	b0 c2       	rjmp	.+1376   	; 0x5066 <__prologue_saves__>
    4b06:	6c 01       	movw	r12, r24
    4b08:	7b 01       	movw	r14, r22
    4b0a:	8a 01       	movw	r16, r20
    4b0c:	fc 01       	movw	r30, r24
    4b0e:	17 82       	std	Z+7, r1	; 0x07
    4b10:	16 82       	std	Z+6, r1	; 0x06
    4b12:	83 81       	ldd	r24, Z+3	; 0x03
    4b14:	81 ff       	sbrs	r24, 1
    4b16:	bf c1       	rjmp	.+894    	; 0x4e96 <vfprintf+0x39a>
    4b18:	ce 01       	movw	r24, r28
    4b1a:	01 96       	adiw	r24, 0x01	; 1
    4b1c:	3c 01       	movw	r6, r24
    4b1e:	f6 01       	movw	r30, r12
    4b20:	93 81       	ldd	r25, Z+3	; 0x03
    4b22:	f7 01       	movw	r30, r14
    4b24:	93 fd       	sbrc	r25, 3
    4b26:	85 91       	lpm	r24, Z+
    4b28:	93 ff       	sbrs	r25, 3
    4b2a:	81 91       	ld	r24, Z+
    4b2c:	7f 01       	movw	r14, r30
    4b2e:	88 23       	and	r24, r24
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <vfprintf+0x38>
    4b32:	ad c1       	rjmp	.+858    	; 0x4e8e <vfprintf+0x392>
    4b34:	85 32       	cpi	r24, 0x25	; 37
    4b36:	39 f4       	brne	.+14     	; 0x4b46 <vfprintf+0x4a>
    4b38:	93 fd       	sbrc	r25, 3
    4b3a:	85 91       	lpm	r24, Z+
    4b3c:	93 ff       	sbrs	r25, 3
    4b3e:	81 91       	ld	r24, Z+
    4b40:	7f 01       	movw	r14, r30
    4b42:	85 32       	cpi	r24, 0x25	; 37
    4b44:	21 f4       	brne	.+8      	; 0x4b4e <vfprintf+0x52>
    4b46:	b6 01       	movw	r22, r12
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	c0 d1       	rcall	.+896    	; 0x4ecc <fputc>
    4b4c:	e8 cf       	rjmp	.-48     	; 0x4b1e <vfprintf+0x22>
    4b4e:	91 2c       	mov	r9, r1
    4b50:	21 2c       	mov	r2, r1
    4b52:	31 2c       	mov	r3, r1
    4b54:	ff e1       	ldi	r31, 0x1F	; 31
    4b56:	f3 15       	cp	r31, r3
    4b58:	d8 f0       	brcs	.+54     	; 0x4b90 <vfprintf+0x94>
    4b5a:	8b 32       	cpi	r24, 0x2B	; 43
    4b5c:	79 f0       	breq	.+30     	; 0x4b7c <vfprintf+0x80>
    4b5e:	38 f4       	brcc	.+14     	; 0x4b6e <vfprintf+0x72>
    4b60:	80 32       	cpi	r24, 0x20	; 32
    4b62:	79 f0       	breq	.+30     	; 0x4b82 <vfprintf+0x86>
    4b64:	83 32       	cpi	r24, 0x23	; 35
    4b66:	a1 f4       	brne	.+40     	; 0x4b90 <vfprintf+0x94>
    4b68:	23 2d       	mov	r18, r3
    4b6a:	20 61       	ori	r18, 0x10	; 16
    4b6c:	1d c0       	rjmp	.+58     	; 0x4ba8 <vfprintf+0xac>
    4b6e:	8d 32       	cpi	r24, 0x2D	; 45
    4b70:	61 f0       	breq	.+24     	; 0x4b8a <vfprintf+0x8e>
    4b72:	80 33       	cpi	r24, 0x30	; 48
    4b74:	69 f4       	brne	.+26     	; 0x4b90 <vfprintf+0x94>
    4b76:	23 2d       	mov	r18, r3
    4b78:	21 60       	ori	r18, 0x01	; 1
    4b7a:	16 c0       	rjmp	.+44     	; 0x4ba8 <vfprintf+0xac>
    4b7c:	83 2d       	mov	r24, r3
    4b7e:	82 60       	ori	r24, 0x02	; 2
    4b80:	38 2e       	mov	r3, r24
    4b82:	e3 2d       	mov	r30, r3
    4b84:	e4 60       	ori	r30, 0x04	; 4
    4b86:	3e 2e       	mov	r3, r30
    4b88:	2a c0       	rjmp	.+84     	; 0x4bde <vfprintf+0xe2>
    4b8a:	f3 2d       	mov	r31, r3
    4b8c:	f8 60       	ori	r31, 0x08	; 8
    4b8e:	1d c0       	rjmp	.+58     	; 0x4bca <vfprintf+0xce>
    4b90:	37 fc       	sbrc	r3, 7
    4b92:	2d c0       	rjmp	.+90     	; 0x4bee <vfprintf+0xf2>
    4b94:	20 ed       	ldi	r18, 0xD0	; 208
    4b96:	28 0f       	add	r18, r24
    4b98:	2a 30       	cpi	r18, 0x0A	; 10
    4b9a:	40 f0       	brcs	.+16     	; 0x4bac <vfprintf+0xb0>
    4b9c:	8e 32       	cpi	r24, 0x2E	; 46
    4b9e:	b9 f4       	brne	.+46     	; 0x4bce <vfprintf+0xd2>
    4ba0:	36 fc       	sbrc	r3, 6
    4ba2:	75 c1       	rjmp	.+746    	; 0x4e8e <vfprintf+0x392>
    4ba4:	23 2d       	mov	r18, r3
    4ba6:	20 64       	ori	r18, 0x40	; 64
    4ba8:	32 2e       	mov	r3, r18
    4baa:	19 c0       	rjmp	.+50     	; 0x4bde <vfprintf+0xe2>
    4bac:	36 fe       	sbrs	r3, 6
    4bae:	06 c0       	rjmp	.+12     	; 0x4bbc <vfprintf+0xc0>
    4bb0:	8a e0       	ldi	r24, 0x0A	; 10
    4bb2:	98 9e       	mul	r9, r24
    4bb4:	20 0d       	add	r18, r0
    4bb6:	11 24       	eor	r1, r1
    4bb8:	92 2e       	mov	r9, r18
    4bba:	11 c0       	rjmp	.+34     	; 0x4bde <vfprintf+0xe2>
    4bbc:	ea e0       	ldi	r30, 0x0A	; 10
    4bbe:	2e 9e       	mul	r2, r30
    4bc0:	20 0d       	add	r18, r0
    4bc2:	11 24       	eor	r1, r1
    4bc4:	22 2e       	mov	r2, r18
    4bc6:	f3 2d       	mov	r31, r3
    4bc8:	f0 62       	ori	r31, 0x20	; 32
    4bca:	3f 2e       	mov	r3, r31
    4bcc:	08 c0       	rjmp	.+16     	; 0x4bde <vfprintf+0xe2>
    4bce:	8c 36       	cpi	r24, 0x6C	; 108
    4bd0:	21 f4       	brne	.+8      	; 0x4bda <vfprintf+0xde>
    4bd2:	83 2d       	mov	r24, r3
    4bd4:	80 68       	ori	r24, 0x80	; 128
    4bd6:	38 2e       	mov	r3, r24
    4bd8:	02 c0       	rjmp	.+4      	; 0x4bde <vfprintf+0xe2>
    4bda:	88 36       	cpi	r24, 0x68	; 104
    4bdc:	41 f4       	brne	.+16     	; 0x4bee <vfprintf+0xf2>
    4bde:	f7 01       	movw	r30, r14
    4be0:	93 fd       	sbrc	r25, 3
    4be2:	85 91       	lpm	r24, Z+
    4be4:	93 ff       	sbrs	r25, 3
    4be6:	81 91       	ld	r24, Z+
    4be8:	7f 01       	movw	r14, r30
    4bea:	81 11       	cpse	r24, r1
    4bec:	b3 cf       	rjmp	.-154    	; 0x4b54 <vfprintf+0x58>
    4bee:	98 2f       	mov	r25, r24
    4bf0:	9f 7d       	andi	r25, 0xDF	; 223
    4bf2:	95 54       	subi	r25, 0x45	; 69
    4bf4:	93 30       	cpi	r25, 0x03	; 3
    4bf6:	28 f4       	brcc	.+10     	; 0x4c02 <vfprintf+0x106>
    4bf8:	0c 5f       	subi	r16, 0xFC	; 252
    4bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    4bfc:	9f e3       	ldi	r25, 0x3F	; 63
    4bfe:	99 83       	std	Y+1, r25	; 0x01
    4c00:	0d c0       	rjmp	.+26     	; 0x4c1c <vfprintf+0x120>
    4c02:	83 36       	cpi	r24, 0x63	; 99
    4c04:	31 f0       	breq	.+12     	; 0x4c12 <vfprintf+0x116>
    4c06:	83 37       	cpi	r24, 0x73	; 115
    4c08:	71 f0       	breq	.+28     	; 0x4c26 <vfprintf+0x12a>
    4c0a:	83 35       	cpi	r24, 0x53	; 83
    4c0c:	09 f0       	breq	.+2      	; 0x4c10 <vfprintf+0x114>
    4c0e:	55 c0       	rjmp	.+170    	; 0x4cba <vfprintf+0x1be>
    4c10:	20 c0       	rjmp	.+64     	; 0x4c52 <vfprintf+0x156>
    4c12:	f8 01       	movw	r30, r16
    4c14:	80 81       	ld	r24, Z
    4c16:	89 83       	std	Y+1, r24	; 0x01
    4c18:	0e 5f       	subi	r16, 0xFE	; 254
    4c1a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c1c:	88 24       	eor	r8, r8
    4c1e:	83 94       	inc	r8
    4c20:	91 2c       	mov	r9, r1
    4c22:	53 01       	movw	r10, r6
    4c24:	12 c0       	rjmp	.+36     	; 0x4c4a <vfprintf+0x14e>
    4c26:	28 01       	movw	r4, r16
    4c28:	f2 e0       	ldi	r31, 0x02	; 2
    4c2a:	4f 0e       	add	r4, r31
    4c2c:	51 1c       	adc	r5, r1
    4c2e:	f8 01       	movw	r30, r16
    4c30:	a0 80       	ld	r10, Z
    4c32:	b1 80       	ldd	r11, Z+1	; 0x01
    4c34:	36 fe       	sbrs	r3, 6
    4c36:	03 c0       	rjmp	.+6      	; 0x4c3e <vfprintf+0x142>
    4c38:	69 2d       	mov	r22, r9
    4c3a:	70 e0       	ldi	r23, 0x00	; 0
    4c3c:	02 c0       	rjmp	.+4      	; 0x4c42 <vfprintf+0x146>
    4c3e:	6f ef       	ldi	r22, 0xFF	; 255
    4c40:	7f ef       	ldi	r23, 0xFF	; 255
    4c42:	c5 01       	movw	r24, r10
    4c44:	38 d1       	rcall	.+624    	; 0x4eb6 <strnlen>
    4c46:	4c 01       	movw	r8, r24
    4c48:	82 01       	movw	r16, r4
    4c4a:	f3 2d       	mov	r31, r3
    4c4c:	ff 77       	andi	r31, 0x7F	; 127
    4c4e:	3f 2e       	mov	r3, r31
    4c50:	15 c0       	rjmp	.+42     	; 0x4c7c <vfprintf+0x180>
    4c52:	28 01       	movw	r4, r16
    4c54:	22 e0       	ldi	r18, 0x02	; 2
    4c56:	42 0e       	add	r4, r18
    4c58:	51 1c       	adc	r5, r1
    4c5a:	f8 01       	movw	r30, r16
    4c5c:	a0 80       	ld	r10, Z
    4c5e:	b1 80       	ldd	r11, Z+1	; 0x01
    4c60:	36 fe       	sbrs	r3, 6
    4c62:	03 c0       	rjmp	.+6      	; 0x4c6a <vfprintf+0x16e>
    4c64:	69 2d       	mov	r22, r9
    4c66:	70 e0       	ldi	r23, 0x00	; 0
    4c68:	02 c0       	rjmp	.+4      	; 0x4c6e <vfprintf+0x172>
    4c6a:	6f ef       	ldi	r22, 0xFF	; 255
    4c6c:	7f ef       	ldi	r23, 0xFF	; 255
    4c6e:	c5 01       	movw	r24, r10
    4c70:	17 d1       	rcall	.+558    	; 0x4ea0 <strnlen_P>
    4c72:	4c 01       	movw	r8, r24
    4c74:	f3 2d       	mov	r31, r3
    4c76:	f0 68       	ori	r31, 0x80	; 128
    4c78:	3f 2e       	mov	r3, r31
    4c7a:	82 01       	movw	r16, r4
    4c7c:	33 fc       	sbrc	r3, 3
    4c7e:	19 c0       	rjmp	.+50     	; 0x4cb2 <vfprintf+0x1b6>
    4c80:	82 2d       	mov	r24, r2
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	88 16       	cp	r8, r24
    4c86:	99 06       	cpc	r9, r25
    4c88:	a0 f4       	brcc	.+40     	; 0x4cb2 <vfprintf+0x1b6>
    4c8a:	b6 01       	movw	r22, r12
    4c8c:	80 e2       	ldi	r24, 0x20	; 32
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	1d d1       	rcall	.+570    	; 0x4ecc <fputc>
    4c92:	2a 94       	dec	r2
    4c94:	f5 cf       	rjmp	.-22     	; 0x4c80 <vfprintf+0x184>
    4c96:	f5 01       	movw	r30, r10
    4c98:	37 fc       	sbrc	r3, 7
    4c9a:	85 91       	lpm	r24, Z+
    4c9c:	37 fe       	sbrs	r3, 7
    4c9e:	81 91       	ld	r24, Z+
    4ca0:	5f 01       	movw	r10, r30
    4ca2:	b6 01       	movw	r22, r12
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	12 d1       	rcall	.+548    	; 0x4ecc <fputc>
    4ca8:	21 10       	cpse	r2, r1
    4caa:	2a 94       	dec	r2
    4cac:	21 e0       	ldi	r18, 0x01	; 1
    4cae:	82 1a       	sub	r8, r18
    4cb0:	91 08       	sbc	r9, r1
    4cb2:	81 14       	cp	r8, r1
    4cb4:	91 04       	cpc	r9, r1
    4cb6:	79 f7       	brne	.-34     	; 0x4c96 <vfprintf+0x19a>
    4cb8:	e1 c0       	rjmp	.+450    	; 0x4e7c <vfprintf+0x380>
    4cba:	84 36       	cpi	r24, 0x64	; 100
    4cbc:	11 f0       	breq	.+4      	; 0x4cc2 <vfprintf+0x1c6>
    4cbe:	89 36       	cpi	r24, 0x69	; 105
    4cc0:	39 f5       	brne	.+78     	; 0x4d10 <vfprintf+0x214>
    4cc2:	f8 01       	movw	r30, r16
    4cc4:	37 fe       	sbrs	r3, 7
    4cc6:	07 c0       	rjmp	.+14     	; 0x4cd6 <vfprintf+0x1da>
    4cc8:	60 81       	ld	r22, Z
    4cca:	71 81       	ldd	r23, Z+1	; 0x01
    4ccc:	82 81       	ldd	r24, Z+2	; 0x02
    4cce:	93 81       	ldd	r25, Z+3	; 0x03
    4cd0:	0c 5f       	subi	r16, 0xFC	; 252
    4cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    4cd4:	08 c0       	rjmp	.+16     	; 0x4ce6 <vfprintf+0x1ea>
    4cd6:	60 81       	ld	r22, Z
    4cd8:	71 81       	ldd	r23, Z+1	; 0x01
    4cda:	07 2e       	mov	r0, r23
    4cdc:	00 0c       	add	r0, r0
    4cde:	88 0b       	sbc	r24, r24
    4ce0:	99 0b       	sbc	r25, r25
    4ce2:	0e 5f       	subi	r16, 0xFE	; 254
    4ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ce6:	f3 2d       	mov	r31, r3
    4ce8:	ff 76       	andi	r31, 0x6F	; 111
    4cea:	3f 2e       	mov	r3, r31
    4cec:	97 ff       	sbrs	r25, 7
    4cee:	09 c0       	rjmp	.+18     	; 0x4d02 <vfprintf+0x206>
    4cf0:	90 95       	com	r25
    4cf2:	80 95       	com	r24
    4cf4:	70 95       	com	r23
    4cf6:	61 95       	neg	r22
    4cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    4cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    4cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    4cfe:	f0 68       	ori	r31, 0x80	; 128
    4d00:	3f 2e       	mov	r3, r31
    4d02:	2a e0       	ldi	r18, 0x0A	; 10
    4d04:	30 e0       	ldi	r19, 0x00	; 0
    4d06:	a3 01       	movw	r20, r6
    4d08:	1d d1       	rcall	.+570    	; 0x4f44 <__ultoa_invert>
    4d0a:	88 2e       	mov	r8, r24
    4d0c:	86 18       	sub	r8, r6
    4d0e:	44 c0       	rjmp	.+136    	; 0x4d98 <vfprintf+0x29c>
    4d10:	85 37       	cpi	r24, 0x75	; 117
    4d12:	31 f4       	brne	.+12     	; 0x4d20 <vfprintf+0x224>
    4d14:	23 2d       	mov	r18, r3
    4d16:	2f 7e       	andi	r18, 0xEF	; 239
    4d18:	b2 2e       	mov	r11, r18
    4d1a:	2a e0       	ldi	r18, 0x0A	; 10
    4d1c:	30 e0       	ldi	r19, 0x00	; 0
    4d1e:	25 c0       	rjmp	.+74     	; 0x4d6a <vfprintf+0x26e>
    4d20:	93 2d       	mov	r25, r3
    4d22:	99 7f       	andi	r25, 0xF9	; 249
    4d24:	b9 2e       	mov	r11, r25
    4d26:	8f 36       	cpi	r24, 0x6F	; 111
    4d28:	c1 f0       	breq	.+48     	; 0x4d5a <vfprintf+0x25e>
    4d2a:	18 f4       	brcc	.+6      	; 0x4d32 <vfprintf+0x236>
    4d2c:	88 35       	cpi	r24, 0x58	; 88
    4d2e:	79 f0       	breq	.+30     	; 0x4d4e <vfprintf+0x252>
    4d30:	ae c0       	rjmp	.+348    	; 0x4e8e <vfprintf+0x392>
    4d32:	80 37       	cpi	r24, 0x70	; 112
    4d34:	19 f0       	breq	.+6      	; 0x4d3c <vfprintf+0x240>
    4d36:	88 37       	cpi	r24, 0x78	; 120
    4d38:	21 f0       	breq	.+8      	; 0x4d42 <vfprintf+0x246>
    4d3a:	a9 c0       	rjmp	.+338    	; 0x4e8e <vfprintf+0x392>
    4d3c:	e9 2f       	mov	r30, r25
    4d3e:	e0 61       	ori	r30, 0x10	; 16
    4d40:	be 2e       	mov	r11, r30
    4d42:	b4 fe       	sbrs	r11, 4
    4d44:	0d c0       	rjmp	.+26     	; 0x4d60 <vfprintf+0x264>
    4d46:	fb 2d       	mov	r31, r11
    4d48:	f4 60       	ori	r31, 0x04	; 4
    4d4a:	bf 2e       	mov	r11, r31
    4d4c:	09 c0       	rjmp	.+18     	; 0x4d60 <vfprintf+0x264>
    4d4e:	34 fe       	sbrs	r3, 4
    4d50:	0a c0       	rjmp	.+20     	; 0x4d66 <vfprintf+0x26a>
    4d52:	29 2f       	mov	r18, r25
    4d54:	26 60       	ori	r18, 0x06	; 6
    4d56:	b2 2e       	mov	r11, r18
    4d58:	06 c0       	rjmp	.+12     	; 0x4d66 <vfprintf+0x26a>
    4d5a:	28 e0       	ldi	r18, 0x08	; 8
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	05 c0       	rjmp	.+10     	; 0x4d6a <vfprintf+0x26e>
    4d60:	20 e1       	ldi	r18, 0x10	; 16
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	02 c0       	rjmp	.+4      	; 0x4d6a <vfprintf+0x26e>
    4d66:	20 e1       	ldi	r18, 0x10	; 16
    4d68:	32 e0       	ldi	r19, 0x02	; 2
    4d6a:	f8 01       	movw	r30, r16
    4d6c:	b7 fe       	sbrs	r11, 7
    4d6e:	07 c0       	rjmp	.+14     	; 0x4d7e <vfprintf+0x282>
    4d70:	60 81       	ld	r22, Z
    4d72:	71 81       	ldd	r23, Z+1	; 0x01
    4d74:	82 81       	ldd	r24, Z+2	; 0x02
    4d76:	93 81       	ldd	r25, Z+3	; 0x03
    4d78:	0c 5f       	subi	r16, 0xFC	; 252
    4d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d7c:	06 c0       	rjmp	.+12     	; 0x4d8a <vfprintf+0x28e>
    4d7e:	60 81       	ld	r22, Z
    4d80:	71 81       	ldd	r23, Z+1	; 0x01
    4d82:	80 e0       	ldi	r24, 0x00	; 0
    4d84:	90 e0       	ldi	r25, 0x00	; 0
    4d86:	0e 5f       	subi	r16, 0xFE	; 254
    4d88:	1f 4f       	sbci	r17, 0xFF	; 255
    4d8a:	a3 01       	movw	r20, r6
    4d8c:	db d0       	rcall	.+438    	; 0x4f44 <__ultoa_invert>
    4d8e:	88 2e       	mov	r8, r24
    4d90:	86 18       	sub	r8, r6
    4d92:	fb 2d       	mov	r31, r11
    4d94:	ff 77       	andi	r31, 0x7F	; 127
    4d96:	3f 2e       	mov	r3, r31
    4d98:	36 fe       	sbrs	r3, 6
    4d9a:	0d c0       	rjmp	.+26     	; 0x4db6 <vfprintf+0x2ba>
    4d9c:	23 2d       	mov	r18, r3
    4d9e:	2e 7f       	andi	r18, 0xFE	; 254
    4da0:	a2 2e       	mov	r10, r18
    4da2:	89 14       	cp	r8, r9
    4da4:	58 f4       	brcc	.+22     	; 0x4dbc <vfprintf+0x2c0>
    4da6:	34 fe       	sbrs	r3, 4
    4da8:	0b c0       	rjmp	.+22     	; 0x4dc0 <vfprintf+0x2c4>
    4daa:	32 fc       	sbrc	r3, 2
    4dac:	09 c0       	rjmp	.+18     	; 0x4dc0 <vfprintf+0x2c4>
    4dae:	83 2d       	mov	r24, r3
    4db0:	8e 7e       	andi	r24, 0xEE	; 238
    4db2:	a8 2e       	mov	r10, r24
    4db4:	05 c0       	rjmp	.+10     	; 0x4dc0 <vfprintf+0x2c4>
    4db6:	b8 2c       	mov	r11, r8
    4db8:	a3 2c       	mov	r10, r3
    4dba:	03 c0       	rjmp	.+6      	; 0x4dc2 <vfprintf+0x2c6>
    4dbc:	b8 2c       	mov	r11, r8
    4dbe:	01 c0       	rjmp	.+2      	; 0x4dc2 <vfprintf+0x2c6>
    4dc0:	b9 2c       	mov	r11, r9
    4dc2:	a4 fe       	sbrs	r10, 4
    4dc4:	0f c0       	rjmp	.+30     	; 0x4de4 <vfprintf+0x2e8>
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	e8 0d       	add	r30, r8
    4dca:	f1 1d       	adc	r31, r1
    4dcc:	80 81       	ld	r24, Z
    4dce:	80 33       	cpi	r24, 0x30	; 48
    4dd0:	21 f4       	brne	.+8      	; 0x4dda <vfprintf+0x2de>
    4dd2:	9a 2d       	mov	r25, r10
    4dd4:	99 7e       	andi	r25, 0xE9	; 233
    4dd6:	a9 2e       	mov	r10, r25
    4dd8:	09 c0       	rjmp	.+18     	; 0x4dec <vfprintf+0x2f0>
    4dda:	a2 fe       	sbrs	r10, 2
    4ddc:	06 c0       	rjmp	.+12     	; 0x4dea <vfprintf+0x2ee>
    4dde:	b3 94       	inc	r11
    4de0:	b3 94       	inc	r11
    4de2:	04 c0       	rjmp	.+8      	; 0x4dec <vfprintf+0x2f0>
    4de4:	8a 2d       	mov	r24, r10
    4de6:	86 78       	andi	r24, 0x86	; 134
    4de8:	09 f0       	breq	.+2      	; 0x4dec <vfprintf+0x2f0>
    4dea:	b3 94       	inc	r11
    4dec:	a3 fc       	sbrc	r10, 3
    4dee:	10 c0       	rjmp	.+32     	; 0x4e10 <vfprintf+0x314>
    4df0:	a0 fe       	sbrs	r10, 0
    4df2:	06 c0       	rjmp	.+12     	; 0x4e00 <vfprintf+0x304>
    4df4:	b2 14       	cp	r11, r2
    4df6:	80 f4       	brcc	.+32     	; 0x4e18 <vfprintf+0x31c>
    4df8:	28 0c       	add	r2, r8
    4dfa:	92 2c       	mov	r9, r2
    4dfc:	9b 18       	sub	r9, r11
    4dfe:	0d c0       	rjmp	.+26     	; 0x4e1a <vfprintf+0x31e>
    4e00:	b2 14       	cp	r11, r2
    4e02:	58 f4       	brcc	.+22     	; 0x4e1a <vfprintf+0x31e>
    4e04:	b6 01       	movw	r22, r12
    4e06:	80 e2       	ldi	r24, 0x20	; 32
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	60 d0       	rcall	.+192    	; 0x4ecc <fputc>
    4e0c:	b3 94       	inc	r11
    4e0e:	f8 cf       	rjmp	.-16     	; 0x4e00 <vfprintf+0x304>
    4e10:	b2 14       	cp	r11, r2
    4e12:	18 f4       	brcc	.+6      	; 0x4e1a <vfprintf+0x31e>
    4e14:	2b 18       	sub	r2, r11
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <vfprintf+0x320>
    4e18:	98 2c       	mov	r9, r8
    4e1a:	21 2c       	mov	r2, r1
    4e1c:	a4 fe       	sbrs	r10, 4
    4e1e:	0f c0       	rjmp	.+30     	; 0x4e3e <vfprintf+0x342>
    4e20:	b6 01       	movw	r22, r12
    4e22:	80 e3       	ldi	r24, 0x30	; 48
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	52 d0       	rcall	.+164    	; 0x4ecc <fputc>
    4e28:	a2 fe       	sbrs	r10, 2
    4e2a:	16 c0       	rjmp	.+44     	; 0x4e58 <vfprintf+0x35c>
    4e2c:	a1 fc       	sbrc	r10, 1
    4e2e:	03 c0       	rjmp	.+6      	; 0x4e36 <vfprintf+0x33a>
    4e30:	88 e7       	ldi	r24, 0x78	; 120
    4e32:	90 e0       	ldi	r25, 0x00	; 0
    4e34:	02 c0       	rjmp	.+4      	; 0x4e3a <vfprintf+0x33e>
    4e36:	88 e5       	ldi	r24, 0x58	; 88
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	b6 01       	movw	r22, r12
    4e3c:	0c c0       	rjmp	.+24     	; 0x4e56 <vfprintf+0x35a>
    4e3e:	8a 2d       	mov	r24, r10
    4e40:	86 78       	andi	r24, 0x86	; 134
    4e42:	51 f0       	breq	.+20     	; 0x4e58 <vfprintf+0x35c>
    4e44:	a1 fe       	sbrs	r10, 1
    4e46:	02 c0       	rjmp	.+4      	; 0x4e4c <vfprintf+0x350>
    4e48:	8b e2       	ldi	r24, 0x2B	; 43
    4e4a:	01 c0       	rjmp	.+2      	; 0x4e4e <vfprintf+0x352>
    4e4c:	80 e2       	ldi	r24, 0x20	; 32
    4e4e:	a7 fc       	sbrc	r10, 7
    4e50:	8d e2       	ldi	r24, 0x2D	; 45
    4e52:	b6 01       	movw	r22, r12
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	3a d0       	rcall	.+116    	; 0x4ecc <fputc>
    4e58:	89 14       	cp	r8, r9
    4e5a:	30 f4       	brcc	.+12     	; 0x4e68 <vfprintf+0x36c>
    4e5c:	b6 01       	movw	r22, r12
    4e5e:	80 e3       	ldi	r24, 0x30	; 48
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	34 d0       	rcall	.+104    	; 0x4ecc <fputc>
    4e64:	9a 94       	dec	r9
    4e66:	f8 cf       	rjmp	.-16     	; 0x4e58 <vfprintf+0x35c>
    4e68:	8a 94       	dec	r8
    4e6a:	f3 01       	movw	r30, r6
    4e6c:	e8 0d       	add	r30, r8
    4e6e:	f1 1d       	adc	r31, r1
    4e70:	80 81       	ld	r24, Z
    4e72:	b6 01       	movw	r22, r12
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	2a d0       	rcall	.+84     	; 0x4ecc <fputc>
    4e78:	81 10       	cpse	r8, r1
    4e7a:	f6 cf       	rjmp	.-20     	; 0x4e68 <vfprintf+0x36c>
    4e7c:	22 20       	and	r2, r2
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <vfprintf+0x386>
    4e80:	4e ce       	rjmp	.-868    	; 0x4b1e <vfprintf+0x22>
    4e82:	b6 01       	movw	r22, r12
    4e84:	80 e2       	ldi	r24, 0x20	; 32
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	21 d0       	rcall	.+66     	; 0x4ecc <fputc>
    4e8a:	2a 94       	dec	r2
    4e8c:	f7 cf       	rjmp	.-18     	; 0x4e7c <vfprintf+0x380>
    4e8e:	f6 01       	movw	r30, r12
    4e90:	86 81       	ldd	r24, Z+6	; 0x06
    4e92:	97 81       	ldd	r25, Z+7	; 0x07
    4e94:	02 c0       	rjmp	.+4      	; 0x4e9a <vfprintf+0x39e>
    4e96:	8f ef       	ldi	r24, 0xFF	; 255
    4e98:	9f ef       	ldi	r25, 0xFF	; 255
    4e9a:	2b 96       	adiw	r28, 0x0b	; 11
    4e9c:	e2 e1       	ldi	r30, 0x12	; 18
    4e9e:	ff c0       	rjmp	.+510    	; 0x509e <__epilogue_restores__>

00004ea0 <strnlen_P>:
    4ea0:	fc 01       	movw	r30, r24
    4ea2:	05 90       	lpm	r0, Z+
    4ea4:	61 50       	subi	r22, 0x01	; 1
    4ea6:	70 40       	sbci	r23, 0x00	; 0
    4ea8:	01 10       	cpse	r0, r1
    4eaa:	d8 f7       	brcc	.-10     	; 0x4ea2 <strnlen_P+0x2>
    4eac:	80 95       	com	r24
    4eae:	90 95       	com	r25
    4eb0:	8e 0f       	add	r24, r30
    4eb2:	9f 1f       	adc	r25, r31
    4eb4:	08 95       	ret

00004eb6 <strnlen>:
    4eb6:	fc 01       	movw	r30, r24
    4eb8:	61 50       	subi	r22, 0x01	; 1
    4eba:	70 40       	sbci	r23, 0x00	; 0
    4ebc:	01 90       	ld	r0, Z+
    4ebe:	01 10       	cpse	r0, r1
    4ec0:	d8 f7       	brcc	.-10     	; 0x4eb8 <strnlen+0x2>
    4ec2:	80 95       	com	r24
    4ec4:	90 95       	com	r25
    4ec6:	8e 0f       	add	r24, r30
    4ec8:	9f 1f       	adc	r25, r31
    4eca:	08 95       	ret

00004ecc <fputc>:
    4ecc:	0f 93       	push	r16
    4ece:	1f 93       	push	r17
    4ed0:	cf 93       	push	r28
    4ed2:	df 93       	push	r29
    4ed4:	fb 01       	movw	r30, r22
    4ed6:	23 81       	ldd	r18, Z+3	; 0x03
    4ed8:	21 fd       	sbrc	r18, 1
    4eda:	03 c0       	rjmp	.+6      	; 0x4ee2 <fputc+0x16>
    4edc:	8f ef       	ldi	r24, 0xFF	; 255
    4ede:	9f ef       	ldi	r25, 0xFF	; 255
    4ee0:	2c c0       	rjmp	.+88     	; 0x4f3a <fputc+0x6e>
    4ee2:	22 ff       	sbrs	r18, 2
    4ee4:	16 c0       	rjmp	.+44     	; 0x4f12 <fputc+0x46>
    4ee6:	46 81       	ldd	r20, Z+6	; 0x06
    4ee8:	57 81       	ldd	r21, Z+7	; 0x07
    4eea:	24 81       	ldd	r18, Z+4	; 0x04
    4eec:	35 81       	ldd	r19, Z+5	; 0x05
    4eee:	42 17       	cp	r20, r18
    4ef0:	53 07       	cpc	r21, r19
    4ef2:	44 f4       	brge	.+16     	; 0x4f04 <fputc+0x38>
    4ef4:	a0 81       	ld	r26, Z
    4ef6:	b1 81       	ldd	r27, Z+1	; 0x01
    4ef8:	9d 01       	movw	r18, r26
    4efa:	2f 5f       	subi	r18, 0xFF	; 255
    4efc:	3f 4f       	sbci	r19, 0xFF	; 255
    4efe:	31 83       	std	Z+1, r19	; 0x01
    4f00:	20 83       	st	Z, r18
    4f02:	8c 93       	st	X, r24
    4f04:	26 81       	ldd	r18, Z+6	; 0x06
    4f06:	37 81       	ldd	r19, Z+7	; 0x07
    4f08:	2f 5f       	subi	r18, 0xFF	; 255
    4f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f0c:	37 83       	std	Z+7, r19	; 0x07
    4f0e:	26 83       	std	Z+6, r18	; 0x06
    4f10:	14 c0       	rjmp	.+40     	; 0x4f3a <fputc+0x6e>
    4f12:	8b 01       	movw	r16, r22
    4f14:	ec 01       	movw	r28, r24
    4f16:	fb 01       	movw	r30, r22
    4f18:	00 84       	ldd	r0, Z+8	; 0x08
    4f1a:	f1 85       	ldd	r31, Z+9	; 0x09
    4f1c:	e0 2d       	mov	r30, r0
    4f1e:	09 95       	icall
    4f20:	89 2b       	or	r24, r25
    4f22:	e1 f6       	brne	.-72     	; 0x4edc <fputc+0x10>
    4f24:	d8 01       	movw	r26, r16
    4f26:	16 96       	adiw	r26, 0x06	; 6
    4f28:	8d 91       	ld	r24, X+
    4f2a:	9c 91       	ld	r25, X
    4f2c:	17 97       	sbiw	r26, 0x07	; 7
    4f2e:	01 96       	adiw	r24, 0x01	; 1
    4f30:	17 96       	adiw	r26, 0x07	; 7
    4f32:	9c 93       	st	X, r25
    4f34:	8e 93       	st	-X, r24
    4f36:	16 97       	sbiw	r26, 0x06	; 6
    4f38:	ce 01       	movw	r24, r28
    4f3a:	df 91       	pop	r29
    4f3c:	cf 91       	pop	r28
    4f3e:	1f 91       	pop	r17
    4f40:	0f 91       	pop	r16
    4f42:	08 95       	ret

00004f44 <__ultoa_invert>:
    4f44:	fa 01       	movw	r30, r20
    4f46:	aa 27       	eor	r26, r26
    4f48:	28 30       	cpi	r18, 0x08	; 8
    4f4a:	51 f1       	breq	.+84     	; 0x4fa0 <__ultoa_invert+0x5c>
    4f4c:	20 31       	cpi	r18, 0x10	; 16
    4f4e:	81 f1       	breq	.+96     	; 0x4fb0 <__ultoa_invert+0x6c>
    4f50:	e8 94       	clt
    4f52:	6f 93       	push	r22
    4f54:	6e 7f       	andi	r22, 0xFE	; 254
    4f56:	6e 5f       	subi	r22, 0xFE	; 254
    4f58:	7f 4f       	sbci	r23, 0xFF	; 255
    4f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5e:	af 4f       	sbci	r26, 0xFF	; 255
    4f60:	b1 e0       	ldi	r27, 0x01	; 1
    4f62:	3e d0       	rcall	.+124    	; 0x4fe0 <__ultoa_invert+0x9c>
    4f64:	b4 e0       	ldi	r27, 0x04	; 4
    4f66:	3c d0       	rcall	.+120    	; 0x4fe0 <__ultoa_invert+0x9c>
    4f68:	67 0f       	add	r22, r23
    4f6a:	78 1f       	adc	r23, r24
    4f6c:	89 1f       	adc	r24, r25
    4f6e:	9a 1f       	adc	r25, r26
    4f70:	a1 1d       	adc	r26, r1
    4f72:	68 0f       	add	r22, r24
    4f74:	79 1f       	adc	r23, r25
    4f76:	8a 1f       	adc	r24, r26
    4f78:	91 1d       	adc	r25, r1
    4f7a:	a1 1d       	adc	r26, r1
    4f7c:	6a 0f       	add	r22, r26
    4f7e:	71 1d       	adc	r23, r1
    4f80:	81 1d       	adc	r24, r1
    4f82:	91 1d       	adc	r25, r1
    4f84:	a1 1d       	adc	r26, r1
    4f86:	20 d0       	rcall	.+64     	; 0x4fc8 <__ultoa_invert+0x84>
    4f88:	09 f4       	brne	.+2      	; 0x4f8c <__ultoa_invert+0x48>
    4f8a:	68 94       	set
    4f8c:	3f 91       	pop	r19
    4f8e:	2a e0       	ldi	r18, 0x0A	; 10
    4f90:	26 9f       	mul	r18, r22
    4f92:	11 24       	eor	r1, r1
    4f94:	30 19       	sub	r19, r0
    4f96:	30 5d       	subi	r19, 0xD0	; 208
    4f98:	31 93       	st	Z+, r19
    4f9a:	de f6       	brtc	.-74     	; 0x4f52 <__ultoa_invert+0xe>
    4f9c:	cf 01       	movw	r24, r30
    4f9e:	08 95       	ret
    4fa0:	46 2f       	mov	r20, r22
    4fa2:	47 70       	andi	r20, 0x07	; 7
    4fa4:	40 5d       	subi	r20, 0xD0	; 208
    4fa6:	41 93       	st	Z+, r20
    4fa8:	b3 e0       	ldi	r27, 0x03	; 3
    4faa:	0f d0       	rcall	.+30     	; 0x4fca <__ultoa_invert+0x86>
    4fac:	c9 f7       	brne	.-14     	; 0x4fa0 <__ultoa_invert+0x5c>
    4fae:	f6 cf       	rjmp	.-20     	; 0x4f9c <__ultoa_invert+0x58>
    4fb0:	46 2f       	mov	r20, r22
    4fb2:	4f 70       	andi	r20, 0x0F	; 15
    4fb4:	40 5d       	subi	r20, 0xD0	; 208
    4fb6:	4a 33       	cpi	r20, 0x3A	; 58
    4fb8:	18 f0       	brcs	.+6      	; 0x4fc0 <__ultoa_invert+0x7c>
    4fba:	49 5d       	subi	r20, 0xD9	; 217
    4fbc:	31 fd       	sbrc	r19, 1
    4fbe:	40 52       	subi	r20, 0x20	; 32
    4fc0:	41 93       	st	Z+, r20
    4fc2:	02 d0       	rcall	.+4      	; 0x4fc8 <__ultoa_invert+0x84>
    4fc4:	a9 f7       	brne	.-22     	; 0x4fb0 <__ultoa_invert+0x6c>
    4fc6:	ea cf       	rjmp	.-44     	; 0x4f9c <__ultoa_invert+0x58>
    4fc8:	b4 e0       	ldi	r27, 0x04	; 4
    4fca:	a6 95       	lsr	r26
    4fcc:	97 95       	ror	r25
    4fce:	87 95       	ror	r24
    4fd0:	77 95       	ror	r23
    4fd2:	67 95       	ror	r22
    4fd4:	ba 95       	dec	r27
    4fd6:	c9 f7       	brne	.-14     	; 0x4fca <__ultoa_invert+0x86>
    4fd8:	00 97       	sbiw	r24, 0x00	; 0
    4fda:	61 05       	cpc	r22, r1
    4fdc:	71 05       	cpc	r23, r1
    4fde:	08 95       	ret
    4fe0:	9b 01       	movw	r18, r22
    4fe2:	ac 01       	movw	r20, r24
    4fe4:	0a 2e       	mov	r0, r26
    4fe6:	06 94       	lsr	r0
    4fe8:	57 95       	ror	r21
    4fea:	47 95       	ror	r20
    4fec:	37 95       	ror	r19
    4fee:	27 95       	ror	r18
    4ff0:	ba 95       	dec	r27
    4ff2:	c9 f7       	brne	.-14     	; 0x4fe6 <__ultoa_invert+0xa2>
    4ff4:	62 0f       	add	r22, r18
    4ff6:	73 1f       	adc	r23, r19
    4ff8:	84 1f       	adc	r24, r20
    4ffa:	95 1f       	adc	r25, r21
    4ffc:	a0 1d       	adc	r26, r0
    4ffe:	08 95       	ret

00005000 <eeprom_read_byte>:
    5000:	f9 99       	sbic	0x1f, 1	; 31
    5002:	fe cf       	rjmp	.-4      	; 0x5000 <eeprom_read_byte>
    5004:	92 bd       	out	0x22, r25	; 34
    5006:	81 bd       	out	0x21, r24	; 33
    5008:	f8 9a       	sbi	0x1f, 0	; 31
    500a:	99 27       	eor	r25, r25
    500c:	80 b5       	in	r24, 0x20	; 32
    500e:	08 95       	ret

00005010 <eeprom_read_dword>:
    5010:	a6 e1       	ldi	r26, 0x16	; 22
    5012:	b0 e0       	ldi	r27, 0x00	; 0
    5014:	44 e0       	ldi	r20, 0x04	; 4
    5016:	50 e0       	ldi	r21, 0x00	; 0
    5018:	18 c0       	rjmp	.+48     	; 0x504a <eeprom_read_blraw>

0000501a <eeprom_write_byte>:
    501a:	26 2f       	mov	r18, r22

0000501c <eeprom_write_r18>:
    501c:	f9 99       	sbic	0x1f, 1	; 31
    501e:	fe cf       	rjmp	.-4      	; 0x501c <eeprom_write_r18>
    5020:	1f ba       	out	0x1f, r1	; 31
    5022:	92 bd       	out	0x22, r25	; 34
    5024:	81 bd       	out	0x21, r24	; 33
    5026:	20 bd       	out	0x20, r18	; 32
    5028:	0f b6       	in	r0, 0x3f	; 63
    502a:	f8 94       	cli
    502c:	fa 9a       	sbi	0x1f, 2	; 31
    502e:	f9 9a       	sbi	0x1f, 1	; 31
    5030:	0f be       	out	0x3f, r0	; 63
    5032:	01 96       	adiw	r24, 0x01	; 1
    5034:	08 95       	ret

00005036 <eeprom_write_dword>:
    5036:	24 2f       	mov	r18, r20
    5038:	f1 df       	rcall	.-30     	; 0x501c <eeprom_write_r18>
    503a:	25 2f       	mov	r18, r21
    503c:	ef df       	rcall	.-34     	; 0x501c <eeprom_write_r18>
    503e:	00 c0       	rjmp	.+0      	; 0x5040 <eeprom_write_word>

00005040 <eeprom_write_word>:
    5040:	ec df       	rcall	.-40     	; 0x501a <eeprom_write_byte>
    5042:	27 2f       	mov	r18, r23
    5044:	eb cf       	rjmp	.-42     	; 0x501c <eeprom_write_r18>

00005046 <eeprom_read_block>:
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22

0000504a <eeprom_read_blraw>:
    504a:	fc 01       	movw	r30, r24
    504c:	f9 99       	sbic	0x1f, 1	; 31
    504e:	fe cf       	rjmp	.-4      	; 0x504c <eeprom_read_blraw+0x2>
    5050:	06 c0       	rjmp	.+12     	; 0x505e <eeprom_read_blraw+0x14>
    5052:	f2 bd       	out	0x22, r31	; 34
    5054:	e1 bd       	out	0x21, r30	; 33
    5056:	f8 9a       	sbi	0x1f, 0	; 31
    5058:	31 96       	adiw	r30, 0x01	; 1
    505a:	00 b4       	in	r0, 0x20	; 32
    505c:	0d 92       	st	X+, r0
    505e:	41 50       	subi	r20, 0x01	; 1
    5060:	50 40       	sbci	r21, 0x00	; 0
    5062:	b8 f7       	brcc	.-18     	; 0x5052 <eeprom_read_blraw+0x8>
    5064:	08 95       	ret

00005066 <__prologue_saves__>:
    5066:	2f 92       	push	r2
    5068:	3f 92       	push	r3
    506a:	4f 92       	push	r4
    506c:	5f 92       	push	r5
    506e:	6f 92       	push	r6
    5070:	7f 92       	push	r7
    5072:	8f 92       	push	r8
    5074:	9f 92       	push	r9
    5076:	af 92       	push	r10
    5078:	bf 92       	push	r11
    507a:	cf 92       	push	r12
    507c:	df 92       	push	r13
    507e:	ef 92       	push	r14
    5080:	ff 92       	push	r15
    5082:	0f 93       	push	r16
    5084:	1f 93       	push	r17
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	cd b7       	in	r28, 0x3d	; 61
    508c:	de b7       	in	r29, 0x3e	; 62
    508e:	ca 1b       	sub	r28, r26
    5090:	db 0b       	sbc	r29, r27
    5092:	0f b6       	in	r0, 0x3f	; 63
    5094:	f8 94       	cli
    5096:	de bf       	out	0x3e, r29	; 62
    5098:	0f be       	out	0x3f, r0	; 63
    509a:	cd bf       	out	0x3d, r28	; 61
    509c:	09 94       	ijmp

0000509e <__epilogue_restores__>:
    509e:	2a 88       	ldd	r2, Y+18	; 0x12
    50a0:	39 88       	ldd	r3, Y+17	; 0x11
    50a2:	48 88       	ldd	r4, Y+16	; 0x10
    50a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    50a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    50a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    50aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    50ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    50ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    50b0:	b9 84       	ldd	r11, Y+9	; 0x09
    50b2:	c8 84       	ldd	r12, Y+8	; 0x08
    50b4:	df 80       	ldd	r13, Y+7	; 0x07
    50b6:	ee 80       	ldd	r14, Y+6	; 0x06
    50b8:	fd 80       	ldd	r15, Y+5	; 0x05
    50ba:	0c 81       	ldd	r16, Y+4	; 0x04
    50bc:	1b 81       	ldd	r17, Y+3	; 0x03
    50be:	aa 81       	ldd	r26, Y+2	; 0x02
    50c0:	b9 81       	ldd	r27, Y+1	; 0x01
    50c2:	ce 0f       	add	r28, r30
    50c4:	d1 1d       	adc	r29, r1
    50c6:	0f b6       	in	r0, 0x3f	; 63
    50c8:	f8 94       	cli
    50ca:	de bf       	out	0x3e, r29	; 62
    50cc:	0f be       	out	0x3f, r0	; 63
    50ce:	cd bf       	out	0x3d, r28	; 61
    50d0:	ed 01       	movw	r28, r26
    50d2:	08 95       	ret

000050d4 <_exit>:
    50d4:	f8 94       	cli

000050d6 <__stop_program>:
    50d6:	ff cf       	rjmp	.-2      	; 0x50d6 <__stop_program>
